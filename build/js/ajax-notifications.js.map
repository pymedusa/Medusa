{"version":3,"sources":["js/node_modules/browser-pack/_prelude.js","js/node_modules/querystringify/index.js","js/node_modules/requires-port/index.js","js/node_modules/url-parse/index.js","js/static/js/ajax-notifications.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","has","Object","prototype","hasOwnProperty","decode","input","decodeURIComponent","replace","stringify","obj","prefix","pairs","key","push","encodeURIComponent","join","parse","query","part","parser","result","exec","port","protocol","split","required","qs","protocolre","slashes","rules","NaN","undefined","ignore","hash","lolcation","loc","finaldestination","type","global","location","URL","unescape","pathname","test","href","extractProtocol","address","match","toLowerCase","rest","this","relative","extracted","instruction","index","instructions","slice","indexOf","charAt","base","path","concat","last","unshift","up","splice","resolve","host","hostname","username","password","auth","origin","toString","set","value","fn","pop","char","ins","PNotify","options","addclass","buttons","closer_hover","delay","desktop","icon","hide","history","shadow","stack","dir1","dir2","firstpos1","firstpos2","styling","width","permission","displayPNotify","title","message","id","tag","text","String","window","addEventListener","detail","async","wsUrl","$","attr","ws","WebSocket","onmessage","evt","msg","JSON","data","event","body","onerror","log","warn","wsCheckNotifications"],"mappings":"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","file":"ajax-notifications.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String} The decoded string.\n * @api private\n */\nfunction decode(input) {\n  return decodeURIComponent(input.replace(/\\+/g, ' '));\n}\n\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\nfunction querystring(query) {\n  var parser = /([^=?&]+)=?([^&]*)/g\n    , result = {}\n    , part;\n\n  //\n  // Little nifty parsing hack, leverage the fact that RegExp.exec increments\n  // the lastIndex property so we can continue executing this loop until we've\n  // parsed all results.\n  //\n  for (;\n    part = parser.exec(query);\n    result[decode(part[1])] = decode(part[2])\n  );\n\n  return result;\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n\n  var pairs = [];\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) prefix = '?';\n\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n}\n\n//\n// Expose the module.\n//\nexports.stringify = querystringify;\nexports.parse = querystring;\n","'use strict';\n\n/**\n * Check if we're required to add a port number.\n *\n * @see https://url.spec.whatwg.org/#default-port\n * @param {Number|String} port Port number we need to check\n * @param {String} protocol Protocol we need to check against.\n * @returns {Boolean} Is it a default port for the given protocol\n * @api private\n */\nmodule.exports = function required(port, protocol) {\n  protocol = protocol.split(':')[0];\n  port = +port;\n\n  if (!port) return false;\n\n  switch (protocol) {\n    case 'http':\n    case 'ws':\n    return port !== 80;\n\n    case 'https':\n    case 'wss':\n    return port !== 443;\n\n    case 'ftp':\n    return port !== 21;\n\n    case 'gopher':\n    return port !== 70;\n\n    case 'file':\n    return false;\n  }\n\n  return port !== 0;\n};\n","'use strict';\n\nvar required = require('requires-port')\n  , qs = require('querystringify')\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\S\\s]*)/i\n  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//;\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d+)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @api public\n */\nfunction lolcation(loc) {\n  loc = loc || global.location || {};\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new URL(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new URL(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @return {ProtocolExtract} Extracted information.\n * @api private\n */\nfunction extractProtocol(address) {\n  var match = protocolre.exec(address);\n\n  return {\n    protocol: match[1] ? match[1].toLowerCase() : '',\n    slashes: !!match[2],\n    rest: match[3]\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @api private\n */\nfunction resolve(relative, base) {\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} location Location defaults for relative paths.\n * @param {Boolean|Function} parser Parser for the query string.\n * @api public\n */\nfunction URL(address, location, parser) {\n  if (!(this instanceof URL)) {\n    return new URL(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '');\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (!extracted.slashes) instructions[2] = [/(.*)/, 'pathname'];\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      if (~(index = address.indexOf(parse))) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n  if (url.auth) {\n    instruction = url.auth.split(':');\n    url.username = instruction[0] || '';\n    url.password = instruction[1] || '';\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL}\n * @api public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (/:\\d+$/.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n      break;\n\n    default:\n      url[part] = value;\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String}\n * @api public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result = protocol + (url.slashes ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  }\n\n  result += url.host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n}\n\nURL.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nURL.extractProtocol = extractProtocol;\nURL.location = lolcation;\nURL.qs = qs;\n\nmodule.exports = URL;\n","const URL = require('url-parse');\n\nconst wsMessageUrl = 'ws/ui';\nconst test = !1;\n\nconst iconUrl = 'images/ico/favicon-120.png';\n\nPNotify.prototype.options.addclass = 'stack-bottomright';\nPNotify.prototype.options.buttons.closer_hover = !1; // eslint-disable-line camelcase\nPNotify.prototype.options.delay = 5000;\nPNotify.prototype.options.desktop = { desktop: !0, icon: iconUrl };\nPNotify.prototype.options.hide = !0;\nPNotify.prototype.options.history = !1;\nPNotify.prototype.options.shadow = !1;\nPNotify.prototype.options.stack = { dir1: 'up', dir2: 'left', firstpos1: 25, firstpos2: 25 };\nPNotify.prototype.options.styling = 'jqueryui';\nPNotify.prototype.options.width = '340px';\nPNotify.desktop.permission();\n\nconst displayPNotify = (type, title, message, id) => {\n    new PNotify({ // eslint-disable-line no-new\n        type,\n        title,\n        desktop: {\n            tag: id\n        },\n        text: String(message).replace(/<br[\\s/]*(?:\\s[^>]*)?>/ig, '\\n')\n            .replace(/<[/]?b(?:\\s[^>]*)?>/ig, '*')\n            .replace(/<i(?:\\s[^>]*)?>/ig, '[').replace(/<[/]i>/ig, ']')\n            .replace(/<(?:[/]?ul|\\/li)(?:\\s[^>]*)?>/ig, '').replace(/<li(?:\\s[^>]*)?>/ig, '\\n* ')\n    });\n};\n\nconst wsCheckNotifications = async () => {\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = new URL(wsMessageUrl, $('base').attr('href').replace(window.location.protocol, protocol));\n    const ws = new WebSocket(wsUrl.toString());\n    ws.onmessage = evt => {\n        let msg;\n        try {\n            msg = JSON.parse(evt.data);\n        } catch (e) { // eslint-disable-line unicorn/catch-error-name\n            msg = evt.data;\n        }\n\n        // Add handling for different kinds of events. For ex: {\"event\": \"notification\", \"data\": {\"title\": ..}}\n        if (msg.event === 'notification') {\n            displayPNotify(msg.data.type, msg.data.title, msg.data.body, msg.data.hash);\n        } else {\n            displayPNotify('info', '', msg);\n        }\n    };\n\n    ws.onerror = () => {\n        log.warn('Error connecting to websocket. Please check your network connection. ' +\n            'If you are using a reverse proxy, please take a look at our wiki for config examples.');\n        displayPNotify('notice', 'Error connecting to websocket.', 'Please check your network connection. ' +\n            'If you are using a reverse proxy, please take a look at our wiki for config examples.');\n    };\n};\n\n// Listen for the config loaded event.\nwindow.addEventListener('build', e => {\n    if (e.detail === 'medusa config loaded') {\n        wsCheckNotifications();\n        if (test) {\n            displayPNotify('error', 'test', 'test<br><i class=\"test-class\">hello <b>world</b></i><ul><li>item 1</li><li>item 2</li></ul>', 'notification-test');\n        }\n    }\n}, false);\n"]}