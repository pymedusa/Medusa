from js2py.pyjs import *
# setting scope
var = Scope( JS_BUILTINS )
set_global_object(var)

# Code follows:
var.registers([u'escodegen', u'getFromGlobals', u'_typeof'])
@Js
def PyJsHoisted_getFromGlobals_(name, this, arguments, var=var):
    var = Scope({u'this':this, u'name':name, u'arguments':arguments}, var)
    var.registers([u'name'])
    if var.get(u'Object').get(u'prototype').callprop(u'hasOwnProperty', Js(u'_fake_exports')).neg():
        PyJsTempException = JsToPyException(var.get(u'Error')((Js(u'Could not find any value named ')+var.get(u'name'))))
        raise PyJsTempException
    if var.get(u'Object').get(u'prototype').get(u'_fake_exports').callprop(u'hasOwnProperty', var.get(u'name')):
        return var.get(u'Object').get(u'prototype').get(u'_fake_exports').get(var.get(u'name'))
    else:
        PyJsTempException = JsToPyException(var.get(u'Error')((Js(u'Could not find any value named ')+var.get(u'name'))))
        raise PyJsTempException
PyJsHoisted_getFromGlobals_.func_name = u'getFromGlobals'
var.put(u'getFromGlobals', PyJsHoisted_getFromGlobals_)
Js(u'use strict')
@Js
def PyJs_anonymous_0_(obj, this, arguments, var=var):
    var = Scope({u'this':this, u'obj':obj, u'arguments':arguments}, var)
    var.registers([u'obj'])
    return var.get(u'obj',throw=False).typeof()
PyJs_anonymous_0_._set_name(u'anonymous')
@Js
def PyJs_anonymous_1_(obj, this, arguments, var=var):
    var = Scope({u'this':this, u'obj':obj, u'arguments':arguments}, var)
    var.registers([u'obj'])
    return (Js(u'symbol') if (((var.get(u'obj') and PyJsStrictEq(var.get(u'Symbol',throw=False).typeof(),Js(u'function'))) and PyJsStrictEq(var.get(u'obj').get(u'constructor'),var.get(u'Symbol'))) and PyJsStrictNeq(var.get(u'obj'),var.get(u'Symbol').get(u'prototype'))) else var.get(u'obj',throw=False).typeof())
PyJs_anonymous_1_._set_name(u'anonymous')
var.put(u'_typeof', (PyJs_anonymous_0_ if (PyJsStrictEq(var.get(u'Symbol',throw=False).typeof(),Js(u'function')) and PyJsStrictEq(var.get(u'Symbol').get(u'iterator').typeof(),Js(u'symbol'))) else PyJs_anonymous_1_))
@Js
def PyJs_anonymous_3_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'require', u'exports', u'module'])
    PyJs_Object_4_ = Js({})
    @Js
    def PyJs_anonymous_5_(PyJsArg_676c6f62616c_, this, arguments, var=var):
        var = Scope({u'this':this, u'global':PyJsArg_676c6f62616c_, u'arguments':arguments}, var)
        var.registers([u'global'])
        @Js
        def PyJs_anonymous_6_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'generateRegExp', u'addIndent', u'E_TTF', u'flattenToString', u'generateBlankLines', u'extra', u'F_ALLOW_IN', u'generateComment', u'S_TFFF', u'parse', u'quotes', u'isExpression', u'semicolons', u'merge', u'safeConcatenation', u'E_TFT', u'S_TFFT', u'preserveBlankLines', u'withIndent', u'calculateSpaces', u'generateVerbatimString', u'adjustMultilineComment', u'generateAsyncPrefix', u'directive', u'space', u'S_TTFF', u'noEmptySpace', u'addComments', u'getDefaultOptions', u'escapeRegExpCharacter', u'BinaryPrecedence', u'generateStarSuffix', u'json', u'E_FTT', u'generateNumber', u'generateIdentifier', u'F_SEMICOLON_OPT', u'CodeGenerator', u'E_TFF', u'stringRepeat', u'escapeDisallowedCharacter', u'FORMAT_MINIFY', u'SourceNode', u'toSourceNodeWhenNeeded', u'F_ALLOW_UNPARATH_NEW', u'escapeDirective', u'esutils', u'newline', u'estraverse', u'S_TFTF', u'generateInternal', u'base', u'renumber', u'S_FFFF', u'hasLineTerminator', u'isStatement', u'generate', u'escapeString', u'escapeAllowedCharacter', u'parentheses', u'indent', u'FORMAT_DEFAULTS', u'Precedence', u'escapeless', u'join', u'generateMethodPrefix', u'F_ALLOW_CALL', u'F_FUNC_BODY', u'Syntax', u'F_DIRECTIVE_CTX', u'sourceMap', u'endsWithLineTerminator', u'parenthesize', u'sourceCode', u'updateDeeply', u'E_TTT', u'hexadecimal', u'generateVerbatim', u'E_FFT'])
            @Js
            def PyJsHoisted_generateRegExp_(reg, this, arguments, var=var):
                var = Scope({u'this':this, u'reg':reg, u'arguments':arguments}, var)
                var.registers([u'ch', u'i', u'characterInBrack', u'previousIsBackslash', u'iz', u'flags', u'result', u'reg', u'match'])
                pass
                var.put(u'result', var.get(u'reg').callprop(u'toString'))
                if var.get(u'reg').get(u'source'):
                    var.put(u'match', var.get(u'result').callprop(u'match', JsRegExp(u'/\\/([^/]*)$/')))
                    if var.get(u'match').neg():
                        return var.get(u'result')
                    var.put(u'flags', var.get(u'match').get(u'1'))
                    var.put(u'result', Js(u''))
                    var.put(u'characterInBrack', Js(False))
                    var.put(u'previousIsBackslash', Js(False))
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(0.0)),var.put(u'iz', var.get(u'reg').get(u'source').get(u'length')))
                    while (var.get(u'i')<var.get(u'iz')):
                        try:
                            var.put(u'ch', var.get(u'reg').get(u'source').callprop(u'charCodeAt', var.get(u'i')))
                            if var.get(u'previousIsBackslash').neg():
                                if var.get(u'characterInBrack'):
                                    if PyJsStrictEq(var.get(u'ch'),Js(93.0)):
                                        var.put(u'characterInBrack', Js(False))
                                else:
                                    if PyJsStrictEq(var.get(u'ch'),Js(47.0)):
                                        var.put(u'result', Js(u'\\'), u'+')
                                    else:
                                        if PyJsStrictEq(var.get(u'ch'),Js(91.0)):
                                            var.put(u'characterInBrack', Js(True))
                                var.put(u'result', var.get(u'escapeRegExpCharacter')(var.get(u'ch'), var.get(u'previousIsBackslash')), u'+')
                                var.put(u'previousIsBackslash', PyJsStrictEq(var.get(u'ch'),Js(92.0)))
                            else:
                                var.put(u'result', var.get(u'escapeRegExpCharacter')(var.get(u'ch'), var.get(u'previousIsBackslash')), u'+')
                                var.put(u'previousIsBackslash', Js(False))
                        finally:
                                var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                    return (((Js(u'/')+var.get(u'result'))+Js(u'/'))+var.get(u'flags'))
                return var.get(u'result')
            PyJsHoisted_generateRegExp_.func_name = u'generateRegExp'
            var.put(u'generateRegExp', PyJsHoisted_generateRegExp_)
            @Js
            def PyJsHoisted_addIndent_(stmt, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'stmt'])
                return Js([var.get(u'base'), var.get(u'stmt')])
            PyJsHoisted_addIndent_.func_name = u'addIndent'
            var.put(u'addIndent', PyJsHoisted_addIndent_)
            @Js
            def PyJsHoisted_flattenToString_(arr, this, arguments, var=var):
                var = Scope({u'this':this, u'arr':arr, u'arguments':arguments}, var)
                var.registers([u'i', u'arr', u'iz', u'elem', u'result'])
                var.put(u'result', Js(u''))
                #for JS loop
                PyJsComma(var.put(u'i', Js(0.0)),var.put(u'iz', var.get(u'arr').get(u'length')))
                while (var.get(u'i')<var.get(u'iz')):
                    try:
                        var.put(u'elem', var.get(u'arr').get(var.get(u'i')))
                        var.put(u'result', (var.get(u'flattenToString')(var.get(u'elem')) if var.get(u'Array').callprop(u'isArray', var.get(u'elem')) else var.get(u'elem')), u'+')
                    finally:
                            var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                return var.get(u'result')
            PyJsHoisted_flattenToString_.func_name = u'flattenToString'
            var.put(u'flattenToString', PyJsHoisted_flattenToString_)
            @Js
            def PyJsHoisted_generateComment_(comment, specialBase, this, arguments, var=var):
                var = Scope({u'comment':comment, u'specialBase':specialBase, u'this':this, u'arguments':arguments}, var)
                var.registers([u'comment', u'specialBase', u'result'])
                if PyJsStrictEq(var.get(u'comment').get(u'type'),Js(u'Line')):
                    if var.get(u'endsWithLineTerminator')(var.get(u'comment').get(u'value')):
                        return (Js(u'//')+var.get(u'comment').get(u'value'))
                    else:
                        var.put(u'result', (Js(u'//')+var.get(u'comment').get(u'value')))
                        if var.get(u'preserveBlankLines').neg():
                            var.put(u'result', Js(u'\n'), u'+')
                        return var.get(u'result')
                if (var.get(u'extra').get(u'format').get(u'indent').get(u'adjustMultilineComment') and JsRegExp(u'/[\\n\\r]/').callprop(u'test', var.get(u'comment').get(u'value'))):
                    return var.get(u'adjustMultilineComment')(((Js(u'/*')+var.get(u'comment').get(u'value'))+Js(u'*/')), var.get(u'specialBase'))
                return ((Js(u'/*')+var.get(u'comment').get(u'value'))+Js(u'*/'))
            PyJsHoisted_generateComment_.func_name = u'generateComment'
            var.put(u'generateComment', PyJsHoisted_generateComment_)
            @Js
            def PyJsHoisted_isExpression_(node, this, arguments, var=var):
                var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
                var.registers([u'node'])
                return var.get(u'CodeGenerator').get(u'Expression').callprop(u'hasOwnProperty', var.get(u'node').get(u'type'))
            PyJsHoisted_isExpression_.func_name = u'isExpression'
            var.put(u'isExpression', PyJsHoisted_isExpression_)
            @Js
            def PyJsHoisted_toSourceNodeWhenNeeded_(generated, node, this, arguments, var=var):
                var = Scope({u'node':node, u'this':this, u'generated':generated, u'arguments':arguments}, var)
                var.registers([u'node', u'generated'])
                if var.get(u'sourceMap').neg():
                    if var.get(u'Array').callprop(u'isArray', var.get(u'generated')):
                        return var.get(u'flattenToString')(var.get(u'generated'))
                    else:
                        return var.get(u'generated')
                if (var.get(u'node')==var.get(u"null")):
                    if var.get(u'generated').instanceof(var.get(u'SourceNode')):
                        return var.get(u'generated')
                    else:
                        PyJs_Object_15_ = Js({})
                        var.put(u'node', PyJs_Object_15_)
                if (var.get(u'node').get(u'loc')==var.get(u"null")):
                    return var.get(u'SourceNode').create(var.get(u"null"), var.get(u"null"), var.get(u'sourceMap'), var.get(u'generated'), (var.get(u'node').get(u'name') or var.get(u"null")))
                return var.get(u'SourceNode').create(var.get(u'node').get(u'loc').get(u'start').get(u'line'), var.get(u'node').get(u'loc').get(u'start').get(u'column'), ((var.get(u'node').get(u'loc').get(u'source') or var.get(u"null")) if PyJsStrictEq(var.get(u'sourceMap'),Js(True)) else var.get(u'sourceMap')), var.get(u'generated'), (var.get(u'node').get(u'name') or var.get(u"null")))
            PyJsHoisted_toSourceNodeWhenNeeded_.func_name = u'toSourceNodeWhenNeeded'
            var.put(u'toSourceNodeWhenNeeded', PyJsHoisted_toSourceNodeWhenNeeded_)
            @Js
            def PyJsHoisted_generateBlankLines_(start, end, result, this, arguments, var=var):
                var = Scope({u'this':this, u'start':start, u'end':end, u'result':result, u'arguments':arguments}, var)
                var.registers([u'start', u'j', u'end', u'newlineCount', u'result'])
                var.put(u'newlineCount', Js(0.0))
                #for JS loop
                var.put(u'j', var.get(u'start'))
                while (var.get(u'j')<var.get(u'end')):
                    try:
                        if PyJsStrictEq(var.get(u'sourceCode').get(var.get(u'j')),Js(u'\n')):
                            (var.put(u'newlineCount',Js(var.get(u'newlineCount').to_number())+Js(1))-Js(1))
                    finally:
                            (var.put(u'j',Js(var.get(u'j').to_number())+Js(1))-Js(1))
                #for JS loop
                var.put(u'j', Js(1.0))
                while (var.get(u'j')<var.get(u'newlineCount')):
                    try:
                        var.get(u'result').callprop(u'push', var.get(u'newline'))
                    finally:
                            (var.put(u'j',Js(var.get(u'j').to_number())+Js(1))-Js(1))
            PyJsHoisted_generateBlankLines_.func_name = u'generateBlankLines'
            var.put(u'generateBlankLines', PyJsHoisted_generateBlankLines_)
            @Js
            def PyJsHoisted_withIndent_(fn, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'fn':fn}, var)
                var.registers([u'previousBase', u'fn'])
                pass
                var.put(u'previousBase', var.get(u'base'))
                var.put(u'base', var.get(u'indent'), u'+')
                var.get(u'fn')(var.get(u'base'))
                var.put(u'base', var.get(u'previousBase'))
            PyJsHoisted_withIndent_.func_name = u'withIndent'
            var.put(u'withIndent', PyJsHoisted_withIndent_)
            @Js
            def PyJsHoisted_generateVerbatimString_(string, this, arguments, var=var):
                var = Scope({u'this':this, u'string':string, u'arguments':arguments}, var)
                var.registers([u'i', u'iz', u'result', u'string'])
                pass
                var.put(u'result', var.get(u'string').callprop(u'split', JsRegExp(u'/\\r\\n|\\n/')))
                #for JS loop
                PyJsComma(var.put(u'i', Js(1.0)),var.put(u'iz', var.get(u'result').get(u'length')))
                while (var.get(u'i')<var.get(u'iz')):
                    try:
                        var.get(u'result').put(var.get(u'i'), ((var.get(u'newline')+var.get(u'base'))+var.get(u'result').get(var.get(u'i'))))
                    finally:
                            (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
                return var.get(u'result')
            PyJsHoisted_generateVerbatimString_.func_name = u'generateVerbatimString'
            var.put(u'generateVerbatimString', PyJsHoisted_generateVerbatimString_)
            @Js
            def PyJsHoisted_adjustMultilineComment_(value, specialBase, this, arguments, var=var):
                var = Scope({u'this':this, u'specialBase':specialBase, u'arguments':arguments, u'value':value}, var)
                var.registers([u'value', u'previousBase', u'i', u'j', u'len', u'spaces', u'sn', u'specialBase', u'array', u'line'])
                pass
                var.put(u'array', var.get(u'value').callprop(u'split', JsRegExp(u'/\\r\\n|[\\r\\n]/')))
                var.put(u'spaces', var.get(u'Number').get(u'MAX_VALUE'))
                #for JS loop
                PyJsComma(var.put(u'i', Js(1.0)),var.put(u'len', var.get(u'array').get(u'length')))
                while (var.get(u'i')<var.get(u'len')):
                    try:
                        var.put(u'line', var.get(u'array').get(var.get(u'i')))
                        var.put(u'j', Js(0.0))
                        while ((var.get(u'j')<var.get(u'line').get(u'length')) and var.get(u'esutils').get(u'code').callprop(u'isWhiteSpace', var.get(u'line').callprop(u'charCodeAt', var.get(u'j')))):
                            var.put(u'j',Js(var.get(u'j').to_number())+Js(1))
                        if (var.get(u'spaces')>var.get(u'j')):
                            var.put(u'spaces', var.get(u'j'))
                    finally:
                            var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                if PyJsStrictNeq(var.get(u'specialBase',throw=False).typeof(),Js(u'undefined')):
                    var.put(u'previousBase', var.get(u'base'))
                    if PyJsStrictEq(var.get(u'array').get(u'1').get(var.get(u'spaces')),Js(u'*')):
                        var.put(u'specialBase', Js(u' '), u'+')
                    var.put(u'base', var.get(u'specialBase'))
                else:
                    if (var.get(u'spaces')&Js(1.0)):
                        var.put(u'spaces',Js(var.get(u'spaces').to_number())-Js(1))
                    var.put(u'previousBase', var.get(u'base'))
                #for JS loop
                PyJsComma(var.put(u'i', Js(1.0)),var.put(u'len', var.get(u'array').get(u'length')))
                while (var.get(u'i')<var.get(u'len')):
                    try:
                        var.put(u'sn', var.get(u'toSourceNodeWhenNeeded')(var.get(u'addIndent')(var.get(u'array').get(var.get(u'i')).callprop(u'slice', var.get(u'spaces')))))
                        var.get(u'array').put(var.get(u'i'), (var.get(u'sn').callprop(u'join', Js(u'')) if var.get(u'sourceMap') else var.get(u'sn')))
                    finally:
                            var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                var.put(u'base', var.get(u'previousBase'))
                return var.get(u'array').callprop(u'join', Js(u'\n'))
            PyJsHoisted_adjustMultilineComment_.func_name = u'adjustMultilineComment'
            var.put(u'adjustMultilineComment', PyJsHoisted_adjustMultilineComment_)
            @Js
            def PyJsHoisted_generateAsyncPrefix_(node, spaceRequired, this, arguments, var=var):
                var = Scope({u'node':node, u'spaceRequired':spaceRequired, u'this':this, u'arguments':arguments}, var)
                var.registers([u'node', u'spaceRequired'])
                return ((Js(u'async')+(var.get(u'noEmptySpace')() if var.get(u'spaceRequired') else var.get(u'space'))) if var.get(u'node').get(u'async') else Js(u''))
            PyJsHoisted_generateAsyncPrefix_.func_name = u'generateAsyncPrefix'
            var.put(u'generateAsyncPrefix', PyJsHoisted_generateAsyncPrefix_)
            @Js
            def PyJsHoisted_noEmptySpace_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                return (var.get(u'space') if var.get(u'space') else Js(u' '))
            PyJsHoisted_noEmptySpace_.func_name = u'noEmptySpace'
            var.put(u'noEmptySpace', PyJsHoisted_noEmptySpace_)
            @Js
            def PyJsHoisted_escapeRegExpCharacter_(ch, previousIsBackslash, this, arguments, var=var):
                var = Scope({u'this':this, u'ch':ch, u'arguments':arguments, u'previousIsBackslash':previousIsBackslash}, var)
                var.registers([u'ch', u'previousIsBackslash'])
                if PyJsStrictEq((var.get(u'ch')&(~Js(1.0))),Js(8232)):
                    return ((Js(u'u') if var.get(u'previousIsBackslash') else Js(u'\\u'))+(Js(u'2028') if PyJsStrictEq(var.get(u'ch'),Js(8232)) else Js(u'2029')))
                else:
                    if (PyJsStrictEq(var.get(u'ch'),Js(10.0)) or PyJsStrictEq(var.get(u'ch'),Js(13.0))):
                        return ((Js(u'') if var.get(u'previousIsBackslash') else Js(u'\\'))+(Js(u'n') if PyJsStrictEq(var.get(u'ch'),Js(10.0)) else Js(u'r')))
                return var.get(u'String').callprop(u'fromCharCode', var.get(u'ch'))
            PyJsHoisted_escapeRegExpCharacter_.func_name = u'escapeRegExpCharacter'
            var.put(u'escapeRegExpCharacter', PyJsHoisted_escapeRegExpCharacter_)
            @Js
            def PyJsHoisted_escapeDirective_(str, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'str':str}, var)
                var.registers([u'i', u'quote', u'iz', u'str', u'code'])
                pass
                var.put(u'quote', (Js(u'"') if PyJsStrictEq(var.get(u'quotes'),Js(u'double')) else Js(u"'")))
                #for JS loop
                PyJsComma(var.put(u'i', Js(0.0)),var.put(u'iz', var.get(u'str').get(u'length')))
                while (var.get(u'i')<var.get(u'iz')):
                    try:
                        var.put(u'code', var.get(u'str').callprop(u'charCodeAt', var.get(u'i')))
                        if PyJsStrictEq(var.get(u'code'),Js(39)):
                            var.put(u'quote', Js(u'"'))
                            break
                        else:
                            if PyJsStrictEq(var.get(u'code'),Js(34)):
                                var.put(u'quote', Js(u"'"))
                                break
                            else:
                                if PyJsStrictEq(var.get(u'code'),Js(92)):
                                    var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                    finally:
                            var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                return ((var.get(u'quote')+var.get(u'str'))+var.get(u'quote'))
            PyJsHoisted_escapeDirective_.func_name = u'escapeDirective'
            var.put(u'escapeDirective', PyJsHoisted_escapeDirective_)
            @Js
            def PyJsHoisted_generateStarSuffix_(node, this, arguments, var=var):
                var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
                var.registers([u'node', u'isGenerator'])
                var.put(u'isGenerator', (var.get(u'node').get(u'generator') and var.get(u'extra').get(u'moz').get(u'starlessGenerator').neg()))
                return ((Js(u'*')+var.get(u'space')) if var.get(u'isGenerator') else Js(u''))
            PyJsHoisted_generateStarSuffix_.func_name = u'generateStarSuffix'
            var.put(u'generateStarSuffix', PyJsHoisted_generateStarSuffix_)
            @Js
            def PyJsHoisted_generateNumber_(value, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                var.registers([u'exponent', u'temp', u'point', u'pos', u'value', u'result'])
                pass
                if PyJsStrictNeq(var.get(u'value'),var.get(u'value')):
                    PyJsTempException = JsToPyException(var.get(u'Error').create(Js(u'Numeric literal whose value is NaN')))
                    raise PyJsTempException
                if ((var.get(u'value')<Js(0.0)) or (PyJsStrictEq(var.get(u'value'),Js(0.0)) and ((Js(1.0)/var.get(u'value'))<Js(0.0)))):
                    PyJsTempException = JsToPyException(var.get(u'Error').create(Js(u'Numeric literal whose value is negative')))
                    raise PyJsTempException
                if PyJsStrictEq(var.get(u'value'),(Js(1.0)/Js(0.0))):
                    return (Js(u'null') if var.get(u'json') else (Js(u'1e400') if var.get(u'renumber') else Js(u'1e+400')))
                var.put(u'result', (Js(u'')+var.get(u'value')))
                if (var.get(u'renumber').neg() or (var.get(u'result').get(u'length')<Js(3.0))):
                    return var.get(u'result')
                var.put(u'point', var.get(u'result').callprop(u'indexOf', Js(u'.')))
                if ((var.get(u'json').neg() and PyJsStrictEq(var.get(u'result').callprop(u'charCodeAt', Js(0.0)),Js(48))) and PyJsStrictEq(var.get(u'point'),Js(1.0))):
                    var.put(u'point', Js(0.0))
                    var.put(u'result', var.get(u'result').callprop(u'slice', Js(1.0)))
                var.put(u'temp', var.get(u'result'))
                var.put(u'result', var.get(u'result').callprop(u'replace', Js(u'e+'), Js(u'e')))
                var.put(u'exponent', Js(0.0))
                if (var.put(u'pos', var.get(u'temp').callprop(u'indexOf', Js(u'e')))>Js(0.0)):
                    var.put(u'exponent', (+var.get(u'temp').callprop(u'slice', (var.get(u'pos')+Js(1.0)))))
                    var.put(u'temp', var.get(u'temp').callprop(u'slice', Js(0.0), var.get(u'pos')))
                if (var.get(u'point')>=Js(0.0)):
                    var.put(u'exponent', ((var.get(u'temp').get(u'length')-var.get(u'point'))-Js(1.0)), u'-')
                    var.put(u'temp', ((+(var.get(u'temp').callprop(u'slice', Js(0.0), var.get(u'point'))+var.get(u'temp').callprop(u'slice', (var.get(u'point')+Js(1.0)))))+Js(u'')))
                var.put(u'pos', Js(0.0))
                while PyJsStrictEq(var.get(u'temp').callprop(u'charCodeAt', ((var.get(u'temp').get(u'length')+var.get(u'pos'))-Js(1.0))),Js(48)):
                    var.put(u'pos',Js(var.get(u'pos').to_number())-Js(1))
                if PyJsStrictNeq(var.get(u'pos'),Js(0.0)):
                    var.put(u'exponent', var.get(u'pos'), u'-')
                    var.put(u'temp', var.get(u'temp').callprop(u'slice', Js(0.0), var.get(u'pos')))
                if PyJsStrictNeq(var.get(u'exponent'),Js(0.0)):
                    var.put(u'temp', (Js(u'e')+var.get(u'exponent')), u'+')
                def PyJs_LONG_14_(var=var):
                    return (((var.get(u'temp').get(u'length')<var.get(u'result').get(u'length')) or (((var.get(u'hexadecimal') and (var.get(u'value')>Js(1000000000000.0))) and PyJsStrictEq(var.get(u'Math').callprop(u'floor', var.get(u'value')),var.get(u'value'))) and (var.put(u'temp', (Js(u'0x')+var.get(u'value').callprop(u'toString', Js(16.0)))).get(u'length')<var.get(u'result').get(u'length')))) and PyJsStrictEq((+var.get(u'temp')),var.get(u'value')))
                if PyJs_LONG_14_():
                    var.put(u'result', var.get(u'temp'))
                return var.get(u'result')
            PyJsHoisted_generateNumber_.func_name = u'generateNumber'
            var.put(u'generateNumber', PyJsHoisted_generateNumber_)
            @Js
            def PyJsHoisted_generateIdentifier_(node, this, arguments, var=var):
                var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
                var.registers([u'node'])
                return var.get(u'toSourceNodeWhenNeeded')(var.get(u'node').get(u'name'), var.get(u'node'))
            PyJsHoisted_generateIdentifier_.func_name = u'generateIdentifier'
            var.put(u'generateIdentifier', PyJsHoisted_generateIdentifier_)
            @Js
            def PyJsHoisted_stringRepeat_(str, num, this, arguments, var=var):
                var = Scope({u'this':this, u'num':num, u'arguments':arguments, u'str':str}, var)
                var.registers([u'num', u'result', u'str'])
                var.put(u'result', Js(u''))
                #for JS loop
                var.put(u'num', Js(0.0), u'|')
                while (var.get(u'num')>Js(0.0)):
                    try:
                        if (var.get(u'num')&Js(1.0)):
                            var.put(u'result', var.get(u'str'), u'+')
                    finally:
                            PyJsComma(var.put(u'num', Js(1.0), u'>>>'),var.put(u'str', var.get(u'str'), u'+'))
                return var.get(u'result')
            PyJsHoisted_stringRepeat_.func_name = u'stringRepeat'
            var.put(u'stringRepeat', PyJsHoisted_stringRepeat_)
            @Js
            def PyJsHoisted_escapeDisallowedCharacter_(code, this, arguments, var=var):
                var = Scope({u'this':this, u'code':code, u'arguments':arguments}, var)
                var.registers([u'code'])
                if PyJsStrictEq(var.get(u'code'),Js(92)):
                    return Js(u'\\\\')
                if PyJsStrictEq(var.get(u'code'),Js(10)):
                    return Js(u'\\n')
                if PyJsStrictEq(var.get(u'code'),Js(13)):
                    return Js(u'\\r')
                if PyJsStrictEq(var.get(u'code'),Js(8232)):
                    return Js(u'\\u2028')
                if PyJsStrictEq(var.get(u'code'),Js(8233)):
                    return Js(u'\\u2029')
                PyJsTempException = JsToPyException(var.get(u'Error').create(Js(u'Incorrectly classified character')))
                raise PyJsTempException
            PyJsHoisted_escapeDisallowedCharacter_.func_name = u'escapeDisallowedCharacter'
            var.put(u'escapeDisallowedCharacter', PyJsHoisted_escapeDisallowedCharacter_)
            @Js
            def PyJsHoisted_escapeAllowedCharacter_(code, next, this, arguments, var=var):
                var = Scope({u'this':this, u'code':code, u'arguments':arguments, u'next':next}, var)
                var.registers([u'code', u'hex', u'next'])
                pass
                if PyJsStrictEq(var.get(u'code'),Js(8)):
                    return Js(u'\\b')
                if PyJsStrictEq(var.get(u'code'),Js(12)):
                    return Js(u'\\f')
                if PyJsStrictEq(var.get(u'code'),Js(9)):
                    return Js(u'\\t')
                var.put(u'hex', var.get(u'code').callprop(u'toString', Js(16.0)).callprop(u'toUpperCase'))
                if (var.get(u'json') or (var.get(u'code')>Js(255))):
                    return ((Js(u'\\u')+Js(u'0000').callprop(u'slice', var.get(u'hex').get(u'length')))+var.get(u'hex'))
                else:
                    if (PyJsStrictEq(var.get(u'code'),Js(0)) and var.get(u'esutils').get(u'code').callprop(u'isDecimalDigit', var.get(u'next')).neg()):
                        return Js(u'\\0')
                    else:
                        if PyJsStrictEq(var.get(u'code'),Js(11)):
                            return Js(u'\\x0B')
                        else:
                            return ((Js(u'\\x')+Js(u'00').callprop(u'slice', var.get(u'hex').get(u'length')))+var.get(u'hex'))
            PyJsHoisted_escapeAllowedCharacter_.func_name = u'escapeAllowedCharacter'
            var.put(u'escapeAllowedCharacter', PyJsHoisted_escapeAllowedCharacter_)
            @Js
            def PyJsHoisted_addComments_(stmt, result, this, arguments, var=var):
                var = Scope({u'this':this, u'result':result, u'stmt':stmt, u'arguments':arguments}, var)
                var.registers([u'comment', u'count', u'infix', u'suffix', u'prevRange', u'i', u'prefix', u'len', u'extRange', u'fragment', u'range', u'stmt', u'specialBase', u'tailingToStatement', u'save', u'result'])
                pass
                if (var.get(u'stmt').get(u'leadingComments') and (var.get(u'stmt').get(u'leadingComments').get(u'length')>Js(0.0))):
                    var.put(u'save', var.get(u'result'))
                    if var.get(u'preserveBlankLines'):
                        var.put(u'comment', var.get(u'stmt').get(u'leadingComments').get(u'0'))
                        var.put(u'result', Js([]))
                        var.put(u'extRange', var.get(u'comment').get(u'extendedRange'))
                        var.put(u'range', var.get(u'comment').get(u'range'))
                        var.put(u'prefix', var.get(u'sourceCode').callprop(u'substring', var.get(u'extRange').get(u'0'), var.get(u'range').get(u'0')))
                        var.put(u'count', (var.get(u'prefix').callprop(u'match', JsRegExp(u'/\\n/g')) or Js([])).get(u'length'))
                        if (var.get(u'count')>Js(0.0)):
                            var.get(u'result').callprop(u'push', var.get(u'stringRepeat')(Js(u'\n'), var.get(u'count')))
                            var.get(u'result').callprop(u'push', var.get(u'addIndent')(var.get(u'generateComment')(var.get(u'comment'))))
                        else:
                            var.get(u'result').callprop(u'push', var.get(u'prefix'))
                            var.get(u'result').callprop(u'push', var.get(u'generateComment')(var.get(u'comment')))
                        var.put(u'prevRange', var.get(u'range'))
                        #for JS loop
                        PyJsComma(var.put(u'i', Js(1.0)),var.put(u'len', var.get(u'stmt').get(u'leadingComments').get(u'length')))
                        while (var.get(u'i')<var.get(u'len')):
                            try:
                                var.put(u'comment', var.get(u'stmt').get(u'leadingComments').get(var.get(u'i')))
                                var.put(u'range', var.get(u'comment').get(u'range'))
                                var.put(u'infix', var.get(u'sourceCode').callprop(u'substring', var.get(u'prevRange').get(u'1'), var.get(u'range').get(u'0')))
                                var.put(u'count', (var.get(u'infix').callprop(u'match', JsRegExp(u'/\\n/g')) or Js([])).get(u'length'))
                                var.get(u'result').callprop(u'push', var.get(u'stringRepeat')(Js(u'\n'), var.get(u'count')))
                                var.get(u'result').callprop(u'push', var.get(u'addIndent')(var.get(u'generateComment')(var.get(u'comment'))))
                                var.put(u'prevRange', var.get(u'range'))
                            finally:
                                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
                        var.put(u'suffix', var.get(u'sourceCode').callprop(u'substring', var.get(u'range').get(u'1'), var.get(u'extRange').get(u'1')))
                        var.put(u'count', (var.get(u'suffix').callprop(u'match', JsRegExp(u'/\\n/g')) or Js([])).get(u'length'))
                        var.get(u'result').callprop(u'push', var.get(u'stringRepeat')(Js(u'\n'), var.get(u'count')))
                    else:
                        var.put(u'comment', var.get(u'stmt').get(u'leadingComments').get(u'0'))
                        var.put(u'result', Js([]))
                        if ((var.get(u'safeConcatenation') and PyJsStrictEq(var.get(u'stmt').get(u'type'),var.get(u'Syntax').get(u'Program'))) and PyJsStrictEq(var.get(u'stmt').get(u'body').get(u'length'),Js(0.0))):
                            var.get(u'result').callprop(u'push', Js(u'\n'))
                        var.get(u'result').callprop(u'push', var.get(u'generateComment')(var.get(u'comment')))
                        if var.get(u'endsWithLineTerminator')(var.get(u'toSourceNodeWhenNeeded')(var.get(u'result')).callprop(u'toString')).neg():
                            var.get(u'result').callprop(u'push', Js(u'\n'))
                        #for JS loop
                        PyJsComma(var.put(u'i', Js(1.0)),var.put(u'len', var.get(u'stmt').get(u'leadingComments').get(u'length')))
                        while (var.get(u'i')<var.get(u'len')):
                            try:
                                var.put(u'comment', var.get(u'stmt').get(u'leadingComments').get(var.get(u'i')))
                                var.put(u'fragment', Js([var.get(u'generateComment')(var.get(u'comment'))]))
                                if var.get(u'endsWithLineTerminator')(var.get(u'toSourceNodeWhenNeeded')(var.get(u'fragment')).callprop(u'toString')).neg():
                                    var.get(u'fragment').callprop(u'push', Js(u'\n'))
                                var.get(u'result').callprop(u'push', var.get(u'addIndent')(var.get(u'fragment')))
                            finally:
                                    var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                    var.get(u'result').callprop(u'push', var.get(u'addIndent')(var.get(u'save')))
                if var.get(u'stmt').get(u'trailingComments'):
                    if var.get(u'preserveBlankLines'):
                        var.put(u'comment', var.get(u'stmt').get(u'trailingComments').get(u'0'))
                        var.put(u'extRange', var.get(u'comment').get(u'extendedRange'))
                        var.put(u'range', var.get(u'comment').get(u'range'))
                        var.put(u'prefix', var.get(u'sourceCode').callprop(u'substring', var.get(u'extRange').get(u'0'), var.get(u'range').get(u'0')))
                        var.put(u'count', (var.get(u'prefix').callprop(u'match', JsRegExp(u'/\\n/g')) or Js([])).get(u'length'))
                        if (var.get(u'count')>Js(0.0)):
                            var.get(u'result').callprop(u'push', var.get(u'stringRepeat')(Js(u'\n'), var.get(u'count')))
                            var.get(u'result').callprop(u'push', var.get(u'addIndent')(var.get(u'generateComment')(var.get(u'comment'))))
                        else:
                            var.get(u'result').callprop(u'push', var.get(u'prefix'))
                            var.get(u'result').callprop(u'push', var.get(u'generateComment')(var.get(u'comment')))
                    else:
                        var.put(u'tailingToStatement', var.get(u'endsWithLineTerminator')(var.get(u'toSourceNodeWhenNeeded')(var.get(u'result')).callprop(u'toString')).neg())
                        var.put(u'specialBase', var.get(u'stringRepeat')(Js(u' '), var.get(u'calculateSpaces')(var.get(u'toSourceNodeWhenNeeded')(Js([var.get(u'base'), var.get(u'result'), var.get(u'indent')])).callprop(u'toString'))))
                        #for JS loop
                        PyJsComma(var.put(u'i', Js(0.0)),var.put(u'len', var.get(u'stmt').get(u'trailingComments').get(u'length')))
                        while (var.get(u'i')<var.get(u'len')):
                            try:
                                var.put(u'comment', var.get(u'stmt').get(u'trailingComments').get(var.get(u'i')))
                                if var.get(u'tailingToStatement'):
                                    if PyJsStrictEq(var.get(u'i'),Js(0.0)):
                                        var.put(u'result', Js([var.get(u'result'), var.get(u'indent')]))
                                    else:
                                        var.put(u'result', Js([var.get(u'result'), var.get(u'specialBase')]))
                                    var.get(u'result').callprop(u'push', var.get(u'generateComment')(var.get(u'comment'), var.get(u'specialBase')))
                                else:
                                    var.put(u'result', Js([var.get(u'result'), var.get(u'addIndent')(var.get(u'generateComment')(var.get(u'comment')))]))
                                if (PyJsStrictNeq(var.get(u'i'),(var.get(u'len')-Js(1.0))) and var.get(u'endsWithLineTerminator')(var.get(u'toSourceNodeWhenNeeded')(var.get(u'result')).callprop(u'toString')).neg()):
                                    var.put(u'result', Js([var.get(u'result'), Js(u'\n')]))
                            finally:
                                    var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                return var.get(u'result')
            PyJsHoisted_addComments_.func_name = u'addComments'
            var.put(u'addComments', PyJsHoisted_addComments_)
            @Js
            def PyJsHoisted_generateInternal_(node, this, arguments, var=var):
                var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
                var.registers([u'codegen', u'node'])
                pass
                var.put(u'codegen', var.get(u'CodeGenerator').create())
                if var.get(u'isStatement')(var.get(u'node')):
                    return var.get(u'codegen').callprop(u'generateStatement', var.get(u'node'), var.get(u'S_TFFF'))
                if var.get(u'isExpression')(var.get(u'node')):
                    return var.get(u'codegen').callprop(u'generateExpression', var.get(u'node'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT'))
                PyJsTempException = JsToPyException(var.get(u'Error').create((Js(u'Unknown node type: ')+var.get(u'node').get(u'type'))))
                raise PyJsTempException
            PyJsHoisted_generateInternal_.func_name = u'generateInternal'
            var.put(u'generateInternal', PyJsHoisted_generateInternal_)
            @Js
            def PyJsHoisted_join_(left, right, this, arguments, var=var):
                var = Scope({u'this':this, u'right':right, u'arguments':arguments, u'left':left}, var)
                var.registers([u'right', u'rightCharCode', u'leftCharCode', u'rightSource', u'leftSource', u'left'])
                pass
                var.put(u'leftSource', var.get(u'toSourceNodeWhenNeeded')(var.get(u'left')).callprop(u'toString'))
                if PyJsStrictEq(var.get(u'leftSource').get(u'length'),Js(0.0)):
                    return Js([var.get(u'right')])
                var.put(u'rightSource', var.get(u'toSourceNodeWhenNeeded')(var.get(u'right')).callprop(u'toString'))
                if PyJsStrictEq(var.get(u'rightSource').get(u'length'),Js(0.0)):
                    return Js([var.get(u'left')])
                var.put(u'leftCharCode', var.get(u'leftSource').callprop(u'charCodeAt', (var.get(u'leftSource').get(u'length')-Js(1.0))))
                var.put(u'rightCharCode', var.get(u'rightSource').callprop(u'charCodeAt', Js(0.0)))
                def PyJs_LONG_16_(var=var):
                    return ((((PyJsStrictEq(var.get(u'leftCharCode'),Js(43)) or PyJsStrictEq(var.get(u'leftCharCode'),Js(45))) and PyJsStrictEq(var.get(u'leftCharCode'),var.get(u'rightCharCode'))) or (var.get(u'esutils').get(u'code').callprop(u'isIdentifierPartES5', var.get(u'leftCharCode')) and var.get(u'esutils').get(u'code').callprop(u'isIdentifierPartES5', var.get(u'rightCharCode')))) or (PyJsStrictEq(var.get(u'leftCharCode'),Js(47)) and PyJsStrictEq(var.get(u'rightCharCode'),Js(105))))
                if PyJs_LONG_16_():
                    return Js([var.get(u'left'), var.get(u'noEmptySpace')(), var.get(u'right')])
                else:
                    if (((var.get(u'esutils').get(u'code').callprop(u'isWhiteSpace', var.get(u'leftCharCode')) or var.get(u'esutils').get(u'code').callprop(u'isLineTerminator', var.get(u'leftCharCode'))) or var.get(u'esutils').get(u'code').callprop(u'isWhiteSpace', var.get(u'rightCharCode'))) or var.get(u'esutils').get(u'code').callprop(u'isLineTerminator', var.get(u'rightCharCode'))):
                        return Js([var.get(u'left'), var.get(u'right')])
                return Js([var.get(u'left'), var.get(u'space'), var.get(u'right')])
            PyJsHoisted_join_.func_name = u'join'
            var.put(u'join', PyJsHoisted_join_)
            @Js
            def PyJsHoisted_isStatement_(node, this, arguments, var=var):
                var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
                var.registers([u'node'])
                return var.get(u'CodeGenerator').get(u'Statement').callprop(u'hasOwnProperty', var.get(u'node').get(u'type'))
            PyJsHoisted_isStatement_.func_name = u'isStatement'
            var.put(u'isStatement', PyJsHoisted_isStatement_)
            @Js
            def PyJsHoisted_generate_(node, options, this, arguments, var=var):
                var = Scope({u'node':node, u'this':this, u'options':options, u'arguments':arguments}, var)
                var.registers([u'pair', u'defaultOptions', u'node', u'result', u'options'])
                var.put(u'defaultOptions', var.get(u'getDefaultOptions')())
                if (var.get(u'options')!=var.get(u"null")):
                    if PyJsStrictEq(var.get(u'options').get(u'indent').typeof(),Js(u'string')):
                        var.get(u'defaultOptions').get(u'format').get(u'indent').put(u'style', var.get(u'options').get(u'indent'))
                    if PyJsStrictEq(var.get(u'options').get(u'base').typeof(),Js(u'number')):
                        var.get(u'defaultOptions').get(u'format').get(u'indent').put(u'base', var.get(u'options').get(u'base'))
                    var.put(u'options', var.get(u'updateDeeply')(var.get(u'defaultOptions'), var.get(u'options')))
                    var.put(u'indent', var.get(u'options').get(u'format').get(u'indent').get(u'style'))
                    if PyJsStrictEq(var.get(u'options').get(u'base').typeof(),Js(u'string')):
                        var.put(u'base', var.get(u'options').get(u'base'))
                    else:
                        var.put(u'base', var.get(u'stringRepeat')(var.get(u'indent'), var.get(u'options').get(u'format').get(u'indent').get(u'base')))
                else:
                    var.put(u'options', var.get(u'defaultOptions'))
                    var.put(u'indent', var.get(u'options').get(u'format').get(u'indent').get(u'style'))
                    var.put(u'base', var.get(u'stringRepeat')(var.get(u'indent'), var.get(u'options').get(u'format').get(u'indent').get(u'base')))
                var.put(u'json', var.get(u'options').get(u'format').get(u'json'))
                var.put(u'renumber', var.get(u'options').get(u'format').get(u'renumber'))
                var.put(u'hexadecimal', (Js(False) if var.get(u'json') else var.get(u'options').get(u'format').get(u'hexadecimal')))
                var.put(u'quotes', (Js(u'double') if var.get(u'json') else var.get(u'options').get(u'format').get(u'quotes')))
                var.put(u'escapeless', var.get(u'options').get(u'format').get(u'escapeless'))
                var.put(u'newline', var.get(u'options').get(u'format').get(u'newline'))
                var.put(u'space', var.get(u'options').get(u'format').get(u'space'))
                if var.get(u'options').get(u'format').get(u'compact'):
                    var.put(u'newline', var.put(u'space', var.put(u'indent', var.put(u'base', Js(u'')))))
                var.put(u'parentheses', var.get(u'options').get(u'format').get(u'parentheses'))
                var.put(u'semicolons', var.get(u'options').get(u'format').get(u'semicolons'))
                var.put(u'safeConcatenation', var.get(u'options').get(u'format').get(u'safeConcatenation'))
                var.put(u'directive', var.get(u'options').get(u'directive'))
                var.put(u'parse', (var.get(u"null") if var.get(u'json') else var.get(u'options').get(u'parse')))
                var.put(u'sourceMap', var.get(u'options').get(u'sourceMap'))
                var.put(u'sourceCode', var.get(u'options').get(u'sourceCode'))
                var.put(u'preserveBlankLines', (var.get(u'options').get(u'format').get(u'preserveBlankLines') and PyJsStrictNeq(var.get(u'sourceCode'),var.get(u"null"))))
                var.put(u'extra', var.get(u'options'))
                if var.get(u'sourceMap'):
                    if var.get(u'exports').get(u'browser').neg():
                        var.put(u'SourceNode', var.get(u'require')(Js(u'source-map')).get(u'SourceNode'))
                    else:
                        var.put(u'SourceNode', var.get(u'global').get(u'sourceMap').get(u'SourceNode'))
                var.put(u'result', var.get(u'generateInternal')(var.get(u'node')))
                if var.get(u'sourceMap').neg():
                    PyJs_Object_125_ = Js({u'code':var.get(u'result').callprop(u'toString'),u'map':var.get(u"null")})
                    var.put(u'pair', PyJs_Object_125_)
                    return (var.get(u'pair') if var.get(u'options').get(u'sourceMapWithCode') else var.get(u'pair').get(u'code'))
                PyJs_Object_126_ = Js({u'file':var.get(u'options').get(u'file'),u'sourceRoot':var.get(u'options').get(u'sourceMapRoot')})
                var.put(u'pair', var.get(u'result').callprop(u'toStringWithSourceMap', PyJs_Object_126_))
                if var.get(u'options').get(u'sourceContent'):
                    var.get(u'pair').get(u'map').callprop(u'setSourceContent', var.get(u'options').get(u'sourceMap'), var.get(u'options').get(u'sourceContent'))
                if var.get(u'options').get(u'sourceMapWithCode'):
                    return var.get(u'pair')
                return var.get(u'pair').get(u'map').callprop(u'toString')
            PyJsHoisted_generate_.func_name = u'generate'
            var.put(u'generate', PyJsHoisted_generate_)
            @Js
            def PyJsHoisted_escapeString_(str, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'str':str}, var)
                var.registers([u'doubleQuotes', u'code', u'i', u'quote', u'len', u'single', u'result', u'str', u'singleQuotes'])
                var.put(u'result', Js(u''))
                var.put(u'singleQuotes', Js(0.0))
                var.put(u'doubleQuotes', Js(0.0))
                #for JS loop
                PyJsComma(var.put(u'i', Js(0.0)),var.put(u'len', var.get(u'str').get(u'length')))
                while (var.get(u'i')<var.get(u'len')):
                    try:
                        var.put(u'code', var.get(u'str').callprop(u'charCodeAt', var.get(u'i')))
                        if PyJsStrictEq(var.get(u'code'),Js(39)):
                            var.put(u'singleQuotes',Js(var.get(u'singleQuotes').to_number())+Js(1))
                        else:
                            if PyJsStrictEq(var.get(u'code'),Js(34)):
                                var.put(u'doubleQuotes',Js(var.get(u'doubleQuotes').to_number())+Js(1))
                            else:
                                if (PyJsStrictEq(var.get(u'code'),Js(47)) and var.get(u'json')):
                                    var.put(u'result', Js(u'\\'), u'+')
                                else:
                                    if (var.get(u'esutils').get(u'code').callprop(u'isLineTerminator', var.get(u'code')) or PyJsStrictEq(var.get(u'code'),Js(92))):
                                        var.put(u'result', var.get(u'escapeDisallowedCharacter')(var.get(u'code')), u'+')
                                        continue
                                    else:
                                        if (var.get(u'esutils').get(u'code').callprop(u'isIdentifierPartES5', var.get(u'code')).neg() and ((var.get(u'json') and (var.get(u'code')<Js(32))) or ((var.get(u'json').neg() and var.get(u'escapeless').neg()) and ((var.get(u'code')<Js(32)) or (var.get(u'code')>Js(126)))))):
                                            var.put(u'result', var.get(u'escapeAllowedCharacter')(var.get(u'code'), var.get(u'str').callprop(u'charCodeAt', (var.get(u'i')+Js(1.0)))), u'+')
                                            continue
                        var.put(u'result', var.get(u'String').callprop(u'fromCharCode', var.get(u'code')), u'+')
                    finally:
                            var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                var.put(u'single', (PyJsStrictEq(var.get(u'quotes'),Js(u'double')) or (PyJsStrictEq(var.get(u'quotes'),Js(u'auto')) and (var.get(u'doubleQuotes')<var.get(u'singleQuotes')))).neg())
                var.put(u'quote', (Js(u"'") if var.get(u'single') else Js(u'"')))
                if (var.get(u'singleQuotes') if var.get(u'single') else var.get(u'doubleQuotes')).neg():
                    return ((var.get(u'quote')+var.get(u'result'))+var.get(u'quote'))
                var.put(u'str', var.get(u'result'))
                var.put(u'result', var.get(u'quote'))
                #for JS loop
                PyJsComma(var.put(u'i', Js(0.0)),var.put(u'len', var.get(u'str').get(u'length')))
                while (var.get(u'i')<var.get(u'len')):
                    try:
                        var.put(u'code', var.get(u'str').callprop(u'charCodeAt', var.get(u'i')))
                        if ((PyJsStrictEq(var.get(u'code'),Js(39)) and var.get(u'single')) or (PyJsStrictEq(var.get(u'code'),Js(34)) and var.get(u'single').neg())):
                            var.put(u'result', Js(u'\\'), u'+')
                        var.put(u'result', var.get(u'String').callprop(u'fromCharCode', var.get(u'code')), u'+')
                    finally:
                            var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                return (var.get(u'result')+var.get(u'quote'))
            PyJsHoisted_escapeString_.func_name = u'escapeString'
            var.put(u'escapeString', PyJsHoisted_escapeString_)
            @Js
            def PyJsHoisted_hasLineTerminator_(str, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'str':str}, var)
                var.registers([u'str'])
                return JsRegExp(u'/[\\r\\n]/g').callprop(u'test', var.get(u'str'))
            PyJsHoisted_hasLineTerminator_.func_name = u'hasLineTerminator'
            var.put(u'hasLineTerminator', PyJsHoisted_hasLineTerminator_)
            @Js
            def PyJsHoisted_generateMethodPrefix_(prop, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'prop':prop}, var)
                var.registers([u'prefix', u'func', u'prop'])
                var.put(u'func', var.get(u'prop').get(u'value'))
                var.put(u'prefix', Js(u''))
                if var.get(u'func').get(u'async'):
                    var.put(u'prefix', var.get(u'generateAsyncPrefix')(var.get(u'func'), var.get(u'prop').get(u'computed').neg()), u'+')
                if var.get(u'func').get(u'generator'):
                    var.put(u'prefix', (Js(u'*') if var.get(u'generateStarSuffix')(var.get(u'func')) else Js(u'')), u'+')
                return var.get(u'prefix')
            PyJsHoisted_generateMethodPrefix_.func_name = u'generateMethodPrefix'
            var.put(u'generateMethodPrefix', PyJsHoisted_generateMethodPrefix_)
            @Js
            def PyJsHoisted_CodeGenerator_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                pass
            PyJsHoisted_CodeGenerator_.func_name = u'CodeGenerator'
            var.put(u'CodeGenerator', PyJsHoisted_CodeGenerator_)
            @Js
            def PyJsHoisted_merge_(target, override, this, arguments, var=var):
                var = Scope({u'override':override, u'this':this, u'target':target, u'arguments':arguments}, var)
                var.registers([u'override', u'target', u'key'])
                pass
                for PyJsTemp in var.get(u'override'):
                    var.put(u'key', PyJsTemp)
                    if var.get(u'override').callprop(u'hasOwnProperty', var.get(u'key')):
                        var.get(u'target').put(var.get(u'key'), var.get(u'override').get(var.get(u'key')))
                return var.get(u'target')
            PyJsHoisted_merge_.func_name = u'merge'
            var.put(u'merge', PyJsHoisted_merge_)
            @Js
            def PyJsHoisted_getDefaultOptions_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                PyJs_Object_11_ = Js({u'style':Js(u'    '),u'base':Js(0.0),u'adjustMultilineComment':Js(False)})
                PyJs_Object_10_ = Js({u'indent':PyJs_Object_11_,u'newline':Js(u'\n'),u'space':Js(u' '),u'json':Js(False),u'renumber':Js(False),u'hexadecimal':Js(False),u'quotes':Js(u'single'),u'escapeless':Js(False),u'compact':Js(False),u'parentheses':Js(True),u'semicolons':Js(True),u'safeConcatenation':Js(False),u'preserveBlankLines':Js(False)})
                PyJs_Object_12_ = Js({u'comprehensionExpressionStartsWithAssignment':Js(False),u'starlessGenerator':Js(False)})
                PyJs_Object_9_ = Js({u'indent':var.get(u"null"),u'base':var.get(u"null"),u'parse':var.get(u"null"),u'comment':Js(False),u'format':PyJs_Object_10_,u'moz':PyJs_Object_12_,u'sourceMap':var.get(u"null"),u'sourceMapRoot':var.get(u"null"),u'sourceMapWithCode':Js(False),u'directive':Js(False),u'raw':Js(True),u'verbatim':var.get(u"null"),u'sourceCode':var.get(u"null")})
                return PyJs_Object_9_
            PyJsHoisted_getDefaultOptions_.func_name = u'getDefaultOptions'
            var.put(u'getDefaultOptions', PyJsHoisted_getDefaultOptions_)
            @Js
            def PyJsHoisted_parenthesize_(text, current, should, this, arguments, var=var):
                var = Scope({u'current':current, u'text':text, u'this':this, u'arguments':arguments, u'should':should}, var)
                var.registers([u'current', u'text', u'should'])
                if (var.get(u'current')<var.get(u'should')):
                    return Js([Js(u'('), var.get(u'text'), Js(u')')])
                return var.get(u'text')
            PyJsHoisted_parenthesize_.func_name = u'parenthesize'
            var.put(u'parenthesize', PyJsHoisted_parenthesize_)
            @Js
            def PyJsHoisted_calculateSpaces_(str, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'str':str}, var)
                var.registers([u'i', u'str'])
                pass
                #for JS loop
                var.put(u'i', (var.get(u'str').get(u'length')-Js(1.0)))
                while (var.get(u'i')>=Js(0.0)):
                    try:
                        if var.get(u'esutils').get(u'code').callprop(u'isLineTerminator', var.get(u'str').callprop(u'charCodeAt', var.get(u'i'))):
                            break
                    finally:
                            var.put(u'i',Js(var.get(u'i').to_number())-Js(1))
                return ((var.get(u'str').get(u'length')-Js(1.0))-var.get(u'i'))
            PyJsHoisted_calculateSpaces_.func_name = u'calculateSpaces'
            var.put(u'calculateSpaces', PyJsHoisted_calculateSpaces_)
            @Js
            def PyJsHoisted_updateDeeply_(target, override, this, arguments, var=var):
                var = Scope({u'override':override, u'this':this, u'target':target, u'arguments':arguments}, var)
                var.registers([u'override', u'isHashObject', u'val', u'key', u'target'])
                @Js
                def PyJsHoisted_isHashObject_(target, this, arguments, var=var):
                    var = Scope({u'this':this, u'target':target, u'arguments':arguments}, var)
                    var.registers([u'target'])
                    return ((PyJsStrictEq((Js(u'undefined') if PyJsStrictEq(var.get(u'target',throw=False).typeof(),Js(u'undefined')) else var.get(u'_typeof')(var.get(u'target'))),Js(u'object')) and var.get(u'target').instanceof(var.get(u'Object'))) and var.get(u'target').instanceof(var.get(u'RegExp')).neg())
                PyJsHoisted_isHashObject_.func_name = u'isHashObject'
                var.put(u'isHashObject', PyJsHoisted_isHashObject_)
                pass
                pass
                for PyJsTemp in var.get(u'override'):
                    var.put(u'key', PyJsTemp)
                    if var.get(u'override').callprop(u'hasOwnProperty', var.get(u'key')):
                        var.put(u'val', var.get(u'override').get(var.get(u'key')))
                        if var.get(u'isHashObject')(var.get(u'val')):
                            if var.get(u'isHashObject')(var.get(u'target').get(var.get(u'key'))):
                                var.get(u'updateDeeply')(var.get(u'target').get(var.get(u'key')), var.get(u'val'))
                            else:
                                PyJs_Object_13_ = Js({})
                                var.get(u'target').put(var.get(u'key'), var.get(u'updateDeeply')(PyJs_Object_13_, var.get(u'val')))
                        else:
                            var.get(u'target').put(var.get(u'key'), var.get(u'val'))
                return var.get(u'target')
            PyJsHoisted_updateDeeply_.func_name = u'updateDeeply'
            var.put(u'updateDeeply', PyJsHoisted_updateDeeply_)
            @Js
            def PyJsHoisted_generateVerbatim_(expr, precedence, this, arguments, var=var):
                var = Scope({u'this':this, u'expr':expr, u'arguments':arguments, u'precedence':precedence}, var)
                var.registers([u'expr', u'precedence', u'prec', u'result', u'verbatim'])
                pass
                var.put(u'verbatim', var.get(u'expr').get(var.get(u'extra').get(u'verbatim')))
                if PyJsStrictEq(var.get(u'verbatim',throw=False).typeof(),Js(u'string')):
                    var.put(u'result', var.get(u'parenthesize')(var.get(u'generateVerbatimString')(var.get(u'verbatim')), var.get(u'Precedence').get(u'Sequence'), var.get(u'precedence')))
                else:
                    var.put(u'result', var.get(u'generateVerbatimString')(var.get(u'verbatim').get(u'content')))
                    var.put(u'prec', (var.get(u'verbatim').get(u'precedence') if (var.get(u'verbatim').get(u'precedence')!=var.get(u"null")) else var.get(u'Precedence').get(u'Sequence')))
                    var.put(u'result', var.get(u'parenthesize')(var.get(u'result'), var.get(u'prec'), var.get(u'precedence')))
                return var.get(u'toSourceNodeWhenNeeded')(var.get(u'result'), var.get(u'expr'))
            PyJsHoisted_generateVerbatim_.func_name = u'generateVerbatim'
            var.put(u'generateVerbatim', PyJsHoisted_generateVerbatim_)
            @Js
            def PyJsHoisted_endsWithLineTerminator_(str, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'str':str}, var)
                var.registers([u'str', u'len'])
                var.put(u'len', var.get(u'str').get(u'length'))
                return (var.get(u'len') and var.get(u'esutils').get(u'code').callprop(u'isLineTerminator', var.get(u'str').callprop(u'charCodeAt', (var.get(u'len')-Js(1.0)))))
            PyJsHoisted_endsWithLineTerminator_.func_name = u'endsWithLineTerminator'
            var.put(u'endsWithLineTerminator', PyJsHoisted_endsWithLineTerminator_)
            Js(u'use strict')
            pass
            var.put(u'estraverse', var.get(u'require')(Js(u'estraverse')))
            var.put(u'esutils', var.get(u'require')(Js(u'esutils')))
            var.put(u'Syntax', var.get(u'estraverse').get(u'Syntax'))
            pass
            pass
            PyJs_Object_7_ = Js({u'Sequence':Js(0.0),u'Yield':Js(1.0),u'Await':Js(1.0),u'Assignment':Js(1.0),u'Conditional':Js(2.0),u'ArrowFunction':Js(2.0),u'LogicalOR':Js(3.0),u'LogicalAND':Js(4.0),u'BitwiseOR':Js(5.0),u'BitwiseXOR':Js(6.0),u'BitwiseAND':Js(7.0),u'Equality':Js(8.0),u'Relational':Js(9.0),u'BitwiseSHIFT':Js(10.0),u'Additive':Js(11.0),u'Multiplicative':Js(12.0),u'Unary':Js(13.0),u'Postfix':Js(14.0),u'Call':Js(15.0),u'New':Js(16.0),u'TaggedTemplate':Js(17.0),u'Member':Js(18.0),u'Primary':Js(19.0)})
            var.put(u'Precedence', PyJs_Object_7_)
            PyJs_Object_8_ = Js({u'||':var.get(u'Precedence').get(u'LogicalOR'),u'&&':var.get(u'Precedence').get(u'LogicalAND'),u'|':var.get(u'Precedence').get(u'BitwiseOR'),u'^':var.get(u'Precedence').get(u'BitwiseXOR'),u'&':var.get(u'Precedence').get(u'BitwiseAND'),u'==':var.get(u'Precedence').get(u'Equality'),u'!=':var.get(u'Precedence').get(u'Equality'),u'===':var.get(u'Precedence').get(u'Equality'),u'!==':var.get(u'Precedence').get(u'Equality'),u'is':var.get(u'Precedence').get(u'Equality'),u'isnt':var.get(u'Precedence').get(u'Equality'),u'<':var.get(u'Precedence').get(u'Relational'),u'>':var.get(u'Precedence').get(u'Relational'),u'<=':var.get(u'Precedence').get(u'Relational'),u'>=':var.get(u'Precedence').get(u'Relational'),u'in':var.get(u'Precedence').get(u'Relational'),u'instanceof':var.get(u'Precedence').get(u'Relational'),u'<<':var.get(u'Precedence').get(u'BitwiseSHIFT'),u'>>':var.get(u'Precedence').get(u'BitwiseSHIFT'),u'>>>':var.get(u'Precedence').get(u'BitwiseSHIFT'),u'+':var.get(u'Precedence').get(u'Additive'),u'-':var.get(u'Precedence').get(u'Additive'),u'*':var.get(u'Precedence').get(u'Multiplicative'),u'%':var.get(u'Precedence').get(u'Multiplicative'),u'/':var.get(u'Precedence').get(u'Multiplicative')})
            var.put(u'BinaryPrecedence', PyJs_Object_8_)
            var.put(u'F_ALLOW_IN', Js(1.0))
            var.put(u'F_ALLOW_CALL', (Js(1.0)<<Js(1.0)))
            var.put(u'F_ALLOW_UNPARATH_NEW', (Js(1.0)<<Js(2.0)))
            var.put(u'F_FUNC_BODY', (Js(1.0)<<Js(3.0)))
            var.put(u'F_DIRECTIVE_CTX', (Js(1.0)<<Js(4.0)))
            var.put(u'F_SEMICOLON_OPT', (Js(1.0)<<Js(5.0)))
            var.put(u'E_FTT', (var.get(u'F_ALLOW_CALL')|var.get(u'F_ALLOW_UNPARATH_NEW')))
            var.put(u'E_TTF', (var.get(u'F_ALLOW_IN')|var.get(u'F_ALLOW_CALL')))
            var.put(u'E_TTT', ((var.get(u'F_ALLOW_IN')|var.get(u'F_ALLOW_CALL'))|var.get(u'F_ALLOW_UNPARATH_NEW')))
            var.put(u'E_TFF', var.get(u'F_ALLOW_IN'))
            var.put(u'E_FFT', var.get(u'F_ALLOW_UNPARATH_NEW'))
            var.put(u'E_TFT', (var.get(u'F_ALLOW_IN')|var.get(u'F_ALLOW_UNPARATH_NEW')))
            var.put(u'S_TFFF', var.get(u'F_ALLOW_IN'))
            var.put(u'S_TFFT', (var.get(u'F_ALLOW_IN')|var.get(u'F_SEMICOLON_OPT')))
            var.put(u'S_FFFF', Js(0))
            var.put(u'S_TFTF', (var.get(u'F_ALLOW_IN')|var.get(u'F_DIRECTIVE_CTX')))
            var.put(u'S_TTFF', (var.get(u'F_ALLOW_IN')|var.get(u'F_FUNC_BODY')))
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            pass
            @Js
            def PyJs_anonymous_17_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'noLeadingComment', u'flags', u'result', u'stmt', u'that'])
                var.put(u'that', var.get(u"this"))
                var.put(u'noLeadingComment', (var.get(u'extra').get(u'comment').neg() or var.get(u'stmt').get(u'leadingComments').neg()))
                if (PyJsStrictEq(var.get(u'stmt').get(u'type'),var.get(u'Syntax').get(u'BlockStatement')) and var.get(u'noLeadingComment')):
                    return Js([var.get(u'space'), var.get(u"this").callprop(u'generateStatement', var.get(u'stmt'), var.get(u'flags'))])
                if (PyJsStrictEq(var.get(u'stmt').get(u'type'),var.get(u'Syntax').get(u'EmptyStatement')) and var.get(u'noLeadingComment')):
                    return Js(u';')
                @Js
                def PyJs_anonymous_18_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.put(u'result', Js([var.get(u'newline'), var.get(u'addIndent')(var.get(u'that').callprop(u'generateStatement', var.get(u'stmt'), var.get(u'flags')))]))
                PyJs_anonymous_18_._set_name(u'anonymous')
                var.get(u'withIndent')(PyJs_anonymous_18_)
                return var.get(u'result')
            PyJs_anonymous_17_._set_name(u'anonymous')
            var.get(u'CodeGenerator').get(u'prototype').put(u'maybeBlock', PyJs_anonymous_17_)
            @Js
            def PyJs_anonymous_19_(stmt, result, this, arguments, var=var):
                var = Scope({u'this':this, u'result':result, u'stmt':stmt, u'arguments':arguments}, var)
                var.registers([u'ends', u'result', u'stmt'])
                var.put(u'ends', var.get(u'endsWithLineTerminator')(var.get(u'toSourceNodeWhenNeeded')(var.get(u'result')).callprop(u'toString')))
                if ((PyJsStrictEq(var.get(u'stmt').get(u'type'),var.get(u'Syntax').get(u'BlockStatement')) and (var.get(u'extra').get(u'comment').neg() or var.get(u'stmt').get(u'leadingComments').neg())) and var.get(u'ends').neg()):
                    return Js([var.get(u'result'), var.get(u'space')])
                if var.get(u'ends'):
                    return Js([var.get(u'result'), var.get(u'base')])
                return Js([var.get(u'result'), var.get(u'newline'), var.get(u'base')])
            PyJs_anonymous_19_._set_name(u'anonymous')
            var.get(u'CodeGenerator').get(u'prototype').put(u'maybeBlockSuffix', PyJs_anonymous_19_)
            pass
            pass
            pass
            pass
            @Js
            def PyJs_anonymous_20_(node, precedence, flags, this, arguments, var=var):
                var = Scope({u'node':node, u'this':this, u'flags':flags, u'arguments':arguments, u'precedence':precedence}, var)
                var.registers([u'node', u'flags', u'precedence'])
                if PyJsStrictEq(var.get(u'node').get(u'type'),var.get(u'Syntax').get(u'Identifier')):
                    return var.get(u'generateIdentifier')(var.get(u'node'))
                return var.get(u"this").callprop(u'generateExpression', var.get(u'node'), var.get(u'precedence'), var.get(u'flags'))
            PyJs_anonymous_20_._set_name(u'anonymous')
            var.get(u'CodeGenerator').get(u'prototype').put(u'generatePattern', PyJs_anonymous_20_)
            @Js
            def PyJs_anonymous_21_(node, this, arguments, var=var):
                var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
                var.registers([u'i', u'node', u'iz', u'result', u'hasDefault'])
                pass
                var.put(u'hasDefault', Js(False))
                def PyJs_LONG_22_(var=var):
                    return ((((PyJsStrictEq(var.get(u'node').get(u'type'),var.get(u'Syntax').get(u'ArrowFunctionExpression')) and var.get(u'node').get(u'rest').neg()) and (var.get(u'node').get(u'defaults').neg() or PyJsStrictEq(var.get(u'node').get(u'defaults').get(u'length'),Js(0.0)))) and PyJsStrictEq(var.get(u'node').get(u'params').get(u'length'),Js(1.0))) and PyJsStrictEq(var.get(u'node').get(u'params').get(u'0').get(u'type'),var.get(u'Syntax').get(u'Identifier')))
                if PyJs_LONG_22_():
                    var.put(u'result', Js([var.get(u'generateAsyncPrefix')(var.get(u'node'), Js(True)), var.get(u'generateIdentifier')(var.get(u'node').get(u'params').get(u'0'))]))
                else:
                    var.put(u'result', (Js([var.get(u'generateAsyncPrefix')(var.get(u'node'), Js(False))]) if PyJsStrictEq(var.get(u'node').get(u'type'),var.get(u'Syntax').get(u'ArrowFunctionExpression')) else Js([])))
                    var.get(u'result').callprop(u'push', Js(u'('))
                    if var.get(u'node').get(u'defaults'):
                        var.put(u'hasDefault', Js(True))
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(0.0)),var.put(u'iz', var.get(u'node').get(u'params').get(u'length')))
                    while (var.get(u'i')<var.get(u'iz')):
                        try:
                            if (var.get(u'hasDefault') and var.get(u'node').get(u'defaults').get(var.get(u'i'))):
                                var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'generateAssignment', var.get(u'node').get(u'params').get(var.get(u'i')), var.get(u'node').get(u'defaults').get(var.get(u'i')), Js(u'='), var.get(u'Precedence').get(u'Assignment'), var.get(u'E_TTT')))
                            else:
                                var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'generatePattern', var.get(u'node').get(u'params').get(var.get(u'i')), var.get(u'Precedence').get(u'Assignment'), var.get(u'E_TTT')))
                            if ((var.get(u'i')+Js(1.0))<var.get(u'iz')):
                                var.get(u'result').callprop(u'push', (Js(u',')+var.get(u'space')))
                        finally:
                                var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                    if var.get(u'node').get(u'rest'):
                        if var.get(u'node').get(u'params').get(u'length'):
                            var.get(u'result').callprop(u'push', (Js(u',')+var.get(u'space')))
                        var.get(u'result').callprop(u'push', Js(u'...'))
                        var.get(u'result').callprop(u'push', var.get(u'generateIdentifier')(var.get(u'node').get(u'rest')))
                    var.get(u'result').callprop(u'push', Js(u')'))
                return var.get(u'result')
            PyJs_anonymous_21_._set_name(u'anonymous')
            var.get(u'CodeGenerator').get(u'prototype').put(u'generateFunctionParams', PyJs_anonymous_21_)
            @Js
            def PyJs_anonymous_23_(node, this, arguments, var=var):
                var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
                var.registers([u'node', u'expr', u'result'])
                pass
                var.put(u'result', var.get(u"this").callprop(u'generateFunctionParams', var.get(u'node')))
                if PyJsStrictEq(var.get(u'node').get(u'type'),var.get(u'Syntax').get(u'ArrowFunctionExpression')):
                    var.get(u'result').callprop(u'push', var.get(u'space'))
                    var.get(u'result').callprop(u'push', Js(u'=>'))
                if var.get(u'node').get(u'expression'):
                    var.get(u'result').callprop(u'push', var.get(u'space'))
                    var.put(u'expr', var.get(u"this").callprop(u'generateExpression', var.get(u'node').get(u'body'), var.get(u'Precedence').get(u'Assignment'), var.get(u'E_TTT')))
                    if PyJsStrictEq(var.get(u'expr').callprop(u'toString').callprop(u'charAt', Js(0.0)),Js(u'{')):
                        var.put(u'expr', Js([Js(u'('), var.get(u'expr'), Js(u')')]))
                    var.get(u'result').callprop(u'push', var.get(u'expr'))
                else:
                    var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'maybeBlock', var.get(u'node').get(u'body'), var.get(u'S_TTFF')))
                return var.get(u'result')
            PyJs_anonymous_23_._set_name(u'anonymous')
            var.get(u'CodeGenerator').get(u'prototype').put(u'generateFunctionBody', PyJs_anonymous_23_)
            @Js
            def PyJs_anonymous_24_(operator, stmt, flags, this, arguments, var=var):
                var = Scope({u'operator':operator, u'this':this, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'operator', u'flags', u'result', u'stmt', u'that'])
                var.put(u'result', Js([(((Js(u'for')+var.get(u'space'))+((Js(u'await')+var.get(u'space')) if var.get(u'stmt').get(u'await') else Js(u'')))+Js(u'('))]))
                var.put(u'that', var.get(u"this"))
                @Js
                def PyJs_anonymous_25_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    if PyJsStrictEq(var.get(u'stmt').get(u'left').get(u'type'),var.get(u'Syntax').get(u'VariableDeclaration')):
                        @Js
                        def PyJs_anonymous_26_(this, arguments, var=var):
                            var = Scope({u'this':this, u'arguments':arguments}, var)
                            var.registers([])
                            var.get(u'result').callprop(u'push', (var.get(u'stmt').get(u'left').get(u'kind')+var.get(u'noEmptySpace')()))
                            var.get(u'result').callprop(u'push', var.get(u'that').callprop(u'generateStatement', var.get(u'stmt').get(u'left').get(u'declarations').get(u'0'), var.get(u'S_FFFF')))
                        PyJs_anonymous_26_._set_name(u'anonymous')
                        var.get(u'withIndent')(PyJs_anonymous_26_)
                    else:
                        var.get(u'result').callprop(u'push', var.get(u'that').callprop(u'generateExpression', var.get(u'stmt').get(u'left'), var.get(u'Precedence').get(u'Call'), var.get(u'E_TTT')))
                    var.put(u'result', var.get(u'join')(var.get(u'result'), var.get(u'operator')))
                    var.put(u'result', Js([var.get(u'join')(var.get(u'result'), var.get(u'that').callprop(u'generateExpression', var.get(u'stmt').get(u'right'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT'))), Js(u')')]))
                PyJs_anonymous_25_._set_name(u'anonymous')
                var.get(u'withIndent')(PyJs_anonymous_25_)
                var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'maybeBlock', var.get(u'stmt').get(u'body'), var.get(u'flags')))
                return var.get(u'result')
            PyJs_anonymous_24_._set_name(u'anonymous')
            var.get(u'CodeGenerator').get(u'prototype').put(u'generateIterationForStatement', PyJs_anonymous_24_)
            @Js
            def PyJs_anonymous_27_(expr, computed, this, arguments, var=var):
                var = Scope({u'this':this, u'expr':expr, u'computed':computed, u'arguments':arguments}, var)
                var.registers([u'expr', u'result', u'computed'])
                var.put(u'result', Js([]))
                if var.get(u'computed'):
                    var.get(u'result').callprop(u'push', Js(u'['))
                var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'generateExpression', var.get(u'expr'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')))
                if var.get(u'computed'):
                    var.get(u'result').callprop(u'push', Js(u']'))
                return var.get(u'result')
            PyJs_anonymous_27_._set_name(u'anonymous')
            var.get(u'CodeGenerator').get(u'prototype').put(u'generatePropertyKey', PyJs_anonymous_27_)
            @Js
            def PyJs_anonymous_28_(left, right, operator, precedence, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'right':right, u'flags':flags, u'arguments':arguments, u'precedence':precedence, u'operator':operator, u'left':left}, var)
                var.registers([u'operator', u'right', u'flags', u'precedence', u'left'])
                if (var.get(u'Precedence').get(u'Assignment')<var.get(u'precedence')):
                    var.put(u'flags', var.get(u'F_ALLOW_IN'), u'|')
                def PyJs_LONG_29_(var=var):
                    return var.get(u'parenthesize')(Js([var.get(u"this").callprop(u'generateExpression', var.get(u'left'), var.get(u'Precedence').get(u'Call'), var.get(u'flags')), ((var.get(u'space')+var.get(u'operator'))+var.get(u'space')), var.get(u"this").callprop(u'generateExpression', var.get(u'right'), var.get(u'Precedence').get(u'Assignment'), var.get(u'flags'))]), var.get(u'Precedence').get(u'Assignment'), var.get(u'precedence'))
                return PyJs_LONG_29_()
            PyJs_anonymous_28_._set_name(u'anonymous')
            var.get(u'CodeGenerator').get(u'prototype').put(u'generateAssignment', PyJs_anonymous_28_)
            @Js
            def PyJs_anonymous_30_(flags, this, arguments, var=var):
                var = Scope({u'this':this, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'flags'])
                if (var.get(u'semicolons').neg() and (var.get(u'flags')&var.get(u'F_SEMICOLON_OPT'))):
                    return Js(u'')
                return Js(u';')
            PyJs_anonymous_30_._set_name(u'anonymous')
            var.get(u'CodeGenerator').get(u'prototype').put(u'semicolon', PyJs_anonymous_30_)
            @Js
            def PyJs_BlockStatement_32_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'BlockStatement':PyJs_BlockStatement_32_, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'that', u'stmt', u'content', u'range', u'flags', u'result'])
                var.put(u'result', Js([Js(u'{'), var.get(u'newline')]))
                var.put(u'that', var.get(u"this"))
                @Js
                def PyJs_anonymous_33_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'i', u'fragment', u'iz', u'bodyFlags'])
                    if (PyJsStrictEq(var.get(u'stmt').get(u'body').get(u'length'),Js(0.0)) and var.get(u'preserveBlankLines')):
                        var.put(u'range', var.get(u'stmt').get(u'range'))
                        if ((var.get(u'range').get(u'1')-var.get(u'range').get(u'0'))>Js(2.0)):
                            var.put(u'content', var.get(u'sourceCode').callprop(u'substring', (var.get(u'range').get(u'0')+Js(1.0)), (var.get(u'range').get(u'1')-Js(1.0))))
                            if PyJsStrictEq(var.get(u'content').get(u'0'),Js(u'\n')):
                                var.put(u'result', Js([Js(u'{')]))
                            var.get(u'result').callprop(u'push', var.get(u'content'))
                    pass
                    var.put(u'bodyFlags', var.get(u'S_TFFF'))
                    if (var.get(u'flags')&var.get(u'F_FUNC_BODY')):
                        var.put(u'bodyFlags', var.get(u'F_DIRECTIVE_CTX'), u'|')
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(0.0)),var.put(u'iz', var.get(u'stmt').get(u'body').get(u'length')))
                    while (var.get(u'i')<var.get(u'iz')):
                        try:
                            if var.get(u'preserveBlankLines'):
                                if PyJsStrictEq(var.get(u'i'),Js(0.0)):
                                    if var.get(u'stmt').get(u'body').get(u'0').get(u'leadingComments'):
                                        var.put(u'range', var.get(u'stmt').get(u'body').get(u'0').get(u'leadingComments').get(u'0').get(u'extendedRange'))
                                        var.put(u'content', var.get(u'sourceCode').callprop(u'substring', var.get(u'range').get(u'0'), var.get(u'range').get(u'1')))
                                        if PyJsStrictEq(var.get(u'content').get(u'0'),Js(u'\n')):
                                            var.put(u'result', Js([Js(u'{')]))
                                    if var.get(u'stmt').get(u'body').get(u'0').get(u'leadingComments').neg():
                                        var.get(u'generateBlankLines')(var.get(u'stmt').get(u'range').get(u'0'), var.get(u'stmt').get(u'body').get(u'0').get(u'range').get(u'0'), var.get(u'result'))
                                if (var.get(u'i')>Js(0.0)):
                                    if (var.get(u'stmt').get(u'body').get((var.get(u'i')-Js(1.0))).get(u'trailingComments').neg() and var.get(u'stmt').get(u'body').get(var.get(u'i')).get(u'leadingComments').neg()):
                                        var.get(u'generateBlankLines')(var.get(u'stmt').get(u'body').get((var.get(u'i')-Js(1.0))).get(u'range').get(u'1'), var.get(u'stmt').get(u'body').get(var.get(u'i')).get(u'range').get(u'0'), var.get(u'result'))
                            if PyJsStrictEq(var.get(u'i'),(var.get(u'iz')-Js(1.0))):
                                var.put(u'bodyFlags', var.get(u'F_SEMICOLON_OPT'), u'|')
                            if (var.get(u'stmt').get(u'body').get(var.get(u'i')).get(u'leadingComments') and var.get(u'preserveBlankLines')):
                                var.put(u'fragment', var.get(u'that').callprop(u'generateStatement', var.get(u'stmt').get(u'body').get(var.get(u'i')), var.get(u'bodyFlags')))
                            else:
                                var.put(u'fragment', var.get(u'addIndent')(var.get(u'that').callprop(u'generateStatement', var.get(u'stmt').get(u'body').get(var.get(u'i')), var.get(u'bodyFlags'))))
                            var.get(u'result').callprop(u'push', var.get(u'fragment'))
                            if var.get(u'endsWithLineTerminator')(var.get(u'toSourceNodeWhenNeeded')(var.get(u'fragment')).callprop(u'toString')).neg():
                                if (var.get(u'preserveBlankLines') and (var.get(u'i')<(var.get(u'iz')-Js(1.0)))):
                                    if var.get(u'stmt').get(u'body').get((var.get(u'i')+Js(1.0))).get(u'leadingComments').neg():
                                        var.get(u'result').callprop(u'push', var.get(u'newline'))
                                else:
                                    var.get(u'result').callprop(u'push', var.get(u'newline'))
                            if var.get(u'preserveBlankLines'):
                                if PyJsStrictEq(var.get(u'i'),(var.get(u'iz')-Js(1.0))):
                                    if var.get(u'stmt').get(u'body').get(var.get(u'i')).get(u'trailingComments').neg():
                                        var.get(u'generateBlankLines')(var.get(u'stmt').get(u'body').get(var.get(u'i')).get(u'range').get(u'1'), var.get(u'stmt').get(u'range').get(u'1'), var.get(u'result'))
                        finally:
                                var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                PyJs_anonymous_33_._set_name(u'anonymous')
                var.get(u'withIndent')(PyJs_anonymous_33_)
                var.get(u'result').callprop(u'push', var.get(u'addIndent')(Js(u'}')))
                return var.get(u'result')
            PyJs_BlockStatement_32_._set_name(u'BlockStatement')
            @Js
            def PyJs_BreakStatement_34_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'BreakStatement':PyJs_BreakStatement_34_, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'flags', u'stmt'])
                if var.get(u'stmt').get(u'label'):
                    return ((Js(u'break ')+var.get(u'stmt').get(u'label').get(u'name'))+var.get(u"this").callprop(u'semicolon', var.get(u'flags')))
                return (Js(u'break')+var.get(u"this").callprop(u'semicolon', var.get(u'flags')))
            PyJs_BreakStatement_34_._set_name(u'BreakStatement')
            @Js
            def PyJs_ContinueStatement_35_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'flags':flags, u'arguments':arguments, u'stmt':stmt, u'ContinueStatement':PyJs_ContinueStatement_35_}, var)
                var.registers([u'flags', u'stmt'])
                if var.get(u'stmt').get(u'label'):
                    return ((Js(u'continue ')+var.get(u'stmt').get(u'label').get(u'name'))+var.get(u"this").callprop(u'semicolon', var.get(u'flags')))
                return (Js(u'continue')+var.get(u"this").callprop(u'semicolon', var.get(u'flags')))
            PyJs_ContinueStatement_35_._set_name(u'ContinueStatement')
            @Js
            def PyJs_ClassBody_36_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'flags':flags, u'arguments':arguments, u'stmt':stmt, u'ClassBody':PyJs_ClassBody_36_}, var)
                var.registers([u'flags', u'result', u'stmt', u'that'])
                var.put(u'result', Js([Js(u'{'), var.get(u'newline')]))
                var.put(u'that', var.get(u"this"))
                @Js
                def PyJs_anonymous_37_(indent, this, arguments, var=var):
                    var = Scope({u'this':this, u'indent':indent, u'arguments':arguments}, var)
                    var.registers([u'i', u'iz', u'indent'])
                    pass
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(0.0)),var.put(u'iz', var.get(u'stmt').get(u'body').get(u'length')))
                    while (var.get(u'i')<var.get(u'iz')):
                        try:
                            var.get(u'result').callprop(u'push', var.get(u'indent'))
                            var.get(u'result').callprop(u'push', var.get(u'that').callprop(u'generateExpression', var.get(u'stmt').get(u'body').get(var.get(u'i')), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')))
                            if ((var.get(u'i')+Js(1.0))<var.get(u'iz')):
                                var.get(u'result').callprop(u'push', var.get(u'newline'))
                        finally:
                                var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                PyJs_anonymous_37_._set_name(u'anonymous')
                var.get(u'withIndent')(PyJs_anonymous_37_)
                if var.get(u'endsWithLineTerminator')(var.get(u'toSourceNodeWhenNeeded')(var.get(u'result')).callprop(u'toString')).neg():
                    var.get(u'result').callprop(u'push', var.get(u'newline'))
                var.get(u'result').callprop(u'push', var.get(u'base'))
                var.get(u'result').callprop(u'push', Js(u'}'))
                return var.get(u'result')
            PyJs_ClassBody_36_._set_name(u'ClassBody')
            @Js
            def PyJs_ClassDeclaration_38_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'ClassDeclaration':PyJs_ClassDeclaration_38_, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'fragment', u'flags', u'result', u'stmt'])
                pass
                var.put(u'result', Js([Js(u'class')]))
                if var.get(u'stmt').get(u'id'):
                    var.put(u'result', var.get(u'join')(var.get(u'result'), var.get(u"this").callprop(u'generateExpression', var.get(u'stmt').get(u'id'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT'))))
                if var.get(u'stmt').get(u'superClass'):
                    var.put(u'fragment', var.get(u'join')(Js(u'extends'), var.get(u"this").callprop(u'generateExpression', var.get(u'stmt').get(u'superClass'), var.get(u'Precedence').get(u'Assignment'), var.get(u'E_TTT'))))
                    var.put(u'result', var.get(u'join')(var.get(u'result'), var.get(u'fragment')))
                var.get(u'result').callprop(u'push', var.get(u'space'))
                var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'generateStatement', var.get(u'stmt').get(u'body'), var.get(u'S_TFFT')))
                return var.get(u'result')
            PyJs_ClassDeclaration_38_._set_name(u'ClassDeclaration')
            @Js
            def PyJs_DirectiveStatement_39_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'DirectiveStatement':PyJs_DirectiveStatement_39_, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'flags', u'stmt'])
                if (var.get(u'extra').get(u'raw') and var.get(u'stmt').get(u'raw')):
                    return (var.get(u'stmt').get(u'raw')+var.get(u"this").callprop(u'semicolon', var.get(u'flags')))
                return (var.get(u'escapeDirective')(var.get(u'stmt').get(u'directive'))+var.get(u"this").callprop(u'semicolon', var.get(u'flags')))
            PyJs_DirectiveStatement_39_._set_name(u'DirectiveStatement')
            @Js
            def PyJs_DoWhileStatement_40_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'DoWhileStatement':PyJs_DoWhileStatement_40_, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'flags', u'result', u'stmt'])
                var.put(u'result', var.get(u'join')(Js(u'do'), var.get(u"this").callprop(u'maybeBlock', var.get(u'stmt').get(u'body'), var.get(u'S_TFFF'))))
                var.put(u'result', var.get(u"this").callprop(u'maybeBlockSuffix', var.get(u'stmt').get(u'body'), var.get(u'result')))
                return var.get(u'join')(var.get(u'result'), Js([((Js(u'while')+var.get(u'space'))+Js(u'(')), var.get(u"this").callprop(u'generateExpression', var.get(u'stmt').get(u'test'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')), (Js(u')')+var.get(u"this").callprop(u'semicolon', var.get(u'flags')))]))
            PyJs_DoWhileStatement_40_._set_name(u'DoWhileStatement')
            @Js
            def PyJs_CatchClause_41_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'flags':flags, u'arguments':arguments, u'stmt':stmt, u'CatchClause':PyJs_CatchClause_41_}, var)
                var.registers([u'flags', u'result', u'stmt', u'that'])
                var.put(u'that', var.get(u"this"))
                @Js
                def PyJs_anonymous_42_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'guard'])
                    pass
                    var.put(u'result', Js([((Js(u'catch')+var.get(u'space'))+Js(u'(')), var.get(u'that').callprop(u'generateExpression', var.get(u'stmt').get(u'param'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')), Js(u')')]))
                    if var.get(u'stmt').get(u'guard'):
                        var.put(u'guard', var.get(u'that').callprop(u'generateExpression', var.get(u'stmt').get(u'guard'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')))
                        var.get(u'result').callprop(u'splice', Js(2.0), Js(0.0), Js(u' if '), var.get(u'guard'))
                PyJs_anonymous_42_._set_name(u'anonymous')
                var.get(u'withIndent')(PyJs_anonymous_42_)
                var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'maybeBlock', var.get(u'stmt').get(u'body'), var.get(u'S_TFFF')))
                return var.get(u'result')
            PyJs_CatchClause_41_._set_name(u'CatchClause')
            @Js
            def PyJs_DebuggerStatement_43_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'flags':flags, u'arguments':arguments, u'stmt':stmt, u'DebuggerStatement':PyJs_DebuggerStatement_43_}, var)
                var.registers([u'flags', u'stmt'])
                return (Js(u'debugger')+var.get(u"this").callprop(u'semicolon', var.get(u'flags')))
            PyJs_DebuggerStatement_43_._set_name(u'DebuggerStatement')
            @Js
            def PyJs_EmptyStatement_44_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'EmptyStatement':PyJs_EmptyStatement_44_, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'flags', u'stmt'])
                return Js(u';')
            PyJs_EmptyStatement_44_._set_name(u'EmptyStatement')
            @Js
            def PyJs_ExportDefaultDeclaration_45_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'flags':flags, u'arguments':arguments, u'stmt':stmt, u'ExportDefaultDeclaration':PyJs_ExportDefaultDeclaration_45_}, var)
                var.registers([u'flags', u'bodyFlags', u'result', u'stmt'])
                var.put(u'result', Js([Js(u'export')]))
                var.put(u'bodyFlags', (var.get(u'S_TFFT') if (var.get(u'flags')&var.get(u'F_SEMICOLON_OPT')) else var.get(u'S_TFFF')))
                var.put(u'result', var.get(u'join')(var.get(u'result'), Js(u'default')))
                if var.get(u'isStatement')(var.get(u'stmt').get(u'declaration')):
                    var.put(u'result', var.get(u'join')(var.get(u'result'), var.get(u"this").callprop(u'generateStatement', var.get(u'stmt').get(u'declaration'), var.get(u'bodyFlags'))))
                else:
                    var.put(u'result', var.get(u'join')(var.get(u'result'), (var.get(u"this").callprop(u'generateExpression', var.get(u'stmt').get(u'declaration'), var.get(u'Precedence').get(u'Assignment'), var.get(u'E_TTT'))+var.get(u"this").callprop(u'semicolon', var.get(u'flags')))))
                return var.get(u'result')
            PyJs_ExportDefaultDeclaration_45_._set_name(u'ExportDefaultDeclaration')
            @Js
            def PyJs_ExportNamedDeclaration_46_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'ExportNamedDeclaration':PyJs_ExportNamedDeclaration_46_, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'flags', u'bodyFlags', u'result', u'stmt', u'that'])
                var.put(u'result', Js([Js(u'export')]))
                var.put(u'that', var.get(u"this"))
                var.put(u'bodyFlags', (var.get(u'S_TFFT') if (var.get(u'flags')&var.get(u'F_SEMICOLON_OPT')) else var.get(u'S_TFFF')))
                if var.get(u'stmt').get(u'declaration'):
                    return var.get(u'join')(var.get(u'result'), var.get(u"this").callprop(u'generateStatement', var.get(u'stmt').get(u'declaration'), var.get(u'bodyFlags')))
                if var.get(u'stmt').get(u'specifiers'):
                    if PyJsStrictEq(var.get(u'stmt').get(u'specifiers').get(u'length'),Js(0.0)):
                        var.put(u'result', var.get(u'join')(var.get(u'result'), ((Js(u'{')+var.get(u'space'))+Js(u'}'))))
                    else:
                        if PyJsStrictEq(var.get(u'stmt').get(u'specifiers').get(u'0').get(u'type'),var.get(u'Syntax').get(u'ExportBatchSpecifier')):
                            var.put(u'result', var.get(u'join')(var.get(u'result'), var.get(u"this").callprop(u'generateExpression', var.get(u'stmt').get(u'specifiers').get(u'0'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT'))))
                        else:
                            var.put(u'result', var.get(u'join')(var.get(u'result'), Js(u'{')))
                            @Js
                            def PyJs_anonymous_47_(indent, this, arguments, var=var):
                                var = Scope({u'this':this, u'indent':indent, u'arguments':arguments}, var)
                                var.registers([u'i', u'iz', u'indent'])
                                pass
                                var.get(u'result').callprop(u'push', var.get(u'newline'))
                                #for JS loop
                                PyJsComma(var.put(u'i', Js(0.0)),var.put(u'iz', var.get(u'stmt').get(u'specifiers').get(u'length')))
                                while (var.get(u'i')<var.get(u'iz')):
                                    try:
                                        var.get(u'result').callprop(u'push', var.get(u'indent'))
                                        var.get(u'result').callprop(u'push', var.get(u'that').callprop(u'generateExpression', var.get(u'stmt').get(u'specifiers').get(var.get(u'i')), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')))
                                        if ((var.get(u'i')+Js(1.0))<var.get(u'iz')):
                                            var.get(u'result').callprop(u'push', (Js(u',')+var.get(u'newline')))
                                    finally:
                                            var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                            PyJs_anonymous_47_._set_name(u'anonymous')
                            var.get(u'withIndent')(PyJs_anonymous_47_)
                            if var.get(u'endsWithLineTerminator')(var.get(u'toSourceNodeWhenNeeded')(var.get(u'result')).callprop(u'toString')).neg():
                                var.get(u'result').callprop(u'push', var.get(u'newline'))
                            var.get(u'result').callprop(u'push', (var.get(u'base')+Js(u'}')))
                    if var.get(u'stmt').get(u'source'):
                        var.put(u'result', var.get(u'join')(var.get(u'result'), Js([(Js(u'from')+var.get(u'space')), var.get(u"this").callprop(u'generateExpression', var.get(u'stmt').get(u'source'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')), var.get(u"this").callprop(u'semicolon', var.get(u'flags'))])))
                    else:
                        var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'semicolon', var.get(u'flags')))
                return var.get(u'result')
            PyJs_ExportNamedDeclaration_46_._set_name(u'ExportNamedDeclaration')
            @Js
            def PyJs_ExportAllDeclaration_48_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'flags':flags, u'arguments':arguments, u'stmt':stmt, u'ExportAllDeclaration':PyJs_ExportAllDeclaration_48_}, var)
                var.registers([u'flags', u'stmt'])
                return Js([(Js(u'export')+var.get(u'space')), (Js(u'*')+var.get(u'space')), (Js(u'from')+var.get(u'space')), var.get(u"this").callprop(u'generateExpression', var.get(u'stmt').get(u'source'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')), var.get(u"this").callprop(u'semicolon', var.get(u'flags'))])
            PyJs_ExportAllDeclaration_48_._set_name(u'ExportAllDeclaration')
            @Js
            def PyJs_ExpressionStatement_49_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'ExpressionStatement':PyJs_ExpressionStatement_49_, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'isClassPrefixed', u'fragment', u'isFunctionPrefixed', u'stmt', u'flags', u'result', u'isAsyncPrefixed'])
                @Js
                def PyJsHoisted_isClassPrefixed_(fragment, this, arguments, var=var):
                    var = Scope({u'fragment':fragment, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'fragment', u'code'])
                    pass
                    if PyJsStrictNeq(var.get(u'fragment').callprop(u'slice', Js(0.0), Js(5.0)),Js(u'class')):
                        return Js(False)
                    var.put(u'code', var.get(u'fragment').callprop(u'charCodeAt', Js(5.0)))
                    return ((PyJsStrictEq(var.get(u'code'),Js(123)) or var.get(u'esutils').get(u'code').callprop(u'isWhiteSpace', var.get(u'code'))) or var.get(u'esutils').get(u'code').callprop(u'isLineTerminator', var.get(u'code')))
                PyJsHoisted_isClassPrefixed_.func_name = u'isClassPrefixed'
                var.put(u'isClassPrefixed', PyJsHoisted_isClassPrefixed_)
                @Js
                def PyJsHoisted_isAsyncPrefixed_(fragment, this, arguments, var=var):
                    var = Scope({u'fragment':fragment, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'i', u'fragment', u'code', u'iz'])
                    pass
                    if PyJsStrictNeq(var.get(u'fragment').callprop(u'slice', Js(0.0), Js(5.0)),Js(u'async')):
                        return Js(False)
                    if var.get(u'esutils').get(u'code').callprop(u'isWhiteSpace', var.get(u'fragment').callprop(u'charCodeAt', Js(5.0))).neg():
                        return Js(False)
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(6.0)),var.put(u'iz', var.get(u'fragment').get(u'length')))
                    while (var.get(u'i')<var.get(u'iz')):
                        try:
                            if var.get(u'esutils').get(u'code').callprop(u'isWhiteSpace', var.get(u'fragment').callprop(u'charCodeAt', var.get(u'i'))).neg():
                                break
                        finally:
                                var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                    if PyJsStrictEq(var.get(u'i'),var.get(u'iz')):
                        return Js(False)
                    if PyJsStrictNeq(var.get(u'fragment').callprop(u'slice', var.get(u'i'), (var.get(u'i')+Js(8.0))),Js(u'function')):
                        return Js(False)
                    var.put(u'code', var.get(u'fragment').callprop(u'charCodeAt', (var.get(u'i')+Js(8.0))))
                    return (((PyJsStrictEq(var.get(u'code'),Js(40)) or var.get(u'esutils').get(u'code').callprop(u'isWhiteSpace', var.get(u'code'))) or PyJsStrictEq(var.get(u'code'),Js(42))) or var.get(u'esutils').get(u'code').callprop(u'isLineTerminator', var.get(u'code')))
                PyJsHoisted_isAsyncPrefixed_.func_name = u'isAsyncPrefixed'
                var.put(u'isAsyncPrefixed', PyJsHoisted_isAsyncPrefixed_)
                @Js
                def PyJsHoisted_isFunctionPrefixed_(fragment, this, arguments, var=var):
                    var = Scope({u'fragment':fragment, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'fragment', u'code'])
                    pass
                    if PyJsStrictNeq(var.get(u'fragment').callprop(u'slice', Js(0.0), Js(8.0)),Js(u'function')):
                        return Js(False)
                    var.put(u'code', var.get(u'fragment').callprop(u'charCodeAt', Js(8.0)))
                    return (((PyJsStrictEq(var.get(u'code'),Js(40)) or var.get(u'esutils').get(u'code').callprop(u'isWhiteSpace', var.get(u'code'))) or PyJsStrictEq(var.get(u'code'),Js(42))) or var.get(u'esutils').get(u'code').callprop(u'isLineTerminator', var.get(u'code')))
                PyJsHoisted_isFunctionPrefixed_.func_name = u'isFunctionPrefixed'
                var.put(u'isFunctionPrefixed', PyJsHoisted_isFunctionPrefixed_)
                pass
                pass
                pass
                pass
                var.put(u'result', Js([var.get(u"this").callprop(u'generateExpression', var.get(u'stmt').get(u'expression'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT'))]))
                var.put(u'fragment', var.get(u'toSourceNodeWhenNeeded')(var.get(u'result')).callprop(u'toString'))
                def PyJs_LONG_50_(var=var):
                    return ((((PyJsStrictEq(var.get(u'fragment').callprop(u'charCodeAt', Js(0.0)),Js(123)) or var.get(u'isClassPrefixed')(var.get(u'fragment'))) or var.get(u'isFunctionPrefixed')(var.get(u'fragment'))) or var.get(u'isAsyncPrefixed')(var.get(u'fragment'))) or (((var.get(u'directive') and (var.get(u'flags')&var.get(u'F_DIRECTIVE_CTX'))) and PyJsStrictEq(var.get(u'stmt').get(u'expression').get(u'type'),var.get(u'Syntax').get(u'Literal'))) and PyJsStrictEq(var.get(u'stmt').get(u'expression').get(u'value').typeof(),Js(u'string'))))
                if PyJs_LONG_50_():
                    var.put(u'result', Js([Js(u'('), var.get(u'result'), (Js(u')')+var.get(u"this").callprop(u'semicolon', var.get(u'flags')))]))
                else:
                    var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'semicolon', var.get(u'flags')))
                return var.get(u'result')
            PyJs_ExpressionStatement_49_._set_name(u'ExpressionStatement')
            @Js
            def PyJs_ImportDeclaration_51_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'ImportDeclaration':PyJs_ImportDeclaration_51_, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'cursor', u'flags', u'result', u'stmt', u'that'])
                var.put(u'that', var.get(u"this"))
                if PyJsStrictEq(var.get(u'stmt').get(u'specifiers').get(u'length'),Js(0.0)):
                    return Js([Js(u'import'), var.get(u'space'), var.get(u"this").callprop(u'generateExpression', var.get(u'stmt').get(u'source'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')), var.get(u"this").callprop(u'semicolon', var.get(u'flags'))])
                var.put(u'result', Js([Js(u'import')]))
                var.put(u'cursor', Js(0.0))
                if PyJsStrictEq(var.get(u'stmt').get(u'specifiers').get(var.get(u'cursor')).get(u'type'),var.get(u'Syntax').get(u'ImportDefaultSpecifier')):
                    var.put(u'result', var.get(u'join')(var.get(u'result'), Js([var.get(u"this").callprop(u'generateExpression', var.get(u'stmt').get(u'specifiers').get(var.get(u'cursor')), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT'))])))
                    var.put(u'cursor',Js(var.get(u'cursor').to_number())+Js(1))
                if var.get(u'stmt').get(u'specifiers').get(var.get(u'cursor')):
                    if PyJsStrictNeq(var.get(u'cursor'),Js(0.0)):
                        var.get(u'result').callprop(u'push', Js(u','))
                    if PyJsStrictEq(var.get(u'stmt').get(u'specifiers').get(var.get(u'cursor')).get(u'type'),var.get(u'Syntax').get(u'ImportNamespaceSpecifier')):
                        var.put(u'result', var.get(u'join')(var.get(u'result'), Js([var.get(u'space'), var.get(u"this").callprop(u'generateExpression', var.get(u'stmt').get(u'specifiers').get(var.get(u'cursor')), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT'))])))
                    else:
                        var.get(u'result').callprop(u'push', (var.get(u'space')+Js(u'{')))
                        if PyJsStrictEq((var.get(u'stmt').get(u'specifiers').get(u'length')-var.get(u'cursor')),Js(1.0)):
                            var.get(u'result').callprop(u'push', var.get(u'space'))
                            var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'generateExpression', var.get(u'stmt').get(u'specifiers').get(var.get(u'cursor')), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')))
                            var.get(u'result').callprop(u'push', ((var.get(u'space')+Js(u'}'))+var.get(u'space')))
                        else:
                            @Js
                            def PyJs_anonymous_52_(indent, this, arguments, var=var):
                                var = Scope({u'this':this, u'indent':indent, u'arguments':arguments}, var)
                                var.registers([u'i', u'iz', u'indent'])
                                pass
                                var.get(u'result').callprop(u'push', var.get(u'newline'))
                                #for JS loop
                                PyJsComma(var.put(u'i', var.get(u'cursor')),var.put(u'iz', var.get(u'stmt').get(u'specifiers').get(u'length')))
                                while (var.get(u'i')<var.get(u'iz')):
                                    try:
                                        var.get(u'result').callprop(u'push', var.get(u'indent'))
                                        var.get(u'result').callprop(u'push', var.get(u'that').callprop(u'generateExpression', var.get(u'stmt').get(u'specifiers').get(var.get(u'i')), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')))
                                        if ((var.get(u'i')+Js(1.0))<var.get(u'iz')):
                                            var.get(u'result').callprop(u'push', (Js(u',')+var.get(u'newline')))
                                    finally:
                                            var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                            PyJs_anonymous_52_._set_name(u'anonymous')
                            var.get(u'withIndent')(PyJs_anonymous_52_)
                            if var.get(u'endsWithLineTerminator')(var.get(u'toSourceNodeWhenNeeded')(var.get(u'result')).callprop(u'toString')).neg():
                                var.get(u'result').callprop(u'push', var.get(u'newline'))
                            var.get(u'result').callprop(u'push', ((var.get(u'base')+Js(u'}'))+var.get(u'space')))
                var.put(u'result', var.get(u'join')(var.get(u'result'), Js([(Js(u'from')+var.get(u'space')), var.get(u"this").callprop(u'generateExpression', var.get(u'stmt').get(u'source'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')), var.get(u"this").callprop(u'semicolon', var.get(u'flags'))])))
                return var.get(u'result')
            PyJs_ImportDeclaration_51_._set_name(u'ImportDeclaration')
            @Js
            def PyJs_VariableDeclarator_53_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'flags':flags, u'arguments':arguments, u'stmt':stmt, u'VariableDeclarator':PyJs_VariableDeclarator_53_}, var)
                var.registers([u'itemFlags', u'flags', u'stmt'])
                var.put(u'itemFlags', (var.get(u'E_TTT') if (var.get(u'flags')&var.get(u'F_ALLOW_IN')) else var.get(u'E_FTT')))
                if var.get(u'stmt').get(u'init'):
                    return Js([var.get(u"this").callprop(u'generateExpression', var.get(u'stmt').get(u'id'), var.get(u'Precedence').get(u'Assignment'), var.get(u'itemFlags')), var.get(u'space'), Js(u'='), var.get(u'space'), var.get(u"this").callprop(u'generateExpression', var.get(u'stmt').get(u'init'), var.get(u'Precedence').get(u'Assignment'), var.get(u'itemFlags'))])
                return var.get(u"this").callprop(u'generatePattern', var.get(u'stmt').get(u'id'), var.get(u'Precedence').get(u'Assignment'), var.get(u'itemFlags'))
            PyJs_VariableDeclarator_53_._set_name(u'VariableDeclarator')
            @Js
            def PyJs_VariableDeclaration_54_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'flags':flags, u'arguments':arguments, u'stmt':stmt, u'VariableDeclaration':PyJs_VariableDeclaration_54_}, var)
                var.registers([u'node', u'iz', u'that', u'i', u'stmt', u'flags', u'result', u'bodyFlags', u'block'])
                @Js
                def PyJsHoisted_block_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.put(u'node', var.get(u'stmt').get(u'declarations').get(u'0'))
                    if (var.get(u'extra').get(u'comment') and var.get(u'node').get(u'leadingComments')):
                        var.get(u'result').callprop(u'push', Js(u'\n'))
                        var.get(u'result').callprop(u'push', var.get(u'addIndent')(var.get(u'that').callprop(u'generateStatement', var.get(u'node'), var.get(u'bodyFlags'))))
                    else:
                        var.get(u'result').callprop(u'push', var.get(u'noEmptySpace')())
                        var.get(u'result').callprop(u'push', var.get(u'that').callprop(u'generateStatement', var.get(u'node'), var.get(u'bodyFlags')))
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(1.0)),var.put(u'iz', var.get(u'stmt').get(u'declarations').get(u'length')))
                    while (var.get(u'i')<var.get(u'iz')):
                        try:
                            var.put(u'node', var.get(u'stmt').get(u'declarations').get(var.get(u'i')))
                            if (var.get(u'extra').get(u'comment') and var.get(u'node').get(u'leadingComments')):
                                var.get(u'result').callprop(u'push', (Js(u',')+var.get(u'newline')))
                                var.get(u'result').callprop(u'push', var.get(u'addIndent')(var.get(u'that').callprop(u'generateStatement', var.get(u'node'), var.get(u'bodyFlags'))))
                            else:
                                var.get(u'result').callprop(u'push', (Js(u',')+var.get(u'space')))
                                var.get(u'result').callprop(u'push', var.get(u'that').callprop(u'generateStatement', var.get(u'node'), var.get(u'bodyFlags')))
                        finally:
                                var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                PyJsHoisted_block_.func_name = u'block'
                var.put(u'block', PyJsHoisted_block_)
                var.put(u'that', var.get(u"this"))
                var.put(u'result', Js([var.get(u'stmt').get(u'kind')]))
                var.put(u'bodyFlags', (var.get(u'S_TFFF') if (var.get(u'flags')&var.get(u'F_ALLOW_IN')) else var.get(u'S_FFFF')))
                pass
                if (var.get(u'stmt').get(u'declarations').get(u'length')>Js(1.0)):
                    var.get(u'withIndent')(var.get(u'block'))
                else:
                    var.get(u'block')()
                var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'semicolon', var.get(u'flags')))
                return var.get(u'result')
            PyJs_VariableDeclaration_54_._set_name(u'VariableDeclaration')
            @Js
            def PyJs_ThrowStatement_55_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'ThrowStatement':PyJs_ThrowStatement_55_, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'flags', u'stmt'])
                return Js([var.get(u'join')(Js(u'throw'), var.get(u"this").callprop(u'generateExpression', var.get(u'stmt').get(u'argument'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT'))), var.get(u"this").callprop(u'semicolon', var.get(u'flags'))])
            PyJs_ThrowStatement_55_._set_name(u'ThrowStatement')
            @Js
            def PyJs_TryStatement_56_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'TryStatement':PyJs_TryStatement_56_, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'iz', u'i', u'guardedHandlers', u'stmt', u'flags', u'result'])
                pass
                var.put(u'result', Js([Js(u'try'), var.get(u"this").callprop(u'maybeBlock', var.get(u'stmt').get(u'block'), var.get(u'S_TFFF'))]))
                var.put(u'result', var.get(u"this").callprop(u'maybeBlockSuffix', var.get(u'stmt').get(u'block'), var.get(u'result')))
                if var.get(u'stmt').get(u'handlers'):
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(0.0)),var.put(u'iz', var.get(u'stmt').get(u'handlers').get(u'length')))
                    while (var.get(u'i')<var.get(u'iz')):
                        try:
                            var.put(u'result', var.get(u'join')(var.get(u'result'), var.get(u"this").callprop(u'generateStatement', var.get(u'stmt').get(u'handlers').get(var.get(u'i')), var.get(u'S_TFFF'))))
                            if (var.get(u'stmt').get(u'finalizer') or PyJsStrictNeq((var.get(u'i')+Js(1.0)),var.get(u'iz'))):
                                var.put(u'result', var.get(u"this").callprop(u'maybeBlockSuffix', var.get(u'stmt').get(u'handlers').get(var.get(u'i')).get(u'body'), var.get(u'result')))
                        finally:
                                var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                else:
                    var.put(u'guardedHandlers', (var.get(u'stmt').get(u'guardedHandlers') or Js([])))
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(0.0)),var.put(u'iz', var.get(u'guardedHandlers').get(u'length')))
                    while (var.get(u'i')<var.get(u'iz')):
                        try:
                            var.put(u'result', var.get(u'join')(var.get(u'result'), var.get(u"this").callprop(u'generateStatement', var.get(u'guardedHandlers').get(var.get(u'i')), var.get(u'S_TFFF'))))
                            if (var.get(u'stmt').get(u'finalizer') or PyJsStrictNeq((var.get(u'i')+Js(1.0)),var.get(u'iz'))):
                                var.put(u'result', var.get(u"this").callprop(u'maybeBlockSuffix', var.get(u'guardedHandlers').get(var.get(u'i')).get(u'body'), var.get(u'result')))
                        finally:
                                var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                    if var.get(u'stmt').get(u'handler'):
                        if var.get(u'Array').callprop(u'isArray', var.get(u'stmt').get(u'handler')):
                            #for JS loop
                            PyJsComma(var.put(u'i', Js(0.0)),var.put(u'iz', var.get(u'stmt').get(u'handler').get(u'length')))
                            while (var.get(u'i')<var.get(u'iz')):
                                try:
                                    var.put(u'result', var.get(u'join')(var.get(u'result'), var.get(u"this").callprop(u'generateStatement', var.get(u'stmt').get(u'handler').get(var.get(u'i')), var.get(u'S_TFFF'))))
                                    if (var.get(u'stmt').get(u'finalizer') or PyJsStrictNeq((var.get(u'i')+Js(1.0)),var.get(u'iz'))):
                                        var.put(u'result', var.get(u"this").callprop(u'maybeBlockSuffix', var.get(u'stmt').get(u'handler').get(var.get(u'i')).get(u'body'), var.get(u'result')))
                                finally:
                                        var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                        else:
                            var.put(u'result', var.get(u'join')(var.get(u'result'), var.get(u"this").callprop(u'generateStatement', var.get(u'stmt').get(u'handler'), var.get(u'S_TFFF'))))
                            if var.get(u'stmt').get(u'finalizer'):
                                var.put(u'result', var.get(u"this").callprop(u'maybeBlockSuffix', var.get(u'stmt').get(u'handler').get(u'body'), var.get(u'result')))
                if var.get(u'stmt').get(u'finalizer'):
                    var.put(u'result', var.get(u'join')(var.get(u'result'), Js([Js(u'finally'), var.get(u"this").callprop(u'maybeBlock', var.get(u'stmt').get(u'finalizer'), var.get(u'S_TFFF'))])))
                return var.get(u'result')
            PyJs_TryStatement_56_._set_name(u'TryStatement')
            @Js
            def PyJs_SwitchStatement_57_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'SwitchStatement':PyJs_SwitchStatement_57_, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'iz', u'that', u'fragment', u'stmt', u'i', u'flags', u'result', u'bodyFlags'])
                var.put(u'that', var.get(u"this"))
                @Js
                def PyJs_anonymous_58_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.put(u'result', Js([((Js(u'switch')+var.get(u'space'))+Js(u'(')), var.get(u'that').callprop(u'generateExpression', var.get(u'stmt').get(u'discriminant'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')), (((Js(u')')+var.get(u'space'))+Js(u'{'))+var.get(u'newline'))]))
                PyJs_anonymous_58_._set_name(u'anonymous')
                var.get(u'withIndent')(PyJs_anonymous_58_)
                if var.get(u'stmt').get(u'cases'):
                    var.put(u'bodyFlags', var.get(u'S_TFFF'))
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(0.0)),var.put(u'iz', var.get(u'stmt').get(u'cases').get(u'length')))
                    while (var.get(u'i')<var.get(u'iz')):
                        try:
                            if PyJsStrictEq(var.get(u'i'),(var.get(u'iz')-Js(1.0))):
                                var.put(u'bodyFlags', var.get(u'F_SEMICOLON_OPT'), u'|')
                            var.put(u'fragment', var.get(u'addIndent')(var.get(u"this").callprop(u'generateStatement', var.get(u'stmt').get(u'cases').get(var.get(u'i')), var.get(u'bodyFlags'))))
                            var.get(u'result').callprop(u'push', var.get(u'fragment'))
                            if var.get(u'endsWithLineTerminator')(var.get(u'toSourceNodeWhenNeeded')(var.get(u'fragment')).callprop(u'toString')).neg():
                                var.get(u'result').callprop(u'push', var.get(u'newline'))
                        finally:
                                var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                var.get(u'result').callprop(u'push', var.get(u'addIndent')(Js(u'}')))
                return var.get(u'result')
            PyJs_SwitchStatement_57_._set_name(u'SwitchStatement')
            @Js
            def PyJs_SwitchCase_59_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'SwitchCase':PyJs_SwitchCase_59_, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'iz', u'that', u'fragment', u'stmt', u'i', u'flags', u'result', u'bodyFlags'])
                var.put(u'that', var.get(u"this"))
                @Js
                def PyJs_anonymous_60_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    if var.get(u'stmt').get(u'test'):
                        var.put(u'result', Js([var.get(u'join')(Js(u'case'), var.get(u'that').callprop(u'generateExpression', var.get(u'stmt').get(u'test'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT'))), Js(u':')]))
                    else:
                        var.put(u'result', Js([Js(u'default:')]))
                    var.put(u'i', Js(0.0))
                    var.put(u'iz', var.get(u'stmt').get(u'consequent').get(u'length'))
                    if (var.get(u'iz') and PyJsStrictEq(var.get(u'stmt').get(u'consequent').get(u'0').get(u'type'),var.get(u'Syntax').get(u'BlockStatement'))):
                        var.put(u'fragment', var.get(u'that').callprop(u'maybeBlock', var.get(u'stmt').get(u'consequent').get(u'0'), var.get(u'S_TFFF')))
                        var.get(u'result').callprop(u'push', var.get(u'fragment'))
                        var.put(u'i', Js(1.0))
                    if (PyJsStrictNeq(var.get(u'i'),var.get(u'iz')) and var.get(u'endsWithLineTerminator')(var.get(u'toSourceNodeWhenNeeded')(var.get(u'result')).callprop(u'toString')).neg()):
                        var.get(u'result').callprop(u'push', var.get(u'newline'))
                    var.put(u'bodyFlags', var.get(u'S_TFFF'))
                    #for JS loop
                    
                    while (var.get(u'i')<var.get(u'iz')):
                        try:
                            if (PyJsStrictEq(var.get(u'i'),(var.get(u'iz')-Js(1.0))) and (var.get(u'flags')&var.get(u'F_SEMICOLON_OPT'))):
                                var.put(u'bodyFlags', var.get(u'F_SEMICOLON_OPT'), u'|')
                            var.put(u'fragment', var.get(u'addIndent')(var.get(u'that').callprop(u'generateStatement', var.get(u'stmt').get(u'consequent').get(var.get(u'i')), var.get(u'bodyFlags'))))
                            var.get(u'result').callprop(u'push', var.get(u'fragment'))
                            if (PyJsStrictNeq((var.get(u'i')+Js(1.0)),var.get(u'iz')) and var.get(u'endsWithLineTerminator')(var.get(u'toSourceNodeWhenNeeded')(var.get(u'fragment')).callprop(u'toString')).neg()):
                                var.get(u'result').callprop(u'push', var.get(u'newline'))
                        finally:
                                var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                PyJs_anonymous_60_._set_name(u'anonymous')
                var.get(u'withIndent')(PyJs_anonymous_60_)
                return var.get(u'result')
            PyJs_SwitchCase_59_._set_name(u'SwitchCase')
            @Js
            def PyJs_IfStatement_61_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'flags':flags, u'arguments':arguments, u'stmt':stmt, u'IfStatement':PyJs_IfStatement_61_}, var)
                var.registers([u'that', u'stmt', u'flags', u'result', u'semicolonOptional', u'bodyFlags'])
                var.put(u'that', var.get(u"this"))
                @Js
                def PyJs_anonymous_62_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.put(u'result', Js([((Js(u'if')+var.get(u'space'))+Js(u'(')), var.get(u'that').callprop(u'generateExpression', var.get(u'stmt').get(u'test'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')), Js(u')')]))
                PyJs_anonymous_62_._set_name(u'anonymous')
                var.get(u'withIndent')(PyJs_anonymous_62_)
                var.put(u'semicolonOptional', (var.get(u'flags')&var.get(u'F_SEMICOLON_OPT')))
                var.put(u'bodyFlags', var.get(u'S_TFFF'))
                if var.get(u'semicolonOptional'):
                    var.put(u'bodyFlags', var.get(u'F_SEMICOLON_OPT'), u'|')
                if var.get(u'stmt').get(u'alternate'):
                    var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'maybeBlock', var.get(u'stmt').get(u'consequent'), var.get(u'S_TFFF')))
                    var.put(u'result', var.get(u"this").callprop(u'maybeBlockSuffix', var.get(u'stmt').get(u'consequent'), var.get(u'result')))
                    if PyJsStrictEq(var.get(u'stmt').get(u'alternate').get(u'type'),var.get(u'Syntax').get(u'IfStatement')):
                        var.put(u'result', var.get(u'join')(var.get(u'result'), Js([Js(u'else '), var.get(u"this").callprop(u'generateStatement', var.get(u'stmt').get(u'alternate'), var.get(u'bodyFlags'))])))
                    else:
                        var.put(u'result', var.get(u'join')(var.get(u'result'), var.get(u'join')(Js(u'else'), var.get(u"this").callprop(u'maybeBlock', var.get(u'stmt').get(u'alternate'), var.get(u'bodyFlags')))))
                else:
                    var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'maybeBlock', var.get(u'stmt').get(u'consequent'), var.get(u'bodyFlags')))
                return var.get(u'result')
            PyJs_IfStatement_61_._set_name(u'IfStatement')
            @Js
            def PyJs_ForStatement_63_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'ForStatement':PyJs_ForStatement_63_, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'flags', u'result', u'stmt', u'that'])
                var.put(u'that', var.get(u"this"))
                @Js
                def PyJs_anonymous_64_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.put(u'result', Js([((Js(u'for')+var.get(u'space'))+Js(u'('))]))
                    if var.get(u'stmt').get(u'init'):
                        if PyJsStrictEq(var.get(u'stmt').get(u'init').get(u'type'),var.get(u'Syntax').get(u'VariableDeclaration')):
                            var.get(u'result').callprop(u'push', var.get(u'that').callprop(u'generateStatement', var.get(u'stmt').get(u'init'), var.get(u'S_FFFF')))
                        else:
                            var.get(u'result').callprop(u'push', var.get(u'that').callprop(u'generateExpression', var.get(u'stmt').get(u'init'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_FTT')))
                            var.get(u'result').callprop(u'push', Js(u';'))
                    else:
                        var.get(u'result').callprop(u'push', Js(u';'))
                    if var.get(u'stmt').get(u'test'):
                        var.get(u'result').callprop(u'push', var.get(u'space'))
                        var.get(u'result').callprop(u'push', var.get(u'that').callprop(u'generateExpression', var.get(u'stmt').get(u'test'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')))
                        var.get(u'result').callprop(u'push', Js(u';'))
                    else:
                        var.get(u'result').callprop(u'push', Js(u';'))
                    if var.get(u'stmt').get(u'update'):
                        var.get(u'result').callprop(u'push', var.get(u'space'))
                        var.get(u'result').callprop(u'push', var.get(u'that').callprop(u'generateExpression', var.get(u'stmt').get(u'update'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')))
                        var.get(u'result').callprop(u'push', Js(u')'))
                    else:
                        var.get(u'result').callprop(u'push', Js(u')'))
                PyJs_anonymous_64_._set_name(u'anonymous')
                var.get(u'withIndent')(PyJs_anonymous_64_)
                var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'maybeBlock', var.get(u'stmt').get(u'body'), (var.get(u'S_TFFT') if (var.get(u'flags')&var.get(u'F_SEMICOLON_OPT')) else var.get(u'S_TFFF'))))
                return var.get(u'result')
            PyJs_ForStatement_63_._set_name(u'ForStatement')
            @Js
            def PyJs_ForInStatement_65_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'flags':flags, u'arguments':arguments, u'stmt':stmt, u'ForInStatement':PyJs_ForInStatement_65_}, var)
                var.registers([u'flags', u'stmt'])
                return var.get(u"this").callprop(u'generateIterationForStatement', Js(u'in'), var.get(u'stmt'), (var.get(u'S_TFFT') if (var.get(u'flags')&var.get(u'F_SEMICOLON_OPT')) else var.get(u'S_TFFF')))
            PyJs_ForInStatement_65_._set_name(u'ForInStatement')
            @Js
            def PyJs_ForOfStatement_66_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'flags':flags, u'arguments':arguments, u'stmt':stmt, u'ForOfStatement':PyJs_ForOfStatement_66_}, var)
                var.registers([u'flags', u'stmt'])
                return var.get(u"this").callprop(u'generateIterationForStatement', Js(u'of'), var.get(u'stmt'), (var.get(u'S_TFFT') if (var.get(u'flags')&var.get(u'F_SEMICOLON_OPT')) else var.get(u'S_TFFF')))
            PyJs_ForOfStatement_66_._set_name(u'ForOfStatement')
            @Js
            def PyJs_LabeledStatement_67_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'LabeledStatement':PyJs_LabeledStatement_67_, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'flags', u'stmt'])
                return Js([(var.get(u'stmt').get(u'label').get(u'name')+Js(u':')), var.get(u"this").callprop(u'maybeBlock', var.get(u'stmt').get(u'body'), (var.get(u'S_TFFT') if (var.get(u'flags')&var.get(u'F_SEMICOLON_OPT')) else var.get(u'S_TFFF')))])
            PyJs_LabeledStatement_67_._set_name(u'LabeledStatement')
            @Js
            def PyJs_Program_68_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'Program':PyJs_Program_68_, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'iz', u'fragment', u'stmt', u'i', u'flags', u'result', u'bodyFlags'])
                pass
                var.put(u'iz', var.get(u'stmt').get(u'body').get(u'length'))
                var.put(u'result', Js([(Js(u'\n') if (var.get(u'safeConcatenation') and (var.get(u'iz')>Js(0.0))) else Js(u''))]))
                var.put(u'bodyFlags', var.get(u'S_TFTF'))
                #for JS loop
                var.put(u'i', Js(0.0))
                while (var.get(u'i')<var.get(u'iz')):
                    try:
                        if (var.get(u'safeConcatenation').neg() and PyJsStrictEq(var.get(u'i'),(var.get(u'iz')-Js(1.0)))):
                            var.put(u'bodyFlags', var.get(u'F_SEMICOLON_OPT'), u'|')
                        if var.get(u'preserveBlankLines'):
                            if PyJsStrictEq(var.get(u'i'),Js(0.0)):
                                if var.get(u'stmt').get(u'body').get(u'0').get(u'leadingComments').neg():
                                    var.get(u'generateBlankLines')(var.get(u'stmt').get(u'range').get(u'0'), var.get(u'stmt').get(u'body').get(var.get(u'i')).get(u'range').get(u'0'), var.get(u'result'))
                            if (var.get(u'i')>Js(0.0)):
                                if (var.get(u'stmt').get(u'body').get((var.get(u'i')-Js(1.0))).get(u'trailingComments').neg() and var.get(u'stmt').get(u'body').get(var.get(u'i')).get(u'leadingComments').neg()):
                                    var.get(u'generateBlankLines')(var.get(u'stmt').get(u'body').get((var.get(u'i')-Js(1.0))).get(u'range').get(u'1'), var.get(u'stmt').get(u'body').get(var.get(u'i')).get(u'range').get(u'0'), var.get(u'result'))
                        var.put(u'fragment', var.get(u'addIndent')(var.get(u"this").callprop(u'generateStatement', var.get(u'stmt').get(u'body').get(var.get(u'i')), var.get(u'bodyFlags'))))
                        var.get(u'result').callprop(u'push', var.get(u'fragment'))
                        if (((var.get(u'i')+Js(1.0))<var.get(u'iz')) and var.get(u'endsWithLineTerminator')(var.get(u'toSourceNodeWhenNeeded')(var.get(u'fragment')).callprop(u'toString')).neg()):
                            if var.get(u'preserveBlankLines'):
                                if var.get(u'stmt').get(u'body').get((var.get(u'i')+Js(1.0))).get(u'leadingComments').neg():
                                    var.get(u'result').callprop(u'push', var.get(u'newline'))
                            else:
                                var.get(u'result').callprop(u'push', var.get(u'newline'))
                        if var.get(u'preserveBlankLines'):
                            if PyJsStrictEq(var.get(u'i'),(var.get(u'iz')-Js(1.0))):
                                if var.get(u'stmt').get(u'body').get(var.get(u'i')).get(u'trailingComments').neg():
                                    var.get(u'generateBlankLines')(var.get(u'stmt').get(u'body').get(var.get(u'i')).get(u'range').get(u'1'), var.get(u'stmt').get(u'range').get(u'1'), var.get(u'result'))
                    finally:
                            var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                return var.get(u'result')
            PyJs_Program_68_._set_name(u'Program')
            @Js
            def PyJs_FunctionDeclaration_69_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'flags':flags, u'arguments':arguments, u'stmt':stmt, u'FunctionDeclaration':PyJs_FunctionDeclaration_69_}, var)
                var.registers([u'flags', u'stmt'])
                return Js([var.get(u'generateAsyncPrefix')(var.get(u'stmt'), Js(True)), Js(u'function'), (var.get(u'generateStarSuffix')(var.get(u'stmt')) or var.get(u'noEmptySpace')()), (var.get(u'generateIdentifier')(var.get(u'stmt').get(u'id')) if var.get(u'stmt').get(u'id') else Js(u'')), var.get(u"this").callprop(u'generateFunctionBody', var.get(u'stmt'))])
            PyJs_FunctionDeclaration_69_._set_name(u'FunctionDeclaration')
            @Js
            def PyJs_ReturnStatement_70_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'ReturnStatement':PyJs_ReturnStatement_70_, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'flags', u'stmt'])
                if var.get(u'stmt').get(u'argument'):
                    return Js([var.get(u'join')(Js(u'return'), var.get(u"this").callprop(u'generateExpression', var.get(u'stmt').get(u'argument'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT'))), var.get(u"this").callprop(u'semicolon', var.get(u'flags'))])
                return Js([(Js(u'return')+var.get(u"this").callprop(u'semicolon', var.get(u'flags')))])
            PyJs_ReturnStatement_70_._set_name(u'ReturnStatement')
            @Js
            def PyJs_WhileStatement_71_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'WhileStatement':PyJs_WhileStatement_71_, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'flags', u'result', u'stmt', u'that'])
                var.put(u'that', var.get(u"this"))
                @Js
                def PyJs_anonymous_72_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.put(u'result', Js([((Js(u'while')+var.get(u'space'))+Js(u'(')), var.get(u'that').callprop(u'generateExpression', var.get(u'stmt').get(u'test'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')), Js(u')')]))
                PyJs_anonymous_72_._set_name(u'anonymous')
                var.get(u'withIndent')(PyJs_anonymous_72_)
                var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'maybeBlock', var.get(u'stmt').get(u'body'), (var.get(u'S_TFFT') if (var.get(u'flags')&var.get(u'F_SEMICOLON_OPT')) else var.get(u'S_TFFF'))))
                return var.get(u'result')
            PyJs_WhileStatement_71_._set_name(u'WhileStatement')
            @Js
            def PyJs_WithStatement_73_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'WithStatement':PyJs_WithStatement_73_, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'flags', u'result', u'stmt', u'that'])
                var.put(u'that', var.get(u"this"))
                @Js
                def PyJs_anonymous_74_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.put(u'result', Js([((Js(u'with')+var.get(u'space'))+Js(u'(')), var.get(u'that').callprop(u'generateExpression', var.get(u'stmt').get(u'object'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')), Js(u')')]))
                PyJs_anonymous_74_._set_name(u'anonymous')
                var.get(u'withIndent')(PyJs_anonymous_74_)
                var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'maybeBlock', var.get(u'stmt').get(u'body'), (var.get(u'S_TFFT') if (var.get(u'flags')&var.get(u'F_SEMICOLON_OPT')) else var.get(u'S_TFFF'))))
                return var.get(u'result')
            PyJs_WithStatement_73_._set_name(u'WithStatement')
            PyJs_Object_31_ = Js({u'BlockStatement':PyJs_BlockStatement_32_,u'BreakStatement':PyJs_BreakStatement_34_,u'ContinueStatement':PyJs_ContinueStatement_35_,u'ClassBody':PyJs_ClassBody_36_,u'ClassDeclaration':PyJs_ClassDeclaration_38_,u'DirectiveStatement':PyJs_DirectiveStatement_39_,u'DoWhileStatement':PyJs_DoWhileStatement_40_,u'CatchClause':PyJs_CatchClause_41_,u'DebuggerStatement':PyJs_DebuggerStatement_43_,u'EmptyStatement':PyJs_EmptyStatement_44_,u'ExportDefaultDeclaration':PyJs_ExportDefaultDeclaration_45_,u'ExportNamedDeclaration':PyJs_ExportNamedDeclaration_46_,u'ExportAllDeclaration':PyJs_ExportAllDeclaration_48_,u'ExpressionStatement':PyJs_ExpressionStatement_49_,u'ImportDeclaration':PyJs_ImportDeclaration_51_,u'VariableDeclarator':PyJs_VariableDeclarator_53_,u'VariableDeclaration':PyJs_VariableDeclaration_54_,u'ThrowStatement':PyJs_ThrowStatement_55_,u'TryStatement':PyJs_TryStatement_56_,u'SwitchStatement':PyJs_SwitchStatement_57_,u'SwitchCase':PyJs_SwitchCase_59_,u'IfStatement':PyJs_IfStatement_61_,u'ForStatement':PyJs_ForStatement_63_,u'ForInStatement':PyJs_ForInStatement_65_,u'ForOfStatement':PyJs_ForOfStatement_66_,u'LabeledStatement':PyJs_LabeledStatement_67_,u'Program':PyJs_Program_68_,u'FunctionDeclaration':PyJs_FunctionDeclaration_69_,u'ReturnStatement':PyJs_ReturnStatement_70_,u'WhileStatement':PyJs_WhileStatement_71_,u'WithStatement':PyJs_WithStatement_73_})
            var.get(u'CodeGenerator').put(u'Statement', PyJs_Object_31_)
            var.get(u'merge')(var.get(u'CodeGenerator').get(u'prototype'), var.get(u'CodeGenerator').get(u'Statement'))
            @Js
            def PyJs_SequenceExpression_76_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'SequenceExpression':PyJs_SequenceExpression_76_, u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'iz', u'precedence', u'i', u'expr', u'flags', u'result'])
                pass
                if (var.get(u'Precedence').get(u'Sequence')<var.get(u'precedence')):
                    var.put(u'flags', var.get(u'F_ALLOW_IN'), u'|')
                var.put(u'result', Js([]))
                #for JS loop
                PyJsComma(var.put(u'i', Js(0.0)),var.put(u'iz', var.get(u'expr').get(u'expressions').get(u'length')))
                while (var.get(u'i')<var.get(u'iz')):
                    try:
                        var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'expressions').get(var.get(u'i')), var.get(u'Precedence').get(u'Assignment'), var.get(u'flags')))
                        if ((var.get(u'i')+Js(1.0))<var.get(u'iz')):
                            var.get(u'result').callprop(u'push', (Js(u',')+var.get(u'space')))
                    finally:
                            var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                return var.get(u'parenthesize')(var.get(u'result'), var.get(u'Precedence').get(u'Sequence'), var.get(u'precedence'))
            PyJs_SequenceExpression_76_._set_name(u'SequenceExpression')
            @Js
            def PyJs_AssignmentExpression_77_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'AssignmentExpression':PyJs_AssignmentExpression_77_, u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'expr', u'flags', u'precedence'])
                return var.get(u"this").callprop(u'generateAssignment', var.get(u'expr').get(u'left'), var.get(u'expr').get(u'right'), var.get(u'expr').get(u'operator'), var.get(u'precedence'), var.get(u'flags'))
            PyJs_AssignmentExpression_77_._set_name(u'AssignmentExpression')
            @Js
            def PyJs_ArrowFunctionExpression_78_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'ArrowFunctionExpression':PyJs_ArrowFunctionExpression_78_, u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'expr', u'flags', u'precedence'])
                return var.get(u'parenthesize')(var.get(u"this").callprop(u'generateFunctionBody', var.get(u'expr')), var.get(u'Precedence').get(u'ArrowFunction'), var.get(u'precedence'))
            PyJs_ArrowFunctionExpression_78_._set_name(u'ArrowFunctionExpression')
            @Js
            def PyJs_ConditionalExpression_79_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'ConditionalExpression':PyJs_ConditionalExpression_79_, u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'expr', u'flags', u'precedence'])
                if (var.get(u'Precedence').get(u'Conditional')<var.get(u'precedence')):
                    var.put(u'flags', var.get(u'F_ALLOW_IN'), u'|')
                def PyJs_LONG_80_(var=var):
                    return var.get(u'parenthesize')(Js([var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'test'), var.get(u'Precedence').get(u'LogicalOR'), var.get(u'flags')), ((var.get(u'space')+Js(u'?'))+var.get(u'space')), var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'consequent'), var.get(u'Precedence').get(u'Assignment'), var.get(u'flags')), ((var.get(u'space')+Js(u':'))+var.get(u'space')), var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'alternate'), var.get(u'Precedence').get(u'Assignment'), var.get(u'flags'))]), var.get(u'Precedence').get(u'Conditional'), var.get(u'precedence'))
                return PyJs_LONG_80_()
            PyJs_ConditionalExpression_79_._set_name(u'ConditionalExpression')
            @Js
            def PyJs_LogicalExpression_81_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments, u'LogicalExpression':PyJs_LogicalExpression_81_}, var)
                var.registers([u'expr', u'flags', u'precedence'])
                return var.get(u"this").callprop(u'BinaryExpression', var.get(u'expr'), var.get(u'precedence'), var.get(u'flags'))
            PyJs_LogicalExpression_81_._set_name(u'LogicalExpression')
            @Js
            def PyJs_BinaryExpression_82_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments, u'BinaryExpression':PyJs_BinaryExpression_82_}, var)
                var.registers([u'precedence', u'fragment', u'expr', u'leftSource', u'flags', u'result', u'currentPrecedence'])
                pass
                var.put(u'currentPrecedence', var.get(u'BinaryPrecedence').get(var.get(u'expr').get(u'operator')))
                if (var.get(u'currentPrecedence')<var.get(u'precedence')):
                    var.put(u'flags', var.get(u'F_ALLOW_IN'), u'|')
                var.put(u'fragment', var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'left'), var.get(u'currentPrecedence'), var.get(u'flags')))
                var.put(u'leftSource', var.get(u'fragment').callprop(u'toString'))
                if (PyJsStrictEq(var.get(u'leftSource').callprop(u'charCodeAt', (var.get(u'leftSource').get(u'length')-Js(1.0))),Js(47)) and var.get(u'esutils').get(u'code').callprop(u'isIdentifierPartES5', var.get(u'expr').get(u'operator').callprop(u'charCodeAt', Js(0.0)))):
                    var.put(u'result', Js([var.get(u'fragment'), var.get(u'noEmptySpace')(), var.get(u'expr').get(u'operator')]))
                else:
                    var.put(u'result', var.get(u'join')(var.get(u'fragment'), var.get(u'expr').get(u'operator')))
                var.put(u'fragment', var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'right'), (var.get(u'currentPrecedence')+Js(1.0)), var.get(u'flags')))
                if ((PyJsStrictEq(var.get(u'expr').get(u'operator'),Js(u'/')) and PyJsStrictEq(var.get(u'fragment').callprop(u'toString').callprop(u'charAt', Js(0.0)),Js(u'/'))) or (PyJsStrictEq(var.get(u'expr').get(u'operator').callprop(u'slice', (-Js(1.0))),Js(u'<')) and PyJsStrictEq(var.get(u'fragment').callprop(u'toString').callprop(u'slice', Js(0.0), Js(3.0)),Js(u'!--')))):
                    var.get(u'result').callprop(u'push', var.get(u'noEmptySpace')())
                    var.get(u'result').callprop(u'push', var.get(u'fragment'))
                else:
                    var.put(u'result', var.get(u'join')(var.get(u'result'), var.get(u'fragment')))
                if (PyJsStrictEq(var.get(u'expr').get(u'operator'),Js(u'in')) and (var.get(u'flags')&var.get(u'F_ALLOW_IN')).neg()):
                    return Js([Js(u'('), var.get(u'result'), Js(u')')])
                return var.get(u'parenthesize')(var.get(u'result'), var.get(u'currentPrecedence'), var.get(u'precedence'))
            PyJs_BinaryExpression_82_._set_name(u'BinaryExpression')
            @Js
            def PyJs_CallExpression_83_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'CallExpression':PyJs_CallExpression_83_, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'iz', u'precedence', u'i', u'expr', u'flags', u'result'])
                pass
                var.put(u'result', Js([var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'callee'), var.get(u'Precedence').get(u'Call'), var.get(u'E_TTF'))]))
                var.get(u'result').callprop(u'push', Js(u'('))
                #for JS loop
                PyJsComma(var.put(u'i', Js(0.0)),var.put(u'iz', var.get(u'expr').get(u'arguments').get(u'length')))
                while (var.get(u'i')<var.get(u'iz')):
                    try:
                        var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'arguments').get(var.get(u'i')), var.get(u'Precedence').get(u'Assignment'), var.get(u'E_TTT')))
                        if ((var.get(u'i')+Js(1.0))<var.get(u'iz')):
                            var.get(u'result').callprop(u'push', (Js(u',')+var.get(u'space')))
                    finally:
                            var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                var.get(u'result').callprop(u'push', Js(u')'))
                if (var.get(u'flags')&var.get(u'F_ALLOW_CALL')).neg():
                    return Js([Js(u'('), var.get(u'result'), Js(u')')])
                return var.get(u'parenthesize')(var.get(u'result'), var.get(u'Precedence').get(u'Call'), var.get(u'precedence'))
            PyJs_CallExpression_83_._set_name(u'CallExpression')
            @Js
            def PyJs_NewExpression_84_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments, u'NewExpression':PyJs_NewExpression_84_}, var)
                var.registers([u'iz', u'precedence', u'i', u'expr', u'itemFlags', u'length', u'flags', u'result'])
                pass
                var.put(u'length', var.get(u'expr').get(u'arguments').get(u'length'))
                var.put(u'itemFlags', (var.get(u'E_TFT') if (((var.get(u'flags')&var.get(u'F_ALLOW_UNPARATH_NEW')) and var.get(u'parentheses').neg()) and PyJsStrictEq(var.get(u'length'),Js(0.0))) else var.get(u'E_TFF')))
                var.put(u'result', var.get(u'join')(Js(u'new'), var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'callee'), var.get(u'Precedence').get(u'New'), var.get(u'itemFlags'))))
                if (((var.get(u'flags')&var.get(u'F_ALLOW_UNPARATH_NEW')).neg() or var.get(u'parentheses')) or (var.get(u'length')>Js(0.0))):
                    var.get(u'result').callprop(u'push', Js(u'('))
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(0.0)),var.put(u'iz', var.get(u'length')))
                    while (var.get(u'i')<var.get(u'iz')):
                        try:
                            var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'arguments').get(var.get(u'i')), var.get(u'Precedence').get(u'Assignment'), var.get(u'E_TTT')))
                            if ((var.get(u'i')+Js(1.0))<var.get(u'iz')):
                                var.get(u'result').callprop(u'push', (Js(u',')+var.get(u'space')))
                        finally:
                                var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                    var.get(u'result').callprop(u'push', Js(u')'))
                return var.get(u'parenthesize')(var.get(u'result'), var.get(u'Precedence').get(u'New'), var.get(u'precedence'))
            PyJs_NewExpression_84_._set_name(u'NewExpression')
            @Js
            def PyJs_MemberExpression_85_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'MemberExpression':PyJs_MemberExpression_85_, u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'fragment', u'expr', u'flags', u'result', u'precedence'])
                pass
                var.put(u'result', Js([var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'object'), var.get(u'Precedence').get(u'Call'), (var.get(u'E_TTF') if (var.get(u'flags')&var.get(u'F_ALLOW_CALL')) else var.get(u'E_TFF')))]))
                if var.get(u'expr').get(u'computed'):
                    var.get(u'result').callprop(u'push', Js(u'['))
                    var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'property'), var.get(u'Precedence').get(u'Sequence'), (var.get(u'E_TTT') if (var.get(u'flags')&var.get(u'F_ALLOW_CALL')) else var.get(u'E_TFT'))))
                    var.get(u'result').callprop(u'push', Js(u']'))
                else:
                    if (PyJsStrictEq(var.get(u'expr').get(u'object').get(u'type'),var.get(u'Syntax').get(u'Literal')) and PyJsStrictEq(var.get(u'expr').get(u'object').get(u'value').typeof(),Js(u'number'))):
                        var.put(u'fragment', var.get(u'toSourceNodeWhenNeeded')(var.get(u'result')).callprop(u'toString'))
                        def PyJs_LONG_86_(var=var):
                            return ((((var.get(u'fragment').callprop(u'indexOf', Js(u'.'))<Js(0.0)) and JsRegExp(u'/[eExX]/').callprop(u'test', var.get(u'fragment')).neg()) and var.get(u'esutils').get(u'code').callprop(u'isDecimalDigit', var.get(u'fragment').callprop(u'charCodeAt', (var.get(u'fragment').get(u'length')-Js(1.0))))) and ((var.get(u'fragment').get(u'length')>=Js(2.0)) and PyJsStrictEq(var.get(u'fragment').callprop(u'charCodeAt', Js(0.0)),Js(48.0))).neg())
                        if PyJs_LONG_86_():
                            var.get(u'result').callprop(u'push', Js(u' '))
                    var.get(u'result').callprop(u'push', Js(u'.'))
                    var.get(u'result').callprop(u'push', var.get(u'generateIdentifier')(var.get(u'expr').get(u'property')))
                return var.get(u'parenthesize')(var.get(u'result'), var.get(u'Precedence').get(u'Member'), var.get(u'precedence'))
            PyJs_MemberExpression_85_._set_name(u'MemberExpression')
            @Js
            def PyJs_MetaProperty_87_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'MetaProperty':PyJs_MetaProperty_87_, u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'expr', u'flags', u'result', u'precedence'])
                pass
                var.put(u'result', Js([]))
                var.get(u'result').callprop(u'push', (var.get(u'expr').get(u'meta') if PyJsStrictEq(var.get(u'expr').get(u'meta').typeof(),Js(u'string')) else var.get(u'generateIdentifier')(var.get(u'expr').get(u'meta'))))
                var.get(u'result').callprop(u'push', Js(u'.'))
                var.get(u'result').callprop(u'push', (var.get(u'expr').get(u'property') if PyJsStrictEq(var.get(u'expr').get(u'property').typeof(),Js(u'string')) else var.get(u'generateIdentifier')(var.get(u'expr').get(u'property'))))
                return var.get(u'parenthesize')(var.get(u'result'), var.get(u'Precedence').get(u'Member'), var.get(u'precedence'))
            PyJs_MetaProperty_87_._set_name(u'MetaProperty')
            @Js
            def PyJs_UnaryExpression_88_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'UnaryExpression':PyJs_UnaryExpression_88_, u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'rightCharCode', u'precedence', u'fragment', u'expr', u'leftCharCode', u'leftSource', u'flags', u'result'])
                pass
                var.put(u'fragment', var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'argument'), var.get(u'Precedence').get(u'Unary'), var.get(u'E_TTT')))
                if PyJsStrictEq(var.get(u'space'),Js(u'')):
                    var.put(u'result', var.get(u'join')(var.get(u'expr').get(u'operator'), var.get(u'fragment')))
                else:
                    var.put(u'result', Js([var.get(u'expr').get(u'operator')]))
                    if (var.get(u'expr').get(u'operator').get(u'length')>Js(2.0)):
                        var.put(u'result', var.get(u'join')(var.get(u'result'), var.get(u'fragment')))
                    else:
                        var.put(u'leftSource', var.get(u'toSourceNodeWhenNeeded')(var.get(u'result')).callprop(u'toString'))
                        var.put(u'leftCharCode', var.get(u'leftSource').callprop(u'charCodeAt', (var.get(u'leftSource').get(u'length')-Js(1.0))))
                        var.put(u'rightCharCode', var.get(u'fragment').callprop(u'toString').callprop(u'charCodeAt', Js(0.0)))
                        if (((PyJsStrictEq(var.get(u'leftCharCode'),Js(43)) or PyJsStrictEq(var.get(u'leftCharCode'),Js(45))) and PyJsStrictEq(var.get(u'leftCharCode'),var.get(u'rightCharCode'))) or (var.get(u'esutils').get(u'code').callprop(u'isIdentifierPartES5', var.get(u'leftCharCode')) and var.get(u'esutils').get(u'code').callprop(u'isIdentifierPartES5', var.get(u'rightCharCode')))):
                            var.get(u'result').callprop(u'push', var.get(u'noEmptySpace')())
                            var.get(u'result').callprop(u'push', var.get(u'fragment'))
                        else:
                            var.get(u'result').callprop(u'push', var.get(u'fragment'))
                return var.get(u'parenthesize')(var.get(u'result'), var.get(u'Precedence').get(u'Unary'), var.get(u'precedence'))
            PyJs_UnaryExpression_88_._set_name(u'UnaryExpression')
            @Js
            def PyJs_YieldExpression_89_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'YieldExpression':PyJs_YieldExpression_89_, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'expr', u'flags', u'result', u'precedence'])
                pass
                if var.get(u'expr').get(u'delegate'):
                    var.put(u'result', Js(u'yield*'))
                else:
                    var.put(u'result', Js(u'yield'))
                if var.get(u'expr').get(u'argument'):
                    var.put(u'result', var.get(u'join')(var.get(u'result'), var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'argument'), var.get(u'Precedence').get(u'Yield'), var.get(u'E_TTT'))))
                return var.get(u'parenthesize')(var.get(u'result'), var.get(u'Precedence').get(u'Yield'), var.get(u'precedence'))
            PyJs_YieldExpression_89_._set_name(u'YieldExpression')
            @Js
            def PyJs_AwaitExpression_90_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'AwaitExpression':PyJs_AwaitExpression_90_, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'expr', u'flags', u'result', u'precedence'])
                var.put(u'result', var.get(u'join')((Js(u'await*') if var.get(u'expr').get(u'all') else Js(u'await')), var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'argument'), var.get(u'Precedence').get(u'Await'), var.get(u'E_TTT'))))
                return var.get(u'parenthesize')(var.get(u'result'), var.get(u'Precedence').get(u'Await'), var.get(u'precedence'))
            PyJs_AwaitExpression_90_._set_name(u'AwaitExpression')
            @Js
            def PyJs_UpdateExpression_91_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'UpdateExpression':PyJs_UpdateExpression_91_, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'expr', u'flags', u'precedence'])
                if var.get(u'expr').get(u'prefix'):
                    return var.get(u'parenthesize')(Js([var.get(u'expr').get(u'operator'), var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'argument'), var.get(u'Precedence').get(u'Unary'), var.get(u'E_TTT'))]), var.get(u'Precedence').get(u'Unary'), var.get(u'precedence'))
                return var.get(u'parenthesize')(Js([var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'argument'), var.get(u'Precedence').get(u'Postfix'), var.get(u'E_TTT')), var.get(u'expr').get(u'operator')]), var.get(u'Precedence').get(u'Postfix'), var.get(u'precedence'))
            PyJs_UpdateExpression_91_._set_name(u'UpdateExpression')
            @Js
            def PyJs_FunctionExpression_92_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'FunctionExpression':PyJs_FunctionExpression_92_, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'expr', u'flags', u'result', u'precedence'])
                var.put(u'result', Js([var.get(u'generateAsyncPrefix')(var.get(u'expr'), Js(True)), Js(u'function')]))
                if var.get(u'expr').get(u'id'):
                    var.get(u'result').callprop(u'push', (var.get(u'generateStarSuffix')(var.get(u'expr')) or var.get(u'noEmptySpace')()))
                    var.get(u'result').callprop(u'push', var.get(u'generateIdentifier')(var.get(u'expr').get(u'id')))
                else:
                    var.get(u'result').callprop(u'push', (var.get(u'generateStarSuffix')(var.get(u'expr')) or var.get(u'space')))
                var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'generateFunctionBody', var.get(u'expr')))
                return var.get(u'result')
            PyJs_FunctionExpression_92_._set_name(u'FunctionExpression')
            @Js
            def PyJs_ArrayPattern_93_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'ArrayPattern':PyJs_ArrayPattern_93_, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'expr', u'flags', u'precedence'])
                return var.get(u"this").callprop(u'ArrayExpression', var.get(u'expr'), var.get(u'precedence'), var.get(u'flags'), Js(True))
            PyJs_ArrayPattern_93_._set_name(u'ArrayPattern')
            @Js
            def PyJs_ArrayExpression_94_(expr, precedence, flags, isPattern, this, arguments, var=var):
                var = Scope({u'flags':flags, u'arguments':arguments, u'precedence':precedence, u'this':this, u'expr':expr, u'ArrayExpression':PyJs_ArrayExpression_94_, u'isPattern':isPattern}, var)
                var.registers([u'precedence', u'that', u'expr', u'flags', u'result', u'multiline', u'isPattern'])
                var.put(u'that', var.get(u"this"))
                if var.get(u'expr').get(u'elements').get(u'length').neg():
                    return Js(u'[]')
                var.put(u'multiline', (Js(False) if var.get(u'isPattern') else (var.get(u'expr').get(u'elements').get(u'length')>Js(1.0))))
                var.put(u'result', Js([Js(u'['), (var.get(u'newline') if var.get(u'multiline') else Js(u''))]))
                @Js
                def PyJs_anonymous_95_(indent, this, arguments, var=var):
                    var = Scope({u'this':this, u'indent':indent, u'arguments':arguments}, var)
                    var.registers([u'i', u'iz', u'indent'])
                    pass
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(0.0)),var.put(u'iz', var.get(u'expr').get(u'elements').get(u'length')))
                    while (var.get(u'i')<var.get(u'iz')):
                        try:
                            if var.get(u'expr').get(u'elements').get(var.get(u'i')).neg():
                                if var.get(u'multiline'):
                                    var.get(u'result').callprop(u'push', var.get(u'indent'))
                                if PyJsStrictEq((var.get(u'i')+Js(1.0)),var.get(u'iz')):
                                    var.get(u'result').callprop(u'push', Js(u','))
                            else:
                                var.get(u'result').callprop(u'push', (var.get(u'indent') if var.get(u'multiline') else Js(u'')))
                                var.get(u'result').callprop(u'push', var.get(u'that').callprop(u'generateExpression', var.get(u'expr').get(u'elements').get(var.get(u'i')), var.get(u'Precedence').get(u'Assignment'), var.get(u'E_TTT')))
                            if ((var.get(u'i')+Js(1.0))<var.get(u'iz')):
                                var.get(u'result').callprop(u'push', (Js(u',')+(var.get(u'newline') if var.get(u'multiline') else var.get(u'space'))))
                        finally:
                                var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                PyJs_anonymous_95_._set_name(u'anonymous')
                var.get(u'withIndent')(PyJs_anonymous_95_)
                if (var.get(u'multiline') and var.get(u'endsWithLineTerminator')(var.get(u'toSourceNodeWhenNeeded')(var.get(u'result')).callprop(u'toString')).neg()):
                    var.get(u'result').callprop(u'push', var.get(u'newline'))
                var.get(u'result').callprop(u'push', (var.get(u'base') if var.get(u'multiline') else Js(u'')))
                var.get(u'result').callprop(u'push', Js(u']'))
                return var.get(u'result')
            PyJs_ArrayExpression_94_._set_name(u'ArrayExpression')
            @Js
            def PyJs_RestElement_96_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments, u'RestElement':PyJs_RestElement_96_}, var)
                var.registers([u'expr', u'flags', u'precedence'])
                return (Js(u'...')+var.get(u"this").callprop(u'generatePattern', var.get(u'expr').get(u'argument')))
            PyJs_RestElement_96_._set_name(u'RestElement')
            @Js
            def PyJs_ClassExpression_97_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'ClassExpression':PyJs_ClassExpression_97_, u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'fragment', u'expr', u'flags', u'result', u'precedence'])
                pass
                var.put(u'result', Js([Js(u'class')]))
                if var.get(u'expr').get(u'id'):
                    var.put(u'result', var.get(u'join')(var.get(u'result'), var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'id'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT'))))
                if var.get(u'expr').get(u'superClass'):
                    var.put(u'fragment', var.get(u'join')(Js(u'extends'), var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'superClass'), var.get(u'Precedence').get(u'Assignment'), var.get(u'E_TTT'))))
                    var.put(u'result', var.get(u'join')(var.get(u'result'), var.get(u'fragment')))
                var.get(u'result').callprop(u'push', var.get(u'space'))
                var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'generateStatement', var.get(u'expr').get(u'body'), var.get(u'S_TFFT')))
                return var.get(u'result')
            PyJs_ClassExpression_97_._set_name(u'ClassExpression')
            @Js
            def PyJs_MethodDefinition_98_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'MethodDefinition':PyJs_MethodDefinition_98_, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'fragment', u'expr', u'flags', u'result', u'precedence'])
                pass
                if var.get(u'expr').get(u'static'):
                    var.put(u'result', Js([(Js(u'static')+var.get(u'space'))]))
                else:
                    var.put(u'result', Js([]))
                if (PyJsStrictEq(var.get(u'expr').get(u'kind'),Js(u'get')) or PyJsStrictEq(var.get(u'expr').get(u'kind'),Js(u'set'))):
                    var.put(u'fragment', Js([var.get(u'join')(var.get(u'expr').get(u'kind'), var.get(u"this").callprop(u'generatePropertyKey', var.get(u'expr').get(u'key'), var.get(u'expr').get(u'computed'))), var.get(u"this").callprop(u'generateFunctionBody', var.get(u'expr').get(u'value'))]))
                else:
                    var.put(u'fragment', Js([var.get(u'generateMethodPrefix')(var.get(u'expr')), var.get(u"this").callprop(u'generatePropertyKey', var.get(u'expr').get(u'key'), var.get(u'expr').get(u'computed')), var.get(u"this").callprop(u'generateFunctionBody', var.get(u'expr').get(u'value'))]))
                return var.get(u'join')(var.get(u'result'), var.get(u'fragment'))
            PyJs_MethodDefinition_98_._set_name(u'MethodDefinition')
            @Js
            def PyJs_Property_99_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments, u'Property':PyJs_Property_99_}, var)
                var.registers([u'expr', u'flags', u'precedence'])
                if (PyJsStrictEq(var.get(u'expr').get(u'kind'),Js(u'get')) or PyJsStrictEq(var.get(u'expr').get(u'kind'),Js(u'set'))):
                    return Js([var.get(u'expr').get(u'kind'), var.get(u'noEmptySpace')(), var.get(u"this").callprop(u'generatePropertyKey', var.get(u'expr').get(u'key'), var.get(u'expr').get(u'computed')), var.get(u"this").callprop(u'generateFunctionBody', var.get(u'expr').get(u'value'))])
                if var.get(u'expr').get(u'shorthand'):
                    if PyJsStrictEq(var.get(u'expr').get(u'value').get(u'type'),Js(u'AssignmentPattern')):
                        return var.get(u"this").callprop(u'AssignmentPattern', var.get(u'expr').get(u'value'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT'))
                    return var.get(u"this").callprop(u'generatePropertyKey', var.get(u'expr').get(u'key'), var.get(u'expr').get(u'computed'))
                if var.get(u'expr').get(u'method'):
                    return Js([var.get(u'generateMethodPrefix')(var.get(u'expr')), var.get(u"this").callprop(u'generatePropertyKey', var.get(u'expr').get(u'key'), var.get(u'expr').get(u'computed')), var.get(u"this").callprop(u'generateFunctionBody', var.get(u'expr').get(u'value'))])
                return Js([var.get(u"this").callprop(u'generatePropertyKey', var.get(u'expr').get(u'key'), var.get(u'expr').get(u'computed')), (Js(u':')+var.get(u'space')), var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'value'), var.get(u'Precedence').get(u'Assignment'), var.get(u'E_TTT'))])
            PyJs_Property_99_._set_name(u'Property')
            @Js
            def PyJs_ObjectExpression_100_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'ObjectExpression':PyJs_ObjectExpression_100_, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'precedence', u'that', u'fragment', u'expr', u'multiline', u'result', u'flags'])
                var.put(u'that', var.get(u"this"))
                if var.get(u'expr').get(u'properties').get(u'length').neg():
                    return Js(u'{}')
                var.put(u'multiline', (var.get(u'expr').get(u'properties').get(u'length')>Js(1.0)))
                @Js
                def PyJs_anonymous_101_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.put(u'fragment', var.get(u'that').callprop(u'generateExpression', var.get(u'expr').get(u'properties').get(u'0'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')))
                PyJs_anonymous_101_._set_name(u'anonymous')
                var.get(u'withIndent')(PyJs_anonymous_101_)
                if var.get(u'multiline').neg():
                    if var.get(u'hasLineTerminator')(var.get(u'toSourceNodeWhenNeeded')(var.get(u'fragment')).callprop(u'toString')).neg():
                        return Js([Js(u'{'), var.get(u'space'), var.get(u'fragment'), var.get(u'space'), Js(u'}')])
                @Js
                def PyJs_anonymous_102_(indent, this, arguments, var=var):
                    var = Scope({u'this':this, u'indent':indent, u'arguments':arguments}, var)
                    var.registers([u'i', u'iz', u'indent'])
                    pass
                    var.put(u'result', Js([Js(u'{'), var.get(u'newline'), var.get(u'indent'), var.get(u'fragment')]))
                    if var.get(u'multiline'):
                        var.get(u'result').callprop(u'push', (Js(u',')+var.get(u'newline')))
                        #for JS loop
                        PyJsComma(var.put(u'i', Js(1.0)),var.put(u'iz', var.get(u'expr').get(u'properties').get(u'length')))
                        while (var.get(u'i')<var.get(u'iz')):
                            try:
                                var.get(u'result').callprop(u'push', var.get(u'indent'))
                                var.get(u'result').callprop(u'push', var.get(u'that').callprop(u'generateExpression', var.get(u'expr').get(u'properties').get(var.get(u'i')), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')))
                                if ((var.get(u'i')+Js(1.0))<var.get(u'iz')):
                                    var.get(u'result').callprop(u'push', (Js(u',')+var.get(u'newline')))
                            finally:
                                    var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                PyJs_anonymous_102_._set_name(u'anonymous')
                var.get(u'withIndent')(PyJs_anonymous_102_)
                if var.get(u'endsWithLineTerminator')(var.get(u'toSourceNodeWhenNeeded')(var.get(u'result')).callprop(u'toString')).neg():
                    var.get(u'result').callprop(u'push', var.get(u'newline'))
                var.get(u'result').callprop(u'push', var.get(u'base'))
                var.get(u'result').callprop(u'push', Js(u'}'))
                return var.get(u'result')
            PyJs_ObjectExpression_100_._set_name(u'ObjectExpression')
            @Js
            def PyJs_AssignmentPattern_103_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments, u'AssignmentPattern':PyJs_AssignmentPattern_103_}, var)
                var.registers([u'expr', u'flags', u'precedence'])
                return var.get(u"this").callprop(u'generateAssignment', var.get(u'expr').get(u'left'), var.get(u'expr').get(u'right'), Js(u'='), var.get(u'precedence'), var.get(u'flags'))
            PyJs_AssignmentPattern_103_._set_name(u'AssignmentPattern')
            @Js
            def PyJs_ObjectPattern_104_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'ObjectPattern':PyJs_ObjectPattern_104_, u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'iz', u'precedence', u'that', u'i', u'expr', u'multiline', u'result', u'flags', u'property'])
                var.put(u'that', var.get(u"this"))
                if var.get(u'expr').get(u'properties').get(u'length').neg():
                    return Js(u'{}')
                var.put(u'multiline', Js(False))
                if PyJsStrictEq(var.get(u'expr').get(u'properties').get(u'length'),Js(1.0)):
                    var.put(u'property', var.get(u'expr').get(u'properties').get(u'0'))
                    if PyJsStrictNeq(var.get(u'property').get(u'value').get(u'type'),var.get(u'Syntax').get(u'Identifier')):
                        var.put(u'multiline', Js(True))
                else:
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(0.0)),var.put(u'iz', var.get(u'expr').get(u'properties').get(u'length')))
                    while (var.get(u'i')<var.get(u'iz')):
                        try:
                            var.put(u'property', var.get(u'expr').get(u'properties').get(var.get(u'i')))
                            if var.get(u'property').get(u'shorthand').neg():
                                var.put(u'multiline', Js(True))
                                break
                        finally:
                                var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                var.put(u'result', Js([Js(u'{'), (var.get(u'newline') if var.get(u'multiline') else Js(u''))]))
                @Js
                def PyJs_anonymous_105_(indent, this, arguments, var=var):
                    var = Scope({u'this':this, u'indent':indent, u'arguments':arguments}, var)
                    var.registers([u'i', u'iz', u'indent'])
                    pass
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(0.0)),var.put(u'iz', var.get(u'expr').get(u'properties').get(u'length')))
                    while (var.get(u'i')<var.get(u'iz')):
                        try:
                            var.get(u'result').callprop(u'push', (var.get(u'indent') if var.get(u'multiline') else Js(u'')))
                            var.get(u'result').callprop(u'push', var.get(u'that').callprop(u'generateExpression', var.get(u'expr').get(u'properties').get(var.get(u'i')), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')))
                            if ((var.get(u'i')+Js(1.0))<var.get(u'iz')):
                                var.get(u'result').callprop(u'push', (Js(u',')+(var.get(u'newline') if var.get(u'multiline') else var.get(u'space'))))
                        finally:
                                var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                PyJs_anonymous_105_._set_name(u'anonymous')
                var.get(u'withIndent')(PyJs_anonymous_105_)
                if (var.get(u'multiline') and var.get(u'endsWithLineTerminator')(var.get(u'toSourceNodeWhenNeeded')(var.get(u'result')).callprop(u'toString')).neg()):
                    var.get(u'result').callprop(u'push', var.get(u'newline'))
                var.get(u'result').callprop(u'push', (var.get(u'base') if var.get(u'multiline') else Js(u'')))
                var.get(u'result').callprop(u'push', Js(u'}'))
                return var.get(u'result')
            PyJs_ObjectPattern_104_._set_name(u'ObjectPattern')
            @Js
            def PyJs_ThisExpression_106_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments, u'ThisExpression':PyJs_ThisExpression_106_}, var)
                var.registers([u'expr', u'flags', u'precedence'])
                return Js(u'this')
            PyJs_ThisExpression_106_._set_name(u'ThisExpression')
            @Js
            def PyJs_Super_107_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments, u'Super':PyJs_Super_107_}, var)
                var.registers([u'expr', u'flags', u'precedence'])
                return Js(u'super')
            PyJs_Super_107_._set_name(u'Super')
            @Js
            def PyJs_Identifier_108_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments, u'Identifier':PyJs_Identifier_108_}, var)
                var.registers([u'expr', u'flags', u'precedence'])
                return var.get(u'generateIdentifier')(var.get(u'expr'))
            PyJs_Identifier_108_._set_name(u'Identifier')
            @Js
            def PyJs_ImportDefaultSpecifier_109_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'ImportDefaultSpecifier':PyJs_ImportDefaultSpecifier_109_, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'expr', u'flags', u'precedence'])
                return var.get(u'generateIdentifier')((var.get(u'expr').get(u'id') or var.get(u'expr').get(u'local')))
            PyJs_ImportDefaultSpecifier_109_._set_name(u'ImportDefaultSpecifier')
            @Js
            def PyJs_ImportNamespaceSpecifier_110_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments, u'ImportNamespaceSpecifier':PyJs_ImportNamespaceSpecifier_110_}, var)
                var.registers([u'expr', u'flags', u'result', u'precedence', u'id'])
                var.put(u'result', Js([Js(u'*')]))
                var.put(u'id', (var.get(u'expr').get(u'id') or var.get(u'expr').get(u'local')))
                if var.get(u'id'):
                    var.get(u'result').callprop(u'push', (((var.get(u'space')+Js(u'as'))+var.get(u'noEmptySpace')())+var.get(u'generateIdentifier')(var.get(u'id'))))
                return var.get(u'result')
            PyJs_ImportNamespaceSpecifier_110_._set_name(u'ImportNamespaceSpecifier')
            @Js
            def PyJs_ImportSpecifier_111_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'ImportSpecifier':PyJs_ImportSpecifier_111_, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'imported', u'precedence', u'expr', u'flags', u'result', u'local'])
                var.put(u'imported', var.get(u'expr').get(u'imported'))
                var.put(u'result', Js([var.get(u'imported').get(u'name')]))
                var.put(u'local', var.get(u'expr').get(u'local'))
                if (var.get(u'local') and PyJsStrictNeq(var.get(u'local').get(u'name'),var.get(u'imported').get(u'name'))):
                    var.get(u'result').callprop(u'push', (((var.get(u'noEmptySpace')()+Js(u'as'))+var.get(u'noEmptySpace')())+var.get(u'generateIdentifier')(var.get(u'local'))))
                return var.get(u'result')
            PyJs_ImportSpecifier_111_._set_name(u'ImportSpecifier')
            @Js
            def PyJs_ExportSpecifier_112_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments, u'ExportSpecifier':PyJs_ExportSpecifier_112_}, var)
                var.registers([u'precedence', u'expr', u'flags', u'result', u'local', u'exported'])
                var.put(u'local', var.get(u'expr').get(u'local'))
                var.put(u'result', Js([var.get(u'local').get(u'name')]))
                var.put(u'exported', var.get(u'expr').get(u'exported'))
                if (var.get(u'exported') and PyJsStrictNeq(var.get(u'exported').get(u'name'),var.get(u'local').get(u'name'))):
                    var.get(u'result').callprop(u'push', (((var.get(u'noEmptySpace')()+Js(u'as'))+var.get(u'noEmptySpace')())+var.get(u'generateIdentifier')(var.get(u'exported'))))
                return var.get(u'result')
            PyJs_ExportSpecifier_112_._set_name(u'ExportSpecifier')
            @Js
            def PyJs_Literal_113_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'Literal':PyJs_Literal_113_, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'raw', u'flags', u'precedence', u'expr'])
                pass
                if ((var.get(u'expr').callprop(u'hasOwnProperty', Js(u'raw')) and var.get(u'parse')) and var.get(u'extra').get(u'raw')):
                    try:
                        var.put(u'raw', var.get(u'parse')(var.get(u'expr').get(u'raw')).get(u'body').get(u'0').get(u'expression'))
                        if PyJsStrictEq(var.get(u'raw').get(u'type'),var.get(u'Syntax').get(u'Literal')):
                            if PyJsStrictEq(var.get(u'raw').get(u'value'),var.get(u'expr').get(u'value')):
                                return var.get(u'expr').get(u'raw')
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_63901648 = var.own.get(u'e')
                        var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                        try:
                            pass
                        finally:
                            if PyJsHolder_65_63901648 is not None:
                                var.own[u'e'] = PyJsHolder_65_63901648
                            else:
                                del var.own[u'e']
                            del PyJsHolder_65_63901648
                if PyJsStrictEq(var.get(u'expr').get(u'value'),var.get(u"null")):
                    return Js(u'null')
                if PyJsStrictEq(var.get(u'expr').get(u'value').typeof(),Js(u'string')):
                    return var.get(u'escapeString')(var.get(u'expr').get(u'value'))
                if PyJsStrictEq(var.get(u'expr').get(u'value').typeof(),Js(u'number')):
                    return var.get(u'generateNumber')(var.get(u'expr').get(u'value'))
                if PyJsStrictEq(var.get(u'expr').get(u'value').typeof(),Js(u'boolean')):
                    return (Js(u'true') if var.get(u'expr').get(u'value') else Js(u'false'))
                if var.get(u'expr').get(u'regex'):
                    return (((Js(u'/')+var.get(u'expr').get(u'regex').get(u'pattern'))+Js(u'/'))+var.get(u'expr').get(u'regex').get(u'flags'))
                return var.get(u'generateRegExp')(var.get(u'expr').get(u'value'))
            PyJs_Literal_113_._set_name(u'Literal')
            @Js
            def PyJs_GeneratorExpression_114_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'GeneratorExpression':PyJs_GeneratorExpression_114_, u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'expr', u'flags', u'precedence'])
                return var.get(u"this").callprop(u'ComprehensionExpression', var.get(u'expr'), var.get(u'precedence'), var.get(u'flags'))
            PyJs_GeneratorExpression_114_._set_name(u'GeneratorExpression')
            @Js
            def PyJs_ComprehensionExpression_115_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments, u'ComprehensionExpression':PyJs_ComprehensionExpression_115_}, var)
                var.registers([u'iz', u'precedence', u'that', u'i', u'expr', u'fragment', u'flags', u'result'])
                var.put(u'that', var.get(u"this"))
                var.put(u'result', (Js([Js(u'(')]) if PyJsStrictEq(var.get(u'expr').get(u'type'),var.get(u'Syntax').get(u'GeneratorExpression')) else Js([Js(u'[')])))
                if var.get(u'extra').get(u'moz').get(u'comprehensionExpressionStartsWithAssignment'):
                    var.put(u'fragment', var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'body'), var.get(u'Precedence').get(u'Assignment'), var.get(u'E_TTT')))
                    var.get(u'result').callprop(u'push', var.get(u'fragment'))
                if var.get(u'expr').get(u'blocks'):
                    @Js
                    def PyJs_anonymous_116_(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        #for JS loop
                        PyJsComma(var.put(u'i', Js(0.0)),var.put(u'iz', var.get(u'expr').get(u'blocks').get(u'length')))
                        while (var.get(u'i')<var.get(u'iz')):
                            try:
                                var.put(u'fragment', var.get(u'that').callprop(u'generateExpression', var.get(u'expr').get(u'blocks').get(var.get(u'i')), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')))
                                if ((var.get(u'i')>Js(0.0)) or var.get(u'extra').get(u'moz').get(u'comprehensionExpressionStartsWithAssignment')):
                                    var.put(u'result', var.get(u'join')(var.get(u'result'), var.get(u'fragment')))
                                else:
                                    var.get(u'result').callprop(u'push', var.get(u'fragment'))
                            finally:
                                    var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                    PyJs_anonymous_116_._set_name(u'anonymous')
                    var.get(u'withIndent')(PyJs_anonymous_116_)
                if var.get(u'expr').get(u'filter'):
                    var.put(u'result', var.get(u'join')(var.get(u'result'), (Js(u'if')+var.get(u'space'))))
                    var.put(u'fragment', var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'filter'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')))
                    var.put(u'result', var.get(u'join')(var.get(u'result'), Js([Js(u'('), var.get(u'fragment'), Js(u')')])))
                if var.get(u'extra').get(u'moz').get(u'comprehensionExpressionStartsWithAssignment').neg():
                    var.put(u'fragment', var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'body'), var.get(u'Precedence').get(u'Assignment'), var.get(u'E_TTT')))
                    var.put(u'result', var.get(u'join')(var.get(u'result'), var.get(u'fragment')))
                var.get(u'result').callprop(u'push', (Js(u')') if PyJsStrictEq(var.get(u'expr').get(u'type'),var.get(u'Syntax').get(u'GeneratorExpression')) else Js(u']')))
                return var.get(u'result')
            PyJs_ComprehensionExpression_115_._set_name(u'ComprehensionExpression')
            @Js
            def PyJs_ComprehensionBlock_117_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'ComprehensionBlock':PyJs_ComprehensionBlock_117_, u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'fragment', u'expr', u'flags', u'precedence'])
                pass
                if PyJsStrictEq(var.get(u'expr').get(u'left').get(u'type'),var.get(u'Syntax').get(u'VariableDeclaration')):
                    var.put(u'fragment', Js([var.get(u'expr').get(u'left').get(u'kind'), var.get(u'noEmptySpace')(), var.get(u"this").callprop(u'generateStatement', var.get(u'expr').get(u'left').get(u'declarations').get(u'0'), var.get(u'S_FFFF'))]))
                else:
                    var.put(u'fragment', var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'left'), var.get(u'Precedence').get(u'Call'), var.get(u'E_TTT')))
                var.put(u'fragment', var.get(u'join')(var.get(u'fragment'), (Js(u'of') if var.get(u'expr').get(u'of') else Js(u'in'))))
                var.put(u'fragment', var.get(u'join')(var.get(u'fragment'), var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'right'), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT'))))
                return Js([((Js(u'for')+var.get(u'space'))+Js(u'(')), var.get(u'fragment'), Js(u')')])
            PyJs_ComprehensionBlock_117_._set_name(u'ComprehensionBlock')
            @Js
            def PyJs_SpreadElement_118_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'SpreadElement':PyJs_SpreadElement_118_, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'expr', u'flags', u'precedence'])
                return Js([Js(u'...'), var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'argument'), var.get(u'Precedence').get(u'Assignment'), var.get(u'E_TTT'))])
            PyJs_SpreadElement_118_._set_name(u'SpreadElement')
            @Js
            def PyJs_TaggedTemplateExpression_119_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'TaggedTemplateExpression':PyJs_TaggedTemplateExpression_119_, u'arguments':arguments, u'flags':flags}, var)
                var.registers([u'expr', u'itemFlags', u'flags', u'result', u'precedence'])
                var.put(u'itemFlags', var.get(u'E_TTF'))
                if (var.get(u'flags')&var.get(u'F_ALLOW_CALL')).neg():
                    var.put(u'itemFlags', var.get(u'E_TFF'))
                var.put(u'result', Js([var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'tag'), var.get(u'Precedence').get(u'Call'), var.get(u'itemFlags')), var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'quasi'), var.get(u'Precedence').get(u'Primary'), var.get(u'E_FFT'))]))
                return var.get(u'parenthesize')(var.get(u'result'), var.get(u'Precedence').get(u'TaggedTemplate'), var.get(u'precedence'))
            PyJs_TaggedTemplateExpression_119_._set_name(u'TaggedTemplateExpression')
            @Js
            def PyJs_TemplateElement_120_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments, u'TemplateElement':PyJs_TemplateElement_120_}, var)
                var.registers([u'expr', u'flags', u'precedence'])
                return var.get(u'expr').get(u'value').get(u'raw')
            PyJs_TemplateElement_120_._set_name(u'TemplateElement')
            @Js
            def PyJs_TemplateLiteral_121_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments, u'TemplateLiteral':PyJs_TemplateLiteral_121_}, var)
                var.registers([u'iz', u'precedence', u'i', u'expr', u'flags', u'result'])
                pass
                var.put(u'result', Js([Js(u'`')]))
                #for JS loop
                PyJsComma(var.put(u'i', Js(0.0)),var.put(u'iz', var.get(u'expr').get(u'quasis').get(u'length')))
                while (var.get(u'i')<var.get(u'iz')):
                    try:
                        var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'quasis').get(var.get(u'i')), var.get(u'Precedence').get(u'Primary'), var.get(u'E_TTT')))
                        if ((var.get(u'i')+Js(1.0))<var.get(u'iz')):
                            var.get(u'result').callprop(u'push', (Js(u'${')+var.get(u'space')))
                            var.get(u'result').callprop(u'push', var.get(u"this").callprop(u'generateExpression', var.get(u'expr').get(u'expressions').get(var.get(u'i')), var.get(u'Precedence').get(u'Sequence'), var.get(u'E_TTT')))
                            var.get(u'result').callprop(u'push', (var.get(u'space')+Js(u'}')))
                    finally:
                            var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                var.get(u'result').callprop(u'push', Js(u'`'))
                return var.get(u'result')
            PyJs_TemplateLiteral_121_._set_name(u'TemplateLiteral')
            @Js
            def PyJs_ModuleSpecifier_122_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'precedence':precedence, u'this':this, u'expr':expr, u'ModuleSpecifier':PyJs_ModuleSpecifier_122_, u'flags':flags, u'arguments':arguments}, var)
                var.registers([u'expr', u'flags', u'precedence'])
                return var.get(u"this").callprop(u'Literal', var.get(u'expr'), var.get(u'precedence'), var.get(u'flags'))
            PyJs_ModuleSpecifier_122_._set_name(u'ModuleSpecifier')
            PyJs_Object_75_ = Js({u'SequenceExpression':PyJs_SequenceExpression_76_,u'AssignmentExpression':PyJs_AssignmentExpression_77_,u'ArrowFunctionExpression':PyJs_ArrowFunctionExpression_78_,u'ConditionalExpression':PyJs_ConditionalExpression_79_,u'LogicalExpression':PyJs_LogicalExpression_81_,u'BinaryExpression':PyJs_BinaryExpression_82_,u'CallExpression':PyJs_CallExpression_83_,u'NewExpression':PyJs_NewExpression_84_,u'MemberExpression':PyJs_MemberExpression_85_,u'MetaProperty':PyJs_MetaProperty_87_,u'UnaryExpression':PyJs_UnaryExpression_88_,u'YieldExpression':PyJs_YieldExpression_89_,u'AwaitExpression':PyJs_AwaitExpression_90_,u'UpdateExpression':PyJs_UpdateExpression_91_,u'FunctionExpression':PyJs_FunctionExpression_92_,u'ArrayPattern':PyJs_ArrayPattern_93_,u'ArrayExpression':PyJs_ArrayExpression_94_,u'RestElement':PyJs_RestElement_96_,u'ClassExpression':PyJs_ClassExpression_97_,u'MethodDefinition':PyJs_MethodDefinition_98_,u'Property':PyJs_Property_99_,u'ObjectExpression':PyJs_ObjectExpression_100_,u'AssignmentPattern':PyJs_AssignmentPattern_103_,u'ObjectPattern':PyJs_ObjectPattern_104_,u'ThisExpression':PyJs_ThisExpression_106_,u'Super':PyJs_Super_107_,u'Identifier':PyJs_Identifier_108_,u'ImportDefaultSpecifier':PyJs_ImportDefaultSpecifier_109_,u'ImportNamespaceSpecifier':PyJs_ImportNamespaceSpecifier_110_,u'ImportSpecifier':PyJs_ImportSpecifier_111_,u'ExportSpecifier':PyJs_ExportSpecifier_112_,u'Literal':PyJs_Literal_113_,u'GeneratorExpression':PyJs_GeneratorExpression_114_,u'ComprehensionExpression':PyJs_ComprehensionExpression_115_,u'ComprehensionBlock':PyJs_ComprehensionBlock_117_,u'SpreadElement':PyJs_SpreadElement_118_,u'TaggedTemplateExpression':PyJs_TaggedTemplateExpression_119_,u'TemplateElement':PyJs_TemplateElement_120_,u'TemplateLiteral':PyJs_TemplateLiteral_121_,u'ModuleSpecifier':PyJs_ModuleSpecifier_122_})
            var.get(u'CodeGenerator').put(u'Expression', PyJs_Object_75_)
            var.get(u'merge')(var.get(u'CodeGenerator').get(u'prototype'), var.get(u'CodeGenerator').get(u'Expression'))
            @Js
            def PyJs_anonymous_123_(expr, precedence, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'expr':expr, u'flags':flags, u'arguments':arguments, u'precedence':precedence}, var)
                var.registers([u'expr', u'type', u'result', u'precedence', u'flags'])
                pass
                var.put(u'type', (var.get(u'expr').get(u'type') or var.get(u'Syntax').get(u'Property')))
                if (var.get(u'extra').get(u'verbatim') and var.get(u'expr').callprop(u'hasOwnProperty', var.get(u'extra').get(u'verbatim'))):
                    return var.get(u'generateVerbatim')(var.get(u'expr'), var.get(u'precedence'))
                var.put(u'result', var.get(u"this").callprop(var.get(u'type'), var.get(u'expr'), var.get(u'precedence'), var.get(u'flags')))
                if var.get(u'extra').get(u'comment'):
                    var.put(u'result', var.get(u'addComments')(var.get(u'expr'), var.get(u'result')))
                return var.get(u'toSourceNodeWhenNeeded')(var.get(u'result'), var.get(u'expr'))
            PyJs_anonymous_123_._set_name(u'anonymous')
            var.get(u'CodeGenerator').get(u'prototype').put(u'generateExpression', PyJs_anonymous_123_)
            @Js
            def PyJs_anonymous_124_(stmt, flags, this, arguments, var=var):
                var = Scope({u'this':this, u'flags':flags, u'arguments':arguments, u'stmt':stmt}, var)
                var.registers([u'fragment', u'flags', u'result', u'stmt'])
                pass
                var.put(u'result', var.get(u"this").callprop(var.get(u'stmt').get(u'type'), var.get(u'stmt'), var.get(u'flags')))
                if var.get(u'extra').get(u'comment'):
                    var.put(u'result', var.get(u'addComments')(var.get(u'stmt'), var.get(u'result')))
                var.put(u'fragment', var.get(u'toSourceNodeWhenNeeded')(var.get(u'result')).callprop(u'toString'))
                if (((PyJsStrictEq(var.get(u'stmt').get(u'type'),var.get(u'Syntax').get(u'Program')) and var.get(u'safeConcatenation').neg()) and PyJsStrictEq(var.get(u'newline'),Js(u''))) and PyJsStrictEq(var.get(u'fragment').callprop(u'charAt', (var.get(u'fragment').get(u'length')-Js(1.0))),Js(u'\n'))):
                    var.put(u'result', (var.get(u'toSourceNodeWhenNeeded')(var.get(u'result')).callprop(u'replaceRight', JsRegExp(u'/\\s+$/'), Js(u'')) if var.get(u'sourceMap') else var.get(u'fragment').callprop(u'replace', JsRegExp(u'/\\s+$/'), Js(u''))))
                return var.get(u'toSourceNodeWhenNeeded')(var.get(u'result'), var.get(u'stmt'))
            PyJs_anonymous_124_._set_name(u'anonymous')
            var.get(u'CodeGenerator').get(u'prototype').put(u'generateStatement', PyJs_anonymous_124_)
            pass
            pass
            PyJs_Object_128_ = Js({u'style':Js(u''),u'base':Js(0.0)})
            PyJs_Object_127_ = Js({u'indent':PyJs_Object_128_,u'renumber':Js(True),u'hexadecimal':Js(True),u'quotes':Js(u'auto'),u'escapeless':Js(True),u'compact':Js(True),u'parentheses':Js(False),u'semicolons':Js(False)})
            var.put(u'FORMAT_MINIFY', PyJs_Object_127_)
            var.put(u'FORMAT_DEFAULTS', var.get(u'getDefaultOptions')().get(u'format'))
            var.get(u'exports').put(u'version', var.get(u'require')(Js(u'./package.json')).get(u'version'))
            var.get(u'exports').put(u'generate', var.get(u'generate'))
            var.get(u'exports').put(u'attachComments', var.get(u'estraverse').get(u'attachComments'))
            PyJs_Object_129_ = Js({})
            var.get(u'exports').put(u'Precedence', var.get(u'updateDeeply')(PyJs_Object_129_, var.get(u'Precedence')))
            var.get(u'exports').put(u'browser', Js(False))
            var.get(u'exports').put(u'FORMAT_MINIFY', var.get(u'FORMAT_MINIFY'))
            var.get(u'exports').put(u'FORMAT_DEFAULTS', var.get(u'FORMAT_DEFAULTS'))
        PyJs_anonymous_6_._set_name(u'anonymous')
        PyJs_anonymous_6_()
    PyJs_anonymous_5_._set_name(u'anonymous')
    PyJs_anonymous_5_.callprop(u'call', var.get(u"this"), (var.get(u'global') if PyJsStrictNeq(var.get(u'global',throw=False).typeof(),Js(u'undefined')) else (var.get(u'self') if PyJsStrictNeq(var.get(u'self',throw=False).typeof(),Js(u'undefined')) else (var.get(u'window') if PyJsStrictNeq(var.get(u'window',throw=False).typeof(),Js(u'undefined')) else PyJs_Object_4_))))
PyJs_anonymous_3_._set_name(u'anonymous')
PyJs_Object_130_ = Js({u'./package.json':Js(13.0),u'estraverse':Js(14.0),u'esutils':Js(19.0),u'source-map':Js(12.0)})
@Js
def PyJs_anonymous_131_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'exports', u'require', u'hasNativeMap', u'module', u'util', u'ArraySet', u'has'])
    @Js
    def PyJsHoisted_ArraySet_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        var.get(u"this").put(u'_array', Js([]))
        var.get(u"this").put(u'_set', (var.get(u'Map').create() if var.get(u'hasNativeMap') else var.get(u'Object').callprop(u'create', var.get(u"null"))))
    PyJsHoisted_ArraySet_.func_name = u'ArraySet'
    var.put(u'ArraySet', PyJsHoisted_ArraySet_)
    var.put(u'util', var.get(u'require')(Js(u'./util')))
    var.put(u'has', var.get(u'Object').get(u'prototype').get(u'hasOwnProperty'))
    var.put(u'hasNativeMap', PyJsStrictNeq(var.get(u'Map',throw=False).typeof(),Js(u'undefined')))
    pass
    @Js
    def PyJs_ArraySet_fromArray_132_(aArray, aAllowDuplicates, this, arguments, var=var):
        var = Scope({u'this':this, u'ArraySet_fromArray':PyJs_ArraySet_fromArray_132_, u'aAllowDuplicates':aAllowDuplicates, u'aArray':aArray, u'arguments':arguments}, var)
        var.registers([u'i', u'aAllowDuplicates', u'set', u'aArray', u'len'])
        var.put(u'set', var.get(u'ArraySet').create())
        #for JS loop
        var.put(u'i', Js(0.0))
        var.put(u'len', var.get(u'aArray').get(u'length'))
        while (var.get(u'i')<var.get(u'len')):
            try:
                var.get(u'set').callprop(u'add', var.get(u'aArray').get(var.get(u'i')), var.get(u'aAllowDuplicates'))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return var.get(u'set')
    PyJs_ArraySet_fromArray_132_._set_name(u'ArraySet_fromArray')
    var.get(u'ArraySet').put(u'fromArray', PyJs_ArraySet_fromArray_132_)
    @Js
    def PyJs_ArraySet_size_133_(this, arguments, var=var):
        var = Scope({u'this':this, u'ArraySet_size':PyJs_ArraySet_size_133_, u'arguments':arguments}, var)
        var.registers([])
        return (var.get(u"this").get(u'_set').get(u'size') if var.get(u'hasNativeMap') else var.get(u'Object').callprop(u'getOwnPropertyNames', var.get(u"this").get(u'_set')).get(u'length'))
    PyJs_ArraySet_size_133_._set_name(u'ArraySet_size')
    var.get(u'ArraySet').get(u'prototype').put(u'size', PyJs_ArraySet_size_133_)
    @Js
    def PyJs_ArraySet_add_134_(aStr, aAllowDuplicates, this, arguments, var=var):
        var = Scope({u'this':this, u'ArraySet_add':PyJs_ArraySet_add_134_, u'aStr':aStr, u'arguments':arguments, u'aAllowDuplicates':aAllowDuplicates}, var)
        var.registers([u'sStr', u'isDuplicate', u'aStr', u'aAllowDuplicates', u'idx'])
        var.put(u'sStr', (var.get(u'aStr') if var.get(u'hasNativeMap') else var.get(u'util').callprop(u'toSetString', var.get(u'aStr'))))
        var.put(u'isDuplicate', (var.get(u"this").callprop(u'has', var.get(u'aStr')) if var.get(u'hasNativeMap') else var.get(u'has').callprop(u'call', var.get(u"this").get(u'_set'), var.get(u'sStr'))))
        var.put(u'idx', var.get(u"this").get(u'_array').get(u'length'))
        if (var.get(u'isDuplicate').neg() or var.get(u'aAllowDuplicates')):
            var.get(u"this").get(u'_array').callprop(u'push', var.get(u'aStr'))
        if var.get(u'isDuplicate').neg():
            if var.get(u'hasNativeMap'):
                var.get(u"this").get(u'_set').callprop(u'set', var.get(u'aStr'), var.get(u'idx'))
            else:
                var.get(u"this").get(u'_set').put(var.get(u'sStr'), var.get(u'idx'))
    PyJs_ArraySet_add_134_._set_name(u'ArraySet_add')
    var.get(u'ArraySet').get(u'prototype').put(u'add', PyJs_ArraySet_add_134_)
    @Js
    def PyJs_ArraySet_has_135_(aStr, this, arguments, var=var):
        var = Scope({u'this':this, u'ArraySet_has':PyJs_ArraySet_has_135_, u'aStr':aStr, u'arguments':arguments}, var)
        var.registers([u'sStr', u'aStr'])
        if var.get(u'hasNativeMap'):
            return var.get(u"this").get(u'_set').callprop(u'has', var.get(u'aStr'))
        else:
            var.put(u'sStr', var.get(u'util').callprop(u'toSetString', var.get(u'aStr')))
            return var.get(u'has').callprop(u'call', var.get(u"this").get(u'_set'), var.get(u'sStr'))
    PyJs_ArraySet_has_135_._set_name(u'ArraySet_has')
    var.get(u'ArraySet').get(u'prototype').put(u'has', PyJs_ArraySet_has_135_)
    @Js
    def PyJs_ArraySet_indexOf_136_(aStr, this, arguments, var=var):
        var = Scope({u'this':this, u'aStr':aStr, u'ArraySet_indexOf':PyJs_ArraySet_indexOf_136_, u'arguments':arguments}, var)
        var.registers([u'sStr', u'aStr', u'idx'])
        if var.get(u'hasNativeMap'):
            var.put(u'idx', var.get(u"this").get(u'_set').callprop(u'get', var.get(u'aStr')))
            if (var.get(u'idx')>=Js(0.0)):
                return var.get(u'idx')
        else:
            var.put(u'sStr', var.get(u'util').callprop(u'toSetString', var.get(u'aStr')))
            if var.get(u'has').callprop(u'call', var.get(u"this").get(u'_set'), var.get(u'sStr')):
                return var.get(u"this").get(u'_set').get(var.get(u'sStr'))
        PyJsTempException = JsToPyException(var.get(u'Error').create(((Js(u'"')+var.get(u'aStr'))+Js(u'" is not in the set.'))))
        raise PyJsTempException
    PyJs_ArraySet_indexOf_136_._set_name(u'ArraySet_indexOf')
    var.get(u'ArraySet').get(u'prototype').put(u'indexOf', PyJs_ArraySet_indexOf_136_)
    @Js
    def PyJs_ArraySet_at_137_(aIdx, this, arguments, var=var):
        var = Scope({u'this':this, u'ArraySet_at':PyJs_ArraySet_at_137_, u'aIdx':aIdx, u'arguments':arguments}, var)
        var.registers([u'aIdx'])
        if ((var.get(u'aIdx')>=Js(0.0)) and (var.get(u'aIdx')<var.get(u"this").get(u'_array').get(u'length'))):
            return var.get(u"this").get(u'_array').get(var.get(u'aIdx'))
        PyJsTempException = JsToPyException(var.get(u'Error').create((Js(u'No element indexed by ')+var.get(u'aIdx'))))
        raise PyJsTempException
    PyJs_ArraySet_at_137_._set_name(u'ArraySet_at')
    var.get(u'ArraySet').get(u'prototype').put(u'at', PyJs_ArraySet_at_137_)
    @Js
    def PyJs_ArraySet_toArray_138_(this, arguments, var=var):
        var = Scope({u'this':this, u'ArraySet_toArray':PyJs_ArraySet_toArray_138_, u'arguments':arguments}, var)
        var.registers([])
        return var.get(u"this").get(u'_array').callprop(u'slice')
    PyJs_ArraySet_toArray_138_._set_name(u'ArraySet_toArray')
    var.get(u'ArraySet').get(u'prototype').put(u'toArray', PyJs_ArraySet_toArray_138_)
    var.get(u'exports').put(u'ArraySet', var.get(u'ArraySet'))
PyJs_anonymous_131_._set_name(u'anonymous')
PyJs_Object_139_ = Js({u'./util':Js(11.0)})
@Js
def PyJs_anonymous_140_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'exports', u'VLQ_CONTINUATION_BIT', u'VLQ_BASE', u'require', u'base64', u'toVLQSigned', u'module', u'VLQ_BASE_MASK', u'fromVLQSigned', u'VLQ_BASE_SHIFT'])
    @Js
    def PyJsHoisted_toVLQSigned_(aValue, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'aValue':aValue}, var)
        var.registers([u'aValue'])
        return ((((-var.get(u'aValue'))<<Js(1.0))+Js(1.0)) if (var.get(u'aValue')<Js(0.0)) else ((var.get(u'aValue')<<Js(1.0))+Js(0.0)))
    PyJsHoisted_toVLQSigned_.func_name = u'toVLQSigned'
    var.put(u'toVLQSigned', PyJsHoisted_toVLQSigned_)
    @Js
    def PyJsHoisted_fromVLQSigned_(aValue, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'aValue':aValue}, var)
        var.registers([u'shifted', u'aValue', u'isNegative'])
        var.put(u'isNegative', PyJsStrictEq((var.get(u'aValue')&Js(1.0)),Js(1.0)))
        var.put(u'shifted', (var.get(u'aValue')>>Js(1.0)))
        return ((-var.get(u'shifted')) if var.get(u'isNegative') else var.get(u'shifted'))
    PyJsHoisted_fromVLQSigned_.func_name = u'fromVLQSigned'
    var.put(u'fromVLQSigned', PyJsHoisted_fromVLQSigned_)
    var.put(u'base64', var.get(u'require')(Js(u'./base64')))
    var.put(u'VLQ_BASE_SHIFT', Js(5.0))
    var.put(u'VLQ_BASE', (Js(1.0)<<var.get(u'VLQ_BASE_SHIFT')))
    var.put(u'VLQ_BASE_MASK', (var.get(u'VLQ_BASE')-Js(1.0)))
    var.put(u'VLQ_CONTINUATION_BIT', var.get(u'VLQ_BASE'))
    pass
    pass
    @Js
    def PyJs_base64VLQ_encode_141_(aValue, this, arguments, var=var):
        var = Scope({u'this':this, u'base64VLQ_encode':PyJs_base64VLQ_encode_141_, u'arguments':arguments, u'aValue':aValue}, var)
        var.registers([u'vlq', u'encoded', u'digit', u'aValue'])
        var.put(u'encoded', Js(u''))
        pass
        var.put(u'vlq', var.get(u'toVLQSigned')(var.get(u'aValue')))
        while 1:
            var.put(u'digit', (var.get(u'vlq')&var.get(u'VLQ_BASE_MASK')))
            var.put(u'vlq', var.get(u'VLQ_BASE_SHIFT'), u'>>>')
            if (var.get(u'vlq')>Js(0.0)):
                var.put(u'digit', var.get(u'VLQ_CONTINUATION_BIT'), u'|')
            var.put(u'encoded', var.get(u'base64').callprop(u'encode', var.get(u'digit')), u'+')
            if not (var.get(u'vlq')>Js(0.0)):
                break
        return var.get(u'encoded')
    PyJs_base64VLQ_encode_141_._set_name(u'base64VLQ_encode')
    var.get(u'exports').put(u'encode', PyJs_base64VLQ_encode_141_)
    @Js
    def PyJs_base64VLQ_decode_142_(aStr, aIndex, aOutParam, this, arguments, var=var):
        var = Scope({u'base64VLQ_decode':PyJs_base64VLQ_decode_142_, u'this':this, u'arguments':arguments, u'aStr':aStr, u'aOutParam':aOutParam, u'aIndex':aIndex}, var)
        var.registers([u'digit', u'shift', u'result', u'continuation', u'aStr', u'aOutParam', u'strLen', u'aIndex'])
        var.put(u'strLen', var.get(u'aStr').get(u'length'))
        var.put(u'result', Js(0.0))
        var.put(u'shift', Js(0.0))
        pass
        while 1:
            if (var.get(u'aIndex')>=var.get(u'strLen')):
                PyJsTempException = JsToPyException(var.get(u'Error').create(Js(u'Expected more digits in base 64 VLQ value.')))
                raise PyJsTempException
            var.put(u'digit', var.get(u'base64').callprop(u'decode', var.get(u'aStr').callprop(u'charCodeAt', (var.put(u'aIndex',Js(var.get(u'aIndex').to_number())+Js(1))-Js(1)))))
            if PyJsStrictEq(var.get(u'digit'),(-Js(1.0))):
                PyJsTempException = JsToPyException(var.get(u'Error').create((Js(u'Invalid base64 digit: ')+var.get(u'aStr').callprop(u'charAt', (var.get(u'aIndex')-Js(1.0))))))
                raise PyJsTempException
            var.put(u'continuation', (var.get(u'digit')&var.get(u'VLQ_CONTINUATION_BIT')).neg().neg())
            var.put(u'digit', var.get(u'VLQ_BASE_MASK'), u'&')
            var.put(u'result', (var.get(u'result')+(var.get(u'digit')<<var.get(u'shift'))))
            var.put(u'shift', var.get(u'VLQ_BASE_SHIFT'), u'+')
            if not var.get(u'continuation'):
                break
        var.get(u'aOutParam').put(u'value', var.get(u'fromVLQSigned')(var.get(u'result')))
        var.get(u'aOutParam').put(u'rest', var.get(u'aIndex'))
    PyJs_base64VLQ_decode_142_._set_name(u'base64VLQ_decode')
    var.get(u'exports').put(u'decode', PyJs_base64VLQ_decode_142_)
PyJs_anonymous_140_._set_name(u'anonymous')
PyJs_Object_143_ = Js({u'./base64':Js(4.0)})
@Js
def PyJs_anonymous_144_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'intToCharMap', u'exports', u'require', u'module'])
    var.put(u'intToCharMap', Js(u'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/').callprop(u'split', Js(u'')))
    @Js
    def PyJs_anonymous_145_(number, this, arguments, var=var):
        var = Scope({u'this':this, u'number':number, u'arguments':arguments}, var)
        var.registers([u'number'])
        if ((Js(0.0)<=var.get(u'number')) and (var.get(u'number')<var.get(u'intToCharMap').get(u'length'))):
            return var.get(u'intToCharMap').get(var.get(u'number'))
        PyJsTempException = JsToPyException(var.get(u'TypeError').create((Js(u'Must be between 0 and 63: ')+var.get(u'number'))))
        raise PyJsTempException
    PyJs_anonymous_145_._set_name(u'anonymous')
    var.get(u'exports').put(u'encode', PyJs_anonymous_145_)
    @Js
    def PyJs_anonymous_146_(charCode, this, arguments, var=var):
        var = Scope({u'this':this, u'charCode':charCode, u'arguments':arguments}, var)
        var.registers([u'bigZ', u'littleOffset', u'charCode', u'numberOffset', u'littleA', u'littleZ', u'zero', u'nine', u'slash', u'plus', u'bigA'])
        var.put(u'bigA', Js(65.0))
        var.put(u'bigZ', Js(90.0))
        var.put(u'littleA', Js(97.0))
        var.put(u'littleZ', Js(122.0))
        var.put(u'zero', Js(48.0))
        var.put(u'nine', Js(57.0))
        var.put(u'plus', Js(43.0))
        var.put(u'slash', Js(47.0))
        var.put(u'littleOffset', Js(26.0))
        var.put(u'numberOffset', Js(52.0))
        if ((var.get(u'bigA')<=var.get(u'charCode')) and (var.get(u'charCode')<=var.get(u'bigZ'))):
            return (var.get(u'charCode')-var.get(u'bigA'))
        if ((var.get(u'littleA')<=var.get(u'charCode')) and (var.get(u'charCode')<=var.get(u'littleZ'))):
            return ((var.get(u'charCode')-var.get(u'littleA'))+var.get(u'littleOffset'))
        if ((var.get(u'zero')<=var.get(u'charCode')) and (var.get(u'charCode')<=var.get(u'nine'))):
            return ((var.get(u'charCode')-var.get(u'zero'))+var.get(u'numberOffset'))
        if (var.get(u'charCode')==var.get(u'plus')):
            return Js(62.0)
        if (var.get(u'charCode')==var.get(u'slash')):
            return Js(63.0)
        return (-Js(1.0))
    PyJs_anonymous_146_._set_name(u'anonymous')
    var.get(u'exports').put(u'decode', PyJs_anonymous_146_)
PyJs_anonymous_144_._set_name(u'anonymous')
PyJs_Object_147_ = Js({})
@Js
def PyJs_anonymous_148_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'require', u'exports', u'module', u'recursiveSearch'])
    @Js
    def PyJsHoisted_recursiveSearch_(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias, this, arguments, var=var):
        var = Scope({u'aNeedle':aNeedle, u'this':this, u'aBias':aBias, u'aCompare':aCompare, u'aHigh':aHigh, u'aLow':aLow, u'aHaystack':aHaystack, u'arguments':arguments}, var)
        var.registers([u'aNeedle', u'aBias', u'mid', u'aCompare', u'aHigh', u'aLow', u'aHaystack', u'cmp'])
        var.put(u'mid', (var.get(u'Math').callprop(u'floor', ((var.get(u'aHigh')-var.get(u'aLow'))/Js(2.0)))+var.get(u'aLow')))
        var.put(u'cmp', var.get(u'aCompare')(var.get(u'aNeedle'), var.get(u'aHaystack').get(var.get(u'mid')), Js(True)))
        if PyJsStrictEq(var.get(u'cmp'),Js(0.0)):
            return var.get(u'mid')
        else:
            if (var.get(u'cmp')>Js(0.0)):
                if ((var.get(u'aHigh')-var.get(u'mid'))>Js(1.0)):
                    return var.get(u'recursiveSearch')(var.get(u'mid'), var.get(u'aHigh'), var.get(u'aNeedle'), var.get(u'aHaystack'), var.get(u'aCompare'), var.get(u'aBias'))
                if (var.get(u'aBias')==var.get(u'exports').get(u'LEAST_UPPER_BOUND')):
                    return (var.get(u'aHigh') if (var.get(u'aHigh')<var.get(u'aHaystack').get(u'length')) else (-Js(1.0)))
                else:
                    return var.get(u'mid')
            else:
                if ((var.get(u'mid')-var.get(u'aLow'))>Js(1.0)):
                    return var.get(u'recursiveSearch')(var.get(u'aLow'), var.get(u'mid'), var.get(u'aNeedle'), var.get(u'aHaystack'), var.get(u'aCompare'), var.get(u'aBias'))
                if (var.get(u'aBias')==var.get(u'exports').get(u'LEAST_UPPER_BOUND')):
                    return var.get(u'mid')
                else:
                    return ((-Js(1.0)) if (var.get(u'aLow')<Js(0.0)) else var.get(u'aLow'))
    PyJsHoisted_recursiveSearch_.func_name = u'recursiveSearch'
    var.put(u'recursiveSearch', PyJsHoisted_recursiveSearch_)
    var.get(u'exports').put(u'GREATEST_LOWER_BOUND', Js(1.0))
    var.get(u'exports').put(u'LEAST_UPPER_BOUND', Js(2.0))
    pass
    @Js
    def PyJs_search_149_(aNeedle, aHaystack, aCompare, aBias, this, arguments, var=var):
        var = Scope({u'search':PyJs_search_149_, u'aNeedle':aNeedle, u'arguments':arguments, u'aHaystack':aHaystack, u'this':this, u'aBias':aBias, u'aCompare':aCompare}, var)
        var.registers([u'aBias', u'index', u'aNeedle', u'aCompare', u'aHaystack'])
        if PyJsStrictEq(var.get(u'aHaystack').get(u'length'),Js(0.0)):
            return (-Js(1.0))
        var.put(u'index', var.get(u'recursiveSearch')((-Js(1.0)), var.get(u'aHaystack').get(u'length'), var.get(u'aNeedle'), var.get(u'aHaystack'), var.get(u'aCompare'), (var.get(u'aBias') or var.get(u'exports').get(u'GREATEST_LOWER_BOUND'))))
        if (var.get(u'index')<Js(0.0)):
            return (-Js(1.0))
        while ((var.get(u'index')-Js(1.0))>=Js(0.0)):
            if PyJsStrictNeq(var.get(u'aCompare')(var.get(u'aHaystack').get(var.get(u'index')), var.get(u'aHaystack').get((var.get(u'index')-Js(1.0))), Js(True)),Js(0.0)):
                break
            var.put(u'index',Js(var.get(u'index').to_number())-Js(1))
        return var.get(u'index')
    PyJs_search_149_._set_name(u'search')
    var.get(u'exports').put(u'search', PyJs_search_149_)
PyJs_anonymous_148_._set_name(u'anonymous')
PyJs_Object_150_ = Js({})
@Js
def PyJs_anonymous_151_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'generatedPositionAfter', u'require', u'exports', u'module', u'util', u'MappingList'])
    @Js
    def PyJsHoisted_generatedPositionAfter_(mappingA, mappingB, this, arguments, var=var):
        var = Scope({u'this':this, u'mappingB':mappingB, u'arguments':arguments, u'mappingA':mappingA}, var)
        var.registers([u'columnA', u'columnB', u'mappingB', u'mappingA', u'lineB', u'lineA'])
        var.put(u'lineA', var.get(u'mappingA').get(u'generatedLine'))
        var.put(u'lineB', var.get(u'mappingB').get(u'generatedLine'))
        var.put(u'columnA', var.get(u'mappingA').get(u'generatedColumn'))
        var.put(u'columnB', var.get(u'mappingB').get(u'generatedColumn'))
        return (((var.get(u'lineB')>var.get(u'lineA')) or ((var.get(u'lineB')==var.get(u'lineA')) and (var.get(u'columnB')>=var.get(u'columnA')))) or (var.get(u'util').callprop(u'compareByGeneratedPositionsInflated', var.get(u'mappingA'), var.get(u'mappingB'))<=Js(0.0)))
    PyJsHoisted_generatedPositionAfter_.func_name = u'generatedPositionAfter'
    var.put(u'generatedPositionAfter', PyJsHoisted_generatedPositionAfter_)
    @Js
    def PyJsHoisted_MappingList_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        var.get(u"this").put(u'_array', Js([]))
        var.get(u"this").put(u'_sorted', Js(True))
        PyJs_Object_152_ = Js({u'generatedLine':(-Js(1.0)),u'generatedColumn':Js(0.0)})
        var.get(u"this").put(u'_last', PyJs_Object_152_)
    PyJsHoisted_MappingList_.func_name = u'MappingList'
    var.put(u'MappingList', PyJsHoisted_MappingList_)
    var.put(u'util', var.get(u'require')(Js(u'./util')))
    pass
    pass
    @Js
    def PyJs_MappingList_forEach_153_(aCallback, aThisArg, this, arguments, var=var):
        var = Scope({u'this':this, u'aThisArg':aThisArg, u'aCallback':aCallback, u'MappingList_forEach':PyJs_MappingList_forEach_153_, u'arguments':arguments}, var)
        var.registers([u'aThisArg', u'aCallback'])
        var.get(u"this").get(u'_array').callprop(u'forEach', var.get(u'aCallback'), var.get(u'aThisArg'))
    PyJs_MappingList_forEach_153_._set_name(u'MappingList_forEach')
    var.get(u'MappingList').get(u'prototype').put(u'unsortedForEach', PyJs_MappingList_forEach_153_)
    @Js
    def PyJs_MappingList_add_154_(aMapping, this, arguments, var=var):
        var = Scope({u'this':this, u'MappingList_add':PyJs_MappingList_add_154_, u'aMapping':aMapping, u'arguments':arguments}, var)
        var.registers([u'aMapping'])
        if var.get(u'generatedPositionAfter')(var.get(u"this").get(u'_last'), var.get(u'aMapping')):
            var.get(u"this").put(u'_last', var.get(u'aMapping'))
            var.get(u"this").get(u'_array').callprop(u'push', var.get(u'aMapping'))
        else:
            var.get(u"this").put(u'_sorted', Js(False))
            var.get(u"this").get(u'_array').callprop(u'push', var.get(u'aMapping'))
    PyJs_MappingList_add_154_._set_name(u'MappingList_add')
    var.get(u'MappingList').get(u'prototype').put(u'add', PyJs_MappingList_add_154_)
    @Js
    def PyJs_MappingList_toArray_155_(this, arguments, var=var):
        var = Scope({u'this':this, u'MappingList_toArray':PyJs_MappingList_toArray_155_, u'arguments':arguments}, var)
        var.registers([])
        if var.get(u"this").get(u'_sorted').neg():
            var.get(u"this").get(u'_array').callprop(u'sort', var.get(u'util').get(u'compareByGeneratedPositionsInflated'))
            var.get(u"this").put(u'_sorted', Js(True))
        return var.get(u"this").get(u'_array')
    PyJs_MappingList_toArray_155_._set_name(u'MappingList_toArray')
    var.get(u'MappingList').get(u'prototype').put(u'toArray', PyJs_MappingList_toArray_155_)
    var.get(u'exports').put(u'MappingList', var.get(u'MappingList'))
PyJs_anonymous_151_._set_name(u'anonymous')
PyJs_Object_156_ = Js({u'./util':Js(11.0)})
@Js
def PyJs_anonymous_157_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'exports', u'randomIntInRange', u'require', u'module', u'doQuickSort', u'swap'])
    @Js
    def PyJsHoisted_randomIntInRange_(low, high, this, arguments, var=var):
        var = Scope({u'high':high, u'this':this, u'low':low, u'arguments':arguments}, var)
        var.registers([u'high', u'low'])
        return var.get(u'Math').callprop(u'round', (var.get(u'low')+(var.get(u'Math').callprop(u'random')*(var.get(u'high')-var.get(u'low')))))
    PyJsHoisted_randomIntInRange_.func_name = u'randomIntInRange'
    var.put(u'randomIntInRange', PyJsHoisted_randomIntInRange_)
    @Js
    def PyJsHoisted_swap_(ary, x, y, this, arguments, var=var):
        var = Scope({u'y':y, u'ary':ary, u'this':this, u'arguments':arguments, u'x':x}, var)
        var.registers([u'y', u'ary', u'temp', u'x'])
        var.put(u'temp', var.get(u'ary').get(var.get(u'x')))
        var.get(u'ary').put(var.get(u'x'), var.get(u'ary').get(var.get(u'y')))
        var.get(u'ary').put(var.get(u'y'), var.get(u'temp'))
    PyJsHoisted_swap_.func_name = u'swap'
    var.put(u'swap', PyJsHoisted_swap_)
    @Js
    def PyJsHoisted_doQuickSort_(ary, comparator, p, r, this, arguments, var=var):
        var = Scope({u'p':p, u'r':r, u'arguments':arguments, u'comparator':comparator, u'this':this, u'ary':ary}, var)
        var.registers([u'comparator', u'i', u'ary', u'pivotIndex', u'j', u'q', u'p', u'r', u'pivot'])
        if (var.get(u'p')<var.get(u'r')):
            var.put(u'pivotIndex', var.get(u'randomIntInRange')(var.get(u'p'), var.get(u'r')))
            var.put(u'i', (var.get(u'p')-Js(1.0)))
            var.get(u'swap')(var.get(u'ary'), var.get(u'pivotIndex'), var.get(u'r'))
            var.put(u'pivot', var.get(u'ary').get(var.get(u'r')))
            #for JS loop
            var.put(u'j', var.get(u'p'))
            while (var.get(u'j')<var.get(u'r')):
                try:
                    if (var.get(u'comparator')(var.get(u'ary').get(var.get(u'j')), var.get(u'pivot'))<=Js(0.0)):
                        var.put(u'i', Js(1.0), u'+')
                        var.get(u'swap')(var.get(u'ary'), var.get(u'i'), var.get(u'j'))
                finally:
                        (var.put(u'j',Js(var.get(u'j').to_number())+Js(1))-Js(1))
            var.get(u'swap')(var.get(u'ary'), (var.get(u'i')+Js(1.0)), var.get(u'j'))
            var.put(u'q', (var.get(u'i')+Js(1.0)))
            var.get(u'doQuickSort')(var.get(u'ary'), var.get(u'comparator'), var.get(u'p'), (var.get(u'q')-Js(1.0)))
            var.get(u'doQuickSort')(var.get(u'ary'), var.get(u'comparator'), (var.get(u'q')+Js(1.0)), var.get(u'r'))
    PyJsHoisted_doQuickSort_.func_name = u'doQuickSort'
    var.put(u'doQuickSort', PyJsHoisted_doQuickSort_)
    pass
    pass
    pass
    @Js
    def PyJs_anonymous_158_(ary, comparator, this, arguments, var=var):
        var = Scope({u'this':this, u'ary':ary, u'arguments':arguments, u'comparator':comparator}, var)
        var.registers([u'ary', u'comparator'])
        var.get(u'doQuickSort')(var.get(u'ary'), var.get(u'comparator'), Js(0.0), (var.get(u'ary').get(u'length')-Js(1.0)))
    PyJs_anonymous_158_._set_name(u'anonymous')
    var.get(u'exports').put(u'quickSort', PyJs_anonymous_158_)
PyJs_anonymous_157_._set_name(u'anonymous')
PyJs_Object_159_ = Js({})
@Js
def PyJs_anonymous_160_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'exports', u'base64VLQ', u'IndexedSourceMapConsumer', u'quickSort', u'Mapping', u'SourceMapConsumer', u'binarySearch', u'util', u'ArraySet', u'module', u'require', u'BasicSourceMapConsumer'])
    @Js
    def PyJsHoisted_IndexedSourceMapConsumer_(aSourceMap, aSourceMapURL, this, arguments, var=var):
        var = Scope({u'this':this, u'aSourceMap':aSourceMap, u'arguments':arguments, u'aSourceMapURL':aSourceMapURL}, var)
        var.registers([u'aSourceMapURL', u'aSourceMap', u'sourceMap', u'version', u'lastOffset', u'sections'])
        var.put(u'sourceMap', var.get(u'aSourceMap'))
        if PyJsStrictEq(var.get(u'aSourceMap',throw=False).typeof(),Js(u'string')):
            var.put(u'sourceMap', var.get(u'util').callprop(u'parseSourceMapInput', var.get(u'aSourceMap')))
        var.put(u'version', var.get(u'util').callprop(u'getArg', var.get(u'sourceMap'), Js(u'version')))
        var.put(u'sections', var.get(u'util').callprop(u'getArg', var.get(u'sourceMap'), Js(u'sections')))
        if (var.get(u'version')!=var.get(u"this").get(u'_version')):
            PyJsTempException = JsToPyException(var.get(u'Error').create((Js(u'Unsupported version: ')+var.get(u'version'))))
            raise PyJsTempException
        var.get(u"this").put(u'_sources', var.get(u'ArraySet').create())
        var.get(u"this").put(u'_names', var.get(u'ArraySet').create())
        PyJs_Object_199_ = Js({u'line':(-Js(1.0)),u'column':Js(0.0)})
        var.put(u'lastOffset', PyJs_Object_199_)
        @Js
        def PyJs_anonymous_200_(s, this, arguments, var=var):
            var = Scope({u'this':this, u's':s, u'arguments':arguments}, var)
            var.registers([u'offsetLine', u's', u'offsetColumn', u'offset'])
            if var.get(u's').get(u'url'):
                PyJsTempException = JsToPyException(var.get(u'Error').create(Js(u'Support for url field in sections not implemented.')))
                raise PyJsTempException
            var.put(u'offset', var.get(u'util').callprop(u'getArg', var.get(u's'), Js(u'offset')))
            var.put(u'offsetLine', var.get(u'util').callprop(u'getArg', var.get(u'offset'), Js(u'line')))
            var.put(u'offsetColumn', var.get(u'util').callprop(u'getArg', var.get(u'offset'), Js(u'column')))
            if ((var.get(u'offsetLine')<var.get(u'lastOffset').get(u'line')) or (PyJsStrictEq(var.get(u'offsetLine'),var.get(u'lastOffset').get(u'line')) and (var.get(u'offsetColumn')<var.get(u'lastOffset').get(u'column')))):
                PyJsTempException = JsToPyException(var.get(u'Error').create(Js(u'Section offsets must be ordered and non-overlapping.')))
                raise PyJsTempException
            var.put(u'lastOffset', var.get(u'offset'))
            PyJs_Object_202_ = Js({u'generatedLine':(var.get(u'offsetLine')+Js(1.0)),u'generatedColumn':(var.get(u'offsetColumn')+Js(1.0))})
            PyJs_Object_201_ = Js({u'generatedOffset':PyJs_Object_202_,u'consumer':var.get(u'SourceMapConsumer').create(var.get(u'util').callprop(u'getArg', var.get(u's'), Js(u'map')), var.get(u'aSourceMapURL'))})
            return PyJs_Object_201_
        PyJs_anonymous_200_._set_name(u'anonymous')
        var.get(u"this").put(u'_sections', var.get(u'sections').callprop(u'map', PyJs_anonymous_200_))
    PyJsHoisted_IndexedSourceMapConsumer_.func_name = u'IndexedSourceMapConsumer'
    var.put(u'IndexedSourceMapConsumer', PyJsHoisted_IndexedSourceMapConsumer_)
    @Js
    def PyJsHoisted_Mapping_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        var.get(u"this").put(u'generatedLine', Js(0.0))
        var.get(u"this").put(u'generatedColumn', Js(0.0))
        var.get(u"this").put(u'source', var.get(u"null"))
        var.get(u"this").put(u'originalLine', var.get(u"null"))
        var.get(u"this").put(u'originalColumn', var.get(u"null"))
        var.get(u"this").put(u'name', var.get(u"null"))
    PyJsHoisted_Mapping_.func_name = u'Mapping'
    var.put(u'Mapping', PyJsHoisted_Mapping_)
    @Js
    def PyJsHoisted_SourceMapConsumer_(aSourceMap, aSourceMapURL, this, arguments, var=var):
        var = Scope({u'this':this, u'aSourceMap':aSourceMap, u'arguments':arguments, u'aSourceMapURL':aSourceMapURL}, var)
        var.registers([u'sourceMap', u'aSourceMap', u'aSourceMapURL'])
        var.put(u'sourceMap', var.get(u'aSourceMap'))
        if PyJsStrictEq(var.get(u'aSourceMap',throw=False).typeof(),Js(u'string')):
            var.put(u'sourceMap', var.get(u'util').callprop(u'parseSourceMapInput', var.get(u'aSourceMap')))
        return (var.get(u'IndexedSourceMapConsumer').create(var.get(u'sourceMap'), var.get(u'aSourceMapURL')) if (var.get(u'sourceMap').get(u'sections')!=var.get(u"null")) else var.get(u'BasicSourceMapConsumer').create(var.get(u'sourceMap'), var.get(u'aSourceMapURL')))
    PyJsHoisted_SourceMapConsumer_.func_name = u'SourceMapConsumer'
    var.put(u'SourceMapConsumer', PyJsHoisted_SourceMapConsumer_)
    @Js
    def PyJsHoisted_BasicSourceMapConsumer_(aSourceMap, aSourceMapURL, this, arguments, var=var):
        var = Scope({u'this':this, u'aSourceMap':aSourceMap, u'arguments':arguments, u'aSourceMapURL':aSourceMapURL}, var)
        var.registers([u'mappings', u'aSourceMapURL', u'sourcesContent', u'aSourceMap', u'sourceRoot', u'sources', u'sourceMap', u'version', u'names', u'file'])
        var.put(u'sourceMap', var.get(u'aSourceMap'))
        if PyJsStrictEq(var.get(u'aSourceMap',throw=False).typeof(),Js(u'string')):
            var.put(u'sourceMap', var.get(u'util').callprop(u'parseSourceMapInput', var.get(u'aSourceMap')))
        var.put(u'version', var.get(u'util').callprop(u'getArg', var.get(u'sourceMap'), Js(u'version')))
        var.put(u'sources', var.get(u'util').callprop(u'getArg', var.get(u'sourceMap'), Js(u'sources')))
        var.put(u'names', var.get(u'util').callprop(u'getArg', var.get(u'sourceMap'), Js(u'names'), Js([])))
        var.put(u'sourceRoot', var.get(u'util').callprop(u'getArg', var.get(u'sourceMap'), Js(u'sourceRoot'), var.get(u"null")))
        var.put(u'sourcesContent', var.get(u'util').callprop(u'getArg', var.get(u'sourceMap'), Js(u'sourcesContent'), var.get(u"null")))
        var.put(u'mappings', var.get(u'util').callprop(u'getArg', var.get(u'sourceMap'), Js(u'mappings')))
        var.put(u'file', var.get(u'util').callprop(u'getArg', var.get(u'sourceMap'), Js(u'file'), var.get(u"null")))
        if (var.get(u'version')!=var.get(u"this").get(u'_version')):
            PyJsTempException = JsToPyException(var.get(u'Error').create((Js(u'Unsupported version: ')+var.get(u'version'))))
            raise PyJsTempException
        if var.get(u'sourceRoot'):
            var.put(u'sourceRoot', var.get(u'util').callprop(u'normalize', var.get(u'sourceRoot')))
        @Js
        def PyJs_anonymous_175_(source, this, arguments, var=var):
            var = Scope({u'this':this, u'source':source, u'arguments':arguments}, var)
            var.registers([u'source'])
            return (var.get(u'util').callprop(u'relative', var.get(u'sourceRoot'), var.get(u'source')) if ((var.get(u'sourceRoot') and var.get(u'util').callprop(u'isAbsolute', var.get(u'sourceRoot'))) and var.get(u'util').callprop(u'isAbsolute', var.get(u'source'))) else var.get(u'source'))
        PyJs_anonymous_175_._set_name(u'anonymous')
        var.put(u'sources', var.get(u'sources').callprop(u'map', var.get(u'String')).callprop(u'map', var.get(u'util').get(u'normalize')).callprop(u'map', PyJs_anonymous_175_))
        var.get(u"this").put(u'_names', var.get(u'ArraySet').callprop(u'fromArray', var.get(u'names').callprop(u'map', var.get(u'String')), Js(True)))
        var.get(u"this").put(u'_sources', var.get(u'ArraySet').callprop(u'fromArray', var.get(u'sources'), Js(True)))
        @Js
        def PyJs_anonymous_176_(s, this, arguments, var=var):
            var = Scope({u'this':this, u's':s, u'arguments':arguments}, var)
            var.registers([u's'])
            return var.get(u'util').callprop(u'computeSourceURL', var.get(u'sourceRoot'), var.get(u's'), var.get(u'aSourceMapURL'))
        PyJs_anonymous_176_._set_name(u'anonymous')
        var.get(u"this").put(u'_absoluteSources', var.get(u"this").get(u'_sources').callprop(u'toArray').callprop(u'map', PyJs_anonymous_176_))
        var.get(u"this").put(u'sourceRoot', var.get(u'sourceRoot'))
        var.get(u"this").put(u'sourcesContent', var.get(u'sourcesContent'))
        var.get(u"this").put(u'_mappings', var.get(u'mappings'))
        var.get(u"this").put(u'_sourceMapURL', var.get(u'aSourceMapURL'))
        var.get(u"this").put(u'file', var.get(u'file'))
    PyJsHoisted_BasicSourceMapConsumer_.func_name = u'BasicSourceMapConsumer'
    var.put(u'BasicSourceMapConsumer', PyJsHoisted_BasicSourceMapConsumer_)
    var.put(u'util', var.get(u'require')(Js(u'./util')))
    var.put(u'binarySearch', var.get(u'require')(Js(u'./binary-search')))
    var.put(u'ArraySet', var.get(u'require')(Js(u'./array-set')).get(u'ArraySet'))
    var.put(u'base64VLQ', var.get(u'require')(Js(u'./base64-vlq')))
    var.put(u'quickSort', var.get(u'require')(Js(u'./quick-sort')).get(u'quickSort'))
    pass
    @Js
    def PyJs_anonymous_161_(aSourceMap, aSourceMapURL, this, arguments, var=var):
        var = Scope({u'this':this, u'aSourceMap':aSourceMap, u'arguments':arguments, u'aSourceMapURL':aSourceMapURL}, var)
        var.registers([u'aSourceMap', u'aSourceMapURL'])
        return var.get(u'BasicSourceMapConsumer').callprop(u'fromSourceMap', var.get(u'aSourceMap'), var.get(u'aSourceMapURL'))
    PyJs_anonymous_161_._set_name(u'anonymous')
    var.get(u'SourceMapConsumer').put(u'fromSourceMap', PyJs_anonymous_161_)
    var.get(u'SourceMapConsumer').get(u'prototype').put(u'_version', Js(3.0))
    var.get(u'SourceMapConsumer').get(u'prototype').put(u'__generatedMappings', var.get(u"null"))
    @Js
    def PyJs_get_163_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'get':PyJs_get_163_}, var)
        var.registers([])
        if var.get(u"this").get(u'__generatedMappings').neg():
            var.get(u"this").callprop(u'_parseMappings', var.get(u"this").get(u'_mappings'), var.get(u"this").get(u'sourceRoot'))
        return var.get(u"this").get(u'__generatedMappings')
    PyJs_get_163_._set_name(u'get')
    PyJs_Object_162_ = Js({u'configurable':Js(True),u'enumerable':Js(True),u'get':PyJs_get_163_})
    var.get(u'Object').callprop(u'defineProperty', var.get(u'SourceMapConsumer').get(u'prototype'), Js(u'_generatedMappings'), PyJs_Object_162_)
    var.get(u'SourceMapConsumer').get(u'prototype').put(u'__originalMappings', var.get(u"null"))
    @Js
    def PyJs_get_165_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'get':PyJs_get_165_}, var)
        var.registers([])
        if var.get(u"this").get(u'__originalMappings').neg():
            var.get(u"this").callprop(u'_parseMappings', var.get(u"this").get(u'_mappings'), var.get(u"this").get(u'sourceRoot'))
        return var.get(u"this").get(u'__originalMappings')
    PyJs_get_165_._set_name(u'get')
    PyJs_Object_164_ = Js({u'configurable':Js(True),u'enumerable':Js(True),u'get':PyJs_get_165_})
    var.get(u'Object').callprop(u'defineProperty', var.get(u'SourceMapConsumer').get(u'prototype'), Js(u'_originalMappings'), PyJs_Object_164_)
    @Js
    def PyJs_SourceMapConsumer_charIsMappingSeparator_166_(aStr, index, this, arguments, var=var):
        var = Scope({u'this':this, u'index':index, u'aStr':aStr, u'arguments':arguments, u'SourceMapConsumer_charIsMappingSeparator':PyJs_SourceMapConsumer_charIsMappingSeparator_166_}, var)
        var.registers([u'index', u'c', u'aStr'])
        var.put(u'c', var.get(u'aStr').callprop(u'charAt', var.get(u'index')))
        return (PyJsStrictEq(var.get(u'c'),Js(u';')) or PyJsStrictEq(var.get(u'c'),Js(u',')))
    PyJs_SourceMapConsumer_charIsMappingSeparator_166_._set_name(u'SourceMapConsumer_charIsMappingSeparator')
    var.get(u'SourceMapConsumer').get(u'prototype').put(u'_charIsMappingSeparator', PyJs_SourceMapConsumer_charIsMappingSeparator_166_)
    @Js
    def PyJs_SourceMapConsumer_parseMappings_167_(aStr, aSourceRoot, this, arguments, var=var):
        var = Scope({u'this':this, u'SourceMapConsumer_parseMappings':PyJs_SourceMapConsumer_parseMappings_167_, u'aStr':aStr, u'aSourceRoot':aSourceRoot, u'arguments':arguments}, var)
        var.registers([u'aStr', u'aSourceRoot'])
        PyJsTempException = JsToPyException(var.get(u'Error').create(Js(u'Subclasses must implement _parseMappings')))
        raise PyJsTempException
    PyJs_SourceMapConsumer_parseMappings_167_._set_name(u'SourceMapConsumer_parseMappings')
    var.get(u'SourceMapConsumer').get(u'prototype').put(u'_parseMappings', PyJs_SourceMapConsumer_parseMappings_167_)
    var.get(u'SourceMapConsumer').put(u'GENERATED_ORDER', Js(1.0))
    var.get(u'SourceMapConsumer').put(u'ORIGINAL_ORDER', Js(2.0))
    var.get(u'SourceMapConsumer').put(u'GREATEST_LOWER_BOUND', Js(1.0))
    var.get(u'SourceMapConsumer').put(u'LEAST_UPPER_BOUND', Js(2.0))
    @Js
    def PyJs_SourceMapConsumer_eachMapping_168_(aCallback, aContext, aOrder, this, arguments, var=var):
        var = Scope({u'this':this, u'aCallback':aCallback, u'aOrder':aOrder, u'arguments':arguments, u'aContext':aContext, u'SourceMapConsumer_eachMapping':PyJs_SourceMapConsumer_eachMapping_168_}, var)
        var.registers([u'context', u'aCallback', u'sourceRoot', u'aOrder', u'aContext', u'order', u'mappings'])
        var.put(u'context', (var.get(u'aContext') or var.get(u"null")))
        var.put(u'order', (var.get(u'aOrder') or var.get(u'SourceMapConsumer').get(u'GENERATED_ORDER')))
        pass
        while 1:
            SWITCHED = False
            CONDITION = (var.get(u'order'))
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'SourceMapConsumer').get(u'GENERATED_ORDER')):
                SWITCHED = True
                var.put(u'mappings', var.get(u"this").get(u'_generatedMappings'))
                break
            if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'SourceMapConsumer').get(u'ORIGINAL_ORDER')):
                SWITCHED = True
                var.put(u'mappings', var.get(u"this").get(u'_originalMappings'))
                break
            if True:
                SWITCHED = True
                PyJsTempException = JsToPyException(var.get(u'Error').create(Js(u'Unknown order of iteration.')))
                raise PyJsTempException
            SWITCHED = True
            break
        var.put(u'sourceRoot', var.get(u"this").get(u'sourceRoot'))
        @Js
        def PyJs_anonymous_169_(mapping, this, arguments, var=var):
            var = Scope({u'this':this, u'mapping':mapping, u'arguments':arguments}, var)
            var.registers([u'source', u'mapping'])
            var.put(u'source', (var.get(u"null") if PyJsStrictEq(var.get(u'mapping').get(u'source'),var.get(u"null")) else var.get(u"this").get(u'_sources').callprop(u'at', var.get(u'mapping').get(u'source'))))
            var.put(u'source', var.get(u'util').callprop(u'computeSourceURL', var.get(u'sourceRoot'), var.get(u'source'), var.get(u"this").get(u'_sourceMapURL')))
            PyJs_Object_170_ = Js({u'source':var.get(u'source'),u'generatedLine':var.get(u'mapping').get(u'generatedLine'),u'generatedColumn':var.get(u'mapping').get(u'generatedColumn'),u'originalLine':var.get(u'mapping').get(u'originalLine'),u'originalColumn':var.get(u'mapping').get(u'originalColumn'),u'name':(var.get(u"null") if PyJsStrictEq(var.get(u'mapping').get(u'name'),var.get(u"null")) else var.get(u"this").get(u'_names').callprop(u'at', var.get(u'mapping').get(u'name')))})
            return PyJs_Object_170_
        PyJs_anonymous_169_._set_name(u'anonymous')
        var.get(u'mappings').callprop(u'map', PyJs_anonymous_169_, var.get(u"this")).callprop(u'forEach', var.get(u'aCallback'), var.get(u'context'))
    PyJs_SourceMapConsumer_eachMapping_168_._set_name(u'SourceMapConsumer_eachMapping')
    var.get(u'SourceMapConsumer').get(u'prototype').put(u'eachMapping', PyJs_SourceMapConsumer_eachMapping_168_)
    @Js
    def PyJs_SourceMapConsumer_allGeneratedPositionsFor_171_(aArgs, this, arguments, var=var):
        var = Scope({u'this':this, u'SourceMapConsumer_allGeneratedPositionsFor':PyJs_SourceMapConsumer_allGeneratedPositionsFor_171_, u'arguments':arguments, u'aArgs':aArgs}, var)
        var.registers([u'index', u'mappings', u'originalColumn', u'needle', u'mapping', u'originalLine', u'aArgs', u'line'])
        var.put(u'line', var.get(u'util').callprop(u'getArg', var.get(u'aArgs'), Js(u'line')))
        PyJs_Object_172_ = Js({u'source':var.get(u'util').callprop(u'getArg', var.get(u'aArgs'), Js(u'source')),u'originalLine':var.get(u'line'),u'originalColumn':var.get(u'util').callprop(u'getArg', var.get(u'aArgs'), Js(u'column'), Js(0.0))})
        var.put(u'needle', PyJs_Object_172_)
        var.get(u'needle').put(u'source', var.get(u"this").callprop(u'_findSourceIndex', var.get(u'needle').get(u'source')))
        if (var.get(u'needle').get(u'source')<Js(0.0)):
            return Js([])
        var.put(u'mappings', Js([]))
        var.put(u'index', var.get(u"this").callprop(u'_findMapping', var.get(u'needle'), var.get(u"this").get(u'_originalMappings'), Js(u'originalLine'), Js(u'originalColumn'), var.get(u'util').get(u'compareByOriginalPositions'), var.get(u'binarySearch').get(u'LEAST_UPPER_BOUND')))
        if (var.get(u'index')>=Js(0.0)):
            var.put(u'mapping', var.get(u"this").get(u'_originalMappings').get(var.get(u'index')))
            if PyJsStrictEq(var.get(u'aArgs').get(u'column'),var.get(u'undefined')):
                var.put(u'originalLine', var.get(u'mapping').get(u'originalLine'))
                while (var.get(u'mapping') and PyJsStrictEq(var.get(u'mapping').get(u'originalLine'),var.get(u'originalLine'))):
                    PyJs_Object_173_ = Js({u'line':var.get(u'util').callprop(u'getArg', var.get(u'mapping'), Js(u'generatedLine'), var.get(u"null")),u'column':var.get(u'util').callprop(u'getArg', var.get(u'mapping'), Js(u'generatedColumn'), var.get(u"null")),u'lastColumn':var.get(u'util').callprop(u'getArg', var.get(u'mapping'), Js(u'lastGeneratedColumn'), var.get(u"null"))})
                    var.get(u'mappings').callprop(u'push', PyJs_Object_173_)
                    var.put(u'mapping', var.get(u"this").get(u'_originalMappings').get(var.put(u'index',Js(var.get(u'index').to_number())+Js(1))))
            else:
                var.put(u'originalColumn', var.get(u'mapping').get(u'originalColumn'))
                while ((var.get(u'mapping') and PyJsStrictEq(var.get(u'mapping').get(u'originalLine'),var.get(u'line'))) and (var.get(u'mapping').get(u'originalColumn')==var.get(u'originalColumn'))):
                    PyJs_Object_174_ = Js({u'line':var.get(u'util').callprop(u'getArg', var.get(u'mapping'), Js(u'generatedLine'), var.get(u"null")),u'column':var.get(u'util').callprop(u'getArg', var.get(u'mapping'), Js(u'generatedColumn'), var.get(u"null")),u'lastColumn':var.get(u'util').callprop(u'getArg', var.get(u'mapping'), Js(u'lastGeneratedColumn'), var.get(u"null"))})
                    var.get(u'mappings').callprop(u'push', PyJs_Object_174_)
                    var.put(u'mapping', var.get(u"this").get(u'_originalMappings').get(var.put(u'index',Js(var.get(u'index').to_number())+Js(1))))
        return var.get(u'mappings')
    PyJs_SourceMapConsumer_allGeneratedPositionsFor_171_._set_name(u'SourceMapConsumer_allGeneratedPositionsFor')
    var.get(u'SourceMapConsumer').get(u'prototype').put(u'allGeneratedPositionsFor', PyJs_SourceMapConsumer_allGeneratedPositionsFor_171_)
    var.get(u'exports').put(u'SourceMapConsumer', var.get(u'SourceMapConsumer'))
    pass
    var.get(u'BasicSourceMapConsumer').put(u'prototype', var.get(u'Object').callprop(u'create', var.get(u'SourceMapConsumer').get(u'prototype')))
    var.get(u'BasicSourceMapConsumer').get(u'prototype').put(u'consumer', var.get(u'SourceMapConsumer'))
    @Js
    def PyJs_anonymous_177_(aSource, this, arguments, var=var):
        var = Scope({u'this':this, u'aSource':aSource, u'arguments':arguments}, var)
        var.registers([u'i', u'relativeSource', u'aSource'])
        var.put(u'relativeSource', var.get(u'aSource'))
        if (var.get(u"this").get(u'sourceRoot')!=var.get(u"null")):
            var.put(u'relativeSource', var.get(u'util').callprop(u'relative', var.get(u"this").get(u'sourceRoot'), var.get(u'relativeSource')))
        if var.get(u"this").get(u'_sources').callprop(u'has', var.get(u'relativeSource')):
            return var.get(u"this").get(u'_sources').callprop(u'indexOf', var.get(u'relativeSource'))
        pass
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u"this").get(u'_absoluteSources').get(u'length')):
            try:
                if (var.get(u"this").get(u'_absoluteSources').get(var.get(u'i'))==var.get(u'aSource')):
                    return var.get(u'i')
            finally:
                    var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
        return (-Js(1.0))
    PyJs_anonymous_177_._set_name(u'anonymous')
    var.get(u'BasicSourceMapConsumer').get(u'prototype').put(u'_findSourceIndex', PyJs_anonymous_177_)
    @Js
    def PyJs_SourceMapConsumer_fromSourceMap_178_(aSourceMap, aSourceMapURL, this, arguments, var=var):
        var = Scope({u'this':this, u'aSourceMap':aSourceMap, u'SourceMapConsumer_fromSourceMap':PyJs_SourceMapConsumer_fromSourceMap_178_, u'arguments':arguments, u'aSourceMapURL':aSourceMapURL}, var)
        var.registers([u'aSourceMapURL', u'i', u'aSourceMap', u'srcMapping', u'destGeneratedMappings', u'destMapping', u'destOriginalMappings', u'sources', u'length', u'generatedMappings', u'names', u'smc'])
        var.put(u'smc', var.get(u'Object').callprop(u'create', var.get(u'BasicSourceMapConsumer').get(u'prototype')))
        var.put(u'names', var.get(u'smc').put(u'_names', var.get(u'ArraySet').callprop(u'fromArray', var.get(u'aSourceMap').get(u'_names').callprop(u'toArray'), Js(True))))
        var.put(u'sources', var.get(u'smc').put(u'_sources', var.get(u'ArraySet').callprop(u'fromArray', var.get(u'aSourceMap').get(u'_sources').callprop(u'toArray'), Js(True))))
        var.get(u'smc').put(u'sourceRoot', var.get(u'aSourceMap').get(u'_sourceRoot'))
        var.get(u'smc').put(u'sourcesContent', var.get(u'aSourceMap').callprop(u'_generateSourcesContent', var.get(u'smc').get(u'_sources').callprop(u'toArray'), var.get(u'smc').get(u'sourceRoot')))
        var.get(u'smc').put(u'file', var.get(u'aSourceMap').get(u'_file'))
        var.get(u'smc').put(u'_sourceMapURL', var.get(u'aSourceMapURL'))
        @Js
        def PyJs_anonymous_179_(s, this, arguments, var=var):
            var = Scope({u'this':this, u's':s, u'arguments':arguments}, var)
            var.registers([u's'])
            return var.get(u'util').callprop(u'computeSourceURL', var.get(u'smc').get(u'sourceRoot'), var.get(u's'), var.get(u'aSourceMapURL'))
        PyJs_anonymous_179_._set_name(u'anonymous')
        var.get(u'smc').put(u'_absoluteSources', var.get(u'smc').get(u'_sources').callprop(u'toArray').callprop(u'map', PyJs_anonymous_179_))
        var.put(u'generatedMappings', var.get(u'aSourceMap').get(u'_mappings').callprop(u'toArray').callprop(u'slice'))
        var.put(u'destGeneratedMappings', var.get(u'smc').put(u'__generatedMappings', Js([])))
        var.put(u'destOriginalMappings', var.get(u'smc').put(u'__originalMappings', Js([])))
        #for JS loop
        var.put(u'i', Js(0.0))
        var.put(u'length', var.get(u'generatedMappings').get(u'length'))
        while (var.get(u'i')<var.get(u'length')):
            try:
                var.put(u'srcMapping', var.get(u'generatedMappings').get(var.get(u'i')))
                var.put(u'destMapping', var.get(u'Mapping').create())
                var.get(u'destMapping').put(u'generatedLine', var.get(u'srcMapping').get(u'generatedLine'))
                var.get(u'destMapping').put(u'generatedColumn', var.get(u'srcMapping').get(u'generatedColumn'))
                if var.get(u'srcMapping').get(u'source'):
                    var.get(u'destMapping').put(u'source', var.get(u'sources').callprop(u'indexOf', var.get(u'srcMapping').get(u'source')))
                    var.get(u'destMapping').put(u'originalLine', var.get(u'srcMapping').get(u'originalLine'))
                    var.get(u'destMapping').put(u'originalColumn', var.get(u'srcMapping').get(u'originalColumn'))
                    if var.get(u'srcMapping').get(u'name'):
                        var.get(u'destMapping').put(u'name', var.get(u'names').callprop(u'indexOf', var.get(u'srcMapping').get(u'name')))
                    var.get(u'destOriginalMappings').callprop(u'push', var.get(u'destMapping'))
                var.get(u'destGeneratedMappings').callprop(u'push', var.get(u'destMapping'))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        var.get(u'quickSort')(var.get(u'smc').get(u'__originalMappings'), var.get(u'util').get(u'compareByOriginalPositions'))
        return var.get(u'smc')
    PyJs_SourceMapConsumer_fromSourceMap_178_._set_name(u'SourceMapConsumer_fromSourceMap')
    var.get(u'BasicSourceMapConsumer').put(u'fromSourceMap', PyJs_SourceMapConsumer_fromSourceMap_178_)
    var.get(u'BasicSourceMapConsumer').get(u'prototype').put(u'_version', Js(3.0))
    @Js
    def PyJs_get_181_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'get':PyJs_get_181_}, var)
        var.registers([])
        return var.get(u"this").get(u'_absoluteSources').callprop(u'slice')
    PyJs_get_181_._set_name(u'get')
    PyJs_Object_180_ = Js({u'get':PyJs_get_181_})
    var.get(u'Object').callprop(u'defineProperty', var.get(u'BasicSourceMapConsumer').get(u'prototype'), Js(u'sources'), PyJs_Object_180_)
    pass
    @Js
    def PyJs_SourceMapConsumer_parseMappings_182_(aStr, aSourceRoot, this, arguments, var=var):
        var = Scope({u'this':this, u'SourceMapConsumer_parseMappings':PyJs_SourceMapConsumer_parseMappings_182_, u'aStr':aStr, u'aSourceRoot':aSourceRoot, u'arguments':arguments}, var)
        var.registers([u'originalMappings', u'index', u'previousOriginalLine', u'previousOriginalColumn', u'previousSource', u'previousGeneratedColumn', u'end', u'mapping', u'previousName', u'aSourceRoot', u'length', u'generatedMappings', u'generatedLine', u'temp', u'str', u'cachedSegments', u'aStr', u'value', u'segment'])
        var.put(u'generatedLine', Js(1.0))
        var.put(u'previousGeneratedColumn', Js(0.0))
        var.put(u'previousOriginalLine', Js(0.0))
        var.put(u'previousOriginalColumn', Js(0.0))
        var.put(u'previousSource', Js(0.0))
        var.put(u'previousName', Js(0.0))
        var.put(u'length', var.get(u'aStr').get(u'length'))
        var.put(u'index', Js(0.0))
        PyJs_Object_183_ = Js({})
        var.put(u'cachedSegments', PyJs_Object_183_)
        PyJs_Object_184_ = Js({})
        var.put(u'temp', PyJs_Object_184_)
        var.put(u'originalMappings', Js([]))
        var.put(u'generatedMappings', Js([]))
        pass
        while (var.get(u'index')<var.get(u'length')):
            if PyJsStrictEq(var.get(u'aStr').callprop(u'charAt', var.get(u'index')),Js(u';')):
                (var.put(u'generatedLine',Js(var.get(u'generatedLine').to_number())+Js(1))-Js(1))
                (var.put(u'index',Js(var.get(u'index').to_number())+Js(1))-Js(1))
                var.put(u'previousGeneratedColumn', Js(0.0))
            else:
                if PyJsStrictEq(var.get(u'aStr').callprop(u'charAt', var.get(u'index')),Js(u',')):
                    (var.put(u'index',Js(var.get(u'index').to_number())+Js(1))-Js(1))
                else:
                    var.put(u'mapping', var.get(u'Mapping').create())
                    var.get(u'mapping').put(u'generatedLine', var.get(u'generatedLine'))
                    #for JS loop
                    var.put(u'end', var.get(u'index'))
                    while (var.get(u'end')<var.get(u'length')):
                        try:
                            if var.get(u"this").callprop(u'_charIsMappingSeparator', var.get(u'aStr'), var.get(u'end')):
                                break
                        finally:
                                (var.put(u'end',Js(var.get(u'end').to_number())+Js(1))-Js(1))
                    var.put(u'str', var.get(u'aStr').callprop(u'slice', var.get(u'index'), var.get(u'end')))
                    var.put(u'segment', var.get(u'cachedSegments').get(var.get(u'str')))
                    if var.get(u'segment'):
                        var.put(u'index', var.get(u'str').get(u'length'), u'+')
                    else:
                        var.put(u'segment', Js([]))
                        while (var.get(u'index')<var.get(u'end')):
                            var.get(u'base64VLQ').callprop(u'decode', var.get(u'aStr'), var.get(u'index'), var.get(u'temp'))
                            var.put(u'value', var.get(u'temp').get(u'value'))
                            var.put(u'index', var.get(u'temp').get(u'rest'))
                            var.get(u'segment').callprop(u'push', var.get(u'value'))
                        if PyJsStrictEq(var.get(u'segment').get(u'length'),Js(2.0)):
                            PyJsTempException = JsToPyException(var.get(u'Error').create(Js(u'Found a source, but no line and column')))
                            raise PyJsTempException
                        if PyJsStrictEq(var.get(u'segment').get(u'length'),Js(3.0)):
                            PyJsTempException = JsToPyException(var.get(u'Error').create(Js(u'Found a source and line, but no column')))
                            raise PyJsTempException
                        var.get(u'cachedSegments').put(var.get(u'str'), var.get(u'segment'))
                    var.get(u'mapping').put(u'generatedColumn', (var.get(u'previousGeneratedColumn')+var.get(u'segment').get(u'0')))
                    var.put(u'previousGeneratedColumn', var.get(u'mapping').get(u'generatedColumn'))
                    if (var.get(u'segment').get(u'length')>Js(1.0)):
                        var.get(u'mapping').put(u'source', (var.get(u'previousSource')+var.get(u'segment').get(u'1')))
                        var.put(u'previousSource', var.get(u'segment').get(u'1'), u'+')
                        var.get(u'mapping').put(u'originalLine', (var.get(u'previousOriginalLine')+var.get(u'segment').get(u'2')))
                        var.put(u'previousOriginalLine', var.get(u'mapping').get(u'originalLine'))
                        var.get(u'mapping').put(u'originalLine', Js(1.0), u'+')
                        var.get(u'mapping').put(u'originalColumn', (var.get(u'previousOriginalColumn')+var.get(u'segment').get(u'3')))
                        var.put(u'previousOriginalColumn', var.get(u'mapping').get(u'originalColumn'))
                        if (var.get(u'segment').get(u'length')>Js(4.0)):
                            var.get(u'mapping').put(u'name', (var.get(u'previousName')+var.get(u'segment').get(u'4')))
                            var.put(u'previousName', var.get(u'segment').get(u'4'), u'+')
                    var.get(u'generatedMappings').callprop(u'push', var.get(u'mapping'))
                    if PyJsStrictEq(var.get(u'mapping').get(u'originalLine').typeof(),Js(u'number')):
                        var.get(u'originalMappings').callprop(u'push', var.get(u'mapping'))
        var.get(u'quickSort')(var.get(u'generatedMappings'), var.get(u'util').get(u'compareByGeneratedPositionsDeflated'))
        var.get(u"this").put(u'__generatedMappings', var.get(u'generatedMappings'))
        var.get(u'quickSort')(var.get(u'originalMappings'), var.get(u'util').get(u'compareByOriginalPositions'))
        var.get(u"this").put(u'__originalMappings', var.get(u'originalMappings'))
    PyJs_SourceMapConsumer_parseMappings_182_._set_name(u'SourceMapConsumer_parseMappings')
    var.get(u'BasicSourceMapConsumer').get(u'prototype').put(u'_parseMappings', PyJs_SourceMapConsumer_parseMappings_182_)
    @Js
    def PyJs_SourceMapConsumer_findMapping_185_(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias, this, arguments, var=var):
        var = Scope({u'aNeedle':aNeedle, u'SourceMapConsumer_findMapping':PyJs_SourceMapConsumer_findMapping_185_, u'this':this, u'aBias':aBias, u'aColumnName':aColumnName, u'aComparator':aComparator, u'arguments':arguments, u'aMappings':aMappings, u'aLineName':aLineName}, var)
        var.registers([u'aNeedle', u'aBias', u'aColumnName', u'aComparator', u'aMappings', u'aLineName'])
        if (var.get(u'aNeedle').get(var.get(u'aLineName'))<=Js(0.0)):
            PyJsTempException = JsToPyException(var.get(u'TypeError').create((Js(u'Line must be greater than or equal to 1, got ')+var.get(u'aNeedle').get(var.get(u'aLineName')))))
            raise PyJsTempException
        if (var.get(u'aNeedle').get(var.get(u'aColumnName'))<Js(0.0)):
            PyJsTempException = JsToPyException(var.get(u'TypeError').create((Js(u'Column must be greater than or equal to 0, got ')+var.get(u'aNeedle').get(var.get(u'aColumnName')))))
            raise PyJsTempException
        return var.get(u'binarySearch').callprop(u'search', var.get(u'aNeedle'), var.get(u'aMappings'), var.get(u'aComparator'), var.get(u'aBias'))
    PyJs_SourceMapConsumer_findMapping_185_._set_name(u'SourceMapConsumer_findMapping')
    var.get(u'BasicSourceMapConsumer').get(u'prototype').put(u'_findMapping', PyJs_SourceMapConsumer_findMapping_185_)
    @Js
    def PyJs_SourceMapConsumer_computeColumnSpans_186_(this, arguments, var=var):
        var = Scope({u'this':this, u'SourceMapConsumer_computeColumnSpans':PyJs_SourceMapConsumer_computeColumnSpans_186_, u'arguments':arguments}, var)
        var.registers([u'nextMapping', u'index', u'mapping'])
        #for JS loop
        var.put(u'index', Js(0.0))
        while (var.get(u'index')<var.get(u"this").get(u'_generatedMappings').get(u'length')):
            try:
                var.put(u'mapping', var.get(u"this").get(u'_generatedMappings').get(var.get(u'index')))
                if ((var.get(u'index')+Js(1.0))<var.get(u"this").get(u'_generatedMappings').get(u'length')):
                    var.put(u'nextMapping', var.get(u"this").get(u'_generatedMappings').get((var.get(u'index')+Js(1.0))))
                    if PyJsStrictEq(var.get(u'mapping').get(u'generatedLine'),var.get(u'nextMapping').get(u'generatedLine')):
                        var.get(u'mapping').put(u'lastGeneratedColumn', (var.get(u'nextMapping').get(u'generatedColumn')-Js(1.0)))
                        continue
                var.get(u'mapping').put(u'lastGeneratedColumn', var.get(u'Infinity'))
            finally:
                    var.put(u'index',Js(var.get(u'index').to_number())+Js(1))
    PyJs_SourceMapConsumer_computeColumnSpans_186_._set_name(u'SourceMapConsumer_computeColumnSpans')
    var.get(u'BasicSourceMapConsumer').get(u'prototype').put(u'computeColumnSpans', PyJs_SourceMapConsumer_computeColumnSpans_186_)
    @Js
    def PyJs_SourceMapConsumer_originalPositionFor_187_(aArgs, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'SourceMapConsumer_originalPositionFor':PyJs_SourceMapConsumer_originalPositionFor_187_, u'aArgs':aArgs}, var)
        var.registers([u'index', u'name', u'aArgs', u'needle', u'mapping', u'source'])
        PyJs_Object_188_ = Js({u'generatedLine':var.get(u'util').callprop(u'getArg', var.get(u'aArgs'), Js(u'line')),u'generatedColumn':var.get(u'util').callprop(u'getArg', var.get(u'aArgs'), Js(u'column'))})
        var.put(u'needle', PyJs_Object_188_)
        var.put(u'index', var.get(u"this").callprop(u'_findMapping', var.get(u'needle'), var.get(u"this").get(u'_generatedMappings'), Js(u'generatedLine'), Js(u'generatedColumn'), var.get(u'util').get(u'compareByGeneratedPositionsDeflated'), var.get(u'util').callprop(u'getArg', var.get(u'aArgs'), Js(u'bias'), var.get(u'SourceMapConsumer').get(u'GREATEST_LOWER_BOUND'))))
        if (var.get(u'index')>=Js(0.0)):
            var.put(u'mapping', var.get(u"this").get(u'_generatedMappings').get(var.get(u'index')))
            if PyJsStrictEq(var.get(u'mapping').get(u'generatedLine'),var.get(u'needle').get(u'generatedLine')):
                var.put(u'source', var.get(u'util').callprop(u'getArg', var.get(u'mapping'), Js(u'source'), var.get(u"null")))
                if PyJsStrictNeq(var.get(u'source'),var.get(u"null")):
                    var.put(u'source', var.get(u"this").get(u'_sources').callprop(u'at', var.get(u'source')))
                    var.put(u'source', var.get(u'util').callprop(u'computeSourceURL', var.get(u"this").get(u'sourceRoot'), var.get(u'source'), var.get(u"this").get(u'_sourceMapURL')))
                var.put(u'name', var.get(u'util').callprop(u'getArg', var.get(u'mapping'), Js(u'name'), var.get(u"null")))
                if PyJsStrictNeq(var.get(u'name'),var.get(u"null")):
                    var.put(u'name', var.get(u"this").get(u'_names').callprop(u'at', var.get(u'name')))
                PyJs_Object_189_ = Js({u'source':var.get(u'source'),u'line':var.get(u'util').callprop(u'getArg', var.get(u'mapping'), Js(u'originalLine'), var.get(u"null")),u'column':var.get(u'util').callprop(u'getArg', var.get(u'mapping'), Js(u'originalColumn'), var.get(u"null")),u'name':var.get(u'name')})
                return PyJs_Object_189_
        PyJs_Object_190_ = Js({u'source':var.get(u"null"),u'line':var.get(u"null"),u'column':var.get(u"null"),u'name':var.get(u"null")})
        return PyJs_Object_190_
    PyJs_SourceMapConsumer_originalPositionFor_187_._set_name(u'SourceMapConsumer_originalPositionFor')
    var.get(u'BasicSourceMapConsumer').get(u'prototype').put(u'originalPositionFor', PyJs_SourceMapConsumer_originalPositionFor_187_)
    @Js
    def PyJs_BasicSourceMapConsumer_hasContentsOfAllSources_191_(this, arguments, var=var):
        var = Scope({u'this':this, u'BasicSourceMapConsumer_hasContentsOfAllSources':PyJs_BasicSourceMapConsumer_hasContentsOfAllSources_191_, u'arguments':arguments}, var)
        var.registers([])
        if var.get(u"this").get(u'sourcesContent').neg():
            return Js(False)
        @Js
        def PyJs_anonymous_192_(sc, this, arguments, var=var):
            var = Scope({u'sc':sc, u'this':this, u'arguments':arguments}, var)
            var.registers([u'sc'])
            return (var.get(u'sc')==var.get(u"null"))
        PyJs_anonymous_192_._set_name(u'anonymous')
        return ((var.get(u"this").get(u'sourcesContent').get(u'length')>=var.get(u"this").get(u'_sources').callprop(u'size')) and var.get(u"this").get(u'sourcesContent').callprop(u'some', PyJs_anonymous_192_).neg())
    PyJs_BasicSourceMapConsumer_hasContentsOfAllSources_191_._set_name(u'BasicSourceMapConsumer_hasContentsOfAllSources')
    var.get(u'BasicSourceMapConsumer').get(u'prototype').put(u'hasContentsOfAllSources', PyJs_BasicSourceMapConsumer_hasContentsOfAllSources_191_)
    @Js
    def PyJs_SourceMapConsumer_sourceContentFor_193_(aSource, nullOnMissing, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'SourceMapConsumer_sourceContentFor':PyJs_SourceMapConsumer_sourceContentFor_193_, u'aSource':aSource, u'nullOnMissing':nullOnMissing}, var)
        var.registers([u'index', u'nullOnMissing', u'url', u'fileUriAbsPath', u'relativeSource', u'aSource'])
        if var.get(u"this").get(u'sourcesContent').neg():
            return var.get(u"null")
        var.put(u'index', var.get(u"this").callprop(u'_findSourceIndex', var.get(u'aSource')))
        if (var.get(u'index')>=Js(0.0)):
            return var.get(u"this").get(u'sourcesContent').get(var.get(u'index'))
        var.put(u'relativeSource', var.get(u'aSource'))
        if (var.get(u"this").get(u'sourceRoot')!=var.get(u"null")):
            var.put(u'relativeSource', var.get(u'util').callprop(u'relative', var.get(u"this").get(u'sourceRoot'), var.get(u'relativeSource')))
        pass
        if ((var.get(u"this").get(u'sourceRoot')!=var.get(u"null")) and var.put(u'url', var.get(u'util').callprop(u'urlParse', var.get(u"this").get(u'sourceRoot')))):
            var.put(u'fileUriAbsPath', var.get(u'relativeSource').callprop(u'replace', JsRegExp(u'/^file:\\/\\//'), Js(u'')))
            if ((var.get(u'url').get(u'scheme')==Js(u'file')) and var.get(u"this").get(u'_sources').callprop(u'has', var.get(u'fileUriAbsPath'))):
                return var.get(u"this").get(u'sourcesContent').get(var.get(u"this").get(u'_sources').callprop(u'indexOf', var.get(u'fileUriAbsPath')))
            if ((var.get(u'url').get(u'path').neg() or (var.get(u'url').get(u'path')==Js(u'/'))) and var.get(u"this").get(u'_sources').callprop(u'has', (Js(u'/')+var.get(u'relativeSource')))):
                return var.get(u"this").get(u'sourcesContent').get(var.get(u"this").get(u'_sources').callprop(u'indexOf', (Js(u'/')+var.get(u'relativeSource'))))
        if var.get(u'nullOnMissing'):
            return var.get(u"null")
        else:
            PyJsTempException = JsToPyException(var.get(u'Error').create(((Js(u'"')+var.get(u'relativeSource'))+Js(u'" is not in the SourceMap.'))))
            raise PyJsTempException
    PyJs_SourceMapConsumer_sourceContentFor_193_._set_name(u'SourceMapConsumer_sourceContentFor')
    var.get(u'BasicSourceMapConsumer').get(u'prototype').put(u'sourceContentFor', PyJs_SourceMapConsumer_sourceContentFor_193_)
    @Js
    def PyJs_SourceMapConsumer_generatedPositionFor_194_(aArgs, this, arguments, var=var):
        var = Scope({u'this':this, u'SourceMapConsumer_generatedPositionFor':PyJs_SourceMapConsumer_generatedPositionFor_194_, u'arguments':arguments, u'aArgs':aArgs}, var)
        var.registers([u'aArgs', u'source', u'needle', u'mapping', u'index'])
        var.put(u'source', var.get(u'util').callprop(u'getArg', var.get(u'aArgs'), Js(u'source')))
        var.put(u'source', var.get(u"this").callprop(u'_findSourceIndex', var.get(u'source')))
        if (var.get(u'source')<Js(0.0)):
            PyJs_Object_195_ = Js({u'line':var.get(u"null"),u'column':var.get(u"null"),u'lastColumn':var.get(u"null")})
            return PyJs_Object_195_
        PyJs_Object_196_ = Js({u'source':var.get(u'source'),u'originalLine':var.get(u'util').callprop(u'getArg', var.get(u'aArgs'), Js(u'line')),u'originalColumn':var.get(u'util').callprop(u'getArg', var.get(u'aArgs'), Js(u'column'))})
        var.put(u'needle', PyJs_Object_196_)
        var.put(u'index', var.get(u"this").callprop(u'_findMapping', var.get(u'needle'), var.get(u"this").get(u'_originalMappings'), Js(u'originalLine'), Js(u'originalColumn'), var.get(u'util').get(u'compareByOriginalPositions'), var.get(u'util').callprop(u'getArg', var.get(u'aArgs'), Js(u'bias'), var.get(u'SourceMapConsumer').get(u'GREATEST_LOWER_BOUND'))))
        if (var.get(u'index')>=Js(0.0)):
            var.put(u'mapping', var.get(u"this").get(u'_originalMappings').get(var.get(u'index')))
            if PyJsStrictEq(var.get(u'mapping').get(u'source'),var.get(u'needle').get(u'source')):
                PyJs_Object_197_ = Js({u'line':var.get(u'util').callprop(u'getArg', var.get(u'mapping'), Js(u'generatedLine'), var.get(u"null")),u'column':var.get(u'util').callprop(u'getArg', var.get(u'mapping'), Js(u'generatedColumn'), var.get(u"null")),u'lastColumn':var.get(u'util').callprop(u'getArg', var.get(u'mapping'), Js(u'lastGeneratedColumn'), var.get(u"null"))})
                return PyJs_Object_197_
        PyJs_Object_198_ = Js({u'line':var.get(u"null"),u'column':var.get(u"null"),u'lastColumn':var.get(u"null")})
        return PyJs_Object_198_
    PyJs_SourceMapConsumer_generatedPositionFor_194_._set_name(u'SourceMapConsumer_generatedPositionFor')
    var.get(u'BasicSourceMapConsumer').get(u'prototype').put(u'generatedPositionFor', PyJs_SourceMapConsumer_generatedPositionFor_194_)
    var.get(u'exports').put(u'BasicSourceMapConsumer', var.get(u'BasicSourceMapConsumer'))
    pass
    var.get(u'IndexedSourceMapConsumer').put(u'prototype', var.get(u'Object').callprop(u'create', var.get(u'SourceMapConsumer').get(u'prototype')))
    var.get(u'IndexedSourceMapConsumer').get(u'prototype').put(u'constructor', var.get(u'SourceMapConsumer'))
    var.get(u'IndexedSourceMapConsumer').get(u'prototype').put(u'_version', Js(3.0))
    @Js
    def PyJs_get_204_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'get':PyJs_get_204_}, var)
        var.registers([u'i', u'sources', u'j'])
        var.put(u'sources', Js([]))
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u"this").get(u'_sections').get(u'length')):
            try:
                #for JS loop
                var.put(u'j', Js(0.0))
                while (var.get(u'j')<var.get(u"this").get(u'_sections').get(var.get(u'i')).get(u'consumer').get(u'sources').get(u'length')):
                    try:
                        var.get(u'sources').callprop(u'push', var.get(u"this").get(u'_sections').get(var.get(u'i')).get(u'consumer').get(u'sources').get(var.get(u'j')))
                    finally:
                            (var.put(u'j',Js(var.get(u'j').to_number())+Js(1))-Js(1))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return var.get(u'sources')
    PyJs_get_204_._set_name(u'get')
    PyJs_Object_203_ = Js({u'get':PyJs_get_204_})
    var.get(u'Object').callprop(u'defineProperty', var.get(u'IndexedSourceMapConsumer').get(u'prototype'), Js(u'sources'), PyJs_Object_203_)
    @Js
    def PyJs_IndexedSourceMapConsumer_originalPositionFor_205_(aArgs, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'IndexedSourceMapConsumer_originalPositionFor':PyJs_IndexedSourceMapConsumer_originalPositionFor_205_, u'aArgs':aArgs}, var)
        var.registers([u'section', u'needle', u'aArgs', u'sectionIndex'])
        PyJs_Object_206_ = Js({u'generatedLine':var.get(u'util').callprop(u'getArg', var.get(u'aArgs'), Js(u'line')),u'generatedColumn':var.get(u'util').callprop(u'getArg', var.get(u'aArgs'), Js(u'column'))})
        var.put(u'needle', PyJs_Object_206_)
        @Js
        def PyJs_anonymous_207_(needle, section, this, arguments, var=var):
            var = Scope({u'this':this, u'section':section, u'needle':needle, u'arguments':arguments}, var)
            var.registers([u'section', u'needle', u'cmp'])
            var.put(u'cmp', (var.get(u'needle').get(u'generatedLine')-var.get(u'section').get(u'generatedOffset').get(u'generatedLine')))
            if var.get(u'cmp'):
                return var.get(u'cmp')
            return (var.get(u'needle').get(u'generatedColumn')-var.get(u'section').get(u'generatedOffset').get(u'generatedColumn'))
        PyJs_anonymous_207_._set_name(u'anonymous')
        var.put(u'sectionIndex', var.get(u'binarySearch').callprop(u'search', var.get(u'needle'), var.get(u"this").get(u'_sections'), PyJs_anonymous_207_))
        var.put(u'section', var.get(u"this").get(u'_sections').get(var.get(u'sectionIndex')))
        if var.get(u'section').neg():
            PyJs_Object_208_ = Js({u'source':var.get(u"null"),u'line':var.get(u"null"),u'column':var.get(u"null"),u'name':var.get(u"null")})
            return PyJs_Object_208_
        PyJs_Object_209_ = Js({u'line':(var.get(u'needle').get(u'generatedLine')-(var.get(u'section').get(u'generatedOffset').get(u'generatedLine')-Js(1.0))),u'column':(var.get(u'needle').get(u'generatedColumn')-((var.get(u'section').get(u'generatedOffset').get(u'generatedColumn')-Js(1.0)) if PyJsStrictEq(var.get(u'section').get(u'generatedOffset').get(u'generatedLine'),var.get(u'needle').get(u'generatedLine')) else Js(0.0))),u'bias':var.get(u'aArgs').get(u'bias')})
        return var.get(u'section').get(u'consumer').callprop(u'originalPositionFor', PyJs_Object_209_)
    PyJs_IndexedSourceMapConsumer_originalPositionFor_205_._set_name(u'IndexedSourceMapConsumer_originalPositionFor')
    var.get(u'IndexedSourceMapConsumer').get(u'prototype').put(u'originalPositionFor', PyJs_IndexedSourceMapConsumer_originalPositionFor_205_)
    @Js
    def PyJs_IndexedSourceMapConsumer_hasContentsOfAllSources_210_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'IndexedSourceMapConsumer_hasContentsOfAllSources':PyJs_IndexedSourceMapConsumer_hasContentsOfAllSources_210_}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_211_(s, this, arguments, var=var):
            var = Scope({u'this':this, u's':s, u'arguments':arguments}, var)
            var.registers([u's'])
            return var.get(u's').get(u'consumer').callprop(u'hasContentsOfAllSources')
        PyJs_anonymous_211_._set_name(u'anonymous')
        return var.get(u"this").get(u'_sections').callprop(u'every', PyJs_anonymous_211_)
    PyJs_IndexedSourceMapConsumer_hasContentsOfAllSources_210_._set_name(u'IndexedSourceMapConsumer_hasContentsOfAllSources')
    var.get(u'IndexedSourceMapConsumer').get(u'prototype').put(u'hasContentsOfAllSources', PyJs_IndexedSourceMapConsumer_hasContentsOfAllSources_210_)
    @Js
    def PyJs_IndexedSourceMapConsumer_sourceContentFor_212_(aSource, nullOnMissing, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'IndexedSourceMapConsumer_sourceContentFor':PyJs_IndexedSourceMapConsumer_sourceContentFor_212_, u'aSource':aSource, u'nullOnMissing':nullOnMissing}, var)
        var.registers([u'i', u'content', u'section', u'aSource', u'nullOnMissing'])
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u"this").get(u'_sections').get(u'length')):
            try:
                var.put(u'section', var.get(u"this").get(u'_sections').get(var.get(u'i')))
                var.put(u'content', var.get(u'section').get(u'consumer').callprop(u'sourceContentFor', var.get(u'aSource'), Js(True)))
                if var.get(u'content'):
                    return var.get(u'content')
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        if var.get(u'nullOnMissing'):
            return var.get(u"null")
        else:
            PyJsTempException = JsToPyException(var.get(u'Error').create(((Js(u'"')+var.get(u'aSource'))+Js(u'" is not in the SourceMap.'))))
            raise PyJsTempException
    PyJs_IndexedSourceMapConsumer_sourceContentFor_212_._set_name(u'IndexedSourceMapConsumer_sourceContentFor')
    var.get(u'IndexedSourceMapConsumer').get(u'prototype').put(u'sourceContentFor', PyJs_IndexedSourceMapConsumer_sourceContentFor_212_)
    @Js
    def PyJs_IndexedSourceMapConsumer_generatedPositionFor_213_(aArgs, this, arguments, var=var):
        var = Scope({u'this':this, u'IndexedSourceMapConsumer_generatedPositionFor':PyJs_IndexedSourceMapConsumer_generatedPositionFor_213_, u'arguments':arguments, u'aArgs':aArgs}, var)
        var.registers([u'i', u'section', u'generatedPosition', u'ret', u'aArgs'])
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u"this").get(u'_sections').get(u'length')):
            try:
                var.put(u'section', var.get(u"this").get(u'_sections').get(var.get(u'i')))
                if PyJsStrictEq(var.get(u'section').get(u'consumer').callprop(u'_findSourceIndex', var.get(u'util').callprop(u'getArg', var.get(u'aArgs'), Js(u'source'))),(-Js(1.0))):
                    continue
                var.put(u'generatedPosition', var.get(u'section').get(u'consumer').callprop(u'generatedPositionFor', var.get(u'aArgs')))
                if var.get(u'generatedPosition'):
                    PyJs_Object_214_ = Js({u'line':(var.get(u'generatedPosition').get(u'line')+(var.get(u'section').get(u'generatedOffset').get(u'generatedLine')-Js(1.0))),u'column':(var.get(u'generatedPosition').get(u'column')+((var.get(u'section').get(u'generatedOffset').get(u'generatedColumn')-Js(1.0)) if PyJsStrictEq(var.get(u'section').get(u'generatedOffset').get(u'generatedLine'),var.get(u'generatedPosition').get(u'line')) else Js(0.0)))})
                    var.put(u'ret', PyJs_Object_214_)
                    return var.get(u'ret')
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        PyJs_Object_215_ = Js({u'line':var.get(u"null"),u'column':var.get(u"null")})
        return PyJs_Object_215_
    PyJs_IndexedSourceMapConsumer_generatedPositionFor_213_._set_name(u'IndexedSourceMapConsumer_generatedPositionFor')
    var.get(u'IndexedSourceMapConsumer').get(u'prototype').put(u'generatedPositionFor', PyJs_IndexedSourceMapConsumer_generatedPositionFor_213_)
    @Js
    def PyJs_IndexedSourceMapConsumer_parseMappings_216_(aStr, aSourceRoot, this, arguments, var=var):
        var = Scope({u'this':this, u'aStr':aStr, u'aSourceRoot':aSourceRoot, u'IndexedSourceMapConsumer_parseMappings':PyJs_IndexedSourceMapConsumer_parseMappings_216_, u'arguments':arguments}, var)
        var.registers([u'name', u'i', u'section', u'j', u'aSourceRoot', u'mapping', u'adjustedMapping', u'source', u'sectionMappings', u'aStr'])
        var.get(u"this").put(u'__generatedMappings', Js([]))
        var.get(u"this").put(u'__originalMappings', Js([]))
        #for JS loop
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u"this").get(u'_sections').get(u'length')):
            try:
                var.put(u'section', var.get(u"this").get(u'_sections').get(var.get(u'i')))
                var.put(u'sectionMappings', var.get(u'section').get(u'consumer').get(u'_generatedMappings'))
                #for JS loop
                var.put(u'j', Js(0.0))
                while (var.get(u'j')<var.get(u'sectionMappings').get(u'length')):
                    try:
                        var.put(u'mapping', var.get(u'sectionMappings').get(var.get(u'j')))
                        var.put(u'source', var.get(u'section').get(u'consumer').get(u'_sources').callprop(u'at', var.get(u'mapping').get(u'source')))
                        var.put(u'source', var.get(u'util').callprop(u'computeSourceURL', var.get(u'section').get(u'consumer').get(u'sourceRoot'), var.get(u'source'), var.get(u"this").get(u'_sourceMapURL')))
                        var.get(u"this").get(u'_sources').callprop(u'add', var.get(u'source'))
                        var.put(u'source', var.get(u"this").get(u'_sources').callprop(u'indexOf', var.get(u'source')))
                        var.put(u'name', var.get(u"null"))
                        if var.get(u'mapping').get(u'name'):
                            var.put(u'name', var.get(u'section').get(u'consumer').get(u'_names').callprop(u'at', var.get(u'mapping').get(u'name')))
                            var.get(u"this").get(u'_names').callprop(u'add', var.get(u'name'))
                            var.put(u'name', var.get(u"this").get(u'_names').callprop(u'indexOf', var.get(u'name')))
                        PyJs_Object_217_ = Js({u'source':var.get(u'source'),u'generatedLine':(var.get(u'mapping').get(u'generatedLine')+(var.get(u'section').get(u'generatedOffset').get(u'generatedLine')-Js(1.0))),u'generatedColumn':(var.get(u'mapping').get(u'generatedColumn')+((var.get(u'section').get(u'generatedOffset').get(u'generatedColumn')-Js(1.0)) if PyJsStrictEq(var.get(u'section').get(u'generatedOffset').get(u'generatedLine'),var.get(u'mapping').get(u'generatedLine')) else Js(0.0))),u'originalLine':var.get(u'mapping').get(u'originalLine'),u'originalColumn':var.get(u'mapping').get(u'originalColumn'),u'name':var.get(u'name')})
                        var.put(u'adjustedMapping', PyJs_Object_217_)
                        var.get(u"this").get(u'__generatedMappings').callprop(u'push', var.get(u'adjustedMapping'))
                        if PyJsStrictEq(var.get(u'adjustedMapping').get(u'originalLine').typeof(),Js(u'number')):
                            var.get(u"this").get(u'__originalMappings').callprop(u'push', var.get(u'adjustedMapping'))
                    finally:
                            (var.put(u'j',Js(var.get(u'j').to_number())+Js(1))-Js(1))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        var.get(u'quickSort')(var.get(u"this").get(u'__generatedMappings'), var.get(u'util').get(u'compareByGeneratedPositionsDeflated'))
        var.get(u'quickSort')(var.get(u"this").get(u'__originalMappings'), var.get(u'util').get(u'compareByOriginalPositions'))
    PyJs_IndexedSourceMapConsumer_parseMappings_216_._set_name(u'IndexedSourceMapConsumer_parseMappings')
    var.get(u'IndexedSourceMapConsumer').get(u'prototype').put(u'_parseMappings', PyJs_IndexedSourceMapConsumer_parseMappings_216_)
    var.get(u'exports').put(u'IndexedSourceMapConsumer', var.get(u'IndexedSourceMapConsumer'))
PyJs_anonymous_160_._set_name(u'anonymous')
PyJs_Object_218_ = Js({u'./array-set':Js(2.0),u'./base64-vlq':Js(3.0),u'./binary-search':Js(5.0),u'./quick-sort':Js(7.0),u'./util':Js(11.0)})
@Js
def PyJs_anonymous_219_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'SourceMapGenerator', u'exports', u'base64VLQ', u'require', u'module', u'util', u'ArraySet', u'MappingList'])
    @Js
    def PyJsHoisted_SourceMapGenerator_(aArgs, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'aArgs':aArgs}, var)
        var.registers([u'aArgs'])
        if var.get(u'aArgs').neg():
            PyJs_Object_220_ = Js({})
            var.put(u'aArgs', PyJs_Object_220_)
        var.get(u"this").put(u'_file', var.get(u'util').callprop(u'getArg', var.get(u'aArgs'), Js(u'file'), var.get(u"null")))
        var.get(u"this").put(u'_sourceRoot', var.get(u'util').callprop(u'getArg', var.get(u'aArgs'), Js(u'sourceRoot'), var.get(u"null")))
        var.get(u"this").put(u'_skipValidation', var.get(u'util').callprop(u'getArg', var.get(u'aArgs'), Js(u'skipValidation'), Js(False)))
        var.get(u"this").put(u'_sources', var.get(u'ArraySet').create())
        var.get(u"this").put(u'_names', var.get(u'ArraySet').create())
        var.get(u"this").put(u'_mappings', var.get(u'MappingList').create())
        var.get(u"this").put(u'_sourcesContents', var.get(u"null"))
    PyJsHoisted_SourceMapGenerator_.func_name = u'SourceMapGenerator'
    var.put(u'SourceMapGenerator', PyJsHoisted_SourceMapGenerator_)
    var.put(u'base64VLQ', var.get(u'require')(Js(u'./base64-vlq')))
    var.put(u'util', var.get(u'require')(Js(u'./util')))
    var.put(u'ArraySet', var.get(u'require')(Js(u'./array-set')).get(u'ArraySet'))
    var.put(u'MappingList', var.get(u'require')(Js(u'./mapping-list')).get(u'MappingList'))
    pass
    var.get(u'SourceMapGenerator').get(u'prototype').put(u'_version', Js(3.0))
    @Js
    def PyJs_SourceMapGenerator_fromSourceMap_221_(aSourceMapConsumer, this, arguments, var=var):
        var = Scope({u'this':this, u'SourceMapGenerator_fromSourceMap':PyJs_SourceMapGenerator_fromSourceMap_221_, u'arguments':arguments, u'aSourceMapConsumer':aSourceMapConsumer}, var)
        var.registers([u'aSourceMapConsumer', u'sourceRoot', u'generator'])
        var.put(u'sourceRoot', var.get(u'aSourceMapConsumer').get(u'sourceRoot'))
        PyJs_Object_222_ = Js({u'file':var.get(u'aSourceMapConsumer').get(u'file'),u'sourceRoot':var.get(u'sourceRoot')})
        var.put(u'generator', var.get(u'SourceMapGenerator').create(PyJs_Object_222_))
        @Js
        def PyJs_anonymous_223_(mapping, this, arguments, var=var):
            var = Scope({u'this':this, u'mapping':mapping, u'arguments':arguments}, var)
            var.registers([u'newMapping', u'mapping'])
            PyJs_Object_225_ = Js({u'line':var.get(u'mapping').get(u'generatedLine'),u'column':var.get(u'mapping').get(u'generatedColumn')})
            PyJs_Object_224_ = Js({u'generated':PyJs_Object_225_})
            var.put(u'newMapping', PyJs_Object_224_)
            if (var.get(u'mapping').get(u'source')!=var.get(u"null")):
                var.get(u'newMapping').put(u'source', var.get(u'mapping').get(u'source'))
                if (var.get(u'sourceRoot')!=var.get(u"null")):
                    var.get(u'newMapping').put(u'source', var.get(u'util').callprop(u'relative', var.get(u'sourceRoot'), var.get(u'newMapping').get(u'source')))
                PyJs_Object_226_ = Js({u'line':var.get(u'mapping').get(u'originalLine'),u'column':var.get(u'mapping').get(u'originalColumn')})
                var.get(u'newMapping').put(u'original', PyJs_Object_226_)
                if (var.get(u'mapping').get(u'name')!=var.get(u"null")):
                    var.get(u'newMapping').put(u'name', var.get(u'mapping').get(u'name'))
            var.get(u'generator').callprop(u'addMapping', var.get(u'newMapping'))
        PyJs_anonymous_223_._set_name(u'anonymous')
        var.get(u'aSourceMapConsumer').callprop(u'eachMapping', PyJs_anonymous_223_)
        @Js
        def PyJs_anonymous_227_(sourceFile, this, arguments, var=var):
            var = Scope({u'this':this, u'sourceFile':sourceFile, u'arguments':arguments}, var)
            var.registers([u'content', u'sourceRelative', u'sourceFile'])
            var.put(u'sourceRelative', var.get(u'sourceFile'))
            if PyJsStrictNeq(var.get(u'sourceRoot'),var.get(u"null")):
                var.put(u'sourceRelative', var.get(u'util').callprop(u'relative', var.get(u'sourceRoot'), var.get(u'sourceFile')))
            if var.get(u'generator').get(u'_sources').callprop(u'has', var.get(u'sourceRelative')).neg():
                var.get(u'generator').get(u'_sources').callprop(u'add', var.get(u'sourceRelative'))
            var.put(u'content', var.get(u'aSourceMapConsumer').callprop(u'sourceContentFor', var.get(u'sourceFile')))
            if (var.get(u'content')!=var.get(u"null")):
                var.get(u'generator').callprop(u'setSourceContent', var.get(u'sourceFile'), var.get(u'content'))
        PyJs_anonymous_227_._set_name(u'anonymous')
        var.get(u'aSourceMapConsumer').get(u'sources').callprop(u'forEach', PyJs_anonymous_227_)
        return var.get(u'generator')
    PyJs_SourceMapGenerator_fromSourceMap_221_._set_name(u'SourceMapGenerator_fromSourceMap')
    var.get(u'SourceMapGenerator').put(u'fromSourceMap', PyJs_SourceMapGenerator_fromSourceMap_221_)
    @Js
    def PyJs_SourceMapGenerator_addMapping_228_(aArgs, this, arguments, var=var):
        var = Scope({u'this':this, u'SourceMapGenerator_addMapping':PyJs_SourceMapGenerator_addMapping_228_, u'arguments':arguments, u'aArgs':aArgs}, var)
        var.registers([u'source', u'generated', u'aArgs', u'original', u'name'])
        var.put(u'generated', var.get(u'util').callprop(u'getArg', var.get(u'aArgs'), Js(u'generated')))
        var.put(u'original', var.get(u'util').callprop(u'getArg', var.get(u'aArgs'), Js(u'original'), var.get(u"null")))
        var.put(u'source', var.get(u'util').callprop(u'getArg', var.get(u'aArgs'), Js(u'source'), var.get(u"null")))
        var.put(u'name', var.get(u'util').callprop(u'getArg', var.get(u'aArgs'), Js(u'name'), var.get(u"null")))
        if var.get(u"this").get(u'_skipValidation').neg():
            var.get(u"this").callprop(u'_validateMapping', var.get(u'generated'), var.get(u'original'), var.get(u'source'), var.get(u'name'))
        if (var.get(u'source')!=var.get(u"null")):
            var.put(u'source', var.get(u'String')(var.get(u'source')))
            if var.get(u"this").get(u'_sources').callprop(u'has', var.get(u'source')).neg():
                var.get(u"this").get(u'_sources').callprop(u'add', var.get(u'source'))
        if (var.get(u'name')!=var.get(u"null")):
            var.put(u'name', var.get(u'String')(var.get(u'name')))
            if var.get(u"this").get(u'_names').callprop(u'has', var.get(u'name')).neg():
                var.get(u"this").get(u'_names').callprop(u'add', var.get(u'name'))
        PyJs_Object_229_ = Js({u'generatedLine':var.get(u'generated').get(u'line'),u'generatedColumn':var.get(u'generated').get(u'column'),u'originalLine':((var.get(u'original')!=var.get(u"null")) and var.get(u'original').get(u'line')),u'originalColumn':((var.get(u'original')!=var.get(u"null")) and var.get(u'original').get(u'column')),u'source':var.get(u'source'),u'name':var.get(u'name')})
        var.get(u"this").get(u'_mappings').callprop(u'add', PyJs_Object_229_)
    PyJs_SourceMapGenerator_addMapping_228_._set_name(u'SourceMapGenerator_addMapping')
    var.get(u'SourceMapGenerator').get(u'prototype').put(u'addMapping', PyJs_SourceMapGenerator_addMapping_228_)
    @Js
    def PyJs_SourceMapGenerator_setSourceContent_230_(aSourceFile, aSourceContent, this, arguments, var=var):
        var = Scope({u'this':this, u'SourceMapGenerator_setSourceContent':PyJs_SourceMapGenerator_setSourceContent_230_, u'aSourceContent':aSourceContent, u'aSourceFile':aSourceFile, u'arguments':arguments}, var)
        var.registers([u'source', u'aSourceContent', u'aSourceFile'])
        var.put(u'source', var.get(u'aSourceFile'))
        if (var.get(u"this").get(u'_sourceRoot')!=var.get(u"null")):
            var.put(u'source', var.get(u'util').callprop(u'relative', var.get(u"this").get(u'_sourceRoot'), var.get(u'source')))
        if (var.get(u'aSourceContent')!=var.get(u"null")):
            if var.get(u"this").get(u'_sourcesContents').neg():
                var.get(u"this").put(u'_sourcesContents', var.get(u'Object').callprop(u'create', var.get(u"null")))
            var.get(u"this").get(u'_sourcesContents').put(var.get(u'util').callprop(u'toSetString', var.get(u'source')), var.get(u'aSourceContent'))
        else:
            if var.get(u"this").get(u'_sourcesContents'):
                var.get(u"this").get(u'_sourcesContents').delete(var.get(u'util').callprop(u'toSetString', var.get(u'source')))
                if PyJsStrictEq(var.get(u'Object').callprop(u'keys', var.get(u"this").get(u'_sourcesContents')).get(u'length'),Js(0.0)):
                    var.get(u"this").put(u'_sourcesContents', var.get(u"null"))
    PyJs_SourceMapGenerator_setSourceContent_230_._set_name(u'SourceMapGenerator_setSourceContent')
    var.get(u'SourceMapGenerator').get(u'prototype').put(u'setSourceContent', PyJs_SourceMapGenerator_setSourceContent_230_)
    @Js
    def PyJs_SourceMapGenerator_applySourceMap_231_(aSourceMapConsumer, aSourceFile, aSourceMapPath, this, arguments, var=var):
        var = Scope({u'SourceMapGenerator_applySourceMap':PyJs_SourceMapGenerator_applySourceMap_231_, u'aSourceMapConsumer':aSourceMapConsumer, u'this':this, u'aSourceMapPath':aSourceMapPath, u'arguments':arguments, u'aSourceFile':aSourceFile}, var)
        var.registers([u'aSourceMapConsumer', u'sourceFile', u'sourceRoot', u'aSourceMapPath', u'newNames', u'newSources', u'aSourceFile'])
        var.put(u'sourceFile', var.get(u'aSourceFile'))
        if (var.get(u'aSourceFile')==var.get(u"null")):
            if (var.get(u'aSourceMapConsumer').get(u'file')==var.get(u"null")):
                PyJsTempException = JsToPyException(var.get(u'Error').create((Js(u'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ')+Js(u'or the source map\'s "file" property. Both were omitted.'))))
                raise PyJsTempException
            var.put(u'sourceFile', var.get(u'aSourceMapConsumer').get(u'file'))
        var.put(u'sourceRoot', var.get(u"this").get(u'_sourceRoot'))
        if (var.get(u'sourceRoot')!=var.get(u"null")):
            var.put(u'sourceFile', var.get(u'util').callprop(u'relative', var.get(u'sourceRoot'), var.get(u'sourceFile')))
        var.put(u'newSources', var.get(u'ArraySet').create())
        var.put(u'newNames', var.get(u'ArraySet').create())
        @Js
        def PyJs_anonymous_232_(mapping, this, arguments, var=var):
            var = Scope({u'this':this, u'mapping':mapping, u'arguments':arguments}, var)
            var.registers([u'source', u'mapping', u'original', u'name'])
            if (PyJsStrictEq(var.get(u'mapping').get(u'source'),var.get(u'sourceFile')) and (var.get(u'mapping').get(u'originalLine')!=var.get(u"null"))):
                PyJs_Object_233_ = Js({u'line':var.get(u'mapping').get(u'originalLine'),u'column':var.get(u'mapping').get(u'originalColumn')})
                var.put(u'original', var.get(u'aSourceMapConsumer').callprop(u'originalPositionFor', PyJs_Object_233_))
                if (var.get(u'original').get(u'source')!=var.get(u"null")):
                    var.get(u'mapping').put(u'source', var.get(u'original').get(u'source'))
                    if (var.get(u'aSourceMapPath')!=var.get(u"null")):
                        var.get(u'mapping').put(u'source', var.get(u'util').callprop(u'join', var.get(u'aSourceMapPath'), var.get(u'mapping').get(u'source')))
                    if (var.get(u'sourceRoot')!=var.get(u"null")):
                        var.get(u'mapping').put(u'source', var.get(u'util').callprop(u'relative', var.get(u'sourceRoot'), var.get(u'mapping').get(u'source')))
                    var.get(u'mapping').put(u'originalLine', var.get(u'original').get(u'line'))
                    var.get(u'mapping').put(u'originalColumn', var.get(u'original').get(u'column'))
                    if (var.get(u'original').get(u'name')!=var.get(u"null")):
                        var.get(u'mapping').put(u'name', var.get(u'original').get(u'name'))
            var.put(u'source', var.get(u'mapping').get(u'source'))
            if ((var.get(u'source')!=var.get(u"null")) and var.get(u'newSources').callprop(u'has', var.get(u'source')).neg()):
                var.get(u'newSources').callprop(u'add', var.get(u'source'))
            var.put(u'name', var.get(u'mapping').get(u'name'))
            if ((var.get(u'name')!=var.get(u"null")) and var.get(u'newNames').callprop(u'has', var.get(u'name')).neg()):
                var.get(u'newNames').callprop(u'add', var.get(u'name'))
        PyJs_anonymous_232_._set_name(u'anonymous')
        var.get(u"this").get(u'_mappings').callprop(u'unsortedForEach', PyJs_anonymous_232_, var.get(u"this"))
        var.get(u"this").put(u'_sources', var.get(u'newSources'))
        var.get(u"this").put(u'_names', var.get(u'newNames'))
        @Js
        def PyJs_anonymous_234_(sourceFile, this, arguments, var=var):
            var = Scope({u'this':this, u'sourceFile':sourceFile, u'arguments':arguments}, var)
            var.registers([u'content', u'sourceFile'])
            var.put(u'content', var.get(u'aSourceMapConsumer').callprop(u'sourceContentFor', var.get(u'sourceFile')))
            if (var.get(u'content')!=var.get(u"null")):
                if (var.get(u'aSourceMapPath')!=var.get(u"null")):
                    var.put(u'sourceFile', var.get(u'util').callprop(u'join', var.get(u'aSourceMapPath'), var.get(u'sourceFile')))
                if (var.get(u'sourceRoot')!=var.get(u"null")):
                    var.put(u'sourceFile', var.get(u'util').callprop(u'relative', var.get(u'sourceRoot'), var.get(u'sourceFile')))
                var.get(u"this").callprop(u'setSourceContent', var.get(u'sourceFile'), var.get(u'content'))
        PyJs_anonymous_234_._set_name(u'anonymous')
        var.get(u'aSourceMapConsumer').get(u'sources').callprop(u'forEach', PyJs_anonymous_234_, var.get(u"this"))
    PyJs_SourceMapGenerator_applySourceMap_231_._set_name(u'SourceMapGenerator_applySourceMap')
    var.get(u'SourceMapGenerator').get(u'prototype').put(u'applySourceMap', PyJs_SourceMapGenerator_applySourceMap_231_)
    @Js
    def PyJs_SourceMapGenerator_validateMapping_235_(aGenerated, aOriginal, aSource, aName, this, arguments, var=var):
        var = Scope({u'aOriginal':aOriginal, u'aGenerated':aGenerated, u'SourceMapGenerator_validateMapping':PyJs_SourceMapGenerator_validateMapping_235_, u'aSource':aSource, u'this':this, u'aName':aName, u'arguments':arguments}, var)
        var.registers([u'aOriginal', u'aGenerated', u'aSource', u'aName'])
        if ((var.get(u'aOriginal') and PyJsStrictNeq(var.get(u'aOriginal').get(u'line').typeof(),Js(u'number'))) and PyJsStrictNeq(var.get(u'aOriginal').get(u'column').typeof(),Js(u'number'))):
            PyJsTempException = JsToPyException(var.get(u'Error').create(((Js(u'original.line and original.column are not numbers -- you probably meant to omit ')+Js(u'the original mapping entirely and only map the generated position. If so, pass '))+Js(u'null for the original mapping instead of an object with empty or null values.'))))
            raise PyJsTempException
        if (((((((var.get(u'aGenerated') and var.get(u'aGenerated').contains(Js(u'line'))) and var.get(u'aGenerated').contains(Js(u'column'))) and (var.get(u'aGenerated').get(u'line')>Js(0.0))) and (var.get(u'aGenerated').get(u'column')>=Js(0.0))) and var.get(u'aOriginal').neg()) and var.get(u'aSource').neg()) and var.get(u'aName').neg()):
            return var.get('undefined')
        else:
            def PyJs_LONG_236_(var=var):
                return ((((((((var.get(u'aGenerated') and var.get(u'aGenerated').contains(Js(u'line'))) and var.get(u'aGenerated').contains(Js(u'column'))) and var.get(u'aOriginal')) and var.get(u'aOriginal').contains(Js(u'line'))) and var.get(u'aOriginal').contains(Js(u'column'))) and (var.get(u'aGenerated').get(u'line')>Js(0.0))) and (var.get(u'aGenerated').get(u'column')>=Js(0.0))) and (var.get(u'aOriginal').get(u'line')>Js(0.0)))
            if ((PyJs_LONG_236_() and (var.get(u'aOriginal').get(u'column')>=Js(0.0))) and var.get(u'aSource')):
                return var.get('undefined')
            else:
                PyJs_Object_237_ = Js({u'generated':var.get(u'aGenerated'),u'source':var.get(u'aSource'),u'original':var.get(u'aOriginal'),u'name':var.get(u'aName')})
                PyJsTempException = JsToPyException(var.get(u'Error').create((Js(u'Invalid mapping: ')+var.get(u'JSON').callprop(u'stringify', PyJs_Object_237_))))
                raise PyJsTempException
    PyJs_SourceMapGenerator_validateMapping_235_._set_name(u'SourceMapGenerator_validateMapping')
    var.get(u'SourceMapGenerator').get(u'prototype').put(u'_validateMapping', PyJs_SourceMapGenerator_validateMapping_235_)
    @Js
    def PyJs_SourceMapGenerator_serializeMappings_238_(this, arguments, var=var):
        var = Scope({u'this':this, u'SourceMapGenerator_serializeMappings':PyJs_SourceMapGenerator_serializeMappings_238_, u'arguments':arguments}, var)
        var.registers([u'previousOriginalColumn', u'previousOriginalLine', u'previousGeneratedLine', u'previousSource', u'previousGeneratedColumn', u'i', u'mapping', u'previousName', u'next', u'len', u'nameIdx', u'sourceIdx', u'result', u'mappings'])
        var.put(u'previousGeneratedColumn', Js(0.0))
        var.put(u'previousGeneratedLine', Js(1.0))
        var.put(u'previousOriginalColumn', Js(0.0))
        var.put(u'previousOriginalLine', Js(0.0))
        var.put(u'previousName', Js(0.0))
        var.put(u'previousSource', Js(0.0))
        var.put(u'result', Js(u''))
        pass
        pass
        pass
        pass
        var.put(u'mappings', var.get(u"this").get(u'_mappings').callprop(u'toArray'))
        #for JS loop
        var.put(u'i', Js(0.0))
        var.put(u'len', var.get(u'mappings').get(u'length'))
        while (var.get(u'i')<var.get(u'len')):
            try:
                var.put(u'mapping', var.get(u'mappings').get(var.get(u'i')))
                var.put(u'next', Js(u''))
                if PyJsStrictNeq(var.get(u'mapping').get(u'generatedLine'),var.get(u'previousGeneratedLine')):
                    var.put(u'previousGeneratedColumn', Js(0.0))
                    while PyJsStrictNeq(var.get(u'mapping').get(u'generatedLine'),var.get(u'previousGeneratedLine')):
                        var.put(u'next', Js(u';'), u'+')
                        (var.put(u'previousGeneratedLine',Js(var.get(u'previousGeneratedLine').to_number())+Js(1))-Js(1))
                else:
                    if (var.get(u'i')>Js(0.0)):
                        if var.get(u'util').callprop(u'compareByGeneratedPositionsInflated', var.get(u'mapping'), var.get(u'mappings').get((var.get(u'i')-Js(1.0)))).neg():
                            continue
                        var.put(u'next', Js(u','), u'+')
                var.put(u'next', var.get(u'base64VLQ').callprop(u'encode', (var.get(u'mapping').get(u'generatedColumn')-var.get(u'previousGeneratedColumn'))), u'+')
                var.put(u'previousGeneratedColumn', var.get(u'mapping').get(u'generatedColumn'))
                if (var.get(u'mapping').get(u'source')!=var.get(u"null")):
                    var.put(u'sourceIdx', var.get(u"this").get(u'_sources').callprop(u'indexOf', var.get(u'mapping').get(u'source')))
                    var.put(u'next', var.get(u'base64VLQ').callprop(u'encode', (var.get(u'sourceIdx')-var.get(u'previousSource'))), u'+')
                    var.put(u'previousSource', var.get(u'sourceIdx'))
                    var.put(u'next', var.get(u'base64VLQ').callprop(u'encode', ((var.get(u'mapping').get(u'originalLine')-Js(1.0))-var.get(u'previousOriginalLine'))), u'+')
                    var.put(u'previousOriginalLine', (var.get(u'mapping').get(u'originalLine')-Js(1.0)))
                    var.put(u'next', var.get(u'base64VLQ').callprop(u'encode', (var.get(u'mapping').get(u'originalColumn')-var.get(u'previousOriginalColumn'))), u'+')
                    var.put(u'previousOriginalColumn', var.get(u'mapping').get(u'originalColumn'))
                    if (var.get(u'mapping').get(u'name')!=var.get(u"null")):
                        var.put(u'nameIdx', var.get(u"this").get(u'_names').callprop(u'indexOf', var.get(u'mapping').get(u'name')))
                        var.put(u'next', var.get(u'base64VLQ').callprop(u'encode', (var.get(u'nameIdx')-var.get(u'previousName'))), u'+')
                        var.put(u'previousName', var.get(u'nameIdx'))
                var.put(u'result', var.get(u'next'), u'+')
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return var.get(u'result')
    PyJs_SourceMapGenerator_serializeMappings_238_._set_name(u'SourceMapGenerator_serializeMappings')
    var.get(u'SourceMapGenerator').get(u'prototype').put(u'_serializeMappings', PyJs_SourceMapGenerator_serializeMappings_238_)
    @Js
    def PyJs_SourceMapGenerator_generateSourcesContent_239_(aSources, aSourceRoot, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'SourceMapGenerator_generateSourcesContent':PyJs_SourceMapGenerator_generateSourcesContent_239_, u'aSources':aSources, u'aSourceRoot':aSourceRoot}, var)
        var.registers([u'aSources', u'aSourceRoot'])
        @Js
        def PyJs_anonymous_240_(source, this, arguments, var=var):
            var = Scope({u'this':this, u'source':source, u'arguments':arguments}, var)
            var.registers([u'source', u'key'])
            if var.get(u"this").get(u'_sourcesContents').neg():
                return var.get(u"null")
            if (var.get(u'aSourceRoot')!=var.get(u"null")):
                var.put(u'source', var.get(u'util').callprop(u'relative', var.get(u'aSourceRoot'), var.get(u'source')))
            var.put(u'key', var.get(u'util').callprop(u'toSetString', var.get(u'source')))
            return (var.get(u"this").get(u'_sourcesContents').get(var.get(u'key')) if var.get(u'Object').get(u'prototype').get(u'hasOwnProperty').callprop(u'call', var.get(u"this").get(u'_sourcesContents'), var.get(u'key')) else var.get(u"null"))
        PyJs_anonymous_240_._set_name(u'anonymous')
        return var.get(u'aSources').callprop(u'map', PyJs_anonymous_240_, var.get(u"this"))
    PyJs_SourceMapGenerator_generateSourcesContent_239_._set_name(u'SourceMapGenerator_generateSourcesContent')
    var.get(u'SourceMapGenerator').get(u'prototype').put(u'_generateSourcesContent', PyJs_SourceMapGenerator_generateSourcesContent_239_)
    @Js
    def PyJs_SourceMapGenerator_toJSON_241_(this, arguments, var=var):
        var = Scope({u'this':this, u'SourceMapGenerator_toJSON':PyJs_SourceMapGenerator_toJSON_241_, u'arguments':arguments}, var)
        var.registers([u'map'])
        PyJs_Object_242_ = Js({u'version':var.get(u"this").get(u'_version'),u'sources':var.get(u"this").get(u'_sources').callprop(u'toArray'),u'names':var.get(u"this").get(u'_names').callprop(u'toArray'),u'mappings':var.get(u"this").callprop(u'_serializeMappings')})
        var.put(u'map', PyJs_Object_242_)
        if (var.get(u"this").get(u'_file')!=var.get(u"null")):
            var.get(u'map').put(u'file', var.get(u"this").get(u'_file'))
        if (var.get(u"this").get(u'_sourceRoot')!=var.get(u"null")):
            var.get(u'map').put(u'sourceRoot', var.get(u"this").get(u'_sourceRoot'))
        if var.get(u"this").get(u'_sourcesContents'):
            var.get(u'map').put(u'sourcesContent', var.get(u"this").callprop(u'_generateSourcesContent', var.get(u'map').get(u'sources'), var.get(u'map').get(u'sourceRoot')))
        return var.get(u'map')
    PyJs_SourceMapGenerator_toJSON_241_._set_name(u'SourceMapGenerator_toJSON')
    var.get(u'SourceMapGenerator').get(u'prototype').put(u'toJSON', PyJs_SourceMapGenerator_toJSON_241_)
    @Js
    def PyJs_SourceMapGenerator_toString_243_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'SourceMapGenerator_toString':PyJs_SourceMapGenerator_toString_243_}, var)
        var.registers([])
        return var.get(u'JSON').callprop(u'stringify', var.get(u"this").callprop(u'toJSON'))
    PyJs_SourceMapGenerator_toString_243_._set_name(u'SourceMapGenerator_toString')
    var.get(u'SourceMapGenerator').get(u'prototype').put(u'toString', PyJs_SourceMapGenerator_toString_243_)
    var.get(u'exports').put(u'SourceMapGenerator', var.get(u'SourceMapGenerator'))
PyJs_anonymous_219_._set_name(u'anonymous')
PyJs_Object_244_ = Js({u'./array-set':Js(2.0),u'./base64-vlq':Js(3.0),u'./mapping-list':Js(6.0),u'./util':Js(11.0)})
@Js
def PyJs_anonymous_245_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'util', u'exports', u'NEWLINE_CODE', u'SourceNode', u'require', u'isSourceNode', u'module', u'SourceMapGenerator', u'REGEX_NEWLINE'])
    @Js
    def PyJsHoisted_SourceNode_(aLine, aColumn, aSource, aChunks, aName, this, arguments, var=var):
        var = Scope({u'aChunks':aChunks, u'aSource':aSource, u'aLine':aLine, u'this':this, u'aColumn':aColumn, u'aName':aName, u'arguments':arguments}, var)
        var.registers([u'aChunks', u'aColumn', u'aSource', u'aLine', u'aName'])
        var.get(u"this").put(u'children', Js([]))
        PyJs_Object_246_ = Js({})
        var.get(u"this").put(u'sourceContents', PyJs_Object_246_)
        var.get(u"this").put(u'line', (var.get(u"null") if (var.get(u'aLine')==var.get(u"null")) else var.get(u'aLine')))
        var.get(u"this").put(u'column', (var.get(u"null") if (var.get(u'aColumn')==var.get(u"null")) else var.get(u'aColumn')))
        var.get(u"this").put(u'source', (var.get(u"null") if (var.get(u'aSource')==var.get(u"null")) else var.get(u'aSource')))
        var.get(u"this").put(u'name', (var.get(u"null") if (var.get(u'aName')==var.get(u"null")) else var.get(u'aName')))
        var.get(u"this").put(var.get(u'isSourceNode'), Js(True))
        if (var.get(u'aChunks')!=var.get(u"null")):
            var.get(u"this").callprop(u'add', var.get(u'aChunks'))
    PyJsHoisted_SourceNode_.func_name = u'SourceNode'
    var.put(u'SourceNode', PyJsHoisted_SourceNode_)
    var.put(u'SourceMapGenerator', var.get(u'require')(Js(u'./source-map-generator')).get(u'SourceMapGenerator'))
    var.put(u'util', var.get(u'require')(Js(u'./util')))
    var.put(u'REGEX_NEWLINE', JsRegExp(u'/(\\r?\\n)/'))
    var.put(u'NEWLINE_CODE', Js(10.0))
    var.put(u'isSourceNode', Js(u'$$$isSourceNode$$$'))
    pass
    @Js
    def PyJs_SourceNode_fromStringWithSourceMap_247_(aGeneratedCode, aSourceMapConsumer, aRelativePath, this, arguments, var=var):
        var = Scope({u'aSourceMapConsumer':aSourceMapConsumer, u'this':this, u'aRelativePath':aRelativePath, u'aGeneratedCode':aGeneratedCode, u'SourceNode_fromStringWithSourceMap':PyJs_SourceNode_fromStringWithSourceMap_247_, u'arguments':arguments}, var)
        var.registers([u'node', u'lastMapping', u'remainingLines', u'aSourceMapConsumer', u'aGeneratedCode', u'lastGeneratedLine', u'aRelativePath', u'addMappingWithCode', u'shiftNextLine', u'lastGeneratedColumn', u'remainingLinesIndex'])
        @Js
        def PyJsHoisted_addMappingWithCode_(mapping, code, this, arguments, var=var):
            var = Scope({u'this':this, u'code':code, u'mapping':mapping, u'arguments':arguments}, var)
            var.registers([u'source', u'code', u'mapping'])
            if (PyJsStrictEq(var.get(u'mapping'),var.get(u"null")) or PyJsStrictEq(var.get(u'mapping').get(u'source'),var.get(u'undefined'))):
                var.get(u'node').callprop(u'add', var.get(u'code'))
            else:
                var.put(u'source', (var.get(u'util').callprop(u'join', var.get(u'aRelativePath'), var.get(u'mapping').get(u'source')) if var.get(u'aRelativePath') else var.get(u'mapping').get(u'source')))
                var.get(u'node').callprop(u'add', var.get(u'SourceNode').create(var.get(u'mapping').get(u'originalLine'), var.get(u'mapping').get(u'originalColumn'), var.get(u'source'), var.get(u'code'), var.get(u'mapping').get(u'name')))
        PyJsHoisted_addMappingWithCode_.func_name = u'addMappingWithCode'
        var.put(u'addMappingWithCode', PyJsHoisted_addMappingWithCode_)
        var.put(u'node', var.get(u'SourceNode').create())
        var.put(u'remainingLines', var.get(u'aGeneratedCode').callprop(u'split', var.get(u'REGEX_NEWLINE')))
        var.put(u'remainingLinesIndex', Js(0.0))
        @Js
        def PyJs_shiftNextLine_248_(this, arguments, var=var):
            var = Scope({u'this':this, u'shiftNextLine':PyJs_shiftNextLine_248_, u'arguments':arguments}, var)
            var.registers([u'newLine', u'lineContents', u'getNextLine'])
            @Js
            def PyJsHoisted_getNextLine_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                return (var.get(u'remainingLines').get((var.put(u'remainingLinesIndex',Js(var.get(u'remainingLinesIndex').to_number())+Js(1))-Js(1))) if (var.get(u'remainingLinesIndex')<var.get(u'remainingLines').get(u'length')) else var.get(u'undefined'))
            PyJsHoisted_getNextLine_.func_name = u'getNextLine'
            var.put(u'getNextLine', PyJsHoisted_getNextLine_)
            var.put(u'lineContents', var.get(u'getNextLine')())
            var.put(u'newLine', (var.get(u'getNextLine')() or Js(u'')))
            return (var.get(u'lineContents')+var.get(u'newLine'))
            pass
        PyJs_shiftNextLine_248_._set_name(u'shiftNextLine')
        var.put(u'shiftNextLine', PyJs_shiftNextLine_248_)
        var.put(u'lastGeneratedLine', Js(1.0))
        var.put(u'lastGeneratedColumn', Js(0.0))
        var.put(u'lastMapping', var.get(u"null"))
        @Js
        def PyJs_anonymous_249_(mapping, this, arguments, var=var):
            var = Scope({u'this':this, u'mapping':mapping, u'arguments':arguments}, var)
            var.registers([u'nextLine', u'code', u'mapping'])
            if PyJsStrictNeq(var.get(u'lastMapping'),var.get(u"null")):
                if (var.get(u'lastGeneratedLine')<var.get(u'mapping').get(u'generatedLine')):
                    var.get(u'addMappingWithCode')(var.get(u'lastMapping'), var.get(u'shiftNextLine')())
                    (var.put(u'lastGeneratedLine',Js(var.get(u'lastGeneratedLine').to_number())+Js(1))-Js(1))
                    var.put(u'lastGeneratedColumn', Js(0.0))
                else:
                    var.put(u'nextLine', (var.get(u'remainingLines').get(var.get(u'remainingLinesIndex')) or Js(u'')))
                    var.put(u'code', var.get(u'nextLine').callprop(u'substr', Js(0.0), (var.get(u'mapping').get(u'generatedColumn')-var.get(u'lastGeneratedColumn'))))
                    var.get(u'remainingLines').put(var.get(u'remainingLinesIndex'), var.get(u'nextLine').callprop(u'substr', (var.get(u'mapping').get(u'generatedColumn')-var.get(u'lastGeneratedColumn'))))
                    var.put(u'lastGeneratedColumn', var.get(u'mapping').get(u'generatedColumn'))
                    var.get(u'addMappingWithCode')(var.get(u'lastMapping'), var.get(u'code'))
                    var.put(u'lastMapping', var.get(u'mapping'))
                    return var.get('undefined')
            while (var.get(u'lastGeneratedLine')<var.get(u'mapping').get(u'generatedLine')):
                var.get(u'node').callprop(u'add', var.get(u'shiftNextLine')())
                (var.put(u'lastGeneratedLine',Js(var.get(u'lastGeneratedLine').to_number())+Js(1))-Js(1))
            if (var.get(u'lastGeneratedColumn')<var.get(u'mapping').get(u'generatedColumn')):
                var.put(u'nextLine', (var.get(u'remainingLines').get(var.get(u'remainingLinesIndex')) or Js(u'')))
                var.get(u'node').callprop(u'add', var.get(u'nextLine').callprop(u'substr', Js(0.0), var.get(u'mapping').get(u'generatedColumn')))
                var.get(u'remainingLines').put(var.get(u'remainingLinesIndex'), var.get(u'nextLine').callprop(u'substr', var.get(u'mapping').get(u'generatedColumn')))
                var.put(u'lastGeneratedColumn', var.get(u'mapping').get(u'generatedColumn'))
            var.put(u'lastMapping', var.get(u'mapping'))
        PyJs_anonymous_249_._set_name(u'anonymous')
        var.get(u'aSourceMapConsumer').callprop(u'eachMapping', PyJs_anonymous_249_, var.get(u"this"))
        if (var.get(u'remainingLinesIndex')<var.get(u'remainingLines').get(u'length')):
            if var.get(u'lastMapping'):
                var.get(u'addMappingWithCode')(var.get(u'lastMapping'), var.get(u'shiftNextLine')())
            var.get(u'node').callprop(u'add', var.get(u'remainingLines').callprop(u'splice', var.get(u'remainingLinesIndex')).callprop(u'join', Js(u'')))
        @Js
        def PyJs_anonymous_250_(sourceFile, this, arguments, var=var):
            var = Scope({u'this':this, u'sourceFile':sourceFile, u'arguments':arguments}, var)
            var.registers([u'content', u'sourceFile'])
            var.put(u'content', var.get(u'aSourceMapConsumer').callprop(u'sourceContentFor', var.get(u'sourceFile')))
            if (var.get(u'content')!=var.get(u"null")):
                if (var.get(u'aRelativePath')!=var.get(u"null")):
                    var.put(u'sourceFile', var.get(u'util').callprop(u'join', var.get(u'aRelativePath'), var.get(u'sourceFile')))
                var.get(u'node').callprop(u'setSourceContent', var.get(u'sourceFile'), var.get(u'content'))
        PyJs_anonymous_250_._set_name(u'anonymous')
        var.get(u'aSourceMapConsumer').get(u'sources').callprop(u'forEach', PyJs_anonymous_250_)
        return var.get(u'node')
        pass
    PyJs_SourceNode_fromStringWithSourceMap_247_._set_name(u'SourceNode_fromStringWithSourceMap')
    var.get(u'SourceNode').put(u'fromStringWithSourceMap', PyJs_SourceNode_fromStringWithSourceMap_247_)
    @Js
    def PyJs_SourceNode_add_251_(aChunk, this, arguments, var=var):
        var = Scope({u'this':this, u'SourceNode_add':PyJs_SourceNode_add_251_, u'arguments':arguments, u'aChunk':aChunk}, var)
        var.registers([u'aChunk'])
        if var.get(u'Array').callprop(u'isArray', var.get(u'aChunk')):
            @Js
            def PyJs_anonymous_252_(chunk, this, arguments, var=var):
                var = Scope({u'this':this, u'chunk':chunk, u'arguments':arguments}, var)
                var.registers([u'chunk'])
                var.get(u"this").callprop(u'add', var.get(u'chunk'))
            PyJs_anonymous_252_._set_name(u'anonymous')
            var.get(u'aChunk').callprop(u'forEach', PyJs_anonymous_252_, var.get(u"this"))
        else:
            if (var.get(u'aChunk').get(var.get(u'isSourceNode')) or PyJsStrictEq(var.get(u'aChunk',throw=False).typeof(),Js(u'string'))):
                if var.get(u'aChunk'):
                    var.get(u"this").get(u'children').callprop(u'push', var.get(u'aChunk'))
            else:
                PyJsTempException = JsToPyException(var.get(u'TypeError').create((Js(u'Expected a SourceNode, string, or an array of SourceNodes and strings. Got ')+var.get(u'aChunk'))))
                raise PyJsTempException
        return var.get(u"this")
    PyJs_SourceNode_add_251_._set_name(u'SourceNode_add')
    var.get(u'SourceNode').get(u'prototype').put(u'add', PyJs_SourceNode_add_251_)
    @Js
    def PyJs_SourceNode_prepend_253_(aChunk, this, arguments, var=var):
        var = Scope({u'this':this, u'SourceNode_prepend':PyJs_SourceNode_prepend_253_, u'arguments':arguments, u'aChunk':aChunk}, var)
        var.registers([u'i', u'aChunk'])
        if var.get(u'Array').callprop(u'isArray', var.get(u'aChunk')):
            #for JS loop
            var.put(u'i', (var.get(u'aChunk').get(u'length')-Js(1.0)))
            while (var.get(u'i')>=Js(0.0)):
                try:
                    var.get(u"this").callprop(u'prepend', var.get(u'aChunk').get(var.get(u'i')))
                finally:
                        (var.put(u'i',Js(var.get(u'i').to_number())-Js(1))+Js(1))
        else:
            if (var.get(u'aChunk').get(var.get(u'isSourceNode')) or PyJsStrictEq(var.get(u'aChunk',throw=False).typeof(),Js(u'string'))):
                var.get(u"this").get(u'children').callprop(u'unshift', var.get(u'aChunk'))
            else:
                PyJsTempException = JsToPyException(var.get(u'TypeError').create((Js(u'Expected a SourceNode, string, or an array of SourceNodes and strings. Got ')+var.get(u'aChunk'))))
                raise PyJsTempException
        return var.get(u"this")
    PyJs_SourceNode_prepend_253_._set_name(u'SourceNode_prepend')
    var.get(u'SourceNode').get(u'prototype').put(u'prepend', PyJs_SourceNode_prepend_253_)
    @Js
    def PyJs_SourceNode_walk_254_(aFn, this, arguments, var=var):
        var = Scope({u'this':this, u'aFn':aFn, u'arguments':arguments, u'SourceNode_walk':PyJs_SourceNode_walk_254_}, var)
        var.registers([u'i', u'chunk', u'aFn', u'len'])
        pass
        #for JS loop
        var.put(u'i', Js(0.0))
        var.put(u'len', var.get(u"this").get(u'children').get(u'length'))
        while (var.get(u'i')<var.get(u'len')):
            try:
                var.put(u'chunk', var.get(u"this").get(u'children').get(var.get(u'i')))
                if var.get(u'chunk').get(var.get(u'isSourceNode')):
                    var.get(u'chunk').callprop(u'walk', var.get(u'aFn'))
                else:
                    if PyJsStrictNeq(var.get(u'chunk'),Js(u'')):
                        PyJs_Object_255_ = Js({u'source':var.get(u"this").get(u'source'),u'line':var.get(u"this").get(u'line'),u'column':var.get(u"this").get(u'column'),u'name':var.get(u"this").get(u'name')})
                        var.get(u'aFn')(var.get(u'chunk'), PyJs_Object_255_)
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
    PyJs_SourceNode_walk_254_._set_name(u'SourceNode_walk')
    var.get(u'SourceNode').get(u'prototype').put(u'walk', PyJs_SourceNode_walk_254_)
    @Js
    def PyJs_SourceNode_join_256_(aSep, this, arguments, var=var):
        var = Scope({u'this':this, u'SourceNode_join':PyJs_SourceNode_join_256_, u'aSep':aSep, u'arguments':arguments}, var)
        var.registers([u'newChildren', u'i', u'aSep', u'len'])
        pass
        pass
        var.put(u'len', var.get(u"this").get(u'children').get(u'length'))
        if (var.get(u'len')>Js(0.0)):
            var.put(u'newChildren', Js([]))
            #for JS loop
            var.put(u'i', Js(0.0))
            while (var.get(u'i')<(var.get(u'len')-Js(1.0))):
                try:
                    var.get(u'newChildren').callprop(u'push', var.get(u"this").get(u'children').get(var.get(u'i')))
                    var.get(u'newChildren').callprop(u'push', var.get(u'aSep'))
                finally:
                        (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
            var.get(u'newChildren').callprop(u'push', var.get(u"this").get(u'children').get(var.get(u'i')))
            var.get(u"this").put(u'children', var.get(u'newChildren'))
        return var.get(u"this")
    PyJs_SourceNode_join_256_._set_name(u'SourceNode_join')
    var.get(u'SourceNode').get(u'prototype').put(u'join', PyJs_SourceNode_join_256_)
    @Js
    def PyJs_SourceNode_replaceRight_257_(aPattern, aReplacement, this, arguments, var=var):
        var = Scope({u'this':this, u'aPattern':aPattern, u'aReplacement':aReplacement, u'arguments':arguments, u'SourceNode_replaceRight':PyJs_SourceNode_replaceRight_257_}, var)
        var.registers([u'aPattern', u'lastChild', u'aReplacement'])
        var.put(u'lastChild', var.get(u"this").get(u'children').get((var.get(u"this").get(u'children').get(u'length')-Js(1.0))))
        if var.get(u'lastChild').get(var.get(u'isSourceNode')):
            var.get(u'lastChild').callprop(u'replaceRight', var.get(u'aPattern'), var.get(u'aReplacement'))
        else:
            if PyJsStrictEq(var.get(u'lastChild',throw=False).typeof(),Js(u'string')):
                var.get(u"this").get(u'children').put((var.get(u"this").get(u'children').get(u'length')-Js(1.0)), var.get(u'lastChild').callprop(u'replace', var.get(u'aPattern'), var.get(u'aReplacement')))
            else:
                var.get(u"this").get(u'children').callprop(u'push', Js(u'').callprop(u'replace', var.get(u'aPattern'), var.get(u'aReplacement')))
        return var.get(u"this")
    PyJs_SourceNode_replaceRight_257_._set_name(u'SourceNode_replaceRight')
    var.get(u'SourceNode').get(u'prototype').put(u'replaceRight', PyJs_SourceNode_replaceRight_257_)
    @Js
    def PyJs_SourceNode_setSourceContent_258_(aSourceFile, aSourceContent, this, arguments, var=var):
        var = Scope({u'this':this, u'aSourceContent':aSourceContent, u'aSourceFile':aSourceFile, u'arguments':arguments, u'SourceNode_setSourceContent':PyJs_SourceNode_setSourceContent_258_}, var)
        var.registers([u'aSourceContent', u'aSourceFile'])
        var.get(u"this").get(u'sourceContents').put(var.get(u'util').callprop(u'toSetString', var.get(u'aSourceFile')), var.get(u'aSourceContent'))
    PyJs_SourceNode_setSourceContent_258_._set_name(u'SourceNode_setSourceContent')
    var.get(u'SourceNode').get(u'prototype').put(u'setSourceContent', PyJs_SourceNode_setSourceContent_258_)
    @Js
    def PyJs_SourceNode_walkSourceContents_259_(aFn, this, arguments, var=var):
        var = Scope({u'this':this, u'aFn':aFn, u'arguments':arguments, u'SourceNode_walkSourceContents':PyJs_SourceNode_walkSourceContents_259_}, var)
        var.registers([u'i', u'sources', u'aFn', u'len'])
        #for JS loop
        var.put(u'i', Js(0.0))
        var.put(u'len', var.get(u"this").get(u'children').get(u'length'))
        while (var.get(u'i')<var.get(u'len')):
            try:
                if var.get(u"this").get(u'children').get(var.get(u'i')).get(var.get(u'isSourceNode')):
                    var.get(u"this").get(u'children').get(var.get(u'i')).callprop(u'walkSourceContents', var.get(u'aFn'))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        var.put(u'sources', var.get(u'Object').callprop(u'keys', var.get(u"this").get(u'sourceContents')))
        #for JS loop
        var.put(u'i', Js(0.0))
        var.put(u'len', var.get(u'sources').get(u'length'))
        while (var.get(u'i')<var.get(u'len')):
            try:
                var.get(u'aFn')(var.get(u'util').callprop(u'fromSetString', var.get(u'sources').get(var.get(u'i'))), var.get(u"this").get(u'sourceContents').get(var.get(u'sources').get(var.get(u'i'))))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
    PyJs_SourceNode_walkSourceContents_259_._set_name(u'SourceNode_walkSourceContents')
    var.get(u'SourceNode').get(u'prototype').put(u'walkSourceContents', PyJs_SourceNode_walkSourceContents_259_)
    @Js
    def PyJs_SourceNode_toString_260_(this, arguments, var=var):
        var = Scope({u'this':this, u'SourceNode_toString':PyJs_SourceNode_toString_260_, u'arguments':arguments}, var)
        var.registers([u'str'])
        var.put(u'str', Js(u''))
        @Js
        def PyJs_anonymous_261_(chunk, this, arguments, var=var):
            var = Scope({u'this':this, u'chunk':chunk, u'arguments':arguments}, var)
            var.registers([u'chunk'])
            var.put(u'str', var.get(u'chunk'), u'+')
        PyJs_anonymous_261_._set_name(u'anonymous')
        var.get(u"this").callprop(u'walk', PyJs_anonymous_261_)
        return var.get(u'str')
    PyJs_SourceNode_toString_260_._set_name(u'SourceNode_toString')
    var.get(u'SourceNode').get(u'prototype').put(u'toString', PyJs_SourceNode_toString_260_)
    @Js
    def PyJs_SourceNode_toStringWithSourceMap_262_(aArgs, this, arguments, var=var):
        var = Scope({u'this':this, u'SourceNode_toStringWithSourceMap':PyJs_SourceNode_toStringWithSourceMap_262_, u'arguments':arguments, u'aArgs':aArgs}, var)
        var.registers([u'map', u'lastOriginalName', u'sourceMappingActive', u'aArgs', u'lastOriginalSource', u'lastOriginalLine', u'generated', u'lastOriginalColumn'])
        PyJs_Object_263_ = Js({u'code':Js(u''),u'line':Js(1.0),u'column':Js(0.0)})
        var.put(u'generated', PyJs_Object_263_)
        var.put(u'map', var.get(u'SourceMapGenerator').create(var.get(u'aArgs')))
        var.put(u'sourceMappingActive', Js(False))
        var.put(u'lastOriginalSource', var.get(u"null"))
        var.put(u'lastOriginalLine', var.get(u"null"))
        var.put(u'lastOriginalColumn', var.get(u"null"))
        var.put(u'lastOriginalName', var.get(u"null"))
        @Js
        def PyJs_anonymous_264_(chunk, original, this, arguments, var=var):
            var = Scope({u'this':this, u'chunk':chunk, u'original':original, u'arguments':arguments}, var)
            var.registers([u'length', u'chunk', u'idx', u'original'])
            var.get(u'generated').put(u'code', var.get(u'chunk'), u'+')
            if ((PyJsStrictNeq(var.get(u'original').get(u'source'),var.get(u"null")) and PyJsStrictNeq(var.get(u'original').get(u'line'),var.get(u"null"))) and PyJsStrictNeq(var.get(u'original').get(u'column'),var.get(u"null"))):
                if (((PyJsStrictNeq(var.get(u'lastOriginalSource'),var.get(u'original').get(u'source')) or PyJsStrictNeq(var.get(u'lastOriginalLine'),var.get(u'original').get(u'line'))) or PyJsStrictNeq(var.get(u'lastOriginalColumn'),var.get(u'original').get(u'column'))) or PyJsStrictNeq(var.get(u'lastOriginalName'),var.get(u'original').get(u'name'))):
                    PyJs_Object_266_ = Js({u'line':var.get(u'original').get(u'line'),u'column':var.get(u'original').get(u'column')})
                    PyJs_Object_267_ = Js({u'line':var.get(u'generated').get(u'line'),u'column':var.get(u'generated').get(u'column')})
                    PyJs_Object_265_ = Js({u'source':var.get(u'original').get(u'source'),u'original':PyJs_Object_266_,u'generated':PyJs_Object_267_,u'name':var.get(u'original').get(u'name')})
                    var.get(u'map').callprop(u'addMapping', PyJs_Object_265_)
                var.put(u'lastOriginalSource', var.get(u'original').get(u'source'))
                var.put(u'lastOriginalLine', var.get(u'original').get(u'line'))
                var.put(u'lastOriginalColumn', var.get(u'original').get(u'column'))
                var.put(u'lastOriginalName', var.get(u'original').get(u'name'))
                var.put(u'sourceMappingActive', Js(True))
            else:
                if var.get(u'sourceMappingActive'):
                    PyJs_Object_269_ = Js({u'line':var.get(u'generated').get(u'line'),u'column':var.get(u'generated').get(u'column')})
                    PyJs_Object_268_ = Js({u'generated':PyJs_Object_269_})
                    var.get(u'map').callprop(u'addMapping', PyJs_Object_268_)
                    var.put(u'lastOriginalSource', var.get(u"null"))
                    var.put(u'sourceMappingActive', Js(False))
            #for JS loop
            var.put(u'idx', Js(0.0))
            var.put(u'length', var.get(u'chunk').get(u'length'))
            while (var.get(u'idx')<var.get(u'length')):
                try:
                    if PyJsStrictEq(var.get(u'chunk').callprop(u'charCodeAt', var.get(u'idx')),var.get(u'NEWLINE_CODE')):
                        (var.get(u'generated').put(u'line',Js(var.get(u'generated').get(u'line').to_number())+Js(1))-Js(1))
                        var.get(u'generated').put(u'column', Js(0.0))
                        if PyJsStrictEq((var.get(u'idx')+Js(1.0)),var.get(u'length')):
                            var.put(u'lastOriginalSource', var.get(u"null"))
                            var.put(u'sourceMappingActive', Js(False))
                        else:
                            if var.get(u'sourceMappingActive'):
                                PyJs_Object_271_ = Js({u'line':var.get(u'original').get(u'line'),u'column':var.get(u'original').get(u'column')})
                                PyJs_Object_272_ = Js({u'line':var.get(u'generated').get(u'line'),u'column':var.get(u'generated').get(u'column')})
                                PyJs_Object_270_ = Js({u'source':var.get(u'original').get(u'source'),u'original':PyJs_Object_271_,u'generated':PyJs_Object_272_,u'name':var.get(u'original').get(u'name')})
                                var.get(u'map').callprop(u'addMapping', PyJs_Object_270_)
                    else:
                        (var.get(u'generated').put(u'column',Js(var.get(u'generated').get(u'column').to_number())+Js(1))-Js(1))
                finally:
                        (var.put(u'idx',Js(var.get(u'idx').to_number())+Js(1))-Js(1))
        PyJs_anonymous_264_._set_name(u'anonymous')
        var.get(u"this").callprop(u'walk', PyJs_anonymous_264_)
        @Js
        def PyJs_anonymous_273_(sourceFile, sourceContent, this, arguments, var=var):
            var = Scope({u'this':this, u'sourceFile':sourceFile, u'sourceContent':sourceContent, u'arguments':arguments}, var)
            var.registers([u'sourceFile', u'sourceContent'])
            var.get(u'map').callprop(u'setSourceContent', var.get(u'sourceFile'), var.get(u'sourceContent'))
        PyJs_anonymous_273_._set_name(u'anonymous')
        var.get(u"this").callprop(u'walkSourceContents', PyJs_anonymous_273_)
        PyJs_Object_274_ = Js({u'code':var.get(u'generated').get(u'code'),u'map':var.get(u'map')})
        return PyJs_Object_274_
    PyJs_SourceNode_toStringWithSourceMap_262_._set_name(u'SourceNode_toStringWithSourceMap')
    var.get(u'SourceNode').get(u'prototype').put(u'toStringWithSourceMap', PyJs_SourceNode_toStringWithSourceMap_262_)
    var.get(u'exports').put(u'SourceNode', var.get(u'SourceNode'))
PyJs_anonymous_245_._set_name(u'anonymous')
PyJs_Object_275_ = Js({u'./source-map-generator':Js(9.0),u'./util':Js(11.0)})
@Js
def PyJs_anonymous_276_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'urlGenerate', u'module', u'relative', u'supportsNullProto', u'getArg', u'normalize', u'compareByOriginalPositions', u'exports', u'compareByGeneratedPositionsDeflated', u'parseSourceMapInput', u'urlParse', u'isProtoString', u'urlRegexp', u'identity', u'join', u'require', u'fromSetString', u'computeSourceURL', u'dataUrlRegexp', u'toSetString', u'compareByGeneratedPositionsInflated', u'strcmp'])
    @Js
    def PyJsHoisted_normalize_(aPath, this, arguments, var=var):
        var = Scope({u'this':this, u'aPath':aPath, u'arguments':arguments}, var)
        var.registers([u'url', u'parts', u'up', u'i', u'part', u'isAbsolute', u'aPath', u'path'])
        var.put(u'path', var.get(u'aPath'))
        var.put(u'url', var.get(u'urlParse')(var.get(u'aPath')))
        if var.get(u'url'):
            if var.get(u'url').get(u'path').neg():
                return var.get(u'aPath')
            var.put(u'path', var.get(u'url').get(u'path'))
        var.put(u'isAbsolute', var.get(u'exports').callprop(u'isAbsolute', var.get(u'path')))
        var.put(u'parts', var.get(u'path').callprop(u'split', JsRegExp(u'/\\/+/')))
        #for JS loop
        var.put(u'up', Js(0.0))
        var.put(u'i', (var.get(u'parts').get(u'length')-Js(1.0)))
        while (var.get(u'i')>=Js(0.0)):
            try:
                var.put(u'part', var.get(u'parts').get(var.get(u'i')))
                if PyJsStrictEq(var.get(u'part'),Js(u'.')):
                    var.get(u'parts').callprop(u'splice', var.get(u'i'), Js(1.0))
                else:
                    if PyJsStrictEq(var.get(u'part'),Js(u'..')):
                        (var.put(u'up',Js(var.get(u'up').to_number())+Js(1))-Js(1))
                    else:
                        if (var.get(u'up')>Js(0.0)):
                            if PyJsStrictEq(var.get(u'part'),Js(u'')):
                                var.get(u'parts').callprop(u'splice', (var.get(u'i')+Js(1.0)), var.get(u'up'))
                                var.put(u'up', Js(0.0))
                            else:
                                var.get(u'parts').callprop(u'splice', var.get(u'i'), Js(2.0))
                                (var.put(u'up',Js(var.get(u'up').to_number())-Js(1))+Js(1))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())-Js(1))+Js(1))
        var.put(u'path', var.get(u'parts').callprop(u'join', Js(u'/')))
        if PyJsStrictEq(var.get(u'path'),Js(u'')):
            var.put(u'path', (Js(u'/') if var.get(u'isAbsolute') else Js(u'.')))
        if var.get(u'url'):
            var.get(u'url').put(u'path', var.get(u'path'))
            return var.get(u'urlGenerate')(var.get(u'url'))
        return var.get(u'path')
    PyJsHoisted_normalize_.func_name = u'normalize'
    var.put(u'normalize', PyJsHoisted_normalize_)
    @Js
    def PyJsHoisted_urlGenerate_(aParsedUrl, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'aParsedUrl':aParsedUrl}, var)
        var.registers([u'url', u'aParsedUrl'])
        var.put(u'url', Js(u''))
        if var.get(u'aParsedUrl').get(u'scheme'):
            var.put(u'url', (var.get(u'aParsedUrl').get(u'scheme')+Js(u':')), u'+')
        var.put(u'url', Js(u'//'), u'+')
        if var.get(u'aParsedUrl').get(u'auth'):
            var.put(u'url', (var.get(u'aParsedUrl').get(u'auth')+Js(u'@')), u'+')
        if var.get(u'aParsedUrl').get(u'host'):
            var.put(u'url', var.get(u'aParsedUrl').get(u'host'), u'+')
        if var.get(u'aParsedUrl').get(u'port'):
            var.put(u'url', (Js(u':')+var.get(u'aParsedUrl').get(u'port')), u'+')
        if var.get(u'aParsedUrl').get(u'path'):
            var.put(u'url', var.get(u'aParsedUrl').get(u'path'), u'+')
        return var.get(u'url')
    PyJsHoisted_urlGenerate_.func_name = u'urlGenerate'
    var.put(u'urlGenerate', PyJsHoisted_urlGenerate_)
    @Js
    def PyJsHoisted_compareByGeneratedPositionsDeflated_(mappingA, mappingB, onlyCompareGenerated, this, arguments, var=var):
        var = Scope({u'this':this, u'mappingB':mappingB, u'arguments':arguments, u'onlyCompareGenerated':onlyCompareGenerated, u'mappingA':mappingA}, var)
        var.registers([u'mappingA', u'mappingB', u'onlyCompareGenerated', u'cmp'])
        var.put(u'cmp', (var.get(u'mappingA').get(u'generatedLine')-var.get(u'mappingB').get(u'generatedLine')))
        if PyJsStrictNeq(var.get(u'cmp'),Js(0.0)):
            return var.get(u'cmp')
        var.put(u'cmp', (var.get(u'mappingA').get(u'generatedColumn')-var.get(u'mappingB').get(u'generatedColumn')))
        if (PyJsStrictNeq(var.get(u'cmp'),Js(0.0)) or var.get(u'onlyCompareGenerated')):
            return var.get(u'cmp')
        var.put(u'cmp', var.get(u'strcmp')(var.get(u'mappingA').get(u'source'), var.get(u'mappingB').get(u'source')))
        if PyJsStrictNeq(var.get(u'cmp'),Js(0.0)):
            return var.get(u'cmp')
        var.put(u'cmp', (var.get(u'mappingA').get(u'originalLine')-var.get(u'mappingB').get(u'originalLine')))
        if PyJsStrictNeq(var.get(u'cmp'),Js(0.0)):
            return var.get(u'cmp')
        var.put(u'cmp', (var.get(u'mappingA').get(u'originalColumn')-var.get(u'mappingB').get(u'originalColumn')))
        if PyJsStrictNeq(var.get(u'cmp'),Js(0.0)):
            return var.get(u'cmp')
        return var.get(u'strcmp')(var.get(u'mappingA').get(u'name'), var.get(u'mappingB').get(u'name'))
    PyJsHoisted_compareByGeneratedPositionsDeflated_.func_name = u'compareByGeneratedPositionsDeflated'
    var.put(u'compareByGeneratedPositionsDeflated', PyJsHoisted_compareByGeneratedPositionsDeflated_)
    @Js
    def PyJsHoisted_join_(aRoot, aPath, this, arguments, var=var):
        var = Scope({u'aRoot':aRoot, u'aPath':aPath, u'this':this, u'arguments':arguments}, var)
        var.registers([u'aRootUrl', u'aRoot', u'aPath', u'joined', u'aPathUrl'])
        if PyJsStrictEq(var.get(u'aRoot'),Js(u'')):
            var.put(u'aRoot', Js(u'.'))
        if PyJsStrictEq(var.get(u'aPath'),Js(u'')):
            var.put(u'aPath', Js(u'.'))
        var.put(u'aPathUrl', var.get(u'urlParse')(var.get(u'aPath')))
        var.put(u'aRootUrl', var.get(u'urlParse')(var.get(u'aRoot')))
        if var.get(u'aRootUrl'):
            var.put(u'aRoot', (var.get(u'aRootUrl').get(u'path') or Js(u'/')))
        if (var.get(u'aPathUrl') and var.get(u'aPathUrl').get(u'scheme').neg()):
            if var.get(u'aRootUrl'):
                var.get(u'aPathUrl').put(u'scheme', var.get(u'aRootUrl').get(u'scheme'))
            return var.get(u'urlGenerate')(var.get(u'aPathUrl'))
        if (var.get(u'aPathUrl') or var.get(u'aPath').callprop(u'match', var.get(u'dataUrlRegexp'))):
            return var.get(u'aPath')
        if ((var.get(u'aRootUrl') and var.get(u'aRootUrl').get(u'host').neg()) and var.get(u'aRootUrl').get(u'path').neg()):
            var.get(u'aRootUrl').put(u'host', var.get(u'aPath'))
            return var.get(u'urlGenerate')(var.get(u'aRootUrl'))
        var.put(u'joined', (var.get(u'aPath') if PyJsStrictEq(var.get(u'aPath').callprop(u'charAt', Js(0.0)),Js(u'/')) else var.get(u'normalize')(((var.get(u'aRoot').callprop(u'replace', JsRegExp(u'/\\/+$/'), Js(u''))+Js(u'/'))+var.get(u'aPath')))))
        if var.get(u'aRootUrl'):
            var.get(u'aRootUrl').put(u'path', var.get(u'joined'))
            return var.get(u'urlGenerate')(var.get(u'aRootUrl'))
        return var.get(u'joined')
    PyJsHoisted_join_.func_name = u'join'
    var.put(u'join', PyJsHoisted_join_)
    @Js
    def PyJsHoisted_relative_(aRoot, aPath, this, arguments, var=var):
        var = Scope({u'aRoot':aRoot, u'aPath':aPath, u'this':this, u'arguments':arguments}, var)
        var.registers([u'aRoot', u'index', u'aPath', u'level'])
        if PyJsStrictEq(var.get(u'aRoot'),Js(u'')):
            var.put(u'aRoot', Js(u'.'))
        var.put(u'aRoot', var.get(u'aRoot').callprop(u'replace', JsRegExp(u'/\\/$/'), Js(u'')))
        var.put(u'level', Js(0.0))
        while PyJsStrictNeq(var.get(u'aPath').callprop(u'indexOf', (var.get(u'aRoot')+Js(u'/'))),Js(0.0)):
            var.put(u'index', var.get(u'aRoot').callprop(u'lastIndexOf', Js(u'/')))
            if (var.get(u'index')<Js(0.0)):
                return var.get(u'aPath')
            var.put(u'aRoot', var.get(u'aRoot').callprop(u'slice', Js(0.0), var.get(u'index')))
            if var.get(u'aRoot').callprop(u'match', JsRegExp(u'/^([^\\/]+:\\/)?\\/*$/')):
                return var.get(u'aPath')
            var.put(u'level',Js(var.get(u'level').to_number())+Js(1))
        return (var.get(u'Array')((var.get(u'level')+Js(1.0))).callprop(u'join', Js(u'../'))+var.get(u'aPath').callprop(u'substr', (var.get(u'aRoot').get(u'length')+Js(1.0))))
    PyJsHoisted_relative_.func_name = u'relative'
    var.put(u'relative', PyJsHoisted_relative_)
    @Js
    def PyJsHoisted_parseSourceMapInput_(str, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'str':str}, var)
        var.registers([u'str'])
        return var.get(u'JSON').callprop(u'parse', var.get(u'str').callprop(u'replace', JsRegExp(u"/^\\)]}'[^\\n]*\\n/"), Js(u'')))
    PyJsHoisted_parseSourceMapInput_.func_name = u'parseSourceMapInput'
    var.put(u'parseSourceMapInput', PyJsHoisted_parseSourceMapInput_)
    @Js
    def PyJsHoisted_fromSetString_(aStr, this, arguments, var=var):
        var = Scope({u'this':this, u'aStr':aStr, u'arguments':arguments}, var)
        var.registers([u'aStr'])
        if var.get(u'isProtoString')(var.get(u'aStr')):
            return var.get(u'aStr').callprop(u'slice', Js(1.0))
        return var.get(u'aStr')
    PyJsHoisted_fromSetString_.func_name = u'fromSetString'
    var.put(u'fromSetString', PyJsHoisted_fromSetString_)
    @Js
    def PyJsHoisted_computeSourceURL_(sourceRoot, sourceURL, sourceMapURL, this, arguments, var=var):
        var = Scope({u'this':this, u'sourceMapURL':sourceMapURL, u'sourceURL':sourceURL, u'sourceRoot':sourceRoot, u'arguments':arguments}, var)
        var.registers([u'index', u'sourceMapURL', u'sourceURL', u'parsed', u'sourceRoot'])
        var.put(u'sourceURL', (var.get(u'sourceURL') or Js(u'')))
        if var.get(u'sourceRoot'):
            if (PyJsStrictNeq(var.get(u'sourceRoot').get((var.get(u'sourceRoot').get(u'length')-Js(1.0))),Js(u'/')) and PyJsStrictNeq(var.get(u'sourceURL').get(u'0'),Js(u'/'))):
                var.put(u'sourceRoot', Js(u'/'), u'+')
            var.put(u'sourceURL', (var.get(u'sourceRoot')+var.get(u'sourceURL')))
        if var.get(u'sourceMapURL'):
            var.put(u'parsed', var.get(u'urlParse')(var.get(u'sourceMapURL')))
            if var.get(u'parsed').neg():
                PyJsTempException = JsToPyException(var.get(u'Error').create(Js(u'sourceMapURL could not be parsed')))
                raise PyJsTempException
            if var.get(u'parsed').get(u'path'):
                var.put(u'index', var.get(u'parsed').get(u'path').callprop(u'lastIndexOf', Js(u'/')))
                if (var.get(u'index')>=Js(0.0)):
                    var.get(u'parsed').put(u'path', var.get(u'parsed').get(u'path').callprop(u'substring', Js(0.0), (var.get(u'index')+Js(1.0))))
            var.put(u'sourceURL', var.get(u'join')(var.get(u'urlGenerate')(var.get(u'parsed')), var.get(u'sourceURL')))
        return var.get(u'normalize')(var.get(u'sourceURL'))
    PyJsHoisted_computeSourceURL_.func_name = u'computeSourceURL'
    var.put(u'computeSourceURL', PyJsHoisted_computeSourceURL_)
    @Js
    def PyJsHoisted_urlParse_(aUrl, this, arguments, var=var):
        var = Scope({u'aUrl':aUrl, u'this':this, u'arguments':arguments}, var)
        var.registers([u'aUrl', u'match'])
        var.put(u'match', var.get(u'aUrl').callprop(u'match', var.get(u'urlRegexp')))
        if var.get(u'match').neg():
            return var.get(u"null")
        PyJs_Object_277_ = Js({u'scheme':var.get(u'match').get(u'1'),u'auth':var.get(u'match').get(u'2'),u'host':var.get(u'match').get(u'3'),u'port':var.get(u'match').get(u'4'),u'path':var.get(u'match').get(u'5')})
        return PyJs_Object_277_
    PyJsHoisted_urlParse_.func_name = u'urlParse'
    var.put(u'urlParse', PyJsHoisted_urlParse_)
    @Js
    def PyJsHoisted_identity_(s, this, arguments, var=var):
        var = Scope({u'this':this, u's':s, u'arguments':arguments}, var)
        var.registers([u's'])
        return var.get(u's')
    PyJsHoisted_identity_.func_name = u'identity'
    var.put(u'identity', PyJsHoisted_identity_)
    @Js
    def PyJsHoisted_compareByGeneratedPositionsInflated_(mappingA, mappingB, this, arguments, var=var):
        var = Scope({u'this':this, u'mappingB':mappingB, u'arguments':arguments, u'mappingA':mappingA}, var)
        var.registers([u'mappingA', u'mappingB', u'cmp'])
        var.put(u'cmp', (var.get(u'mappingA').get(u'generatedLine')-var.get(u'mappingB').get(u'generatedLine')))
        if PyJsStrictNeq(var.get(u'cmp'),Js(0.0)):
            return var.get(u'cmp')
        var.put(u'cmp', (var.get(u'mappingA').get(u'generatedColumn')-var.get(u'mappingB').get(u'generatedColumn')))
        if PyJsStrictNeq(var.get(u'cmp'),Js(0.0)):
            return var.get(u'cmp')
        var.put(u'cmp', var.get(u'strcmp')(var.get(u'mappingA').get(u'source'), var.get(u'mappingB').get(u'source')))
        if PyJsStrictNeq(var.get(u'cmp'),Js(0.0)):
            return var.get(u'cmp')
        var.put(u'cmp', (var.get(u'mappingA').get(u'originalLine')-var.get(u'mappingB').get(u'originalLine')))
        if PyJsStrictNeq(var.get(u'cmp'),Js(0.0)):
            return var.get(u'cmp')
        var.put(u'cmp', (var.get(u'mappingA').get(u'originalColumn')-var.get(u'mappingB').get(u'originalColumn')))
        if PyJsStrictNeq(var.get(u'cmp'),Js(0.0)):
            return var.get(u'cmp')
        return var.get(u'strcmp')(var.get(u'mappingA').get(u'name'), var.get(u'mappingB').get(u'name'))
    PyJsHoisted_compareByGeneratedPositionsInflated_.func_name = u'compareByGeneratedPositionsInflated'
    var.put(u'compareByGeneratedPositionsInflated', PyJsHoisted_compareByGeneratedPositionsInflated_)
    @Js
    def PyJsHoisted_isProtoString_(s, this, arguments, var=var):
        var = Scope({u'this':this, u's':s, u'arguments':arguments}, var)
        var.registers([u'i', u'length', u's'])
        if var.get(u's').neg():
            return Js(False)
        var.put(u'length', var.get(u's').get(u'length'))
        if (var.get(u'length')<Js(9.0)):
            return Js(False)
        def PyJs_LONG_281_(var=var):
            def PyJs_LONG_280_(var=var):
                return ((((PyJsStrictNeq(var.get(u's').callprop(u'charCodeAt', (var.get(u'length')-Js(1.0))),Js(95.0)) or PyJsStrictNeq(var.get(u's').callprop(u'charCodeAt', (var.get(u'length')-Js(2.0))),Js(95.0))) or PyJsStrictNeq(var.get(u's').callprop(u'charCodeAt', (var.get(u'length')-Js(3.0))),Js(111.0))) or PyJsStrictNeq(var.get(u's').callprop(u'charCodeAt', (var.get(u'length')-Js(4.0))),Js(116.0))) or PyJsStrictNeq(var.get(u's').callprop(u'charCodeAt', (var.get(u'length')-Js(5.0))),Js(111.0)))
            return ((((PyJs_LONG_280_() or PyJsStrictNeq(var.get(u's').callprop(u'charCodeAt', (var.get(u'length')-Js(6.0))),Js(114.0))) or PyJsStrictNeq(var.get(u's').callprop(u'charCodeAt', (var.get(u'length')-Js(7.0))),Js(112.0))) or PyJsStrictNeq(var.get(u's').callprop(u'charCodeAt', (var.get(u'length')-Js(8.0))),Js(95.0))) or PyJsStrictNeq(var.get(u's').callprop(u'charCodeAt', (var.get(u'length')-Js(9.0))),Js(95.0)))
        if PyJs_LONG_281_():
            return Js(False)
        #for JS loop
        var.put(u'i', (var.get(u'length')-Js(10.0)))
        while (var.get(u'i')>=Js(0.0)):
            try:
                if PyJsStrictNeq(var.get(u's').callprop(u'charCodeAt', var.get(u'i')),Js(36.0)):
                    return Js(False)
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())-Js(1))+Js(1))
        return Js(True)
    PyJsHoisted_isProtoString_.func_name = u'isProtoString'
    var.put(u'isProtoString', PyJsHoisted_isProtoString_)
    @Js
    def PyJsHoisted_compareByOriginalPositions_(mappingA, mappingB, onlyCompareOriginal, this, arguments, var=var):
        var = Scope({u'this':this, u'onlyCompareOriginal':onlyCompareOriginal, u'mappingB':mappingB, u'arguments':arguments, u'mappingA':mappingA}, var)
        var.registers([u'onlyCompareOriginal', u'mappingA', u'mappingB', u'cmp'])
        var.put(u'cmp', var.get(u'strcmp')(var.get(u'mappingA').get(u'source'), var.get(u'mappingB').get(u'source')))
        if PyJsStrictNeq(var.get(u'cmp'),Js(0.0)):
            return var.get(u'cmp')
        var.put(u'cmp', (var.get(u'mappingA').get(u'originalLine')-var.get(u'mappingB').get(u'originalLine')))
        if PyJsStrictNeq(var.get(u'cmp'),Js(0.0)):
            return var.get(u'cmp')
        var.put(u'cmp', (var.get(u'mappingA').get(u'originalColumn')-var.get(u'mappingB').get(u'originalColumn')))
        if (PyJsStrictNeq(var.get(u'cmp'),Js(0.0)) or var.get(u'onlyCompareOriginal')):
            return var.get(u'cmp')
        var.put(u'cmp', (var.get(u'mappingA').get(u'generatedColumn')-var.get(u'mappingB').get(u'generatedColumn')))
        if PyJsStrictNeq(var.get(u'cmp'),Js(0.0)):
            return var.get(u'cmp')
        var.put(u'cmp', (var.get(u'mappingA').get(u'generatedLine')-var.get(u'mappingB').get(u'generatedLine')))
        if PyJsStrictNeq(var.get(u'cmp'),Js(0.0)):
            return var.get(u'cmp')
        return var.get(u'strcmp')(var.get(u'mappingA').get(u'name'), var.get(u'mappingB').get(u'name'))
    PyJsHoisted_compareByOriginalPositions_.func_name = u'compareByOriginalPositions'
    var.put(u'compareByOriginalPositions', PyJsHoisted_compareByOriginalPositions_)
    @Js
    def PyJsHoisted_strcmp_(aStr1, aStr2, this, arguments, var=var):
        var = Scope({u'this':this, u'aStr2':aStr2, u'aStr1':aStr1, u'arguments':arguments}, var)
        var.registers([u'aStr2', u'aStr1'])
        if PyJsStrictEq(var.get(u'aStr1'),var.get(u'aStr2')):
            return Js(0.0)
        if PyJsStrictEq(var.get(u'aStr1'),var.get(u"null")):
            return Js(1.0)
        if PyJsStrictEq(var.get(u'aStr2'),var.get(u"null")):
            return (-Js(1.0))
        if (var.get(u'aStr1')>var.get(u'aStr2')):
            return Js(1.0)
        return (-Js(1.0))
    PyJsHoisted_strcmp_.func_name = u'strcmp'
    var.put(u'strcmp', PyJsHoisted_strcmp_)
    @Js
    def PyJsHoisted_getArg_(aArgs, aName, aDefaultValue, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'aDefaultValue':aDefaultValue, u'aName':aName, u'aArgs':aArgs}, var)
        var.registers([u'aDefaultValue', u'aName', u'aArgs'])
        if var.get(u'aArgs').contains(var.get(u'aName')):
            return var.get(u'aArgs').get(var.get(u'aName'))
        else:
            if PyJsStrictEq(var.get(u'arguments').get(u'length'),Js(3.0)):
                return var.get(u'aDefaultValue')
            else:
                PyJsTempException = JsToPyException(var.get(u'Error').create(((Js(u'"')+var.get(u'aName'))+Js(u'" is a required argument.'))))
                raise PyJsTempException
    PyJsHoisted_getArg_.func_name = u'getArg'
    var.put(u'getArg', PyJsHoisted_getArg_)
    @Js
    def PyJsHoisted_toSetString_(aStr, this, arguments, var=var):
        var = Scope({u'this':this, u'aStr':aStr, u'arguments':arguments}, var)
        var.registers([u'aStr'])
        if var.get(u'isProtoString')(var.get(u'aStr')):
            return (Js(u'$')+var.get(u'aStr'))
        return var.get(u'aStr')
    PyJsHoisted_toSetString_.func_name = u'toSetString'
    var.put(u'toSetString', PyJsHoisted_toSetString_)
    pass
    var.get(u'exports').put(u'getArg', var.get(u'getArg'))
    var.put(u'urlRegexp', JsRegExp(u'/^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/'))
    var.put(u'dataUrlRegexp', JsRegExp(u'/^data:.+\\,.+$/'))
    pass
    var.get(u'exports').put(u'urlParse', var.get(u'urlParse'))
    pass
    var.get(u'exports').put(u'urlGenerate', var.get(u'urlGenerate'))
    pass
    var.get(u'exports').put(u'normalize', var.get(u'normalize'))
    pass
    var.get(u'exports').put(u'join', var.get(u'join'))
    @Js
    def PyJs_anonymous_278_(aPath, this, arguments, var=var):
        var = Scope({u'this':this, u'aPath':aPath, u'arguments':arguments}, var)
        var.registers([u'aPath'])
        return (PyJsStrictEq(var.get(u'aPath').callprop(u'charAt', Js(0.0)),Js(u'/')) or var.get(u'urlRegexp').callprop(u'test', var.get(u'aPath')))
    PyJs_anonymous_278_._set_name(u'anonymous')
    var.get(u'exports').put(u'isAbsolute', PyJs_anonymous_278_)
    pass
    var.get(u'exports').put(u'relative', var.get(u'relative'))
    @Js
    def PyJs_anonymous_279_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'obj'])
        var.put(u'obj', var.get(u'Object').callprop(u'create', var.get(u"null")))
        return var.get(u'obj').contains(Js(u'__proto__')).neg()
    PyJs_anonymous_279_._set_name(u'anonymous')
    var.put(u'supportsNullProto', PyJs_anonymous_279_())
    pass
    pass
    var.get(u'exports').put(u'toSetString', (var.get(u'identity') if var.get(u'supportsNullProto') else var.get(u'toSetString')))
    pass
    var.get(u'exports').put(u'fromSetString', (var.get(u'identity') if var.get(u'supportsNullProto') else var.get(u'fromSetString')))
    pass
    pass
    var.get(u'exports').put(u'compareByOriginalPositions', var.get(u'compareByOriginalPositions'))
    pass
    var.get(u'exports').put(u'compareByGeneratedPositionsDeflated', var.get(u'compareByGeneratedPositionsDeflated'))
    pass
    pass
    var.get(u'exports').put(u'compareByGeneratedPositionsInflated', var.get(u'compareByGeneratedPositionsInflated'))
    pass
    var.get(u'exports').put(u'parseSourceMapInput', var.get(u'parseSourceMapInput'))
    pass
    var.get(u'exports').put(u'computeSourceURL', var.get(u'computeSourceURL'))
PyJs_anonymous_276_._set_name(u'anonymous')
PyJs_Object_282_ = Js({})
@Js
def PyJs_anonymous_283_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'require', u'exports', u'module'])
    var.get(u'exports').put(u'SourceMapGenerator', var.get(u'require')(Js(u'./lib/source-map-generator')).get(u'SourceMapGenerator'))
    var.get(u'exports').put(u'SourceMapConsumer', var.get(u'require')(Js(u'./lib/source-map-consumer')).get(u'SourceMapConsumer'))
    var.get(u'exports').put(u'SourceNode', var.get(u'require')(Js(u'./lib/source-node')).get(u'SourceNode'))
PyJs_anonymous_283_._set_name(u'anonymous')
PyJs_Object_284_ = Js({u'./lib/source-map-consumer':Js(8.0),u'./lib/source-map-generator':Js(9.0),u'./lib/source-node':Js(10.0)})
@Js
def PyJs_anonymous_285_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'require', u'exports', u'module'])
    PyJs_Object_287_ = Js({})
    PyJs_Object_288_ = Js({u'type':Js(u'tag'),u'registry':Js(True),u'raw':Js(u'escodegen'),u'name':Js(u'escodegen'),u'escapedName':Js(u'escodegen'),u'rawSpec':Js(u''),u'saveSpec':var.get(u"null"),u'fetchSpec':Js(u'latest')})
    PyJs_Object_289_ = Js({u'esgenerate':Js(u'./bin/esgenerate.js'),u'escodegen':Js(u'./bin/escodegen.js')})
    PyJs_Object_290_ = Js({u'url':Js(u'https://github.com/estools/escodegen/issues')})
    PyJs_Object_291_ = Js({u'esprima':Js(u'^3.1.3'),u'estraverse':Js(u'^4.2.0'),u'esutils':Js(u'^2.0.2'),u'optionator':Js(u'^0.8.1'),u'source-map':Js(u'~0.6.1')})
    PyJs_Object_292_ = Js({u'acorn':Js(u'^4.0.4'),u'bluebird':Js(u'^3.4.7'),u'bower-registry-client':Js(u'^1.0.0'),u'chai':Js(u'^3.5.0'),u'commonjs-everywhere':Js(u'^0.9.7'),u'gulp':Js(u'^3.8.10'),u'gulp-eslint':Js(u'^3.0.1'),u'gulp-mocha':Js(u'^3.0.1'),u'semver':Js(u'^5.1.0')})
    PyJs_Object_293_ = Js({u'node':Js(u'>=4.0')})
    PyJs_Object_294_ = Js({u'name':Js(u'Yusuke Suzuki'),u'email':Js(u'utatane.tea@gmail.com'),u'url':Js(u'http://github.com/Constellation')})
    PyJs_Object_295_ = Js({u'source-map':Js(u'~0.6.1')})
    PyJs_Object_296_ = Js({u'type':Js(u'git'),u'url':Js(u'git+ssh://git@github.com/estools/escodegen.git')})
    PyJs_Object_297_ = Js({u'build':Js(u'cjsify -a path: tools/entry-point.js > escodegen.browser.js'),u'build-min':Js(u'cjsify -ma path: tools/entry-point.js > escodegen.browser.min.js'),u'lint':Js(u'gulp lint'),u'release':Js(u'node tools/release.js'),u'test':Js(u'gulp travis'),u'unit-test':Js(u'gulp test')})
    PyJs_Object_286_ = Js({u'_from':Js(u'escodegen'),u'_id':Js(u'escodegen@1.11.0'),u'_inBundle':Js(False),u'_integrity':Js(u'sha512-IeMV45ReixHS53K/OmfKAIztN/igDHzTJUhZM3k1jMhIZWjk45SMwAtBsEXiJp3vSPmTcu6CXn7mDvFHRN66fw=='),u'_location':Js(u'/escodegen'),u'_phantomChildren':PyJs_Object_287_,u'_requested':PyJs_Object_288_,u'_requiredBy':Js([Js(u'#USER'), Js(u'/')]),u'_resolved':Js(u'https://registry.npmjs.org/escodegen/-/escodegen-1.11.0.tgz'),u'_shasum':Js(u'b27a9389481d5bfd5bec76f7bb1eb3f8f4556589'),u'_spec':Js(u'escodegen'),u'_where':Js(u'/Users/piotrdabkowski/PycharmProjects/Js2Py/js2py'),u'bin':PyJs_Object_289_,u'bugs':PyJs_Object_290_,u'bundleDependencies':Js(False),u'dependencies':PyJs_Object_291_,u'deprecated':Js(False),u'description':Js(u'ECMAScript code generator'),u'devDependencies':PyJs_Object_292_,u'engines':PyJs_Object_293_,u'files':Js([Js(u'LICENSE.BSD'), Js(u'README.md'), Js(u'bin'), Js(u'escodegen.js'), Js(u'package.json')]),u'homepage':Js(u'http://github.com/estools/escodegen'),u'license':Js(u'BSD-2-Clause'),u'main':Js(u'escodegen.js'),u'maintainers':Js([PyJs_Object_294_]),u'name':Js(u'escodegen'),u'optionalDependencies':PyJs_Object_295_,u'repository':PyJs_Object_296_,u'scripts':PyJs_Object_297_,u'version':Js(u'1.11.0')})
    var.get(u'module').put(u'exports', PyJs_Object_286_)
PyJs_anonymous_285_._set_name(u'anonymous')
PyJs_Object_298_ = Js({})
@Js
def PyJs_anonymous_299_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'require', u'exports', u'module'])
    @Js
    def PyJs_clone_300_(exports, this, arguments, var=var):
        var = Scope({u'this':this, u'exports':exports, u'clone':PyJs_clone_300_, u'arguments':arguments}, var)
        var.registers([u'traverse', u'extendCommentRange', u'shallowCopy', u'isNode', u'replace', u'VisitorKeys', u'attachComments', u'upperBound', u'isProperty', u'Controller', u'SKIP', u'isArray', u'exports', u'extend', u'VisitorOption', u'objectCreate', u'Element', u'ignoreJSHintError', u'lowerBound', u'Reference', u'REMOVE', u'Syntax', u'BREAK', u'objectKeys', u'deepCopy'])
        @Js
        def PyJsHoisted_traverse_(root, visitor, this, arguments, var=var):
            var = Scope({u'this':this, u'visitor':visitor, u'root':root, u'arguments':arguments}, var)
            var.registers([u'visitor', u'controller', u'root'])
            var.put(u'controller', var.get(u'Controller').create())
            return var.get(u'controller').callprop(u'traverse', var.get(u'root'), var.get(u'visitor'))
        PyJsHoisted_traverse_.func_name = u'traverse'
        var.put(u'traverse', PyJsHoisted_traverse_)
        @Js
        def PyJsHoisted_lowerBound_(array, func, this, arguments, var=var):
            var = Scope({u'this':this, u'array':array, u'arguments':arguments, u'func':func}, var)
            var.registers([u'i', u'len', u'current', u'func', u'diff', u'array'])
            pass
            var.put(u'len', var.get(u'array').get(u'length'))
            var.put(u'i', Js(0.0))
            while var.get(u'len'):
                var.put(u'diff', PyJsBshift(var.get(u'len'),Js(1.0)))
                var.put(u'current', (var.get(u'i')+var.get(u'diff')))
                if var.get(u'func')(var.get(u'array').get(var.get(u'current'))):
                    var.put(u'i', (var.get(u'current')+Js(1.0)))
                    var.put(u'len', (var.get(u'diff')+Js(1.0)), u'-')
                else:
                    var.put(u'len', var.get(u'diff'))
            return var.get(u'i')
        PyJsHoisted_lowerBound_.func_name = u'lowerBound'
        var.put(u'lowerBound', PyJsHoisted_lowerBound_)
        @Js
        def PyJsHoisted_extendCommentRange_(comment, tokens, this, arguments, var=var):
            var = Scope({u'comment':comment, u'tokens':tokens, u'this':this, u'arguments':arguments}, var)
            var.registers([u'comment', u'tokens', u'target'])
            pass
            @Js
            def PyJs_search_330_(token, this, arguments, var=var):
                var = Scope({u'this':this, u'search':PyJs_search_330_, u'token':token, u'arguments':arguments}, var)
                var.registers([u'token'])
                return (var.get(u'token').get(u'range').get(u'0')>var.get(u'comment').get(u'range').get(u'0'))
            PyJs_search_330_._set_name(u'search')
            var.put(u'target', var.get(u'upperBound')(var.get(u'tokens'), PyJs_search_330_))
            var.get(u'comment').put(u'extendedRange', Js([var.get(u'comment').get(u'range').get(u'0'), var.get(u'comment').get(u'range').get(u'1')]))
            if PyJsStrictNeq(var.get(u'target'),var.get(u'tokens').get(u'length')):
                var.get(u'comment').get(u'extendedRange').put(u'1', var.get(u'tokens').get(var.get(u'target')).get(u'range').get(u'0'))
            var.put(u'target', Js(1.0), u'-')
            if (var.get(u'target')>=Js(0.0)):
                var.get(u'comment').get(u'extendedRange').put(u'0', var.get(u'tokens').get(var.get(u'target')).get(u'range').get(u'1'))
            return var.get(u'comment')
        PyJsHoisted_extendCommentRange_.func_name = u'extendCommentRange'
        var.put(u'extendCommentRange', PyJsHoisted_extendCommentRange_)
        @Js
        def PyJsHoisted_Reference_(parent, key, this, arguments, var=var):
            var = Scope({u'this':this, u'key':key, u'parent':parent, u'arguments':arguments}, var)
            var.registers([u'key', u'parent'])
            var.get(u"this").put(u'parent', var.get(u'parent'))
            var.get(u"this").put(u'key', var.get(u'key'))
        PyJsHoisted_Reference_.func_name = u'Reference'
        var.put(u'Reference', PyJsHoisted_Reference_)
        @Js
        def PyJsHoisted_extend_(to, PyJsArg_66726f6d_, this, arguments, var=var):
            var = Scope({u'this':this, u'to':to, u'from':PyJsArg_66726f6d_, u'arguments':arguments}, var)
            var.registers([u'from', u'to', u'keys', u'len', u'i', u'key'])
            var.put(u'keys', var.get(u'objectKeys')(var.get(u'from')))
            #for JS loop
            PyJsComma(var.put(u'i', Js(0.0)),var.put(u'len', var.get(u'keys').get(u'length')))
            while (var.get(u'i')<var.get(u'len')):
                try:
                    var.put(u'key', var.get(u'keys').get(var.get(u'i')))
                    var.get(u'to').put(var.get(u'key'), var.get(u'from').get(var.get(u'key')))
                finally:
                        var.put(u'i', Js(1.0), u'+')
            return var.get(u'to')
        PyJsHoisted_extend_.func_name = u'extend'
        var.put(u'extend', PyJsHoisted_extend_)
        @Js
        def PyJsHoisted_shallowCopy_(obj, this, arguments, var=var):
            var = Scope({u'this':this, u'obj':obj, u'arguments':arguments}, var)
            var.registers([u'obj', u'key', u'ret'])
            PyJs_Object_303_ = Js({})
            var.put(u'ret', PyJs_Object_303_)
            for PyJsTemp in var.get(u'obj'):
                var.put(u'key', PyJsTemp)
                if var.get(u'obj').callprop(u'hasOwnProperty', var.get(u'key')):
                    var.get(u'ret').put(var.get(u'key'), var.get(u'obj').get(var.get(u'key')))
            return var.get(u'ret')
        PyJsHoisted_shallowCopy_.func_name = u'shallowCopy'
        var.put(u'shallowCopy', PyJsHoisted_shallowCopy_)
        @Js
        def PyJsHoisted_isNode_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'node'])
            if (var.get(u'node')==var.get(u"null")):
                return Js(False)
            return (PyJsStrictEq((Js(u'undefined') if PyJsStrictEq(var.get(u'node',throw=False).typeof(),Js(u'undefined')) else var.get(u'_typeof')(var.get(u'node'))),Js(u'object')) and PyJsStrictEq(var.get(u'node').get(u'type').typeof(),Js(u'string')))
        PyJsHoisted_isNode_.func_name = u'isNode'
        var.put(u'isNode', PyJsHoisted_isNode_)
        @Js
        def PyJsHoisted_upperBound_(array, func, this, arguments, var=var):
            var = Scope({u'this':this, u'array':array, u'arguments':arguments, u'func':func}, var)
            var.registers([u'i', u'len', u'current', u'func', u'diff', u'array'])
            pass
            var.put(u'len', var.get(u'array').get(u'length'))
            var.put(u'i', Js(0.0))
            while var.get(u'len'):
                var.put(u'diff', PyJsBshift(var.get(u'len'),Js(1.0)))
                var.put(u'current', (var.get(u'i')+var.get(u'diff')))
                if var.get(u'func')(var.get(u'array').get(var.get(u'current'))):
                    var.put(u'len', var.get(u'diff'))
                else:
                    var.put(u'i', (var.get(u'current')+Js(1.0)))
                    var.put(u'len', (var.get(u'diff')+Js(1.0)), u'-')
            return var.get(u'i')
        PyJsHoisted_upperBound_.func_name = u'upperBound'
        var.put(u'upperBound', PyJsHoisted_upperBound_)
        @Js
        def PyJsHoisted_Element_(node, path, wrap, ref, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments, u'wrap':wrap, u'path':path, u'ref':ref}, var)
            var.registers([u'node', u'path', u'ref', u'wrap'])
            var.get(u"this").put(u'node', var.get(u'node'))
            var.get(u"this").put(u'path', var.get(u'path'))
            var.get(u"this").put(u'wrap', var.get(u'wrap'))
            var.get(u"this").put(u'ref', var.get(u'ref'))
        PyJsHoisted_Element_.func_name = u'Element'
        var.put(u'Element', PyJsHoisted_Element_)
        @Js
        def PyJsHoisted_isProperty_(nodeType, key, this, arguments, var=var):
            var = Scope({u'this':this, u'nodeType':nodeType, u'arguments':arguments, u'key':key}, var)
            var.registers([u'nodeType', u'key'])
            return ((PyJsStrictEq(var.get(u'nodeType'),var.get(u'Syntax').get(u'ObjectExpression')) or PyJsStrictEq(var.get(u'nodeType'),var.get(u'Syntax').get(u'ObjectPattern'))) and PyJsStrictEq(Js(u'properties'),var.get(u'key')))
        PyJsHoisted_isProperty_.func_name = u'isProperty'
        var.put(u'isProperty', PyJsHoisted_isProperty_)
        @Js
        def PyJsHoisted_Controller_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            pass
        PyJsHoisted_Controller_.func_name = u'Controller'
        var.put(u'Controller', PyJsHoisted_Controller_)
        @Js
        def PyJsHoisted_attachComments_(tree, providedComments, tokens, this, arguments, var=var):
            var = Scope({u'tokens':tokens, u'this':this, u'tree':tree, u'arguments':arguments, u'providedComments':providedComments}, var)
            var.registers([u'comment', u'tokens', u'i', u'tree', u'len', u'providedComments', u'cursor', u'comments'])
            var.put(u'comments', Js([]))
            if var.get(u'tree').get(u'range').neg():
                PyJsTempException = JsToPyException(var.get(u'Error').create(Js(u'attachComments needs range information')))
                raise PyJsTempException
            if var.get(u'tokens').get(u'length').neg():
                if var.get(u'providedComments').get(u'length'):
                    #for JS loop
                    PyJsComma(var.put(u'i', Js(0.0)),var.put(u'len', var.get(u'providedComments').get(u'length')))
                    while (var.get(u'i')<var.get(u'len')):
                        try:
                            var.put(u'comment', var.get(u'deepCopy')(var.get(u'providedComments').get(var.get(u'i'))))
                            var.get(u'comment').put(u'extendedRange', Js([Js(0.0), var.get(u'tree').get(u'range').get(u'0')]))
                            var.get(u'comments').callprop(u'push', var.get(u'comment'))
                        finally:
                                var.put(u'i', Js(1.0), u'+')
                    var.get(u'tree').put(u'leadingComments', var.get(u'comments'))
                return var.get(u'tree')
            #for JS loop
            PyJsComma(var.put(u'i', Js(0.0)),var.put(u'len', var.get(u'providedComments').get(u'length')))
            while (var.get(u'i')<var.get(u'len')):
                try:
                    var.get(u'comments').callprop(u'push', var.get(u'extendCommentRange')(var.get(u'deepCopy')(var.get(u'providedComments').get(var.get(u'i'))), var.get(u'tokens')))
                finally:
                        var.put(u'i', Js(1.0), u'+')
            var.put(u'cursor', Js(0.0))
            @Js
            def PyJs_enter_332_(node, this, arguments, var=var):
                var = Scope({u'node':node, u'this':this, u'arguments':arguments, u'enter':PyJs_enter_332_}, var)
                var.registers([u'comment', u'node'])
                pass
                while (var.get(u'cursor')<var.get(u'comments').get(u'length')):
                    var.put(u'comment', var.get(u'comments').get(var.get(u'cursor')))
                    if (var.get(u'comment').get(u'extendedRange').get(u'1')>var.get(u'node').get(u'range').get(u'0')):
                        break
                    if PyJsStrictEq(var.get(u'comment').get(u'extendedRange').get(u'1'),var.get(u'node').get(u'range').get(u'0')):
                        if var.get(u'node').get(u'leadingComments').neg():
                            var.get(u'node').put(u'leadingComments', Js([]))
                        var.get(u'node').get(u'leadingComments').callprop(u'push', var.get(u'comment'))
                        var.get(u'comments').callprop(u'splice', var.get(u'cursor'), Js(1.0))
                    else:
                        var.put(u'cursor', Js(1.0), u'+')
                if PyJsStrictEq(var.get(u'cursor'),var.get(u'comments').get(u'length')):
                    return var.get(u'VisitorOption').get(u'Break')
                if (var.get(u'comments').get(var.get(u'cursor')).get(u'extendedRange').get(u'0')>var.get(u'node').get(u'range').get(u'1')):
                    return var.get(u'VisitorOption').get(u'Skip')
            PyJs_enter_332_._set_name(u'enter')
            PyJs_Object_331_ = Js({u'enter':PyJs_enter_332_})
            var.get(u'traverse')(var.get(u'tree'), PyJs_Object_331_)
            var.put(u'cursor', Js(0.0))
            @Js
            def PyJs_leave_334_(node, this, arguments, var=var):
                var = Scope({u'node':node, u'this':this, u'arguments':arguments, u'leave':PyJs_leave_334_}, var)
                var.registers([u'comment', u'node'])
                pass
                while (var.get(u'cursor')<var.get(u'comments').get(u'length')):
                    var.put(u'comment', var.get(u'comments').get(var.get(u'cursor')))
                    if (var.get(u'node').get(u'range').get(u'1')<var.get(u'comment').get(u'extendedRange').get(u'0')):
                        break
                    if PyJsStrictEq(var.get(u'node').get(u'range').get(u'1'),var.get(u'comment').get(u'extendedRange').get(u'0')):
                        if var.get(u'node').get(u'trailingComments').neg():
                            var.get(u'node').put(u'trailingComments', Js([]))
                        var.get(u'node').get(u'trailingComments').callprop(u'push', var.get(u'comment'))
                        var.get(u'comments').callprop(u'splice', var.get(u'cursor'), Js(1.0))
                    else:
                        var.put(u'cursor', Js(1.0), u'+')
                if PyJsStrictEq(var.get(u'cursor'),var.get(u'comments').get(u'length')):
                    return var.get(u'VisitorOption').get(u'Break')
                if (var.get(u'comments').get(var.get(u'cursor')).get(u'extendedRange').get(u'0')>var.get(u'node').get(u'range').get(u'1')):
                    return var.get(u'VisitorOption').get(u'Skip')
            PyJs_leave_334_._set_name(u'leave')
            PyJs_Object_333_ = Js({u'leave':PyJs_leave_334_})
            var.get(u'traverse')(var.get(u'tree'), PyJs_Object_333_)
            return var.get(u'tree')
        PyJsHoisted_attachComments_.func_name = u'attachComments'
        var.put(u'attachComments', PyJsHoisted_attachComments_)
        @Js
        def PyJsHoisted_ignoreJSHintError_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            pass
        PyJsHoisted_ignoreJSHintError_.func_name = u'ignoreJSHintError'
        var.put(u'ignoreJSHintError', PyJsHoisted_ignoreJSHintError_)
        @Js
        def PyJsHoisted_deepCopy_(obj, this, arguments, var=var):
            var = Scope({u'this':this, u'obj':obj, u'arguments':arguments}, var)
            var.registers([u'val', u'obj', u'key', u'ret'])
            PyJs_Object_302_ = Js({})
            var.put(u'ret', PyJs_Object_302_)
            for PyJsTemp in var.get(u'obj'):
                var.put(u'key', PyJsTemp)
                if var.get(u'obj').callprop(u'hasOwnProperty', var.get(u'key')):
                    var.put(u'val', var.get(u'obj').get(var.get(u'key')))
                    if (PyJsStrictEq((Js(u'undefined') if PyJsStrictEq(var.get(u'val',throw=False).typeof(),Js(u'undefined')) else var.get(u'_typeof')(var.get(u'val'))),Js(u'object')) and PyJsStrictNeq(var.get(u'val'),var.get(u"null"))):
                        var.get(u'ret').put(var.get(u'key'), var.get(u'deepCopy')(var.get(u'val')))
                    else:
                        var.get(u'ret').put(var.get(u'key'), var.get(u'val'))
            return var.get(u'ret')
        PyJsHoisted_deepCopy_.func_name = u'deepCopy'
        var.put(u'deepCopy', PyJsHoisted_deepCopy_)
        @Js
        def PyJsHoisted_replace_(root, visitor, this, arguments, var=var):
            var = Scope({u'this':this, u'visitor':visitor, u'root':root, u'arguments':arguments}, var)
            var.registers([u'visitor', u'controller', u'root'])
            var.put(u'controller', var.get(u'Controller').create())
            return var.get(u'controller').callprop(u'replace', var.get(u'root'), var.get(u'visitor'))
        PyJsHoisted_replace_.func_name = u'replace'
        var.put(u'replace', PyJsHoisted_replace_)
        Js(u'use strict')
        pass
        pass
        var.put(u'isArray', var.get(u'Array').get(u'isArray'))
        if var.get(u'isArray').neg():
            @Js
            def PyJs_isArray_301_(array, this, arguments, var=var):
                var = Scope({u'this':this, u'isArray':PyJs_isArray_301_, u'array':array, u'arguments':arguments}, var)
                var.registers([u'array'])
                return PyJsStrictEq(var.get(u'Object').get(u'prototype').get(u'toString').callprop(u'call', var.get(u'array')),Js(u'[object Array]'))
            PyJs_isArray_301_._set_name(u'isArray')
            var.put(u'isArray', PyJs_isArray_301_)
        pass
        pass
        var.get(u'ignoreJSHintError')(var.get(u'shallowCopy'))
        pass
        pass
        var.get(u'ignoreJSHintError')(var.get(u'lowerBound'))
        @Js
        def PyJs_anonymous_304_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'F'])
            @Js
            def PyJsHoisted_F_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([])
                pass
            PyJsHoisted_F_.func_name = u'F'
            var.put(u'F', PyJsHoisted_F_)
            pass
            @Js
            def PyJs_anonymous_305_(o, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'o':o}, var)
                var.registers([u'o'])
                var.get(u'F').put(u'prototype', var.get(u'o'))
                return var.get(u'F').create()
            PyJs_anonymous_305_._set_name(u'anonymous')
            return PyJs_anonymous_305_
        PyJs_anonymous_304_._set_name(u'anonymous')
        var.put(u'objectCreate', (var.get(u'Object').get(u'create') or PyJs_anonymous_304_()))
        @Js
        def PyJs_anonymous_306_(o, this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'o':o}, var)
            var.registers([u'keys', u'o', u'key'])
            var.put(u'keys', Js([]))
            for PyJsTemp in var.get(u'o'):
                var.put(u'key', PyJsTemp)
                var.get(u'keys').callprop(u'push', var.get(u'key'))
            return var.get(u'keys')
        PyJs_anonymous_306_._set_name(u'anonymous')
        var.put(u'objectKeys', (var.get(u'Object').get(u'keys') or PyJs_anonymous_306_))
        pass
        PyJs_Object_307_ = Js({u'AssignmentExpression':Js(u'AssignmentExpression'),u'AssignmentPattern':Js(u'AssignmentPattern'),u'ArrayExpression':Js(u'ArrayExpression'),u'ArrayPattern':Js(u'ArrayPattern'),u'ArrowFunctionExpression':Js(u'ArrowFunctionExpression'),u'AwaitExpression':Js(u'AwaitExpression'),u'BlockStatement':Js(u'BlockStatement'),u'BinaryExpression':Js(u'BinaryExpression'),u'BreakStatement':Js(u'BreakStatement'),u'CallExpression':Js(u'CallExpression'),u'CatchClause':Js(u'CatchClause'),u'ClassBody':Js(u'ClassBody'),u'ClassDeclaration':Js(u'ClassDeclaration'),u'ClassExpression':Js(u'ClassExpression'),u'ComprehensionBlock':Js(u'ComprehensionBlock'),u'ComprehensionExpression':Js(u'ComprehensionExpression'),u'ConditionalExpression':Js(u'ConditionalExpression'),u'ContinueStatement':Js(u'ContinueStatement'),u'DebuggerStatement':Js(u'DebuggerStatement'),u'DirectiveStatement':Js(u'DirectiveStatement'),u'DoWhileStatement':Js(u'DoWhileStatement'),u'EmptyStatement':Js(u'EmptyStatement'),u'ExportAllDeclaration':Js(u'ExportAllDeclaration'),u'ExportDefaultDeclaration':Js(u'ExportDefaultDeclaration'),u'ExportNamedDeclaration':Js(u'ExportNamedDeclaration'),u'ExportSpecifier':Js(u'ExportSpecifier'),u'ExpressionStatement':Js(u'ExpressionStatement'),u'ForStatement':Js(u'ForStatement'),u'ForInStatement':Js(u'ForInStatement'),u'ForOfStatement':Js(u'ForOfStatement'),u'FunctionDeclaration':Js(u'FunctionDeclaration'),u'FunctionExpression':Js(u'FunctionExpression'),u'GeneratorExpression':Js(u'GeneratorExpression'),u'Identifier':Js(u'Identifier'),u'IfStatement':Js(u'IfStatement'),u'ImportDeclaration':Js(u'ImportDeclaration'),u'ImportDefaultSpecifier':Js(u'ImportDefaultSpecifier'),u'ImportNamespaceSpecifier':Js(u'ImportNamespaceSpecifier'),u'ImportSpecifier':Js(u'ImportSpecifier'),u'Literal':Js(u'Literal'),u'LabeledStatement':Js(u'LabeledStatement'),u'LogicalExpression':Js(u'LogicalExpression'),u'MemberExpression':Js(u'MemberExpression'),u'MetaProperty':Js(u'MetaProperty'),u'MethodDefinition':Js(u'MethodDefinition'),u'ModuleSpecifier':Js(u'ModuleSpecifier'),u'NewExpression':Js(u'NewExpression'),u'ObjectExpression':Js(u'ObjectExpression'),u'ObjectPattern':Js(u'ObjectPattern'),u'Program':Js(u'Program'),u'Property':Js(u'Property'),u'RestElement':Js(u'RestElement'),u'ReturnStatement':Js(u'ReturnStatement'),u'SequenceExpression':Js(u'SequenceExpression'),u'SpreadElement':Js(u'SpreadElement'),u'Super':Js(u'Super'),u'SwitchStatement':Js(u'SwitchStatement'),u'SwitchCase':Js(u'SwitchCase'),u'TaggedTemplateExpression':Js(u'TaggedTemplateExpression'),u'TemplateElement':Js(u'TemplateElement'),u'TemplateLiteral':Js(u'TemplateLiteral'),u'ThisExpression':Js(u'ThisExpression'),u'ThrowStatement':Js(u'ThrowStatement'),u'TryStatement':Js(u'TryStatement'),u'UnaryExpression':Js(u'UnaryExpression'),u'UpdateExpression':Js(u'UpdateExpression'),u'VariableDeclaration':Js(u'VariableDeclaration'),u'VariableDeclarator':Js(u'VariableDeclarator'),u'WhileStatement':Js(u'WhileStatement'),u'WithStatement':Js(u'WithStatement'),u'YieldExpression':Js(u'YieldExpression')})
        var.put(u'Syntax', PyJs_Object_307_)
        PyJs_Object_308_ = Js({u'AssignmentExpression':Js([Js(u'left'), Js(u'right')]),u'AssignmentPattern':Js([Js(u'left'), Js(u'right')]),u'ArrayExpression':Js([Js(u'elements')]),u'ArrayPattern':Js([Js(u'elements')]),u'ArrowFunctionExpression':Js([Js(u'params'), Js(u'body')]),u'AwaitExpression':Js([Js(u'argument')]),u'BlockStatement':Js([Js(u'body')]),u'BinaryExpression':Js([Js(u'left'), Js(u'right')]),u'BreakStatement':Js([Js(u'label')]),u'CallExpression':Js([Js(u'callee'), Js(u'arguments')]),u'CatchClause':Js([Js(u'param'), Js(u'body')]),u'ClassBody':Js([Js(u'body')]),u'ClassDeclaration':Js([Js(u'id'), Js(u'superClass'), Js(u'body')]),u'ClassExpression':Js([Js(u'id'), Js(u'superClass'), Js(u'body')]),u'ComprehensionBlock':Js([Js(u'left'), Js(u'right')]),u'ComprehensionExpression':Js([Js(u'blocks'), Js(u'filter'), Js(u'body')]),u'ConditionalExpression':Js([Js(u'test'), Js(u'consequent'), Js(u'alternate')]),u'ContinueStatement':Js([Js(u'label')]),u'DebuggerStatement':Js([]),u'DirectiveStatement':Js([]),u'DoWhileStatement':Js([Js(u'body'), Js(u'test')]),u'EmptyStatement':Js([]),u'ExportAllDeclaration':Js([Js(u'source')]),u'ExportDefaultDeclaration':Js([Js(u'declaration')]),u'ExportNamedDeclaration':Js([Js(u'declaration'), Js(u'specifiers'), Js(u'source')]),u'ExportSpecifier':Js([Js(u'exported'), Js(u'local')]),u'ExpressionStatement':Js([Js(u'expression')]),u'ForStatement':Js([Js(u'init'), Js(u'test'), Js(u'update'), Js(u'body')]),u'ForInStatement':Js([Js(u'left'), Js(u'right'), Js(u'body')]),u'ForOfStatement':Js([Js(u'left'), Js(u'right'), Js(u'body')]),u'FunctionDeclaration':Js([Js(u'id'), Js(u'params'), Js(u'body')]),u'FunctionExpression':Js([Js(u'id'), Js(u'params'), Js(u'body')]),u'GeneratorExpression':Js([Js(u'blocks'), Js(u'filter'), Js(u'body')]),u'Identifier':Js([]),u'IfStatement':Js([Js(u'test'), Js(u'consequent'), Js(u'alternate')]),u'ImportDeclaration':Js([Js(u'specifiers'), Js(u'source')]),u'ImportDefaultSpecifier':Js([Js(u'local')]),u'ImportNamespaceSpecifier':Js([Js(u'local')]),u'ImportSpecifier':Js([Js(u'imported'), Js(u'local')]),u'Literal':Js([]),u'LabeledStatement':Js([Js(u'label'), Js(u'body')]),u'LogicalExpression':Js([Js(u'left'), Js(u'right')]),u'MemberExpression':Js([Js(u'object'), Js(u'property')]),u'MetaProperty':Js([Js(u'meta'), Js(u'property')]),u'MethodDefinition':Js([Js(u'key'), Js(u'value')]),u'ModuleSpecifier':Js([]),u'NewExpression':Js([Js(u'callee'), Js(u'arguments')]),u'ObjectExpression':Js([Js(u'properties')]),u'ObjectPattern':Js([Js(u'properties')]),u'Program':Js([Js(u'body')]),u'Property':Js([Js(u'key'), Js(u'value')]),u'RestElement':Js([Js(u'argument')]),u'ReturnStatement':Js([Js(u'argument')]),u'SequenceExpression':Js([Js(u'expressions')]),u'SpreadElement':Js([Js(u'argument')]),u'Super':Js([]),u'SwitchStatement':Js([Js(u'discriminant'), Js(u'cases')]),u'SwitchCase':Js([Js(u'test'), Js(u'consequent')]),u'TaggedTemplateExpression':Js([Js(u'tag'), Js(u'quasi')]),u'TemplateElement':Js([]),u'TemplateLiteral':Js([Js(u'quasis'), Js(u'expressions')]),u'ThisExpression':Js([]),u'ThrowStatement':Js([Js(u'argument')]),u'TryStatement':Js([Js(u'block'), Js(u'handler'), Js(u'finalizer')]),u'UnaryExpression':Js([Js(u'argument')]),u'UpdateExpression':Js([Js(u'argument')]),u'VariableDeclaration':Js([Js(u'declarations')]),u'VariableDeclarator':Js([Js(u'id'), Js(u'init')]),u'WhileStatement':Js([Js(u'test'), Js(u'body')]),u'WithStatement':Js([Js(u'object'), Js(u'body')]),u'YieldExpression':Js([Js(u'argument')])})
        var.put(u'VisitorKeys', PyJs_Object_308_)
        PyJs_Object_309_ = Js({})
        var.put(u'BREAK', PyJs_Object_309_)
        PyJs_Object_310_ = Js({})
        var.put(u'SKIP', PyJs_Object_310_)
        PyJs_Object_311_ = Js({})
        var.put(u'REMOVE', PyJs_Object_311_)
        PyJs_Object_312_ = Js({u'Break':var.get(u'BREAK'),u'Skip':var.get(u'SKIP'),u'Remove':var.get(u'REMOVE')})
        var.put(u'VisitorOption', PyJs_Object_312_)
        pass
        @Js
        def PyJs_replace_313_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments, u'replace':PyJs_replace_313_}, var)
            var.registers([u'node'])
            var.get(u"this").get(u'parent').put(var.get(u"this").get(u'key'), var.get(u'node'))
        PyJs_replace_313_._set_name(u'replace')
        var.get(u'Reference').get(u'prototype').put(u'replace', PyJs_replace_313_)
        @Js
        def PyJs_remove_314_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments, u'remove':PyJs_remove_314_}, var)
            var.registers([])
            if var.get(u'isArray')(var.get(u"this").get(u'parent')):
                var.get(u"this").get(u'parent').callprop(u'splice', var.get(u"this").get(u'key'), Js(1.0))
                return Js(True)
            else:
                var.get(u"this").callprop(u'replace', var.get(u"null"))
                return Js(False)
        PyJs_remove_314_._set_name(u'remove')
        var.get(u'Reference').get(u'prototype').put(u'remove', PyJs_remove_314_)
        pass
        pass
        @Js
        def PyJs_path_315_(this, arguments, var=var):
            var = Scope({u'this':this, u'path':PyJs_path_315_, u'arguments':arguments}, var)
            var.registers([u'iz', u'jz', u'i', u'j', u'addToPath', u'element', u'result'])
            @Js
            def PyJsHoisted_addToPath_(result, path, this, arguments, var=var):
                var = Scope({u'this':this, u'path':path, u'result':result, u'arguments':arguments}, var)
                var.registers([u'path', u'result'])
                if var.get(u'isArray')(var.get(u'path')):
                    #for JS loop
                    PyJsComma(var.put(u'j', Js(0.0)),var.put(u'jz', var.get(u'path').get(u'length')))
                    while (var.get(u'j')<var.get(u'jz')):
                        try:
                            var.get(u'result').callprop(u'push', var.get(u'path').get(var.get(u'j')))
                        finally:
                                var.put(u'j',Js(var.get(u'j').to_number())+Js(1))
                else:
                    var.get(u'result').callprop(u'push', var.get(u'path'))
            PyJsHoisted_addToPath_.func_name = u'addToPath'
            var.put(u'addToPath', PyJsHoisted_addToPath_)
            pass
            pass
            if var.get(u"this").get(u'__current').get(u'path').neg():
                return var.get(u"null")
            var.put(u'result', Js([]))
            #for JS loop
            PyJsComma(var.put(u'i', Js(2.0)),var.put(u'iz', var.get(u"this").get(u'__leavelist').get(u'length')))
            while (var.get(u'i')<var.get(u'iz')):
                try:
                    var.put(u'element', var.get(u"this").get(u'__leavelist').get(var.get(u'i')))
                    var.get(u'addToPath')(var.get(u'result'), var.get(u'element').get(u'path'))
                finally:
                        var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
            var.get(u'addToPath')(var.get(u'result'), var.get(u"this").get(u'__current').get(u'path'))
            return var.get(u'result')
        PyJs_path_315_._set_name(u'path')
        var.get(u'Controller').get(u'prototype').put(u'path', PyJs_path_315_)
        @Js
        def PyJs_anonymous_316_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([u'node'])
            var.put(u'node', var.get(u"this").callprop(u'current'))
            return (var.get(u'node').get(u'type') or var.get(u"this").get(u'__current').get(u'wrap'))
        PyJs_anonymous_316_._set_name(u'anonymous')
        var.get(u'Controller').get(u'prototype').put(u'type', PyJs_anonymous_316_)
        @Js
        def PyJs_parents_317_(this, arguments, var=var):
            var = Scope({u'this':this, u'parents':PyJs_parents_317_, u'arguments':arguments}, var)
            var.registers([u'i', u'iz', u'result'])
            pass
            var.put(u'result', Js([]))
            #for JS loop
            PyJsComma(var.put(u'i', Js(1.0)),var.put(u'iz', var.get(u"this").get(u'__leavelist').get(u'length')))
            while (var.get(u'i')<var.get(u'iz')):
                try:
                    var.get(u'result').callprop(u'push', var.get(u"this").get(u'__leavelist').get(var.get(u'i')).get(u'node'))
                finally:
                        var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
            return var.get(u'result')
        PyJs_parents_317_._set_name(u'parents')
        var.get(u'Controller').get(u'prototype').put(u'parents', PyJs_parents_317_)
        @Js
        def PyJs_current_318_(this, arguments, var=var):
            var = Scope({u'this':this, u'current':PyJs_current_318_, u'arguments':arguments}, var)
            var.registers([])
            return var.get(u"this").get(u'__current').get(u'node')
        PyJs_current_318_._set_name(u'current')
        var.get(u'Controller').get(u'prototype').put(u'current', PyJs_current_318_)
        @Js
        def PyJs___execute_319_(callback, element, this, arguments, var=var):
            var = Scope({u'this':this, u'callback':callback, u'arguments':arguments, u'__execute':PyJs___execute_319_, u'element':element}, var)
            var.registers([u'callback', u'element', u'result', u'previous'])
            pass
            var.put(u'result', var.get(u'undefined'))
            var.put(u'previous', var.get(u"this").get(u'__current'))
            var.get(u"this").put(u'__current', var.get(u'element'))
            var.get(u"this").put(u'__state', var.get(u"null"))
            if var.get(u'callback'):
                var.put(u'result', var.get(u'callback').callprop(u'call', var.get(u"this"), var.get(u'element').get(u'node'), var.get(u"this").get(u'__leavelist').get((var.get(u"this").get(u'__leavelist').get(u'length')-Js(1.0))).get(u'node')))
            var.get(u"this").put(u'__current', var.get(u'previous'))
            return var.get(u'result')
        PyJs___execute_319_._set_name(u'__execute')
        var.get(u'Controller').get(u'prototype').put(u'__execute', PyJs___execute_319_)
        @Js
        def PyJs_notify_320_(flag, this, arguments, var=var):
            var = Scope({u'this':this, u'flag':flag, u'arguments':arguments, u'notify':PyJs_notify_320_}, var)
            var.registers([u'flag'])
            var.get(u"this").put(u'__state', var.get(u'flag'))
        PyJs_notify_320_._set_name(u'notify')
        var.get(u'Controller').get(u'prototype').put(u'notify', PyJs_notify_320_)
        @Js
        def PyJs_anonymous_321_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop(u'notify', var.get(u'SKIP'))
        PyJs_anonymous_321_._set_name(u'anonymous')
        var.get(u'Controller').get(u'prototype').put(u'skip', PyJs_anonymous_321_)
        @Js
        def PyJs_anonymous_322_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop(u'notify', var.get(u'BREAK'))
        PyJs_anonymous_322_._set_name(u'anonymous')
        var.get(u'Controller').get(u'prototype').put(u'break', PyJs_anonymous_322_)
        @Js
        def PyJs_anonymous_323_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").callprop(u'notify', var.get(u'REMOVE'))
        PyJs_anonymous_323_._set_name(u'anonymous')
        var.get(u'Controller').get(u'prototype').put(u'remove', PyJs_anonymous_323_)
        @Js
        def PyJs_anonymous_324_(root, visitor, this, arguments, var=var):
            var = Scope({u'this':this, u'visitor':visitor, u'root':root, u'arguments':arguments}, var)
            var.registers([u'visitor', u'root'])
            var.get(u"this").put(u'visitor', var.get(u'visitor'))
            var.get(u"this").put(u'root', var.get(u'root'))
            var.get(u"this").put(u'__worklist', Js([]))
            var.get(u"this").put(u'__leavelist', Js([]))
            var.get(u"this").put(u'__current', var.get(u"null"))
            var.get(u"this").put(u'__state', var.get(u"null"))
            var.get(u"this").put(u'__fallback', var.get(u"null"))
            if PyJsStrictEq(var.get(u'visitor').get(u'fallback'),Js(u'iteration')):
                var.get(u"this").put(u'__fallback', var.get(u'objectKeys'))
            else:
                if PyJsStrictEq(var.get(u'visitor').get(u'fallback').typeof(),Js(u'function')):
                    var.get(u"this").put(u'__fallback', var.get(u'visitor').get(u'fallback'))
            var.get(u"this").put(u'__keys', var.get(u'VisitorKeys'))
            if var.get(u'visitor').get(u'keys'):
                var.get(u"this").put(u'__keys', var.get(u'extend')(var.get(u'objectCreate')(var.get(u"this").get(u'__keys')), var.get(u'visitor').get(u'keys')))
        PyJs_anonymous_324_._set_name(u'anonymous')
        var.get(u'Controller').get(u'prototype').put(u'__initialize', PyJs_anonymous_324_)
        pass
        pass
        @Js
        def PyJs_traverse_325_(root, visitor, this, arguments, var=var):
            var = Scope({u'this':this, u'visitor':visitor, u'traverse':PyJs_traverse_325_, u'root':root, u'arguments':arguments}, var)
            var.registers([u'node', u'nodeType', u'candidate', u'visitor', u'ret', u'element', u'current', u'leavelist', u'key', u'sentinel', u'candidates', u'worklist', u'root', u'current2'])
            pass
            var.get(u"this").callprop(u'__initialize', var.get(u'root'), var.get(u'visitor'))
            PyJs_Object_326_ = Js({})
            var.put(u'sentinel', PyJs_Object_326_)
            var.put(u'worklist', var.get(u"this").get(u'__worklist'))
            var.put(u'leavelist', var.get(u"this").get(u'__leavelist'))
            var.get(u'worklist').callprop(u'push', var.get(u'Element').create(var.get(u'root'), var.get(u"null"), var.get(u"null"), var.get(u"null")))
            var.get(u'leavelist').callprop(u'push', var.get(u'Element').create(var.get(u"null"), var.get(u"null"), var.get(u"null"), var.get(u"null")))
            while var.get(u'worklist').get(u'length'):
                var.put(u'element', var.get(u'worklist').callprop(u'pop'))
                if PyJsStrictEq(var.get(u'element'),var.get(u'sentinel')):
                    var.put(u'element', var.get(u'leavelist').callprop(u'pop'))
                    var.put(u'ret', var.get(u"this").callprop(u'__execute', var.get(u'visitor').get(u'leave'), var.get(u'element')))
                    if (PyJsStrictEq(var.get(u"this").get(u'__state'),var.get(u'BREAK')) or PyJsStrictEq(var.get(u'ret'),var.get(u'BREAK'))):
                        return var.get('undefined')
                    continue
                if var.get(u'element').get(u'node'):
                    var.put(u'ret', var.get(u"this").callprop(u'__execute', var.get(u'visitor').get(u'enter'), var.get(u'element')))
                    if (PyJsStrictEq(var.get(u"this").get(u'__state'),var.get(u'BREAK')) or PyJsStrictEq(var.get(u'ret'),var.get(u'BREAK'))):
                        return var.get('undefined')
                    var.get(u'worklist').callprop(u'push', var.get(u'sentinel'))
                    var.get(u'leavelist').callprop(u'push', var.get(u'element'))
                    if (PyJsStrictEq(var.get(u"this").get(u'__state'),var.get(u'SKIP')) or PyJsStrictEq(var.get(u'ret'),var.get(u'SKIP'))):
                        continue
                    var.put(u'node', var.get(u'element').get(u'node'))
                    var.put(u'nodeType', (var.get(u'node').get(u'type') or var.get(u'element').get(u'wrap')))
                    var.put(u'candidates', var.get(u"this").get(u'__keys').get(var.get(u'nodeType')))
                    if var.get(u'candidates').neg():
                        if var.get(u"this").get(u'__fallback'):
                            var.put(u'candidates', var.get(u"this").callprop(u'__fallback', var.get(u'node')))
                        else:
                            PyJsTempException = JsToPyException(var.get(u'Error').create(((Js(u'Unknown node type ')+var.get(u'nodeType'))+Js(u'.'))))
                            raise PyJsTempException
                    var.put(u'current', var.get(u'candidates').get(u'length'))
                    while (var.put(u'current', Js(1.0), u'-')>=Js(0.0)):
                        var.put(u'key', var.get(u'candidates').get(var.get(u'current')))
                        var.put(u'candidate', var.get(u'node').get(var.get(u'key')))
                        if var.get(u'candidate').neg():
                            continue
                        if var.get(u'isArray')(var.get(u'candidate')):
                            var.put(u'current2', var.get(u'candidate').get(u'length'))
                            while (var.put(u'current2', Js(1.0), u'-')>=Js(0.0)):
                                if var.get(u'candidate').get(var.get(u'current2')).neg():
                                    continue
                                if var.get(u'isProperty')(var.get(u'nodeType'), var.get(u'candidates').get(var.get(u'current'))):
                                    var.put(u'element', var.get(u'Element').create(var.get(u'candidate').get(var.get(u'current2')), Js([var.get(u'key'), var.get(u'current2')]), Js(u'Property'), var.get(u"null")))
                                else:
                                    if var.get(u'isNode')(var.get(u'candidate').get(var.get(u'current2'))):
                                        var.put(u'element', var.get(u'Element').create(var.get(u'candidate').get(var.get(u'current2')), Js([var.get(u'key'), var.get(u'current2')]), var.get(u"null"), var.get(u"null")))
                                    else:
                                        continue
                                var.get(u'worklist').callprop(u'push', var.get(u'element'))
                        else:
                            if var.get(u'isNode')(var.get(u'candidate')):
                                var.get(u'worklist').callprop(u'push', var.get(u'Element').create(var.get(u'candidate'), var.get(u'key'), var.get(u"null"), var.get(u"null")))
        PyJs_traverse_325_._set_name(u'traverse')
        var.get(u'Controller').get(u'prototype').put(u'traverse', PyJs_traverse_325_)
        @Js
        def PyJs_replace_327_(root, visitor, this, arguments, var=var):
            var = Scope({u'this':this, u'visitor':visitor, u'root':root, u'arguments':arguments, u'replace':PyJs_replace_327_}, var)
            var.registers([u'node', u'removeElem', u'nodeType', u'target', u'candidate', u'visitor', u'element', u'current', u'leavelist', u'key', u'sentinel', u'candidates', u'outer', u'worklist', u'root', u'current2'])
            @Js
            def PyJsHoisted_removeElem_(element, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'element':element}, var)
                var.registers([u'i', u'nextElem', u'parent', u'key', u'element'])
                pass
                if var.get(u'element').get(u'ref').callprop(u'remove'):
                    var.put(u'key', var.get(u'element').get(u'ref').get(u'key'))
                    var.put(u'parent', var.get(u'element').get(u'ref').get(u'parent'))
                    var.put(u'i', var.get(u'worklist').get(u'length'))
                    while (var.put(u'i',Js(var.get(u'i').to_number())-Js(1))+Js(1)):
                        var.put(u'nextElem', var.get(u'worklist').get(var.get(u'i')))
                        if (var.get(u'nextElem').get(u'ref') and PyJsStrictEq(var.get(u'nextElem').get(u'ref').get(u'parent'),var.get(u'parent'))):
                            if (var.get(u'nextElem').get(u'ref').get(u'key')<var.get(u'key')):
                                break
                            var.get(u'nextElem').get(u'ref').put(u'key',Js(var.get(u'nextElem').get(u'ref').get(u'key').to_number())-Js(1))
            PyJsHoisted_removeElem_.func_name = u'removeElem'
            var.put(u'removeElem', PyJsHoisted_removeElem_)
            pass
            pass
            var.get(u"this").callprop(u'__initialize', var.get(u'root'), var.get(u'visitor'))
            PyJs_Object_328_ = Js({})
            var.put(u'sentinel', PyJs_Object_328_)
            var.put(u'worklist', var.get(u"this").get(u'__worklist'))
            var.put(u'leavelist', var.get(u"this").get(u'__leavelist'))
            PyJs_Object_329_ = Js({u'root':var.get(u'root')})
            var.put(u'outer', PyJs_Object_329_)
            var.put(u'element', var.get(u'Element').create(var.get(u'root'), var.get(u"null"), var.get(u"null"), var.get(u'Reference').create(var.get(u'outer'), Js(u'root'))))
            var.get(u'worklist').callprop(u'push', var.get(u'element'))
            var.get(u'leavelist').callprop(u'push', var.get(u'element'))
            while var.get(u'worklist').get(u'length'):
                var.put(u'element', var.get(u'worklist').callprop(u'pop'))
                if PyJsStrictEq(var.get(u'element'),var.get(u'sentinel')):
                    var.put(u'element', var.get(u'leavelist').callprop(u'pop'))
                    var.put(u'target', var.get(u"this").callprop(u'__execute', var.get(u'visitor').get(u'leave'), var.get(u'element')))
                    if (((PyJsStrictNeq(var.get(u'target'),var.get(u'undefined')) and PyJsStrictNeq(var.get(u'target'),var.get(u'BREAK'))) and PyJsStrictNeq(var.get(u'target'),var.get(u'SKIP'))) and PyJsStrictNeq(var.get(u'target'),var.get(u'REMOVE'))):
                        var.get(u'element').get(u'ref').callprop(u'replace', var.get(u'target'))
                    if (PyJsStrictEq(var.get(u"this").get(u'__state'),var.get(u'REMOVE')) or PyJsStrictEq(var.get(u'target'),var.get(u'REMOVE'))):
                        var.get(u'removeElem')(var.get(u'element'))
                    if (PyJsStrictEq(var.get(u"this").get(u'__state'),var.get(u'BREAK')) or PyJsStrictEq(var.get(u'target'),var.get(u'BREAK'))):
                        return var.get(u'outer').get(u'root')
                    continue
                var.put(u'target', var.get(u"this").callprop(u'__execute', var.get(u'visitor').get(u'enter'), var.get(u'element')))
                if (((PyJsStrictNeq(var.get(u'target'),var.get(u'undefined')) and PyJsStrictNeq(var.get(u'target'),var.get(u'BREAK'))) and PyJsStrictNeq(var.get(u'target'),var.get(u'SKIP'))) and PyJsStrictNeq(var.get(u'target'),var.get(u'REMOVE'))):
                    var.get(u'element').get(u'ref').callprop(u'replace', var.get(u'target'))
                    var.get(u'element').put(u'node', var.get(u'target'))
                if (PyJsStrictEq(var.get(u"this").get(u'__state'),var.get(u'REMOVE')) or PyJsStrictEq(var.get(u'target'),var.get(u'REMOVE'))):
                    var.get(u'removeElem')(var.get(u'element'))
                    var.get(u'element').put(u'node', var.get(u"null"))
                if (PyJsStrictEq(var.get(u"this").get(u'__state'),var.get(u'BREAK')) or PyJsStrictEq(var.get(u'target'),var.get(u'BREAK'))):
                    return var.get(u'outer').get(u'root')
                var.put(u'node', var.get(u'element').get(u'node'))
                if var.get(u'node').neg():
                    continue
                var.get(u'worklist').callprop(u'push', var.get(u'sentinel'))
                var.get(u'leavelist').callprop(u'push', var.get(u'element'))
                if (PyJsStrictEq(var.get(u"this").get(u'__state'),var.get(u'SKIP')) or PyJsStrictEq(var.get(u'target'),var.get(u'SKIP'))):
                    continue
                var.put(u'nodeType', (var.get(u'node').get(u'type') or var.get(u'element').get(u'wrap')))
                var.put(u'candidates', var.get(u"this").get(u'__keys').get(var.get(u'nodeType')))
                if var.get(u'candidates').neg():
                    if var.get(u"this").get(u'__fallback'):
                        var.put(u'candidates', var.get(u"this").callprop(u'__fallback', var.get(u'node')))
                    else:
                        PyJsTempException = JsToPyException(var.get(u'Error').create(((Js(u'Unknown node type ')+var.get(u'nodeType'))+Js(u'.'))))
                        raise PyJsTempException
                var.put(u'current', var.get(u'candidates').get(u'length'))
                while (var.put(u'current', Js(1.0), u'-')>=Js(0.0)):
                    var.put(u'key', var.get(u'candidates').get(var.get(u'current')))
                    var.put(u'candidate', var.get(u'node').get(var.get(u'key')))
                    if var.get(u'candidate').neg():
                        continue
                    if var.get(u'isArray')(var.get(u'candidate')):
                        var.put(u'current2', var.get(u'candidate').get(u'length'))
                        while (var.put(u'current2', Js(1.0), u'-')>=Js(0.0)):
                            if var.get(u'candidate').get(var.get(u'current2')).neg():
                                continue
                            if var.get(u'isProperty')(var.get(u'nodeType'), var.get(u'candidates').get(var.get(u'current'))):
                                var.put(u'element', var.get(u'Element').create(var.get(u'candidate').get(var.get(u'current2')), Js([var.get(u'key'), var.get(u'current2')]), Js(u'Property'), var.get(u'Reference').create(var.get(u'candidate'), var.get(u'current2'))))
                            else:
                                if var.get(u'isNode')(var.get(u'candidate').get(var.get(u'current2'))):
                                    var.put(u'element', var.get(u'Element').create(var.get(u'candidate').get(var.get(u'current2')), Js([var.get(u'key'), var.get(u'current2')]), var.get(u"null"), var.get(u'Reference').create(var.get(u'candidate'), var.get(u'current2'))))
                                else:
                                    continue
                            var.get(u'worklist').callprop(u'push', var.get(u'element'))
                    else:
                        if var.get(u'isNode')(var.get(u'candidate')):
                            var.get(u'worklist').callprop(u'push', var.get(u'Element').create(var.get(u'candidate'), var.get(u'key'), var.get(u"null"), var.get(u'Reference').create(var.get(u'node'), var.get(u'key'))))
            return var.get(u'outer').get(u'root')
        PyJs_replace_327_._set_name(u'replace')
        var.get(u'Controller').get(u'prototype').put(u'replace', PyJs_replace_327_)
        pass
        pass
        pass
        pass
        var.get(u'exports').put(u'version', var.get(u'require')(Js(u'./package.json')).get(u'version'))
        var.get(u'exports').put(u'Syntax', var.get(u'Syntax'))
        var.get(u'exports').put(u'traverse', var.get(u'traverse'))
        var.get(u'exports').put(u'replace', var.get(u'replace'))
        var.get(u'exports').put(u'attachComments', var.get(u'attachComments'))
        var.get(u'exports').put(u'VisitorKeys', var.get(u'VisitorKeys'))
        var.get(u'exports').put(u'VisitorOption', var.get(u'VisitorOption'))
        var.get(u'exports').put(u'Controller', var.get(u'Controller'))
        @Js
        def PyJs_anonymous_335_(this, arguments, var=var):
            var = Scope({u'this':this, u'arguments':arguments}, var)
            var.registers([])
            PyJs_Object_336_ = Js({})
            return var.get(u'clone')(PyJs_Object_336_)
        PyJs_anonymous_335_._set_name(u'anonymous')
        var.get(u'exports').put(u'cloneEnvironment', PyJs_anonymous_335_)
        return var.get(u'exports')
    PyJs_clone_300_._set_name(u'clone')
    PyJs_clone_300_(var.get(u'exports'))
PyJs_anonymous_299_._set_name(u'anonymous')
PyJs_Object_337_ = Js({u'./package.json':Js(15.0)})
@Js
def PyJs_anonymous_338_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'require', u'exports', u'module'])
    PyJs_Object_340_ = Js({})
    PyJs_Object_341_ = Js({u'type':Js(u'range'),u'registry':Js(True),u'raw':Js(u'estraverse@^4.2.0'),u'name':Js(u'estraverse'),u'escapedName':Js(u'estraverse'),u'rawSpec':Js(u'^4.2.0'),u'saveSpec':var.get(u"null"),u'fetchSpec':Js(u'^4.2.0')})
    PyJs_Object_342_ = Js({u'url':Js(u'https://github.com/estools/estraverse/issues')})
    PyJs_Object_343_ = Js({u'babel-preset-es2015':Js(u'^6.3.13'),u'babel-register':Js(u'^6.3.13'),u'chai':Js(u'^2.1.1'),u'espree':Js(u'^1.11.0'),u'gulp':Js(u'^3.8.10'),u'gulp-bump':Js(u'^0.2.2'),u'gulp-filter':Js(u'^2.0.0'),u'gulp-git':Js(u'^1.0.1'),u'gulp-tag-version':Js(u'^1.2.1'),u'jshint':Js(u'^2.5.6'),u'mocha':Js(u'^2.1.0')})
    PyJs_Object_344_ = Js({u'node':Js(u'>=0.10.0')})
    PyJs_Object_345_ = Js({u'name':Js(u'Yusuke Suzuki'),u'email':Js(u'utatane.tea@gmail.com'),u'url':Js(u'http://github.com/Constellation')})
    PyJs_Object_346_ = Js({u'type':Js(u'git'),u'url':Js(u'git+ssh://git@github.com/estools/estraverse.git')})
    PyJs_Object_347_ = Js({u'lint':Js(u'jshint estraverse.js'),u'test':Js(u'npm run-script lint && npm run-script unit-test'),u'unit-test':Js(u'mocha --compilers js:babel-register')})
    PyJs_Object_339_ = Js({u'_from':Js(u'estraverse@^4.2.0'),u'_id':Js(u'estraverse@4.2.0'),u'_inBundle':Js(False),u'_integrity':Js(u'sha1-De4/7TH81GlhjOc0IJn8GvoL2xM='),u'_location':Js(u'/estraverse'),u'_phantomChildren':PyJs_Object_340_,u'_requested':PyJs_Object_341_,u'_requiredBy':Js([Js(u'/escodegen')]),u'_resolved':Js(u'https://registry.npmjs.org/estraverse/-/estraverse-4.2.0.tgz'),u'_shasum':Js(u'0dee3fed31fcd469618ce7342099fc1afa0bdb13'),u'_spec':Js(u'estraverse@^4.2.0'),u'_where':Js(u'/Users/piotrdabkowski/PycharmProjects/Js2Py/js2py/node_modules/escodegen'),u'bugs':PyJs_Object_342_,u'bundleDependencies':Js(False),u'deprecated':Js(False),u'description':Js(u'ECMAScript JS AST traversal functions'),u'devDependencies':PyJs_Object_343_,u'engines':PyJs_Object_344_,u'homepage':Js(u'https://github.com/estools/estraverse'),u'license':Js(u'BSD-2-Clause'),u'main':Js(u'estraverse.js'),u'maintainers':Js([PyJs_Object_345_]),u'name':Js(u'estraverse'),u'repository':PyJs_Object_346_,u'scripts':PyJs_Object_347_,u'version':Js(u'4.2.0')})
    var.get(u'module').put(u'exports', PyJs_Object_339_)
PyJs_anonymous_338_._set_name(u'anonymous')
PyJs_Object_348_ = Js({})
@Js
def PyJs_anonymous_349_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'require', u'exports', u'module'])
    @Js
    def PyJs_anonymous_350_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'isIterationStatement', u'isProblematicIfStatement', u'trailingStatement', u'isExpression', u'isSourceElement', u'isStatement'])
        @Js
        def PyJsHoisted_isIterationStatement_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'node'])
            if (var.get(u'node')==var.get(u"null")):
                return Js(False)
            while 1:
                SWITCHED = False
                CONDITION = (var.get(u'node').get(u'type'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'DoWhileStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'ForInStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'ForStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'WhileStatement')):
                    SWITCHED = True
                    return Js(True)
                SWITCHED = True
                break
            return Js(False)
        PyJsHoisted_isIterationStatement_.func_name = u'isIterationStatement'
        var.put(u'isIterationStatement', PyJsHoisted_isIterationStatement_)
        @Js
        def PyJsHoisted_isProblematicIfStatement_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'current', u'node'])
            pass
            if PyJsStrictNeq(var.get(u'node').get(u'type'),Js(u'IfStatement')):
                return Js(False)
            if (var.get(u'node').get(u'alternate')==var.get(u"null")):
                return Js(False)
            var.put(u'current', var.get(u'node').get(u'consequent'))
            while 1:
                if PyJsStrictEq(var.get(u'current').get(u'type'),Js(u'IfStatement')):
                    if (var.get(u'current').get(u'alternate')==var.get(u"null")):
                        return Js(True)
                var.put(u'current', var.get(u'trailingStatement')(var.get(u'current')))
                if not var.get(u'current'):
                    break
            return Js(False)
        PyJsHoisted_isProblematicIfStatement_.func_name = u'isProblematicIfStatement'
        var.put(u'isProblematicIfStatement', PyJsHoisted_isProblematicIfStatement_)
        @Js
        def PyJsHoisted_trailingStatement_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'node'])
            while 1:
                SWITCHED = False
                CONDITION = (var.get(u'node').get(u'type'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'IfStatement')):
                    SWITCHED = True
                    if (var.get(u'node').get(u'alternate')!=var.get(u"null")):
                        return var.get(u'node').get(u'alternate')
                    return var.get(u'node').get(u'consequent')
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'LabeledStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'ForStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'ForInStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'WhileStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'WithStatement')):
                    SWITCHED = True
                    return var.get(u'node').get(u'body')
                SWITCHED = True
                break
            return var.get(u"null")
        PyJsHoisted_trailingStatement_.func_name = u'trailingStatement'
        var.put(u'trailingStatement', PyJsHoisted_trailingStatement_)
        @Js
        def PyJsHoisted_isExpression_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'node'])
            if (var.get(u'node')==var.get(u"null")):
                return Js(False)
            while 1:
                SWITCHED = False
                CONDITION = (var.get(u'node').get(u'type'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'ArrayExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'AssignmentExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'BinaryExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'CallExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'ConditionalExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'FunctionExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'Identifier')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'Literal')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'LogicalExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'MemberExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'NewExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'ObjectExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'SequenceExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'ThisExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'UnaryExpression')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'UpdateExpression')):
                    SWITCHED = True
                    return Js(True)
                SWITCHED = True
                break
            return Js(False)
        PyJsHoisted_isExpression_.func_name = u'isExpression'
        var.put(u'isExpression', PyJsHoisted_isExpression_)
        @Js
        def PyJsHoisted_isSourceElement_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'node'])
            return (var.get(u'isStatement')(var.get(u'node')) or ((var.get(u'node')!=var.get(u"null")) and PyJsStrictEq(var.get(u'node').get(u'type'),Js(u'FunctionDeclaration'))))
        PyJsHoisted_isSourceElement_.func_name = u'isSourceElement'
        var.put(u'isSourceElement', PyJsHoisted_isSourceElement_)
        @Js
        def PyJsHoisted_isStatement_(node, this, arguments, var=var):
            var = Scope({u'node':node, u'this':this, u'arguments':arguments}, var)
            var.registers([u'node'])
            if (var.get(u'node')==var.get(u"null")):
                return Js(False)
            while 1:
                SWITCHED = False
                CONDITION = (var.get(u'node').get(u'type'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'BlockStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'BreakStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'ContinueStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'DebuggerStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'DoWhileStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'EmptyStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'ExpressionStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'ForInStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'ForStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'IfStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'LabeledStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'ReturnStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'SwitchStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'ThrowStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'TryStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'VariableDeclaration')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'WhileStatement')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'WithStatement')):
                    SWITCHED = True
                    return Js(True)
                SWITCHED = True
                break
            return Js(False)
        PyJsHoisted_isStatement_.func_name = u'isStatement'
        var.put(u'isStatement', PyJsHoisted_isStatement_)
        Js(u'use strict')
        pass
        pass
        pass
        pass
        pass
        pass
        PyJs_Object_351_ = Js({u'isExpression':var.get(u'isExpression'),u'isStatement':var.get(u'isStatement'),u'isIterationStatement':var.get(u'isIterationStatement'),u'isSourceElement':var.get(u'isSourceElement'),u'isProblematicIfStatement':var.get(u'isProblematicIfStatement'),u'trailingStatement':var.get(u'trailingStatement')})
        var.get(u'module').put(u'exports', PyJs_Object_351_)
    PyJs_anonymous_350_._set_name(u'anonymous')
    PyJs_anonymous_350_()
PyJs_anonymous_349_._set_name(u'anonymous')
PyJs_Object_352_ = Js({})
@Js
def PyJs_anonymous_353_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'require', u'exports', u'module'])
    @Js
    def PyJs_anonymous_354_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'isIdentifierPartES6', u'NON_ASCII_WHITESPACES', u'isIdentifierStartES5', u'fromCodePoint', u'IDENTIFIER_START', u'ES6Regex', u'ES5Regex', u'isHexDigit', u'ch', u'IDENTIFIER_PART', u'isLineTerminator', u'isDecimalDigit', u'isIdentifierStartES6', u'isIdentifierPartES5', u'isOctalDigit', u'isWhiteSpace'])
        @Js
        def PyJsHoisted_isIdentifierPartES6_(ch, this, arguments, var=var):
            var = Scope({u'this':this, u'ch':ch, u'arguments':arguments}, var)
            var.registers([u'ch'])
            return (var.get(u'IDENTIFIER_PART').get(var.get(u'ch')) if (var.get(u'ch')<Js(128)) else var.get(u'ES6Regex').get(u'NonAsciiIdentifierPart').callprop(u'test', var.get(u'fromCodePoint')(var.get(u'ch'))))
        PyJsHoisted_isIdentifierPartES6_.func_name = u'isIdentifierPartES6'
        var.put(u'isIdentifierPartES6', PyJsHoisted_isIdentifierPartES6_)
        @Js
        def PyJsHoisted_fromCodePoint_(cp, this, arguments, var=var):
            var = Scope({u'this':this, u'cp':cp, u'arguments':arguments}, var)
            var.registers([u'cp', u'cu2', u'cu1'])
            if (var.get(u'cp')<=Js(65535)):
                return var.get(u'String').callprop(u'fromCharCode', var.get(u'cp'))
            var.put(u'cu1', var.get(u'String').callprop(u'fromCharCode', (var.get(u'Math').callprop(u'floor', ((var.get(u'cp')-Js(65536))/Js(1024)))+Js(55296))))
            var.put(u'cu2', var.get(u'String').callprop(u'fromCharCode', (((var.get(u'cp')-Js(65536))%Js(1024))+Js(56320))))
            return (var.get(u'cu1')+var.get(u'cu2'))
        PyJsHoisted_fromCodePoint_.func_name = u'fromCodePoint'
        var.put(u'fromCodePoint', PyJsHoisted_fromCodePoint_)
        @Js
        def PyJsHoisted_isHexDigit_(ch, this, arguments, var=var):
            var = Scope({u'this':this, u'ch':ch, u'arguments':arguments}, var)
            var.registers([u'ch'])
            return ((((Js(48)<=var.get(u'ch')) and (var.get(u'ch')<=Js(57))) or ((Js(97)<=var.get(u'ch')) and (var.get(u'ch')<=Js(102)))) or ((Js(65)<=var.get(u'ch')) and (var.get(u'ch')<=Js(70))))
        PyJsHoisted_isHexDigit_.func_name = u'isHexDigit'
        var.put(u'isHexDigit', PyJsHoisted_isHexDigit_)
        @Js
        def PyJsHoisted_isOctalDigit_(ch, this, arguments, var=var):
            var = Scope({u'this':this, u'ch':ch, u'arguments':arguments}, var)
            var.registers([u'ch'])
            return ((var.get(u'ch')>=Js(48)) and (var.get(u'ch')<=Js(55)))
        PyJsHoisted_isOctalDigit_.func_name = u'isOctalDigit'
        var.put(u'isOctalDigit', PyJsHoisted_isOctalDigit_)
        @Js
        def PyJsHoisted_isLineTerminator_(ch, this, arguments, var=var):
            var = Scope({u'this':this, u'ch':ch, u'arguments':arguments}, var)
            var.registers([u'ch'])
            return (((PyJsStrictEq(var.get(u'ch'),Js(10)) or PyJsStrictEq(var.get(u'ch'),Js(13))) or PyJsStrictEq(var.get(u'ch'),Js(8232))) or PyJsStrictEq(var.get(u'ch'),Js(8233)))
        PyJsHoisted_isLineTerminator_.func_name = u'isLineTerminator'
        var.put(u'isLineTerminator', PyJsHoisted_isLineTerminator_)
        @Js
        def PyJsHoisted_isDecimalDigit_(ch, this, arguments, var=var):
            var = Scope({u'this':this, u'ch':ch, u'arguments':arguments}, var)
            var.registers([u'ch'])
            return ((Js(48)<=var.get(u'ch')) and (var.get(u'ch')<=Js(57)))
        PyJsHoisted_isDecimalDigit_.func_name = u'isDecimalDigit'
        var.put(u'isDecimalDigit', PyJsHoisted_isDecimalDigit_)
        @Js
        def PyJsHoisted_isIdentifierStartES6_(ch, this, arguments, var=var):
            var = Scope({u'this':this, u'ch':ch, u'arguments':arguments}, var)
            var.registers([u'ch'])
            return (var.get(u'IDENTIFIER_START').get(var.get(u'ch')) if (var.get(u'ch')<Js(128)) else var.get(u'ES6Regex').get(u'NonAsciiIdentifierStart').callprop(u'test', var.get(u'fromCodePoint')(var.get(u'ch'))))
        PyJsHoisted_isIdentifierStartES6_.func_name = u'isIdentifierStartES6'
        var.put(u'isIdentifierStartES6', PyJsHoisted_isIdentifierStartES6_)
        @Js
        def PyJsHoisted_isIdentifierPartES5_(ch, this, arguments, var=var):
            var = Scope({u'this':this, u'ch':ch, u'arguments':arguments}, var)
            var.registers([u'ch'])
            return (var.get(u'IDENTIFIER_PART').get(var.get(u'ch')) if (var.get(u'ch')<Js(128)) else var.get(u'ES5Regex').get(u'NonAsciiIdentifierPart').callprop(u'test', var.get(u'fromCodePoint')(var.get(u'ch'))))
        PyJsHoisted_isIdentifierPartES5_.func_name = u'isIdentifierPartES5'
        var.put(u'isIdentifierPartES5', PyJsHoisted_isIdentifierPartES5_)
        @Js
        def PyJsHoisted_isIdentifierStartES5_(ch, this, arguments, var=var):
            var = Scope({u'this':this, u'ch':ch, u'arguments':arguments}, var)
            var.registers([u'ch'])
            return (var.get(u'IDENTIFIER_START').get(var.get(u'ch')) if (var.get(u'ch')<Js(128)) else var.get(u'ES5Regex').get(u'NonAsciiIdentifierStart').callprop(u'test', var.get(u'fromCodePoint')(var.get(u'ch'))))
        PyJsHoisted_isIdentifierStartES5_.func_name = u'isIdentifierStartES5'
        var.put(u'isIdentifierStartES5', PyJsHoisted_isIdentifierStartES5_)
        @Js
        def PyJsHoisted_isWhiteSpace_(ch, this, arguments, var=var):
            var = Scope({u'this':this, u'ch':ch, u'arguments':arguments}, var)
            var.registers([u'ch'])
            return (((((PyJsStrictEq(var.get(u'ch'),Js(32)) or PyJsStrictEq(var.get(u'ch'),Js(9))) or PyJsStrictEq(var.get(u'ch'),Js(11))) or PyJsStrictEq(var.get(u'ch'),Js(12))) or PyJsStrictEq(var.get(u'ch'),Js(160))) or ((var.get(u'ch')>=Js(5760)) and (var.get(u'NON_ASCII_WHITESPACES').callprop(u'indexOf', var.get(u'ch'))>=Js(0.0))))
        PyJsHoisted_isWhiteSpace_.func_name = u'isWhiteSpace'
        var.put(u'isWhiteSpace', PyJsHoisted_isWhiteSpace_)
        Js(u'use strict')
        pass
        PyJs_Object_355_ = Js({u'NonAsciiIdentifierStart':JsRegExp(u'/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/'),u'NonAsciiIdentifierPart':JsRegExp(u'/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/')})
        var.put(u'ES5Regex', PyJs_Object_355_)
        PyJs_Object_356_ = Js({u'NonAsciiIdentifierStart':JsRegExp(u'/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF98]|\\uD809[\\uDC00-\\uDC6E]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D]|\\uD87E[\\uDC00-\\uDE1D]/'),u'NonAsciiIdentifierPart':JsRegExp(u'/[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDD0-\\uDDDA\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF01-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF98]|\\uD809[\\uDC00-\\uDC6E]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/')})
        var.put(u'ES6Regex', PyJs_Object_356_)
        pass
        pass
        pass
        var.put(u'NON_ASCII_WHITESPACES', Js([Js(5760), Js(6158), Js(8192), Js(8193), Js(8194), Js(8195), Js(8196), Js(8197), Js(8198), Js(8199), Js(8200), Js(8201), Js(8202), Js(8239), Js(8287), Js(12288), Js(65279)]))
        pass
        pass
        pass
        var.put(u'IDENTIFIER_START', var.get(u'Array').create(Js(128)))
        #for JS loop
        var.put(u'ch', Js(0.0))
        while (var.get(u'ch')<Js(128)):
            try:
                var.get(u'IDENTIFIER_START').put(var.get(u'ch'), (((((var.get(u'ch')>=Js(97)) and (var.get(u'ch')<=Js(122))) or ((var.get(u'ch')>=Js(65)) and (var.get(u'ch')<=Js(90)))) or PyJsStrictEq(var.get(u'ch'),Js(36))) or PyJsStrictEq(var.get(u'ch'),Js(95))))
            finally:
                    var.put(u'ch',Js(var.get(u'ch').to_number())+Js(1))
        var.put(u'IDENTIFIER_PART', var.get(u'Array').create(Js(128)))
        #for JS loop
        var.put(u'ch', Js(0.0))
        while (var.get(u'ch')<Js(128)):
            try:
                var.get(u'IDENTIFIER_PART').put(var.get(u'ch'), ((((((var.get(u'ch')>=Js(97)) and (var.get(u'ch')<=Js(122))) or ((var.get(u'ch')>=Js(65)) and (var.get(u'ch')<=Js(90)))) or ((var.get(u'ch')>=Js(48)) and (var.get(u'ch')<=Js(57)))) or PyJsStrictEq(var.get(u'ch'),Js(36))) or PyJsStrictEq(var.get(u'ch'),Js(95))))
            finally:
                    var.put(u'ch',Js(var.get(u'ch').to_number())+Js(1))
        pass
        pass
        pass
        pass
        PyJs_Object_357_ = Js({u'isDecimalDigit':var.get(u'isDecimalDigit'),u'isHexDigit':var.get(u'isHexDigit'),u'isOctalDigit':var.get(u'isOctalDigit'),u'isWhiteSpace':var.get(u'isWhiteSpace'),u'isLineTerminator':var.get(u'isLineTerminator'),u'isIdentifierStartES5':var.get(u'isIdentifierStartES5'),u'isIdentifierPartES5':var.get(u'isIdentifierPartES5'),u'isIdentifierStartES6':var.get(u'isIdentifierStartES6'),u'isIdentifierPartES6':var.get(u'isIdentifierPartES6')})
        var.get(u'module').put(u'exports', PyJs_Object_357_)
    PyJs_anonymous_354_._set_name(u'anonymous')
    PyJs_anonymous_354_()
PyJs_anonymous_353_._set_name(u'anonymous')
PyJs_Object_358_ = Js({})
@Js
def PyJs_anonymous_359_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'require', u'exports', u'module'])
    @Js
    def PyJs_anonymous_360_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([u'isKeywordES6', u'isKeywordES5', u'code', u'isIdentifierNameES6', u'decodeUtf16', u'isIdentifierNameES5', u'isIdentifierES5', u'isIdentifierES6', u'isReservedWordES5', u'isReservedWordES6', u'isRestrictedWord', u'isStrictModeReservedWordES6'])
        @Js
        def PyJsHoisted_isKeywordES6_(id, strict, this, arguments, var=var):
            var = Scope({u'this':this, u'strict':strict, u'id':id, u'arguments':arguments}, var)
            var.registers([u'strict', u'id'])
            if (var.get(u'strict') and var.get(u'isStrictModeReservedWordES6')(var.get(u'id'))):
                return Js(True)
            while 1:
                SWITCHED = False
                CONDITION = (var.get(u'id').get(u'length'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                    SWITCHED = True
                    return ((PyJsStrictEq(var.get(u'id'),Js(u'if')) or PyJsStrictEq(var.get(u'id'),Js(u'in'))) or PyJsStrictEq(var.get(u'id'),Js(u'do')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                    SWITCHED = True
                    return (((PyJsStrictEq(var.get(u'id'),Js(u'var')) or PyJsStrictEq(var.get(u'id'),Js(u'for'))) or PyJsStrictEq(var.get(u'id'),Js(u'new'))) or PyJsStrictEq(var.get(u'id'),Js(u'try')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                    SWITCHED = True
                    return (((((PyJsStrictEq(var.get(u'id'),Js(u'this')) or PyJsStrictEq(var.get(u'id'),Js(u'else'))) or PyJsStrictEq(var.get(u'id'),Js(u'case'))) or PyJsStrictEq(var.get(u'id'),Js(u'void'))) or PyJsStrictEq(var.get(u'id'),Js(u'with'))) or PyJsStrictEq(var.get(u'id'),Js(u'enum')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(5.0)):
                    SWITCHED = True
                    return (((((((PyJsStrictEq(var.get(u'id'),Js(u'while')) or PyJsStrictEq(var.get(u'id'),Js(u'break'))) or PyJsStrictEq(var.get(u'id'),Js(u'catch'))) or PyJsStrictEq(var.get(u'id'),Js(u'throw'))) or PyJsStrictEq(var.get(u'id'),Js(u'const'))) or PyJsStrictEq(var.get(u'id'),Js(u'yield'))) or PyJsStrictEq(var.get(u'id'),Js(u'class'))) or PyJsStrictEq(var.get(u'id'),Js(u'super')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(6.0)):
                    SWITCHED = True
                    return (((((PyJsStrictEq(var.get(u'id'),Js(u'return')) or PyJsStrictEq(var.get(u'id'),Js(u'typeof'))) or PyJsStrictEq(var.get(u'id'),Js(u'delete'))) or PyJsStrictEq(var.get(u'id'),Js(u'switch'))) or PyJsStrictEq(var.get(u'id'),Js(u'export'))) or PyJsStrictEq(var.get(u'id'),Js(u'import')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(7.0)):
                    SWITCHED = True
                    return ((PyJsStrictEq(var.get(u'id'),Js(u'default')) or PyJsStrictEq(var.get(u'id'),Js(u'finally'))) or PyJsStrictEq(var.get(u'id'),Js(u'extends')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(8.0)):
                    SWITCHED = True
                    return ((PyJsStrictEq(var.get(u'id'),Js(u'function')) or PyJsStrictEq(var.get(u'id'),Js(u'continue'))) or PyJsStrictEq(var.get(u'id'),Js(u'debugger')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(10.0)):
                    SWITCHED = True
                    return PyJsStrictEq(var.get(u'id'),Js(u'instanceof'))
                if True:
                    SWITCHED = True
                    return Js(False)
                SWITCHED = True
                break
        PyJsHoisted_isKeywordES6_.func_name = u'isKeywordES6'
        var.put(u'isKeywordES6', PyJsHoisted_isKeywordES6_)
        @Js
        def PyJsHoisted_isKeywordES5_(id, strict, this, arguments, var=var):
            var = Scope({u'this':this, u'strict':strict, u'id':id, u'arguments':arguments}, var)
            var.registers([u'strict', u'id'])
            if (var.get(u'strict').neg() and PyJsStrictEq(var.get(u'id'),Js(u'yield'))):
                return Js(False)
            return var.get(u'isKeywordES6')(var.get(u'id'), var.get(u'strict'))
        PyJsHoisted_isKeywordES5_.func_name = u'isKeywordES5'
        var.put(u'isKeywordES5', PyJsHoisted_isKeywordES5_)
        @Js
        def PyJsHoisted_isIdentifierNameES6_(id, this, arguments, var=var):
            var = Scope({u'this':this, u'id':id, u'arguments':arguments}, var)
            var.registers([u'ch', u'i', u'lowCh', u'id', u'iz', u'check'])
            pass
            if PyJsStrictEq(var.get(u'id').get(u'length'),Js(0.0)):
                return Js(False)
            var.put(u'check', var.get(u'code').get(u'isIdentifierStartES6'))
            #for JS loop
            PyJsComma(var.put(u'i', Js(0.0)),var.put(u'iz', var.get(u'id').get(u'length')))
            while (var.get(u'i')<var.get(u'iz')):
                try:
                    var.put(u'ch', var.get(u'id').callprop(u'charCodeAt', var.get(u'i')))
                    if ((Js(55296)<=var.get(u'ch')) and (var.get(u'ch')<=Js(56319))):
                        var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                        if (var.get(u'i')>=var.get(u'iz')):
                            return Js(False)
                        var.put(u'lowCh', var.get(u'id').callprop(u'charCodeAt', var.get(u'i')))
                        if ((Js(56320)<=var.get(u'lowCh')) and (var.get(u'lowCh')<=Js(57343))).neg():
                            return Js(False)
                        var.put(u'ch', var.get(u'decodeUtf16')(var.get(u'ch'), var.get(u'lowCh')))
                    if var.get(u'check')(var.get(u'ch')).neg():
                        return Js(False)
                    var.put(u'check', var.get(u'code').get(u'isIdentifierPartES6'))
                finally:
                        var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
            return Js(True)
        PyJsHoisted_isIdentifierNameES6_.func_name = u'isIdentifierNameES6'
        var.put(u'isIdentifierNameES6', PyJsHoisted_isIdentifierNameES6_)
        @Js
        def PyJsHoisted_decodeUtf16_(lead, trail, this, arguments, var=var):
            var = Scope({u'this':this, u'trail':trail, u'arguments':arguments, u'lead':lead}, var)
            var.registers([u'trail', u'lead'])
            return ((((var.get(u'lead')-Js(55296))*Js(1024))+(var.get(u'trail')-Js(56320)))+Js(65536))
        PyJsHoisted_decodeUtf16_.func_name = u'decodeUtf16'
        var.put(u'decodeUtf16', PyJsHoisted_decodeUtf16_)
        @Js
        def PyJsHoisted_isIdentifierNameES5_(id, this, arguments, var=var):
            var = Scope({u'this':this, u'id':id, u'arguments':arguments}, var)
            var.registers([u'i', u'ch', u'iz', u'id'])
            pass
            if PyJsStrictEq(var.get(u'id').get(u'length'),Js(0.0)):
                return Js(False)
            var.put(u'ch', var.get(u'id').callprop(u'charCodeAt', Js(0.0)))
            if var.get(u'code').callprop(u'isIdentifierStartES5', var.get(u'ch')).neg():
                return Js(False)
            #for JS loop
            PyJsComma(var.put(u'i', Js(1.0)),var.put(u'iz', var.get(u'id').get(u'length')))
            while (var.get(u'i')<var.get(u'iz')):
                try:
                    var.put(u'ch', var.get(u'id').callprop(u'charCodeAt', var.get(u'i')))
                    if var.get(u'code').callprop(u'isIdentifierPartES5', var.get(u'ch')).neg():
                        return Js(False)
                finally:
                        var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
            return Js(True)
        PyJsHoisted_isIdentifierNameES5_.func_name = u'isIdentifierNameES5'
        var.put(u'isIdentifierNameES5', PyJsHoisted_isIdentifierNameES5_)
        @Js
        def PyJsHoisted_isIdentifierES5_(id, strict, this, arguments, var=var):
            var = Scope({u'this':this, u'strict':strict, u'id':id, u'arguments':arguments}, var)
            var.registers([u'strict', u'id'])
            return (var.get(u'isIdentifierNameES5')(var.get(u'id')) and var.get(u'isReservedWordES5')(var.get(u'id'), var.get(u'strict')).neg())
        PyJsHoisted_isIdentifierES5_.func_name = u'isIdentifierES5'
        var.put(u'isIdentifierES5', PyJsHoisted_isIdentifierES5_)
        @Js
        def PyJsHoisted_isIdentifierES6_(id, strict, this, arguments, var=var):
            var = Scope({u'this':this, u'strict':strict, u'id':id, u'arguments':arguments}, var)
            var.registers([u'strict', u'id'])
            return (var.get(u'isIdentifierNameES6')(var.get(u'id')) and var.get(u'isReservedWordES6')(var.get(u'id'), var.get(u'strict')).neg())
        PyJsHoisted_isIdentifierES6_.func_name = u'isIdentifierES6'
        var.put(u'isIdentifierES6', PyJsHoisted_isIdentifierES6_)
        @Js
        def PyJsHoisted_isReservedWordES5_(id, strict, this, arguments, var=var):
            var = Scope({u'this':this, u'strict':strict, u'id':id, u'arguments':arguments}, var)
            var.registers([u'strict', u'id'])
            return (((PyJsStrictEq(var.get(u'id'),Js(u'null')) or PyJsStrictEq(var.get(u'id'),Js(u'true'))) or PyJsStrictEq(var.get(u'id'),Js(u'false'))) or var.get(u'isKeywordES5')(var.get(u'id'), var.get(u'strict')))
        PyJsHoisted_isReservedWordES5_.func_name = u'isReservedWordES5'
        var.put(u'isReservedWordES5', PyJsHoisted_isReservedWordES5_)
        @Js
        def PyJsHoisted_isReservedWordES6_(id, strict, this, arguments, var=var):
            var = Scope({u'this':this, u'strict':strict, u'id':id, u'arguments':arguments}, var)
            var.registers([u'strict', u'id'])
            return (((PyJsStrictEq(var.get(u'id'),Js(u'null')) or PyJsStrictEq(var.get(u'id'),Js(u'true'))) or PyJsStrictEq(var.get(u'id'),Js(u'false'))) or var.get(u'isKeywordES6')(var.get(u'id'), var.get(u'strict')))
        PyJsHoisted_isReservedWordES6_.func_name = u'isReservedWordES6'
        var.put(u'isReservedWordES6', PyJsHoisted_isReservedWordES6_)
        @Js
        def PyJsHoisted_isRestrictedWord_(id, this, arguments, var=var):
            var = Scope({u'this':this, u'id':id, u'arguments':arguments}, var)
            var.registers([u'id'])
            return (PyJsStrictEq(var.get(u'id'),Js(u'eval')) or PyJsStrictEq(var.get(u'id'),Js(u'arguments')))
        PyJsHoisted_isRestrictedWord_.func_name = u'isRestrictedWord'
        var.put(u'isRestrictedWord', PyJsHoisted_isRestrictedWord_)
        @Js
        def PyJsHoisted_isStrictModeReservedWordES6_(id, this, arguments, var=var):
            var = Scope({u'this':this, u'id':id, u'arguments':arguments}, var)
            var.registers([u'id'])
            while 1:
                SWITCHED = False
                CONDITION = (var.get(u'id'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'implements')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'interface')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'package')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'private')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'protected')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'public')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'static')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'let')):
                    SWITCHED = True
                    return Js(True)
                if True:
                    SWITCHED = True
                    return Js(False)
                SWITCHED = True
                break
        PyJsHoisted_isStrictModeReservedWordES6_.func_name = u'isStrictModeReservedWordES6'
        var.put(u'isStrictModeReservedWordES6', PyJsHoisted_isStrictModeReservedWordES6_)
        Js(u'use strict')
        var.put(u'code', var.get(u'require')(Js(u'./code')))
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        PyJs_Object_361_ = Js({u'isKeywordES5':var.get(u'isKeywordES5'),u'isKeywordES6':var.get(u'isKeywordES6'),u'isReservedWordES5':var.get(u'isReservedWordES5'),u'isReservedWordES6':var.get(u'isReservedWordES6'),u'isRestrictedWord':var.get(u'isRestrictedWord'),u'isIdentifierNameES5':var.get(u'isIdentifierNameES5'),u'isIdentifierNameES6':var.get(u'isIdentifierNameES6'),u'isIdentifierES5':var.get(u'isIdentifierES5'),u'isIdentifierES6':var.get(u'isIdentifierES6')})
        var.get(u'module').put(u'exports', PyJs_Object_361_)
    PyJs_anonymous_360_._set_name(u'anonymous')
    PyJs_anonymous_360_()
PyJs_anonymous_359_._set_name(u'anonymous')
PyJs_Object_362_ = Js({u'./code':Js(17.0)})
@Js
def PyJs_anonymous_363_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'require', u'exports', u'module'])
    @Js
    def PyJs_anonymous_364_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        Js(u'use strict')
        var.get(u'exports').put(u'ast', var.get(u'require')(Js(u'./ast')))
        var.get(u'exports').put(u'code', var.get(u'require')(Js(u'./code')))
        var.get(u'exports').put(u'keyword', var.get(u'require')(Js(u'./keyword')))
    PyJs_anonymous_364_._set_name(u'anonymous')
    PyJs_anonymous_364_()
PyJs_anonymous_363_._set_name(u'anonymous')
PyJs_Object_365_ = Js({u'./ast':Js(16.0),u'./code':Js(17.0),u'./keyword':Js(18.0)})
@Js
def PyJs_anonymous_366_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'module', u'module_temp_love_python', u'exports', u'require', u'addToGlobals'])
    @Js
    def PyJsHoisted_addToGlobals_(name, obj, this, arguments, var=var):
        var = Scope({u'this':this, u'obj':obj, u'name':name, u'arguments':arguments}, var)
        var.registers([u'obj', u'name'])
        if var.get(u'Object').get(u'prototype').callprop(u'hasOwnProperty', Js(u'_fake_exports')).neg():
            PyJs_Object_367_ = Js({})
            var.get(u'Object').get(u'prototype').put(u'_fake_exports', PyJs_Object_367_)
        var.get(u'Object').get(u'prototype').get(u'_fake_exports').put(var.get(u'name'), var.get(u'obj'))
    PyJsHoisted_addToGlobals_.func_name = u'addToGlobals'
    var.put(u'addToGlobals', PyJsHoisted_addToGlobals_)
    pass
    pass
    pass
    var.put(u'module_temp_love_python', var.get(u'require')(Js(u'escodegen')))
    var.get(u'addToGlobals')(Js(u'escodegen'), var.get(u'module_temp_love_python'))
PyJs_anonymous_366_._set_name(u'anonymous')
PyJs_Object_368_ = Js({u'escodegen':Js(1.0)})
PyJs_Object_2_ = Js({u'1':Js([PyJs_anonymous_3_, PyJs_Object_130_]),u'2':Js([PyJs_anonymous_131_, PyJs_Object_139_]),u'3':Js([PyJs_anonymous_140_, PyJs_Object_143_]),u'4':Js([PyJs_anonymous_144_, PyJs_Object_147_]),u'5':Js([PyJs_anonymous_148_, PyJs_Object_150_]),u'6':Js([PyJs_anonymous_151_, PyJs_Object_156_]),u'7':Js([PyJs_anonymous_157_, PyJs_Object_159_]),u'8':Js([PyJs_anonymous_160_, PyJs_Object_218_]),u'9':Js([PyJs_anonymous_219_, PyJs_Object_244_]),u'10':Js([PyJs_anonymous_245_, PyJs_Object_275_]),u'11':Js([PyJs_anonymous_276_, PyJs_Object_282_]),u'12':Js([PyJs_anonymous_283_, PyJs_Object_284_]),u'13':Js([PyJs_anonymous_285_, PyJs_Object_298_]),u'14':Js([PyJs_anonymous_299_, PyJs_Object_337_]),u'15':Js([PyJs_anonymous_338_, PyJs_Object_348_]),u'16':Js([PyJs_anonymous_349_, PyJs_Object_352_]),u'17':Js([PyJs_anonymous_353_, PyJs_Object_358_]),u'18':Js([PyJs_anonymous_359_, PyJs_Object_362_]),u'19':Js([PyJs_anonymous_363_, PyJs_Object_365_]),u'20':Js([PyJs_anonymous_366_, PyJs_Object_368_])})
PyJs_Object_369_ = Js({})
@Js
def PyJs_anonymous_370_(this, arguments, var=var):
    var = Scope({u'this':this, u'arguments':arguments}, var)
    var.registers([u'r'])
    @Js
    def PyJsHoisted_r_(e, n, t, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'e':e, u't':t, u'n':n}, var)
        var.registers([u'e', u'i', u'o', u'n', u'u', u't'])
        @Js
        def PyJsHoisted_o_(i, f, this, arguments, var=var):
            var = Scope({u'i':i, u'this':this, u'arguments':arguments, u'f':f}, var)
            var.registers([u'a', u'p', u'c', u'i', u'f'])
            if var.get(u'n').get(var.get(u'i')).neg():
                if var.get(u'e').get(var.get(u'i')).neg():
                    var.put(u'c', ((Js(u'function')==var.get(u'require',throw=False).typeof()) and var.get(u'require')))
                    if (var.get(u'f').neg() and var.get(u'c')):
                        return var.get(u'c')(var.get(u'i'), Js(0.0).neg())
                    if var.get(u'u'):
                        return var.get(u'u')(var.get(u'i'), Js(0.0).neg())
                    var.put(u'a', var.get(u'Error').create(((Js(u"Cannot find module '")+var.get(u'i'))+Js(u"'"))))
                    PyJsTempException = JsToPyException(PyJsComma(var.get(u'a').put(u'code', Js(u'MODULE_NOT_FOUND')),var.get(u'a')))
                    raise PyJsTempException
                PyJs_Object_372_ = Js({})
                PyJs_Object_371_ = Js({u'exports':PyJs_Object_372_})
                var.put(u'p', var.get(u'n').put(var.get(u'i'), PyJs_Object_371_))
                @Js
                def PyJs_anonymous_373_(r, this, arguments, var=var):
                    var = Scope({u'this':this, u'r':r, u'arguments':arguments}, var)
                    var.registers([u'r', u'n'])
                    var.put(u'n', var.get(u'e').get(var.get(u'i')).get(u'1').get(var.get(u'r')))
                    return var.get(u'o')((var.get(u'n') or var.get(u'r')))
                PyJs_anonymous_373_._set_name(u'anonymous')
                var.get(u'e').get(var.get(u'i')).get(u'0').callprop(u'call', var.get(u'p').get(u'exports'), PyJs_anonymous_373_, var.get(u'p'), var.get(u'p').get(u'exports'), var.get(u'r'), var.get(u'e'), var.get(u'n'), var.get(u't'))
            return var.get(u'n').get(var.get(u'i')).get(u'exports')
        PyJsHoisted_o_.func_name = u'o'
        var.put(u'o', PyJsHoisted_o_)
        pass
        #for JS loop
        var.put(u'u', ((Js(u'function')==var.get(u'require',throw=False).typeof()) and var.get(u'require')))
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u't').get(u'length')):
            try:
                var.get(u'o')(var.get(u't').get(var.get(u'i')))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return var.get(u'o')
    PyJsHoisted_r_.func_name = u'r'
    var.put(u'r', PyJsHoisted_r_)
    pass
    return var.get(u'r')
PyJs_anonymous_370_._set_name(u'anonymous')
PyJs_anonymous_370_()(PyJs_Object_2_, PyJs_Object_369_, Js([Js(20.0)]))
pass
pass
pass
pass
var.put(u'escodegen', var.get(u'getFromGlobals')(Js(u'escodegen')))
var.get(u'escodegen')
