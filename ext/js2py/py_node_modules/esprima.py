from js2py.pyjs import *
# setting scope
var = Scope( JS_BUILTINS )
set_global_object(var)

# Code follows:
var.registers([u'esprima', u'getFromGlobals', u'_typeof'])
@Js
def PyJsHoisted_getFromGlobals_(name, this, arguments, var=var):
    var = Scope({u'this':this, u'name':name, u'arguments':arguments}, var)
    var.registers([u'name'])
    if var.get(u'Object').get(u'prototype').callprop(u'hasOwnProperty', Js(u'_fake_exports')).neg():
        PyJsTempException = JsToPyException(var.get(u'Error')((Js(u'Could not find any value named ')+var.get(u'name'))))
        raise PyJsTempException
    if var.get(u'Object').get(u'prototype').get(u'_fake_exports').callprop(u'hasOwnProperty', var.get(u'name')):
        return var.get(u'Object').get(u'prototype').get(u'_fake_exports').get(var.get(u'name'))
    else:
        PyJsTempException = JsToPyException(var.get(u'Error')((Js(u'Could not find any value named ')+var.get(u'name'))))
        raise PyJsTempException
PyJsHoisted_getFromGlobals_.func_name = u'getFromGlobals'
var.put(u'getFromGlobals', PyJsHoisted_getFromGlobals_)
Js(u'use strict')
@Js
def PyJs_anonymous_0_(obj, this, arguments, var=var):
    var = Scope({u'this':this, u'obj':obj, u'arguments':arguments}, var)
    var.registers([u'obj'])
    return var.get(u'obj',throw=False).typeof()
PyJs_anonymous_0_._set_name(u'anonymous')
@Js
def PyJs_anonymous_1_(obj, this, arguments, var=var):
    var = Scope({u'this':this, u'obj':obj, u'arguments':arguments}, var)
    var.registers([u'obj'])
    return (Js(u'symbol') if (((var.get(u'obj') and PyJsStrictEq(var.get(u'Symbol',throw=False).typeof(),Js(u'function'))) and PyJsStrictEq(var.get(u'obj').get(u'constructor'),var.get(u'Symbol'))) and PyJsStrictNeq(var.get(u'obj'),var.get(u'Symbol').get(u'prototype'))) else var.get(u'obj',throw=False).typeof())
PyJs_anonymous_1_._set_name(u'anonymous')
var.put(u'_typeof', (PyJs_anonymous_0_ if (PyJsStrictEq(var.get(u'Symbol',throw=False).typeof(),Js(u'function')) and PyJsStrictEq(var.get(u'Symbol').get(u'iterator').typeof(),Js(u'symbol'))) else PyJs_anonymous_1_))
@Js
def PyJs_anonymous_3_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'require', u'exports', u'module'])
    @Js
    def PyJs_anonymous_4_(this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments}, var)
        var.registers([])
        @Js
        def PyJs_anonymous_5_(module, exports, __webpack_require__, this, arguments, var=var):
            var = Scope({u'this':this, u'exports':exports, u'__webpack_require__':__webpack_require__, u'module':module, u'arguments':arguments}, var)
            var.registers([u'parseModule', u'tokenize', u'tokenizer_1', u'exports', u'module', u'parse', u'parser_1', u'__webpack_require__', u'comment_handler_1', u'syntax_1', u'jsx_parser_1', u'parseScript'])
            @Js
            def PyJsHoisted_parse_(code, options, delegate, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'code':code, u'options':options, u'delegate':delegate}, var)
                var.registers([u'proxyDelegate', u'parser', u'attachComment', u'isModule', u'code', u'collectComment', u'ast', u'program', u'delegate', u'options', u'parserDelegate', u'commentHandler'])
                var.put(u'commentHandler', var.get(u"null"))
                @Js
                def PyJs_proxyDelegate_7_(node, metadata, this, arguments, var=var):
                    var = Scope({u'node':node, u'this':this, u'proxyDelegate':PyJs_proxyDelegate_7_, u'arguments':arguments, u'metadata':metadata}, var)
                    var.registers([u'node', u'metadata'])
                    if var.get(u'delegate'):
                        var.get(u'delegate')(var.get(u'node'), var.get(u'metadata'))
                    if var.get(u'commentHandler'):
                        var.get(u'commentHandler').callprop(u'visit', var.get(u'node'), var.get(u'metadata'))
                PyJs_proxyDelegate_7_._set_name(u'proxyDelegate')
                var.put(u'proxyDelegate', PyJs_proxyDelegate_7_)
                var.put(u'parserDelegate', (var.get(u'proxyDelegate') if PyJsStrictEq(var.get(u'delegate',throw=False).typeof(),Js(u'function')) else var.get(u"null")))
                var.put(u'collectComment', Js(False))
                if var.get(u'options'):
                    var.put(u'collectComment', (PyJsStrictEq(var.get(u'options').get(u'comment').typeof(),Js(u'boolean')) and var.get(u'options').get(u'comment')))
                    var.put(u'attachComment', (PyJsStrictEq(var.get(u'options').get(u'attachComment').typeof(),Js(u'boolean')) and var.get(u'options').get(u'attachComment')))
                    if (var.get(u'collectComment') or var.get(u'attachComment')):
                        var.put(u'commentHandler', var.get(u'comment_handler_1').get(u'CommentHandler').create())
                        var.get(u'commentHandler').put(u'attach', var.get(u'attachComment'))
                        var.get(u'options').put(u'comment', Js(True))
                        var.put(u'parserDelegate', var.get(u'proxyDelegate'))
                var.put(u'isModule', Js(False))
                if (var.get(u'options') and PyJsStrictEq(var.get(u'options').get(u'sourceType').typeof(),Js(u'string'))):
                    var.put(u'isModule', PyJsStrictEq(var.get(u'options').get(u'sourceType'),Js(u'module')))
                pass
                if ((var.get(u'options') and PyJsStrictEq(var.get(u'options').get(u'jsx').typeof(),Js(u'boolean'))) and var.get(u'options').get(u'jsx')):
                    var.put(u'parser', var.get(u'jsx_parser_1').get(u'JSXParser').create(var.get(u'code'), var.get(u'options'), var.get(u'parserDelegate')))
                else:
                    var.put(u'parser', var.get(u'parser_1').get(u'Parser').create(var.get(u'code'), var.get(u'options'), var.get(u'parserDelegate')))
                var.put(u'program', (var.get(u'parser').callprop(u'parseModule') if var.get(u'isModule') else var.get(u'parser').callprop(u'parseScript')))
                var.put(u'ast', var.get(u'program'))
                if (var.get(u'collectComment') and var.get(u'commentHandler')):
                    var.get(u'ast').put(u'comments', var.get(u'commentHandler').get(u'comments'))
                if var.get(u'parser').get(u'config').get(u'tokens'):
                    var.get(u'ast').put(u'tokens', var.get(u'parser').get(u'tokens'))
                if var.get(u'parser').get(u'config').get(u'tolerant'):
                    var.get(u'ast').put(u'errors', var.get(u'parser').get(u'errorHandler').get(u'errors'))
                return var.get(u'ast')
            PyJsHoisted_parse_.func_name = u'parse'
            var.put(u'parse', PyJsHoisted_parse_)
            @Js
            def PyJsHoisted_parseModule_(code, options, delegate, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'code':code, u'options':options, u'delegate':delegate}, var)
                var.registers([u'code', u'parsingOptions', u'options', u'delegate'])
                PyJs_Object_8_ = Js({})
                var.put(u'parsingOptions', (var.get(u'options') or PyJs_Object_8_))
                var.get(u'parsingOptions').put(u'sourceType', Js(u'module'))
                return var.get(u'parse')(var.get(u'code'), var.get(u'parsingOptions'), var.get(u'delegate'))
            PyJsHoisted_parseModule_.func_name = u'parseModule'
            var.put(u'parseModule', PyJsHoisted_parseModule_)
            @Js
            def PyJsHoisted_parseScript_(code, options, delegate, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'code':code, u'options':options, u'delegate':delegate}, var)
                var.registers([u'code', u'parsingOptions', u'options', u'delegate'])
                PyJs_Object_9_ = Js({})
                var.put(u'parsingOptions', (var.get(u'options') or PyJs_Object_9_))
                var.get(u'parsingOptions').put(u'sourceType', Js(u'script'))
                return var.get(u'parse')(var.get(u'code'), var.get(u'parsingOptions'), var.get(u'delegate'))
            PyJsHoisted_parseScript_.func_name = u'parseScript'
            var.put(u'parseScript', PyJsHoisted_parseScript_)
            @Js
            def PyJsHoisted_tokenize_(code, options, delegate, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'code':code, u'options':options, u'delegate':delegate}, var)
                var.registers([u'code', u'tokenizer', u'tokens', u'token', u'delegate', u'options'])
                var.put(u'tokenizer', var.get(u'tokenizer_1').get(u'Tokenizer').create(var.get(u'code'), var.get(u'options')))
                pass
                var.put(u'tokens', Js([]))
                try:
                    while Js(True):
                        var.put(u'token', var.get(u'tokenizer').callprop(u'getNextToken'))
                        if var.get(u'token').neg():
                            break
                        if var.get(u'delegate'):
                            var.put(u'token', var.get(u'delegate')(var.get(u'token')))
                        var.get(u'tokens').callprop(u'push', var.get(u'token'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_55545808 = var.own.get(u'e')
                    var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                    try:
                        var.get(u'tokenizer').get(u'errorHandler').callprop(u'tolerate', var.get(u'e'))
                    finally:
                        if PyJsHolder_65_55545808 is not None:
                            var.own[u'e'] = PyJsHolder_65_55545808
                        else:
                            del var.own[u'e']
                        del PyJsHolder_65_55545808
                if var.get(u'tokenizer').get(u'errorHandler').get(u'tolerant'):
                    var.get(u'tokens').put(u'errors', var.get(u'tokenizer').callprop(u'errors'))
                return var.get(u'tokens')
            PyJsHoisted_tokenize_.func_name = u'tokenize'
            var.put(u'tokenize', PyJsHoisted_tokenize_)
            Js(u'use strict')
            PyJs_Object_6_ = Js({u'value':Js(True)})
            var.get(u'Object').callprop(u'defineProperty', var.get(u'exports'), Js(u'__esModule'), PyJs_Object_6_)
            var.put(u'comment_handler_1', var.get(u'__webpack_require__')(Js(1.0)))
            var.put(u'jsx_parser_1', var.get(u'__webpack_require__')(Js(3.0)))
            var.put(u'parser_1', var.get(u'__webpack_require__')(Js(8.0)))
            var.put(u'tokenizer_1', var.get(u'__webpack_require__')(Js(15.0)))
            pass
            var.get(u'exports').put(u'parse', var.get(u'parse'))
            pass
            var.get(u'exports').put(u'parseModule', var.get(u'parseModule'))
            pass
            var.get(u'exports').put(u'parseScript', var.get(u'parseScript'))
            pass
            var.get(u'exports').put(u'tokenize', var.get(u'tokenize'))
            var.put(u'syntax_1', var.get(u'__webpack_require__')(Js(2.0)))
            var.get(u'exports').put(u'Syntax', var.get(u'syntax_1').get(u'Syntax'))
            var.get(u'exports').put(u'version', Js(u'4.0.1'))
        PyJs_anonymous_5_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_10_(module, exports, __webpack_require__, this, arguments, var=var):
            var = Scope({u'this':this, u'exports':exports, u'__webpack_require__':__webpack_require__, u'module':module, u'arguments':arguments}, var)
            var.registers([u'__webpack_require__', u'exports', u'syntax_1', u'module', u'CommentHandler'])
            Js(u'use strict')
            PyJs_Object_11_ = Js({u'value':Js(True)})
            var.get(u'Object').callprop(u'defineProperty', var.get(u'exports'), Js(u'__esModule'), PyJs_Object_11_)
            var.put(u'syntax_1', var.get(u'__webpack_require__')(Js(2.0)))
            @Js
            def PyJs_anonymous_12_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'CommentHandler'])
                @Js
                def PyJsHoisted_CommentHandler_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").put(u'attach', Js(False))
                    var.get(u"this").put(u'comments', Js([]))
                    var.get(u"this").put(u'stack', Js([]))
                    var.get(u"this").put(u'leading', Js([]))
                    var.get(u"this").put(u'trailing', Js([]))
                PyJsHoisted_CommentHandler_.func_name = u'CommentHandler'
                var.put(u'CommentHandler', PyJsHoisted_CommentHandler_)
                pass
                @Js
                def PyJs_anonymous_13_(node, metadata, this, arguments, var=var):
                    var = Scope({u'node':node, u'this':this, u'arguments':arguments, u'metadata':metadata}, var)
                    var.registers([u'i', u'entry', u'innerComments', u'node', u'metadata'])
                    if (PyJsStrictEq(var.get(u'node').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'BlockStatement')) and PyJsStrictEq(var.get(u'node').get(u'body').get(u'length'),Js(0.0))):
                        var.put(u'innerComments', Js([]))
                        #for JS loop
                        var.put(u'i', (var.get(u"this").get(u'leading').get(u'length')-Js(1.0)))
                        while (var.get(u'i')>=Js(0.0)):
                            try:
                                var.put(u'entry', var.get(u"this").get(u'leading').get(var.get(u'i')))
                                if (var.get(u'metadata').get(u'end').get(u'offset')>=var.get(u'entry').get(u'start')):
                                    var.get(u'innerComments').callprop(u'unshift', var.get(u'entry').get(u'comment'))
                                    var.get(u"this").get(u'leading').callprop(u'splice', var.get(u'i'), Js(1.0))
                                    var.get(u"this").get(u'trailing').callprop(u'splice', var.get(u'i'), Js(1.0))
                            finally:
                                    var.put(u'i',Js(var.get(u'i').to_number())-Js(1))
                        if var.get(u'innerComments').get(u'length'):
                            var.get(u'node').put(u'innerComments', var.get(u'innerComments'))
                PyJs_anonymous_13_._set_name(u'anonymous')
                var.get(u'CommentHandler').get(u'prototype').put(u'insertInnerComments', PyJs_anonymous_13_)
                @Js
                def PyJs_anonymous_14_(metadata, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'metadata':metadata}, var)
                    var.registers([u'i', u'trailingComments', u'entry_1', u'entry', u'firstComment', u'metadata'])
                    var.put(u'trailingComments', Js([]))
                    if (var.get(u"this").get(u'trailing').get(u'length')>Js(0.0)):
                        #for JS loop
                        var.put(u'i', (var.get(u"this").get(u'trailing').get(u'length')-Js(1.0)))
                        while (var.get(u'i')>=Js(0.0)):
                            try:
                                var.put(u'entry_1', var.get(u"this").get(u'trailing').get(var.get(u'i')))
                                if (var.get(u'entry_1').get(u'start')>=var.get(u'metadata').get(u'end').get(u'offset')):
                                    var.get(u'trailingComments').callprop(u'unshift', var.get(u'entry_1').get(u'comment'))
                            finally:
                                    var.put(u'i',Js(var.get(u'i').to_number())-Js(1))
                        var.get(u"this").get(u'trailing').put(u'length', Js(0.0))
                        return var.get(u'trailingComments')
                    var.put(u'entry', var.get(u"this").get(u'stack').get((var.get(u"this").get(u'stack').get(u'length')-Js(1.0))))
                    if (var.get(u'entry') and var.get(u'entry').get(u'node').get(u'trailingComments')):
                        var.put(u'firstComment', var.get(u'entry').get(u'node').get(u'trailingComments').get(u'0'))
                        if (var.get(u'firstComment') and (var.get(u'firstComment').get(u'range').get(u'0')>=var.get(u'metadata').get(u'end').get(u'offset'))):
                            var.put(u'trailingComments', var.get(u'entry').get(u'node').get(u'trailingComments'))
                            var.get(u'entry').get(u'node').delete(u'trailingComments')
                    return var.get(u'trailingComments')
                PyJs_anonymous_14_._set_name(u'anonymous')
                var.get(u'CommentHandler').get(u'prototype').put(u'findTrailingComments', PyJs_anonymous_14_)
                @Js
                def PyJs_anonymous_15_(metadata, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'metadata':metadata}, var)
                    var.registers([u'count', u'comment', u'target', u'i', u'entry', u'leadingComments', u'metadata'])
                    var.put(u'leadingComments', Js([]))
                    pass
                    while (var.get(u"this").get(u'stack').get(u'length')>Js(0.0)):
                        var.put(u'entry', var.get(u"this").get(u'stack').get((var.get(u"this").get(u'stack').get(u'length')-Js(1.0))))
                        if (var.get(u'entry') and (var.get(u'entry').get(u'start')>=var.get(u'metadata').get(u'start').get(u'offset'))):
                            var.put(u'target', var.get(u'entry').get(u'node'))
                            var.get(u"this").get(u'stack').callprop(u'pop')
                        else:
                            break
                    if var.get(u'target'):
                        var.put(u'count', (var.get(u'target').get(u'leadingComments').get(u'length') if var.get(u'target').get(u'leadingComments') else Js(0.0)))
                        #for JS loop
                        var.put(u'i', (var.get(u'count')-Js(1.0)))
                        while (var.get(u'i')>=Js(0.0)):
                            try:
                                var.put(u'comment', var.get(u'target').get(u'leadingComments').get(var.get(u'i')))
                                if (var.get(u'comment').get(u'range').get(u'1')<=var.get(u'metadata').get(u'start').get(u'offset')):
                                    var.get(u'leadingComments').callprop(u'unshift', var.get(u'comment'))
                                    var.get(u'target').get(u'leadingComments').callprop(u'splice', var.get(u'i'), Js(1.0))
                            finally:
                                    var.put(u'i',Js(var.get(u'i').to_number())-Js(1))
                        if (var.get(u'target').get(u'leadingComments') and PyJsStrictEq(var.get(u'target').get(u'leadingComments').get(u'length'),Js(0.0))):
                            var.get(u'target').delete(u'leadingComments')
                        return var.get(u'leadingComments')
                    #for JS loop
                    var.put(u'i', (var.get(u"this").get(u'leading').get(u'length')-Js(1.0)))
                    while (var.get(u'i')>=Js(0.0)):
                        try:
                            var.put(u'entry', var.get(u"this").get(u'leading').get(var.get(u'i')))
                            if (var.get(u'entry').get(u'start')<=var.get(u'metadata').get(u'start').get(u'offset')):
                                var.get(u'leadingComments').callprop(u'unshift', var.get(u'entry').get(u'comment'))
                                var.get(u"this").get(u'leading').callprop(u'splice', var.get(u'i'), Js(1.0))
                        finally:
                                var.put(u'i',Js(var.get(u'i').to_number())-Js(1))
                    return var.get(u'leadingComments')
                PyJs_anonymous_15_._set_name(u'anonymous')
                var.get(u'CommentHandler').get(u'prototype').put(u'findLeadingComments', PyJs_anonymous_15_)
                @Js
                def PyJs_anonymous_16_(node, metadata, this, arguments, var=var):
                    var = Scope({u'node':node, u'this':this, u'arguments':arguments, u'metadata':metadata}, var)
                    var.registers([u'node', u'trailingComments', u'leadingComments', u'metadata'])
                    if (PyJsStrictEq(var.get(u'node').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'Program')) and (var.get(u'node').get(u'body').get(u'length')>Js(0.0))):
                        return var.get('undefined')
                    var.get(u"this").callprop(u'insertInnerComments', var.get(u'node'), var.get(u'metadata'))
                    var.put(u'trailingComments', var.get(u"this").callprop(u'findTrailingComments', var.get(u'metadata')))
                    var.put(u'leadingComments', var.get(u"this").callprop(u'findLeadingComments', var.get(u'metadata')))
                    if (var.get(u'leadingComments').get(u'length')>Js(0.0)):
                        var.get(u'node').put(u'leadingComments', var.get(u'leadingComments'))
                    if (var.get(u'trailingComments').get(u'length')>Js(0.0)):
                        var.get(u'node').put(u'trailingComments', var.get(u'trailingComments'))
                    PyJs_Object_17_ = Js({u'node':var.get(u'node'),u'start':var.get(u'metadata').get(u'start').get(u'offset')})
                    var.get(u"this").get(u'stack').callprop(u'push', PyJs_Object_17_)
                PyJs_anonymous_16_._set_name(u'anonymous')
                var.get(u'CommentHandler').get(u'prototype').put(u'visitNode', PyJs_anonymous_16_)
                @Js
                def PyJs_anonymous_18_(node, metadata, this, arguments, var=var):
                    var = Scope({u'node':node, u'this':this, u'arguments':arguments, u'metadata':metadata}, var)
                    var.registers([u'comment', u'entry', u'type', u'node', u'metadata'])
                    var.put(u'type', (Js(u'Line') if PyJsStrictEq(var.get(u'node').get(u'type').get(u'0'),Js(u'L')) else Js(u'Block')))
                    PyJs_Object_19_ = Js({u'type':var.get(u'type'),u'value':var.get(u'node').get(u'value')})
                    var.put(u'comment', PyJs_Object_19_)
                    if var.get(u'node').get(u'range'):
                        var.get(u'comment').put(u'range', var.get(u'node').get(u'range'))
                    if var.get(u'node').get(u'loc'):
                        var.get(u'comment').put(u'loc', var.get(u'node').get(u'loc'))
                    var.get(u"this").get(u'comments').callprop(u'push', var.get(u'comment'))
                    if var.get(u"this").get(u'attach'):
                        PyJs_Object_21_ = Js({u'type':var.get(u'type'),u'value':var.get(u'node').get(u'value'),u'range':Js([var.get(u'metadata').get(u'start').get(u'offset'), var.get(u'metadata').get(u'end').get(u'offset')])})
                        PyJs_Object_20_ = Js({u'comment':PyJs_Object_21_,u'start':var.get(u'metadata').get(u'start').get(u'offset')})
                        var.put(u'entry', PyJs_Object_20_)
                        if var.get(u'node').get(u'loc'):
                            var.get(u'entry').get(u'comment').put(u'loc', var.get(u'node').get(u'loc'))
                        var.get(u'node').put(u'type', var.get(u'type'))
                        var.get(u"this").get(u'leading').callprop(u'push', var.get(u'entry'))
                        var.get(u"this").get(u'trailing').callprop(u'push', var.get(u'entry'))
                PyJs_anonymous_18_._set_name(u'anonymous')
                var.get(u'CommentHandler').get(u'prototype').put(u'visitComment', PyJs_anonymous_18_)
                @Js
                def PyJs_anonymous_22_(node, metadata, this, arguments, var=var):
                    var = Scope({u'node':node, u'this':this, u'arguments':arguments, u'metadata':metadata}, var)
                    var.registers([u'node', u'metadata'])
                    if PyJsStrictEq(var.get(u'node').get(u'type'),Js(u'LineComment')):
                        var.get(u"this").callprop(u'visitComment', var.get(u'node'), var.get(u'metadata'))
                    else:
                        if PyJsStrictEq(var.get(u'node').get(u'type'),Js(u'BlockComment')):
                            var.get(u"this").callprop(u'visitComment', var.get(u'node'), var.get(u'metadata'))
                        else:
                            if var.get(u"this").get(u'attach'):
                                var.get(u"this").callprop(u'visitNode', var.get(u'node'), var.get(u'metadata'))
                PyJs_anonymous_22_._set_name(u'anonymous')
                var.get(u'CommentHandler').get(u'prototype').put(u'visit', PyJs_anonymous_22_)
                return var.get(u'CommentHandler')
            PyJs_anonymous_12_._set_name(u'anonymous')
            var.put(u'CommentHandler', PyJs_anonymous_12_())
            var.get(u'exports').put(u'CommentHandler', var.get(u'CommentHandler'))
        PyJs_anonymous_10_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_23_(module, exports, this, arguments, var=var):
            var = Scope({u'this':this, u'exports':exports, u'arguments':arguments, u'module':module}, var)
            var.registers([u'exports', u'module'])
            Js(u'use strict')
            PyJs_Object_24_ = Js({u'value':Js(True)})
            var.get(u'Object').callprop(u'defineProperty', var.get(u'exports'), Js(u'__esModule'), PyJs_Object_24_)
            PyJs_Object_25_ = Js({u'AssignmentExpression':Js(u'AssignmentExpression'),u'AssignmentPattern':Js(u'AssignmentPattern'),u'ArrayExpression':Js(u'ArrayExpression'),u'ArrayPattern':Js(u'ArrayPattern'),u'ArrowFunctionExpression':Js(u'ArrowFunctionExpression'),u'AwaitExpression':Js(u'AwaitExpression'),u'BlockStatement':Js(u'BlockStatement'),u'BinaryExpression':Js(u'BinaryExpression'),u'BreakStatement':Js(u'BreakStatement'),u'CallExpression':Js(u'CallExpression'),u'CatchClause':Js(u'CatchClause'),u'ClassBody':Js(u'ClassBody'),u'ClassDeclaration':Js(u'ClassDeclaration'),u'ClassExpression':Js(u'ClassExpression'),u'ConditionalExpression':Js(u'ConditionalExpression'),u'ContinueStatement':Js(u'ContinueStatement'),u'DoWhileStatement':Js(u'DoWhileStatement'),u'DebuggerStatement':Js(u'DebuggerStatement'),u'EmptyStatement':Js(u'EmptyStatement'),u'ExportAllDeclaration':Js(u'ExportAllDeclaration'),u'ExportDefaultDeclaration':Js(u'ExportDefaultDeclaration'),u'ExportNamedDeclaration':Js(u'ExportNamedDeclaration'),u'ExportSpecifier':Js(u'ExportSpecifier'),u'ExpressionStatement':Js(u'ExpressionStatement'),u'ForStatement':Js(u'ForStatement'),u'ForOfStatement':Js(u'ForOfStatement'),u'ForInStatement':Js(u'ForInStatement'),u'FunctionDeclaration':Js(u'FunctionDeclaration'),u'FunctionExpression':Js(u'FunctionExpression'),u'Identifier':Js(u'Identifier'),u'IfStatement':Js(u'IfStatement'),u'ImportDeclaration':Js(u'ImportDeclaration'),u'ImportDefaultSpecifier':Js(u'ImportDefaultSpecifier'),u'ImportNamespaceSpecifier':Js(u'ImportNamespaceSpecifier'),u'ImportSpecifier':Js(u'ImportSpecifier'),u'Literal':Js(u'Literal'),u'LabeledStatement':Js(u'LabeledStatement'),u'LogicalExpression':Js(u'LogicalExpression'),u'MemberExpression':Js(u'MemberExpression'),u'MetaProperty':Js(u'MetaProperty'),u'MethodDefinition':Js(u'MethodDefinition'),u'NewExpression':Js(u'NewExpression'),u'ObjectExpression':Js(u'ObjectExpression'),u'ObjectPattern':Js(u'ObjectPattern'),u'Program':Js(u'Program'),u'Property':Js(u'Property'),u'RestElement':Js(u'RestElement'),u'ReturnStatement':Js(u'ReturnStatement'),u'SequenceExpression':Js(u'SequenceExpression'),u'SpreadElement':Js(u'SpreadElement'),u'Super':Js(u'Super'),u'SwitchCase':Js(u'SwitchCase'),u'SwitchStatement':Js(u'SwitchStatement'),u'TaggedTemplateExpression':Js(u'TaggedTemplateExpression'),u'TemplateElement':Js(u'TemplateElement'),u'TemplateLiteral':Js(u'TemplateLiteral'),u'ThisExpression':Js(u'ThisExpression'),u'ThrowStatement':Js(u'ThrowStatement'),u'TryStatement':Js(u'TryStatement'),u'UnaryExpression':Js(u'UnaryExpression'),u'UpdateExpression':Js(u'UpdateExpression'),u'VariableDeclaration':Js(u'VariableDeclaration'),u'VariableDeclarator':Js(u'VariableDeclarator'),u'WhileStatement':Js(u'WhileStatement'),u'WithStatement':Js(u'WithStatement'),u'YieldExpression':Js(u'YieldExpression')})
            var.get(u'exports').put(u'Syntax', PyJs_Object_25_)
        PyJs_anonymous_23_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_26_(module, exports, __webpack_require__, this, arguments, var=var):
            var = Scope({u'this':this, u'exports':exports, u'__webpack_require__':__webpack_require__, u'module':module, u'arguments':arguments}, var)
            var.registers([u'__extends', u'Node', u'exports', u'character_1', u'module', u'JSXParser', u'JSXNode', u'parser_1', u'__webpack_require__', u'xhtml_entities_1', u'getQualifiedElementName', u'jsx_syntax_1', u'token_1'])
            @Js
            def PyJsHoisted_getQualifiedElementName_(elementName, this, arguments, var=var):
                var = Scope({u'this':this, u'elementName':elementName, u'arguments':arguments}, var)
                var.registers([u'expr', u'qualifiedName', u'ns', u'id', u'elementName'])
                pass
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get(u'elementName').get(u'type'))
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'jsx_syntax_1').get(u'JSXSyntax').get(u'JSXIdentifier')):
                        SWITCHED = True
                        var.put(u'id', var.get(u'elementName'))
                        var.put(u'qualifiedName', var.get(u'id').get(u'name'))
                        break
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'jsx_syntax_1').get(u'JSXSyntax').get(u'JSXNamespacedName')):
                        SWITCHED = True
                        var.put(u'ns', var.get(u'elementName'))
                        var.put(u'qualifiedName', ((var.get(u'getQualifiedElementName')(var.get(u'ns').get(u'namespace'))+Js(u':'))+var.get(u'getQualifiedElementName')(var.get(u'ns').get(u'name'))))
                        break
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'jsx_syntax_1').get(u'JSXSyntax').get(u'JSXMemberExpression')):
                        SWITCHED = True
                        var.put(u'expr', var.get(u'elementName'))
                        var.put(u'qualifiedName', ((var.get(u'getQualifiedElementName')(var.get(u'expr').get(u'object'))+Js(u'.'))+var.get(u'getQualifiedElementName')(var.get(u'expr').get(u'property'))))
                        break
                    if True:
                        SWITCHED = True
                        break
                    SWITCHED = True
                    break
                return var.get(u'qualifiedName')
            PyJsHoisted_getQualifiedElementName_.func_name = u'getQualifiedElementName'
            var.put(u'getQualifiedElementName', PyJsHoisted_getQualifiedElementName_)
            Js(u'use strict')
            @Js
            def PyJs_anonymous_27_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'extendStatics'])
                PyJs_Object_28_ = Js({u'__proto__':Js([])})
                @Js
                def PyJs_anonymous_29_(d, b, this, arguments, var=var):
                    var = Scope({u'this':this, u'b':b, u'd':d, u'arguments':arguments}, var)
                    var.registers([u'b', u'd'])
                    var.get(u'd').put(u'__proto__', var.get(u'b'))
                PyJs_anonymous_29_._set_name(u'anonymous')
                @Js
                def PyJs_anonymous_30_(d, b, this, arguments, var=var):
                    var = Scope({u'this':this, u'b':b, u'd':d, u'arguments':arguments}, var)
                    var.registers([u'p', u'b', u'd'])
                    for PyJsTemp in var.get(u'b'):
                        var.put(u'p', PyJsTemp)
                        if var.get(u'b').callprop(u'hasOwnProperty', var.get(u'p')):
                            var.get(u'd').put(var.get(u'p'), var.get(u'b').get(var.get(u'p')))
                PyJs_anonymous_30_._set_name(u'anonymous')
                var.put(u'extendStatics', ((var.get(u'Object').get(u'setPrototypeOf') or (PyJs_Object_28_.instanceof(var.get(u'Array')) and PyJs_anonymous_29_)) or PyJs_anonymous_30_))
                @Js
                def PyJs_anonymous_31_(d, b, this, arguments, var=var):
                    var = Scope({u'this':this, u'b':b, u'd':d, u'arguments':arguments}, var)
                    var.registers([u'__', u'b', u'd'])
                    @Js
                    def PyJsHoisted____(this, arguments, var=var):
                        var = Scope({u'this':this, u'arguments':arguments}, var)
                        var.registers([])
                        var.get(u"this").put(u'constructor', var.get(u'd'))
                    PyJsHoisted____.func_name = u'__'
                    var.put(u'__', PyJsHoisted____)
                    var.get(u'extendStatics')(var.get(u'd'), var.get(u'b'))
                    pass
                    var.get(u'd').put(u'prototype', (var.get(u'Object').callprop(u'create', var.get(u'b')) if PyJsStrictEq(var.get(u'b'),var.get(u"null")) else PyJsComma(var.get(u'__').put(u'prototype', var.get(u'b').get(u'prototype')),var.get(u'__').create())))
                PyJs_anonymous_31_._set_name(u'anonymous')
                return PyJs_anonymous_31_
            PyJs_anonymous_27_._set_name(u'anonymous')
            var.put(u'__extends', ((var.get(u"this") and var.get(u"this").get(u'__extends')) or PyJs_anonymous_27_()))
            PyJs_Object_32_ = Js({u'value':Js(True)})
            var.get(u'Object').callprop(u'defineProperty', var.get(u'exports'), Js(u'__esModule'), PyJs_Object_32_)
            var.put(u'character_1', var.get(u'__webpack_require__')(Js(4.0)))
            var.put(u'JSXNode', var.get(u'__webpack_require__')(Js(5.0)))
            var.put(u'jsx_syntax_1', var.get(u'__webpack_require__')(Js(6.0)))
            var.put(u'Node', var.get(u'__webpack_require__')(Js(7.0)))
            var.put(u'parser_1', var.get(u'__webpack_require__')(Js(8.0)))
            var.put(u'token_1', var.get(u'__webpack_require__')(Js(13.0)))
            var.put(u'xhtml_entities_1', var.get(u'__webpack_require__')(Js(14.0)))
            var.get(u'token_1').get(u'TokenName').put(u'100', Js(u'JSXIdentifier'))
            var.get(u'token_1').get(u'TokenName').put(u'101', Js(u'JSXText'))
            pass
            @Js
            def PyJs_anonymous_33_(_super, this, arguments, var=var):
                var = Scope({u'this':this, u'_super':_super, u'arguments':arguments}, var)
                var.registers([u'_super', u'JSXParser'])
                @Js
                def PyJsHoisted_JSXParser_(code, options, delegate, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'code':code, u'options':options, u'delegate':delegate}, var)
                    var.registers([u'code', u'options', u'delegate'])
                    return (var.get(u'_super').callprop(u'call', var.get(u"this"), var.get(u'code'), var.get(u'options'), var.get(u'delegate')) or var.get(u"this"))
                PyJsHoisted_JSXParser_.func_name = u'JSXParser'
                var.put(u'JSXParser', PyJsHoisted_JSXParser_)
                var.get(u'__extends')(var.get(u'JSXParser'), var.get(u'_super'))
                pass
                @Js
                def PyJs_anonymous_34_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    return (var.get(u"this").callprop(u'parseJSXRoot') if var.get(u"this").callprop(u'match', Js(u'<')) else var.get(u'_super').get(u'prototype').get(u'parsePrimaryExpression').callprop(u'call', var.get(u"this")))
                PyJs_anonymous_34_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'parsePrimaryExpression', PyJs_anonymous_34_)
                @Js
                def PyJs_anonymous_35_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").get(u'scanner').put(u'index', var.get(u"this").get(u'startMarker').get(u'index'))
                    var.get(u"this").get(u'scanner').put(u'lineNumber', var.get(u"this").get(u'startMarker').get(u'line'))
                    var.get(u"this").get(u'scanner').put(u'lineStart', (var.get(u"this").get(u'startMarker').get(u'index')-var.get(u"this").get(u'startMarker').get(u'column')))
                PyJs_anonymous_35_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'startJSX', PyJs_anonymous_35_)
                @Js
                def PyJs_anonymous_36_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").callprop(u'nextToken')
                PyJs_anonymous_36_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'finishJSX', PyJs_anonymous_36_)
                @Js
                def PyJs_anonymous_37_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").callprop(u'startJSX')
                    var.get(u"this").callprop(u'expectJSX', Js(u'}'))
                    if var.get(u"this").get(u'config').get(u'tokens'):
                        var.get(u"this").get(u'tokens').callprop(u'pop')
                PyJs_anonymous_37_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'reenterJSX', PyJs_anonymous_37_)
                @Js
                def PyJs_anonymous_38_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").callprop(u'collectComments')
                    PyJs_Object_39_ = Js({u'index':var.get(u"this").get(u'scanner').get(u'index'),u'line':var.get(u"this").get(u'scanner').get(u'lineNumber'),u'column':(var.get(u"this").get(u'scanner').get(u'index')-var.get(u"this").get(u'scanner').get(u'lineStart'))})
                    return PyJs_Object_39_
                PyJs_anonymous_38_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'createJSXNode', PyJs_anonymous_38_)
                @Js
                def PyJs_anonymous_40_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    PyJs_Object_41_ = Js({u'index':var.get(u"this").get(u'scanner').get(u'index'),u'line':var.get(u"this").get(u'scanner').get(u'lineNumber'),u'column':(var.get(u"this").get(u'scanner').get(u'index')-var.get(u"this").get(u'scanner').get(u'lineStart'))})
                    return PyJs_Object_41_
                PyJs_anonymous_40_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'createJSXChildNode', PyJs_anonymous_40_)
                @Js
                def PyJs_anonymous_42_(quote, this, arguments, var=var):
                    var = Scope({u'this':this, u'quote':quote, u'arguments':arguments}, var)
                    var.registers([u'terminated', u'ch', u'quote', u'hex', u'numeric', u'valid', u'result', u'str'])
                    var.put(u'result', Js(u'&'))
                    var.put(u'valid', Js(True))
                    var.put(u'terminated', Js(False))
                    var.put(u'numeric', Js(False))
                    var.put(u'hex', Js(False))
                    while ((var.get(u"this").get(u'scanner').callprop(u'eof').neg() and var.get(u'valid')) and var.get(u'terminated').neg()):
                        var.put(u'ch', var.get(u"this").get(u'scanner').get(u'source').get(var.get(u"this").get(u'scanner').get(u'index')))
                        if PyJsStrictEq(var.get(u'ch'),var.get(u'quote')):
                            break
                        var.put(u'terminated', PyJsStrictEq(var.get(u'ch'),Js(u';')))
                        var.put(u'result', var.get(u'ch'), u'+')
                        var.get(u"this").get(u'scanner').put(u'index',Js(var.get(u"this").get(u'scanner').get(u'index').to_number())+Js(1))
                        if var.get(u'terminated').neg():
                            while 1:
                                SWITCHED = False
                                CONDITION = (var.get(u'result').get(u'length'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                                    SWITCHED = True
                                    var.put(u'numeric', PyJsStrictEq(var.get(u'ch'),Js(u'#')))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                                    SWITCHED = True
                                    if var.get(u'numeric'):
                                        var.put(u'hex', PyJsStrictEq(var.get(u'ch'),Js(u'x')))
                                        var.put(u'valid', (var.get(u'hex') or var.get(u'character_1').get(u'Character').callprop(u'isDecimalDigit', var.get(u'ch').callprop(u'charCodeAt', Js(0.0)))))
                                        var.put(u'numeric', (var.get(u'numeric') and var.get(u'hex').neg()))
                                    break
                                if True:
                                    SWITCHED = True
                                    var.put(u'valid', (var.get(u'valid') and (var.get(u'numeric') and var.get(u'character_1').get(u'Character').callprop(u'isDecimalDigit', var.get(u'ch').callprop(u'charCodeAt', Js(0.0))).neg()).neg()))
                                    var.put(u'valid', (var.get(u'valid') and (var.get(u'hex') and var.get(u'character_1').get(u'Character').callprop(u'isHexDigit', var.get(u'ch').callprop(u'charCodeAt', Js(0.0))).neg()).neg()))
                                    break
                                SWITCHED = True
                                break
                    if ((var.get(u'valid') and var.get(u'terminated')) and (var.get(u'result').get(u'length')>Js(2.0))):
                        var.put(u'str', var.get(u'result').callprop(u'substr', Js(1.0), (var.get(u'result').get(u'length')-Js(2.0))))
                        if (var.get(u'numeric') and (var.get(u'str').get(u'length')>Js(1.0))):
                            var.put(u'result', var.get(u'String').callprop(u'fromCharCode', var.get(u'parseInt')(var.get(u'str').callprop(u'substr', Js(1.0)), Js(10.0))))
                        else:
                            if (var.get(u'hex') and (var.get(u'str').get(u'length')>Js(2.0))):
                                var.put(u'result', var.get(u'String').callprop(u'fromCharCode', var.get(u'parseInt')((Js(u'0')+var.get(u'str').callprop(u'substr', Js(1.0))), Js(16.0))))
                            else:
                                if ((var.get(u'numeric').neg() and var.get(u'hex').neg()) and var.get(u'xhtml_entities_1').get(u'XHTMLEntities').get(var.get(u'str'))):
                                    var.put(u'result', var.get(u'xhtml_entities_1').get(u'XHTMLEntities').get(var.get(u'str')))
                    return var.get(u'result')
                PyJs_anonymous_42_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'scanXHTMLEntity', PyJs_anonymous_42_)
                @Js
                def PyJs_anonymous_43_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'ch', u'quote', u'value', u'start', u'str', u'n1', u'n2', u'cp', u'id'])
                    var.put(u'cp', var.get(u"this").get(u'scanner').get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'scanner').get(u'index')))
                    if ((((((PyJsStrictEq(var.get(u'cp'),Js(60.0)) or PyJsStrictEq(var.get(u'cp'),Js(62.0))) or PyJsStrictEq(var.get(u'cp'),Js(47.0))) or PyJsStrictEq(var.get(u'cp'),Js(58.0))) or PyJsStrictEq(var.get(u'cp'),Js(61.0))) or PyJsStrictEq(var.get(u'cp'),Js(123.0))) or PyJsStrictEq(var.get(u'cp'),Js(125.0))):
                        var.put(u'value', var.get(u"this").get(u'scanner').get(u'source').get((var.get(u"this").get(u'scanner').put(u'index',Js(var.get(u"this").get(u'scanner').get(u'index').to_number())+Js(1))-Js(1))))
                        PyJs_Object_44_ = Js({u'type':Js(7.0),u'value':var.get(u'value'),u'lineNumber':var.get(u"this").get(u'scanner').get(u'lineNumber'),u'lineStart':var.get(u"this").get(u'scanner').get(u'lineStart'),u'start':(var.get(u"this").get(u'scanner').get(u'index')-Js(1.0)),u'end':var.get(u"this").get(u'scanner').get(u'index')})
                        return PyJs_Object_44_
                    if (PyJsStrictEq(var.get(u'cp'),Js(34.0)) or PyJsStrictEq(var.get(u'cp'),Js(39.0))):
                        var.put(u'start', var.get(u"this").get(u'scanner').get(u'index'))
                        var.put(u'quote', var.get(u"this").get(u'scanner').get(u'source').get((var.get(u"this").get(u'scanner').put(u'index',Js(var.get(u"this").get(u'scanner').get(u'index').to_number())+Js(1))-Js(1))))
                        var.put(u'str', Js(u''))
                        while var.get(u"this").get(u'scanner').callprop(u'eof').neg():
                            var.put(u'ch', var.get(u"this").get(u'scanner').get(u'source').get((var.get(u"this").get(u'scanner').put(u'index',Js(var.get(u"this").get(u'scanner').get(u'index').to_number())+Js(1))-Js(1))))
                            if PyJsStrictEq(var.get(u'ch'),var.get(u'quote')):
                                break
                            else:
                                if PyJsStrictEq(var.get(u'ch'),Js(u'&')):
                                    var.put(u'str', var.get(u"this").callprop(u'scanXHTMLEntity', var.get(u'quote')), u'+')
                                else:
                                    var.put(u'str', var.get(u'ch'), u'+')
                        PyJs_Object_45_ = Js({u'type':Js(8.0),u'value':var.get(u'str'),u'lineNumber':var.get(u"this").get(u'scanner').get(u'lineNumber'),u'lineStart':var.get(u"this").get(u'scanner').get(u'lineStart'),u'start':var.get(u'start'),u'end':var.get(u"this").get(u'scanner').get(u'index')})
                        return PyJs_Object_45_
                    if PyJsStrictEq(var.get(u'cp'),Js(46.0)):
                        var.put(u'n1', var.get(u"this").get(u'scanner').get(u'source').callprop(u'charCodeAt', (var.get(u"this").get(u'scanner').get(u'index')+Js(1.0))))
                        var.put(u'n2', var.get(u"this").get(u'scanner').get(u'source').callprop(u'charCodeAt', (var.get(u"this").get(u'scanner').get(u'index')+Js(2.0))))
                        var.put(u'value', (Js(u'...') if (PyJsStrictEq(var.get(u'n1'),Js(46.0)) and PyJsStrictEq(var.get(u'n2'),Js(46.0))) else Js(u'.')))
                        var.put(u'start', var.get(u"this").get(u'scanner').get(u'index'))
                        var.get(u"this").get(u'scanner').put(u'index', var.get(u'value').get(u'length'), u'+')
                        PyJs_Object_46_ = Js({u'type':Js(7.0),u'value':var.get(u'value'),u'lineNumber':var.get(u"this").get(u'scanner').get(u'lineNumber'),u'lineStart':var.get(u"this").get(u'scanner').get(u'lineStart'),u'start':var.get(u'start'),u'end':var.get(u"this").get(u'scanner').get(u'index')})
                        return PyJs_Object_46_
                    if PyJsStrictEq(var.get(u'cp'),Js(96.0)):
                        PyJs_Object_47_ = Js({u'type':Js(10.0),u'value':Js(u''),u'lineNumber':var.get(u"this").get(u'scanner').get(u'lineNumber'),u'lineStart':var.get(u"this").get(u'scanner').get(u'lineStart'),u'start':var.get(u"this").get(u'scanner').get(u'index'),u'end':var.get(u"this").get(u'scanner').get(u'index')})
                        return PyJs_Object_47_
                    if (var.get(u'character_1').get(u'Character').callprop(u'isIdentifierStart', var.get(u'cp')) and PyJsStrictNeq(var.get(u'cp'),Js(92.0))):
                        var.put(u'start', var.get(u"this").get(u'scanner').get(u'index'))
                        var.get(u"this").get(u'scanner').put(u'index',Js(var.get(u"this").get(u'scanner').get(u'index').to_number())+Js(1))
                        while var.get(u"this").get(u'scanner').callprop(u'eof').neg():
                            var.put(u'ch', var.get(u"this").get(u'scanner').get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'scanner').get(u'index')))
                            if (var.get(u'character_1').get(u'Character').callprop(u'isIdentifierPart', var.get(u'ch')) and PyJsStrictNeq(var.get(u'ch'),Js(92.0))):
                                var.get(u"this").get(u'scanner').put(u'index',Js(var.get(u"this").get(u'scanner').get(u'index').to_number())+Js(1))
                            else:
                                if PyJsStrictEq(var.get(u'ch'),Js(45.0)):
                                    var.get(u"this").get(u'scanner').put(u'index',Js(var.get(u"this").get(u'scanner').get(u'index').to_number())+Js(1))
                                else:
                                    break
                        var.put(u'id', var.get(u"this").get(u'scanner').get(u'source').callprop(u'slice', var.get(u'start'), var.get(u"this").get(u'scanner').get(u'index')))
                        PyJs_Object_48_ = Js({u'type':Js(100.0),u'value':var.get(u'id'),u'lineNumber':var.get(u"this").get(u'scanner').get(u'lineNumber'),u'lineStart':var.get(u"this").get(u'scanner').get(u'lineStart'),u'start':var.get(u'start'),u'end':var.get(u"this").get(u'scanner').get(u'index')})
                        return PyJs_Object_48_
                    return var.get(u"this").get(u'scanner').callprop(u'lex')
                PyJs_anonymous_43_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'lexJSX', PyJs_anonymous_43_)
                @Js
                def PyJs_anonymous_49_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'token'])
                    var.get(u"this").callprop(u'collectComments')
                    var.get(u"this").get(u'startMarker').put(u'index', var.get(u"this").get(u'scanner').get(u'index'))
                    var.get(u"this").get(u'startMarker').put(u'line', var.get(u"this").get(u'scanner').get(u'lineNumber'))
                    var.get(u"this").get(u'startMarker').put(u'column', (var.get(u"this").get(u'scanner').get(u'index')-var.get(u"this").get(u'scanner').get(u'lineStart')))
                    var.put(u'token', var.get(u"this").callprop(u'lexJSX'))
                    var.get(u"this").get(u'lastMarker').put(u'index', var.get(u"this").get(u'scanner').get(u'index'))
                    var.get(u"this").get(u'lastMarker').put(u'line', var.get(u"this").get(u'scanner').get(u'lineNumber'))
                    var.get(u"this").get(u'lastMarker').put(u'column', (var.get(u"this").get(u'scanner').get(u'index')-var.get(u"this").get(u'scanner').get(u'lineStart')))
                    if var.get(u"this").get(u'config').get(u'tokens'):
                        var.get(u"this").get(u'tokens').callprop(u'push', var.get(u"this").callprop(u'convertToken', var.get(u'token')))
                    return var.get(u'token')
                PyJs_anonymous_49_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'nextJSXToken', PyJs_anonymous_49_)
                @Js
                def PyJs_anonymous_50_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'start', u'token', u'ch', u'text'])
                    var.get(u"this").get(u'startMarker').put(u'index', var.get(u"this").get(u'scanner').get(u'index'))
                    var.get(u"this").get(u'startMarker').put(u'line', var.get(u"this").get(u'scanner').get(u'lineNumber'))
                    var.get(u"this").get(u'startMarker').put(u'column', (var.get(u"this").get(u'scanner').get(u'index')-var.get(u"this").get(u'scanner').get(u'lineStart')))
                    var.put(u'start', var.get(u"this").get(u'scanner').get(u'index'))
                    var.put(u'text', Js(u''))
                    while var.get(u"this").get(u'scanner').callprop(u'eof').neg():
                        var.put(u'ch', var.get(u"this").get(u'scanner').get(u'source').get(var.get(u"this").get(u'scanner').get(u'index')))
                        if (PyJsStrictEq(var.get(u'ch'),Js(u'{')) or PyJsStrictEq(var.get(u'ch'),Js(u'<'))):
                            break
                        var.get(u"this").get(u'scanner').put(u'index',Js(var.get(u"this").get(u'scanner').get(u'index').to_number())+Js(1))
                        var.put(u'text', var.get(u'ch'), u'+')
                        if var.get(u'character_1').get(u'Character').callprop(u'isLineTerminator', var.get(u'ch').callprop(u'charCodeAt', Js(0.0))):
                            var.get(u"this").get(u'scanner').put(u'lineNumber',Js(var.get(u"this").get(u'scanner').get(u'lineNumber').to_number())+Js(1))
                            if (PyJsStrictEq(var.get(u'ch'),Js(u'\r')) and PyJsStrictEq(var.get(u"this").get(u'scanner').get(u'source').get(var.get(u"this").get(u'scanner').get(u'index')),Js(u'\n'))):
                                var.get(u"this").get(u'scanner').put(u'index',Js(var.get(u"this").get(u'scanner').get(u'index').to_number())+Js(1))
                            var.get(u"this").get(u'scanner').put(u'lineStart', var.get(u"this").get(u'scanner').get(u'index'))
                    var.get(u"this").get(u'lastMarker').put(u'index', var.get(u"this").get(u'scanner').get(u'index'))
                    var.get(u"this").get(u'lastMarker').put(u'line', var.get(u"this").get(u'scanner').get(u'lineNumber'))
                    var.get(u"this").get(u'lastMarker').put(u'column', (var.get(u"this").get(u'scanner').get(u'index')-var.get(u"this").get(u'scanner').get(u'lineStart')))
                    PyJs_Object_51_ = Js({u'type':Js(101.0),u'value':var.get(u'text'),u'lineNumber':var.get(u"this").get(u'scanner').get(u'lineNumber'),u'lineStart':var.get(u"this").get(u'scanner').get(u'lineStart'),u'start':var.get(u'start'),u'end':var.get(u"this").get(u'scanner').get(u'index')})
                    var.put(u'token', PyJs_Object_51_)
                    if ((var.get(u'text').get(u'length')>Js(0.0)) and var.get(u"this").get(u'config').get(u'tokens')):
                        var.get(u"this").get(u'tokens').callprop(u'push', var.get(u"this").callprop(u'convertToken', var.get(u'token')))
                    return var.get(u'token')
                PyJs_anonymous_50_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'nextJSXText', PyJs_anonymous_50_)
                @Js
                def PyJs_anonymous_52_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'state', u'next'])
                    var.put(u'state', var.get(u"this").get(u'scanner').callprop(u'saveState'))
                    var.get(u"this").get(u'scanner').callprop(u'scanComments')
                    var.put(u'next', var.get(u"this").callprop(u'lexJSX'))
                    var.get(u"this").get(u'scanner').callprop(u'restoreState', var.get(u'state'))
                    return var.get(u'next')
                PyJs_anonymous_52_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'peekJSXToken', PyJs_anonymous_52_)
                @Js
                def PyJs_anonymous_53_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'token', u'value'])
                    var.put(u'token', var.get(u"this").callprop(u'nextJSXToken'))
                    if (PyJsStrictNeq(var.get(u'token').get(u'type'),Js(7.0)) or PyJsStrictNeq(var.get(u'token').get(u'value'),var.get(u'value'))):
                        var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'token'))
                PyJs_anonymous_53_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'expectJSX', PyJs_anonymous_53_)
                @Js
                def PyJs_anonymous_54_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'value', u'next'])
                    var.put(u'next', var.get(u"this").callprop(u'peekJSXToken'))
                    return (PyJsStrictEq(var.get(u'next').get(u'type'),Js(7.0)) and PyJsStrictEq(var.get(u'next').get(u'value'),var.get(u'value')))
                PyJs_anonymous_54_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'matchJSX', PyJs_anonymous_54_)
                @Js
                def PyJs_anonymous_55_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'token'])
                    var.put(u'node', var.get(u"this").callprop(u'createJSXNode'))
                    var.put(u'token', var.get(u"this").callprop(u'nextJSXToken'))
                    if PyJsStrictNeq(var.get(u'token').get(u'type'),Js(100.0)):
                        var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'token'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'JSXNode').get(u'JSXIdentifier').create(var.get(u'token').get(u'value')))
                PyJs_anonymous_55_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'parseJSXIdentifier', PyJs_anonymous_55_)
                @Js
                def PyJs_anonymous_56_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'elementName', u'name_1', u'object', u'namespace', u'property'])
                    var.put(u'node', var.get(u"this").callprop(u'createJSXNode'))
                    var.put(u'elementName', var.get(u"this").callprop(u'parseJSXIdentifier'))
                    if var.get(u"this").callprop(u'matchJSX', Js(u':')):
                        var.put(u'namespace', var.get(u'elementName'))
                        var.get(u"this").callprop(u'expectJSX', Js(u':'))
                        var.put(u'name_1', var.get(u"this").callprop(u'parseJSXIdentifier'))
                        var.put(u'elementName', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'JSXNode').get(u'JSXNamespacedName').create(var.get(u'namespace'), var.get(u'name_1'))))
                    else:
                        if var.get(u"this").callprop(u'matchJSX', Js(u'.')):
                            while var.get(u"this").callprop(u'matchJSX', Js(u'.')):
                                var.put(u'object', var.get(u'elementName'))
                                var.get(u"this").callprop(u'expectJSX', Js(u'.'))
                                var.put(u'property', var.get(u"this").callprop(u'parseJSXIdentifier'))
                                var.put(u'elementName', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'JSXNode').get(u'JSXMemberExpression').create(var.get(u'object'), var.get(u'property'))))
                    return var.get(u'elementName')
                PyJs_anonymous_56_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'parseJSXElementName', PyJs_anonymous_56_)
                @Js
                def PyJs_anonymous_57_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'namespace', u'name_2', u'identifier', u'attributeName'])
                    var.put(u'node', var.get(u"this").callprop(u'createJSXNode'))
                    pass
                    var.put(u'identifier', var.get(u"this").callprop(u'parseJSXIdentifier'))
                    if var.get(u"this").callprop(u'matchJSX', Js(u':')):
                        var.put(u'namespace', var.get(u'identifier'))
                        var.get(u"this").callprop(u'expectJSX', Js(u':'))
                        var.put(u'name_2', var.get(u"this").callprop(u'parseJSXIdentifier'))
                        var.put(u'attributeName', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'JSXNode').get(u'JSXNamespacedName').create(var.get(u'namespace'), var.get(u'name_2'))))
                    else:
                        var.put(u'attributeName', var.get(u'identifier'))
                    return var.get(u'attributeName')
                PyJs_anonymous_57_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'parseJSXAttributeName', PyJs_anonymous_57_)
                @Js
                def PyJs_anonymous_58_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'raw', u'token'])
                    var.put(u'node', var.get(u"this").callprop(u'createJSXNode'))
                    var.put(u'token', var.get(u"this").callprop(u'nextJSXToken'))
                    if PyJsStrictNeq(var.get(u'token').get(u'type'),Js(8.0)):
                        var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'token'))
                    var.put(u'raw', var.get(u"this").callprop(u'getTokenRaw', var.get(u'token')))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'Literal').create(var.get(u'token').get(u'value'), var.get(u'raw')))
                PyJs_anonymous_58_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'parseJSXStringLiteralAttribute', PyJs_anonymous_58_)
                @Js
                def PyJs_anonymous_59_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'expression'])
                    var.put(u'node', var.get(u"this").callprop(u'createJSXNode'))
                    var.get(u"this").callprop(u'expectJSX', Js(u'{'))
                    var.get(u"this").callprop(u'finishJSX')
                    if var.get(u"this").callprop(u'match', Js(u'}')):
                        var.get(u"this").callprop(u'tolerateError', Js(u'JSX attributes must only be assigned a non-empty expression'))
                    var.put(u'expression', var.get(u"this").callprop(u'parseAssignmentExpression'))
                    var.get(u"this").callprop(u'reenterJSX')
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'JSXNode').get(u'JSXExpressionContainer').create(var.get(u'expression')))
                PyJs_anonymous_59_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'parseJSXExpressionAttribute', PyJs_anonymous_59_)
                @Js
                def PyJs_anonymous_60_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    return (var.get(u"this").callprop(u'parseJSXExpressionAttribute') if var.get(u"this").callprop(u'matchJSX', Js(u'{')) else (var.get(u"this").callprop(u'parseJSXElement') if var.get(u"this").callprop(u'matchJSX', Js(u'<')) else var.get(u"this").callprop(u'parseJSXStringLiteralAttribute')))
                PyJs_anonymous_60_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'parseJSXAttributeValue', PyJs_anonymous_60_)
                @Js
                def PyJs_anonymous_61_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'name', u'value'])
                    var.put(u'node', var.get(u"this").callprop(u'createJSXNode'))
                    var.put(u'name', var.get(u"this").callprop(u'parseJSXAttributeName'))
                    var.put(u'value', var.get(u"null"))
                    if var.get(u"this").callprop(u'matchJSX', Js(u'=')):
                        var.get(u"this").callprop(u'expectJSX', Js(u'='))
                        var.put(u'value', var.get(u"this").callprop(u'parseJSXAttributeValue'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'JSXNode').get(u'JSXAttribute').create(var.get(u'name'), var.get(u'value')))
                PyJs_anonymous_61_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'parseJSXNameValueAttribute', PyJs_anonymous_61_)
                @Js
                def PyJs_anonymous_62_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'argument'])
                    var.put(u'node', var.get(u"this").callprop(u'createJSXNode'))
                    var.get(u"this").callprop(u'expectJSX', Js(u'{'))
                    var.get(u"this").callprop(u'expectJSX', Js(u'...'))
                    var.get(u"this").callprop(u'finishJSX')
                    var.put(u'argument', var.get(u"this").callprop(u'parseAssignmentExpression'))
                    var.get(u"this").callprop(u'reenterJSX')
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'JSXNode').get(u'JSXSpreadAttribute').create(var.get(u'argument')))
                PyJs_anonymous_62_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'parseJSXSpreadAttribute', PyJs_anonymous_62_)
                @Js
                def PyJs_anonymous_63_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'attributes', u'attribute'])
                    var.put(u'attributes', Js([]))
                    while (var.get(u"this").callprop(u'matchJSX', Js(u'/')).neg() and var.get(u"this").callprop(u'matchJSX', Js(u'>')).neg()):
                        var.put(u'attribute', (var.get(u"this").callprop(u'parseJSXSpreadAttribute') if var.get(u"this").callprop(u'matchJSX', Js(u'{')) else var.get(u"this").callprop(u'parseJSXNameValueAttribute')))
                        var.get(u'attributes').callprop(u'push', var.get(u'attribute'))
                    return var.get(u'attributes')
                PyJs_anonymous_63_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'parseJSXAttributes', PyJs_anonymous_63_)
                @Js
                def PyJs_anonymous_64_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'attributes', u'name', u'selfClosing'])
                    var.put(u'node', var.get(u"this").callprop(u'createJSXNode'))
                    var.get(u"this").callprop(u'expectJSX', Js(u'<'))
                    var.put(u'name', var.get(u"this").callprop(u'parseJSXElementName'))
                    var.put(u'attributes', var.get(u"this").callprop(u'parseJSXAttributes'))
                    var.put(u'selfClosing', var.get(u"this").callprop(u'matchJSX', Js(u'/')))
                    if var.get(u'selfClosing'):
                        var.get(u"this").callprop(u'expectJSX', Js(u'/'))
                    var.get(u"this").callprop(u'expectJSX', Js(u'>'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'JSXNode').get(u'JSXOpeningElement').create(var.get(u'name'), var.get(u'selfClosing'), var.get(u'attributes')))
                PyJs_anonymous_64_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'parseJSXOpeningElement', PyJs_anonymous_64_)
                @Js
                def PyJs_anonymous_65_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'name_3', u'name', u'selfClosing', u'attributes'])
                    var.put(u'node', var.get(u"this").callprop(u'createJSXNode'))
                    var.get(u"this").callprop(u'expectJSX', Js(u'<'))
                    if var.get(u"this").callprop(u'matchJSX', Js(u'/')):
                        var.get(u"this").callprop(u'expectJSX', Js(u'/'))
                        var.put(u'name_3', var.get(u"this").callprop(u'parseJSXElementName'))
                        var.get(u"this").callprop(u'expectJSX', Js(u'>'))
                        return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'JSXNode').get(u'JSXClosingElement').create(var.get(u'name_3')))
                    var.put(u'name', var.get(u"this").callprop(u'parseJSXElementName'))
                    var.put(u'attributes', var.get(u"this").callprop(u'parseJSXAttributes'))
                    var.put(u'selfClosing', var.get(u"this").callprop(u'matchJSX', Js(u'/')))
                    if var.get(u'selfClosing'):
                        var.get(u"this").callprop(u'expectJSX', Js(u'/'))
                    var.get(u"this").callprop(u'expectJSX', Js(u'>'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'JSXNode').get(u'JSXOpeningElement').create(var.get(u'name'), var.get(u'selfClosing'), var.get(u'attributes')))
                PyJs_anonymous_65_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'parseJSXBoundaryElement', PyJs_anonymous_65_)
                @Js
                def PyJs_anonymous_66_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node'])
                    var.put(u'node', var.get(u"this").callprop(u'createJSXChildNode'))
                    var.get(u"this").callprop(u'collectComments')
                    var.get(u"this").get(u'lastMarker').put(u'index', var.get(u"this").get(u'scanner').get(u'index'))
                    var.get(u"this").get(u'lastMarker').put(u'line', var.get(u"this").get(u'scanner').get(u'lineNumber'))
                    var.get(u"this").get(u'lastMarker').put(u'column', (var.get(u"this").get(u'scanner').get(u'index')-var.get(u"this").get(u'scanner').get(u'lineStart')))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'JSXNode').get(u'JSXEmptyExpression').create())
                PyJs_anonymous_66_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'parseJSXEmptyExpression', PyJs_anonymous_66_)
                @Js
                def PyJs_anonymous_67_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'expression'])
                    var.put(u'node', var.get(u"this").callprop(u'createJSXNode'))
                    var.get(u"this").callprop(u'expectJSX', Js(u'{'))
                    pass
                    if var.get(u"this").callprop(u'matchJSX', Js(u'}')):
                        var.put(u'expression', var.get(u"this").callprop(u'parseJSXEmptyExpression'))
                        var.get(u"this").callprop(u'expectJSX', Js(u'}'))
                    else:
                        var.get(u"this").callprop(u'finishJSX')
                        var.put(u'expression', var.get(u"this").callprop(u'parseAssignmentExpression'))
                        var.get(u"this").callprop(u'reenterJSX')
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'JSXNode').get(u'JSXExpressionContainer').create(var.get(u'expression')))
                PyJs_anonymous_67_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'parseJSXExpressionContainer', PyJs_anonymous_67_)
                @Js
                def PyJs_anonymous_68_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'container', u'raw', u'token', u'child', u'children'])
                    var.put(u'children', Js([]))
                    while var.get(u"this").get(u'scanner').callprop(u'eof').neg():
                        var.put(u'node', var.get(u"this").callprop(u'createJSXChildNode'))
                        var.put(u'token', var.get(u"this").callprop(u'nextJSXText'))
                        if (var.get(u'token').get(u'start')<var.get(u'token').get(u'end')):
                            var.put(u'raw', var.get(u"this").callprop(u'getTokenRaw', var.get(u'token')))
                            var.put(u'child', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'JSXNode').get(u'JSXText').create(var.get(u'token').get(u'value'), var.get(u'raw'))))
                            var.get(u'children').callprop(u'push', var.get(u'child'))
                        if PyJsStrictEq(var.get(u"this").get(u'scanner').get(u'source').get(var.get(u"this").get(u'scanner').get(u'index')),Js(u'{')):
                            var.put(u'container', var.get(u"this").callprop(u'parseJSXExpressionContainer'))
                            var.get(u'children').callprop(u'push', var.get(u'container'))
                        else:
                            break
                    return var.get(u'children')
                PyJs_anonymous_68_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'parseJSXChildren', PyJs_anonymous_68_)
                @Js
                def PyJs_anonymous_69_(el, this, arguments, var=var):
                    var = Scope({u'this':this, u'el':el, u'arguments':arguments}, var)
                    var.registers([u'node', u'el', u'opening', u'close_1', u'element', u'open_1', u'child', u'stack'])
                    var.put(u'stack', Js([]))
                    while var.get(u"this").get(u'scanner').callprop(u'eof').neg():
                        var.get(u'el').put(u'children', var.get(u'el').get(u'children').callprop(u'concat', var.get(u"this").callprop(u'parseJSXChildren')))
                        var.put(u'node', var.get(u"this").callprop(u'createJSXChildNode'))
                        var.put(u'element', var.get(u"this").callprop(u'parseJSXBoundaryElement'))
                        if PyJsStrictEq(var.get(u'element').get(u'type'),var.get(u'jsx_syntax_1').get(u'JSXSyntax').get(u'JSXOpeningElement')):
                            var.put(u'opening', var.get(u'element'))
                            if var.get(u'opening').get(u'selfClosing'):
                                var.put(u'child', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'JSXNode').get(u'JSXElement').create(var.get(u'opening'), Js([]), var.get(u"null"))))
                                var.get(u'el').get(u'children').callprop(u'push', var.get(u'child'))
                            else:
                                var.get(u'stack').callprop(u'push', var.get(u'el'))
                                PyJs_Object_70_ = Js({u'node':var.get(u'node'),u'opening':var.get(u'opening'),u'closing':var.get(u"null"),u'children':Js([])})
                                var.put(u'el', PyJs_Object_70_)
                        if PyJsStrictEq(var.get(u'element').get(u'type'),var.get(u'jsx_syntax_1').get(u'JSXSyntax').get(u'JSXClosingElement')):
                            var.get(u'el').put(u'closing', var.get(u'element'))
                            var.put(u'open_1', var.get(u'getQualifiedElementName')(var.get(u'el').get(u'opening').get(u'name')))
                            var.put(u'close_1', var.get(u'getQualifiedElementName')(var.get(u'el').get(u'closing').get(u'name')))
                            if PyJsStrictNeq(var.get(u'open_1'),var.get(u'close_1')):
                                var.get(u"this").callprop(u'tolerateError', Js(u'Expected corresponding JSX closing tag for %0'), var.get(u'open_1'))
                            if (var.get(u'stack').get(u'length')>Js(0.0)):
                                var.put(u'child', var.get(u"this").callprop(u'finalize', var.get(u'el').get(u'node'), var.get(u'JSXNode').get(u'JSXElement').create(var.get(u'el').get(u'opening'), var.get(u'el').get(u'children'), var.get(u'el').get(u'closing'))))
                                var.put(u'el', var.get(u'stack').get((var.get(u'stack').get(u'length')-Js(1.0))))
                                var.get(u'el').get(u'children').callprop(u'push', var.get(u'child'))
                                var.get(u'stack').callprop(u'pop')
                            else:
                                break
                    return var.get(u'el')
                PyJs_anonymous_69_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'parseComplexJSXElement', PyJs_anonymous_69_)
                @Js
                def PyJs_anonymous_71_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'el', u'closing', u'children', u'opening'])
                    var.put(u'node', var.get(u"this").callprop(u'createJSXNode'))
                    var.put(u'opening', var.get(u"this").callprop(u'parseJSXOpeningElement'))
                    var.put(u'children', Js([]))
                    var.put(u'closing', var.get(u"null"))
                    if var.get(u'opening').get(u'selfClosing').neg():
                        PyJs_Object_72_ = Js({u'node':var.get(u'node'),u'opening':var.get(u'opening'),u'closing':var.get(u'closing'),u'children':var.get(u'children')})
                        var.put(u'el', var.get(u"this").callprop(u'parseComplexJSXElement', PyJs_Object_72_))
                        var.put(u'children', var.get(u'el').get(u'children'))
                        var.put(u'closing', var.get(u'el').get(u'closing'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'JSXNode').get(u'JSXElement').create(var.get(u'opening'), var.get(u'children'), var.get(u'closing')))
                PyJs_anonymous_71_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'parseJSXElement', PyJs_anonymous_71_)
                @Js
                def PyJs_anonymous_73_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'element'])
                    if var.get(u"this").get(u'config').get(u'tokens'):
                        var.get(u"this").get(u'tokens').callprop(u'pop')
                    var.get(u"this").callprop(u'startJSX')
                    var.put(u'element', var.get(u"this").callprop(u'parseJSXElement'))
                    var.get(u"this").callprop(u'finishJSX')
                    return var.get(u'element')
                PyJs_anonymous_73_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'parseJSXRoot', PyJs_anonymous_73_)
                @Js
                def PyJs_anonymous_74_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    return (var.get(u'_super').get(u'prototype').get(u'isStartOfExpression').callprop(u'call', var.get(u"this")) or var.get(u"this").callprop(u'match', Js(u'<')))
                PyJs_anonymous_74_._set_name(u'anonymous')
                var.get(u'JSXParser').get(u'prototype').put(u'isStartOfExpression', PyJs_anonymous_74_)
                return var.get(u'JSXParser')
            PyJs_anonymous_33_._set_name(u'anonymous')
            var.put(u'JSXParser', PyJs_anonymous_33_(var.get(u'parser_1').get(u'Parser')))
            var.get(u'exports').put(u'JSXParser', var.get(u'JSXParser'))
        PyJs_anonymous_26_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_75_(module, exports, this, arguments, var=var):
            var = Scope({u'this':this, u'exports':exports, u'arguments':arguments, u'module':module}, var)
            var.registers([u'Regex', u'exports', u'module'])
            Js(u'use strict')
            PyJs_Object_76_ = Js({u'value':Js(True)})
            var.get(u'Object').callprop(u'defineProperty', var.get(u'exports'), Js(u'__esModule'), PyJs_Object_76_)
            PyJs_Object_77_ = Js({u'NonAsciiIdentifierStart':JsRegExp(u'/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/'),u'NonAsciiIdentifierPart':JsRegExp(u'/[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/')})
            var.put(u'Regex', PyJs_Object_77_)
            @Js
            def PyJs_fromCodePoint_79_(cp, this, arguments, var=var):
                var = Scope({u'this':this, u'cp':cp, u'arguments':arguments, u'fromCodePoint':PyJs_fromCodePoint_79_}, var)
                var.registers([u'cp'])
                return (var.get(u'String').callprop(u'fromCharCode', var.get(u'cp')) if (var.get(u'cp')<Js(65536)) else (var.get(u'String').callprop(u'fromCharCode', (Js(55296)+((var.get(u'cp')-Js(65536))>>Js(10.0))))+var.get(u'String').callprop(u'fromCharCode', (Js(56320)+((var.get(u'cp')-Js(65536))&Js(1023.0))))))
            PyJs_fromCodePoint_79_._set_name(u'fromCodePoint')
            @Js
            def PyJs_isWhiteSpace_80_(cp, this, arguments, var=var):
                var = Scope({u'this':this, u'isWhiteSpace':PyJs_isWhiteSpace_80_, u'cp':cp, u'arguments':arguments}, var)
                var.registers([u'cp'])
                def PyJs_LONG_81_(var=var):
                    return (((((PyJsStrictEq(var.get(u'cp'),Js(32)) or PyJsStrictEq(var.get(u'cp'),Js(9))) or PyJsStrictEq(var.get(u'cp'),Js(11))) or PyJsStrictEq(var.get(u'cp'),Js(12))) or PyJsStrictEq(var.get(u'cp'),Js(160))) or ((var.get(u'cp')>=Js(5760)) and (Js([Js(5760), Js(8192), Js(8193), Js(8194), Js(8195), Js(8196), Js(8197), Js(8198), Js(8199), Js(8200), Js(8201), Js(8202), Js(8239), Js(8287), Js(12288), Js(65279)]).callprop(u'indexOf', var.get(u'cp'))>=Js(0.0))))
                return PyJs_LONG_81_()
            PyJs_isWhiteSpace_80_._set_name(u'isWhiteSpace')
            @Js
            def PyJs_isLineTerminator_82_(cp, this, arguments, var=var):
                var = Scope({u'this':this, u'cp':cp, u'arguments':arguments, u'isLineTerminator':PyJs_isLineTerminator_82_}, var)
                var.registers([u'cp'])
                return (((PyJsStrictEq(var.get(u'cp'),Js(10)) or PyJsStrictEq(var.get(u'cp'),Js(13))) or PyJsStrictEq(var.get(u'cp'),Js(8232))) or PyJsStrictEq(var.get(u'cp'),Js(8233)))
            PyJs_isLineTerminator_82_._set_name(u'isLineTerminator')
            @Js
            def PyJs_isIdentifierStart_83_(cp, this, arguments, var=var):
                var = Scope({u'this':this, u'isIdentifierStart':PyJs_isIdentifierStart_83_, u'cp':cp, u'arguments':arguments}, var)
                var.registers([u'cp'])
                def PyJs_LONG_84_(var=var):
                    return (((((PyJsStrictEq(var.get(u'cp'),Js(36)) or PyJsStrictEq(var.get(u'cp'),Js(95))) or ((var.get(u'cp')>=Js(65)) and (var.get(u'cp')<=Js(90)))) or ((var.get(u'cp')>=Js(97)) and (var.get(u'cp')<=Js(122)))) or PyJsStrictEq(var.get(u'cp'),Js(92))) or ((var.get(u'cp')>=Js(128)) and var.get(u'Regex').get(u'NonAsciiIdentifierStart').callprop(u'test', var.get(u'exports').get(u'Character').callprop(u'fromCodePoint', var.get(u'cp')))))
                return PyJs_LONG_84_()
            PyJs_isIdentifierStart_83_._set_name(u'isIdentifierStart')
            @Js
            def PyJs_isIdentifierPart_85_(cp, this, arguments, var=var):
                var = Scope({u'this':this, u'isIdentifierPart':PyJs_isIdentifierPart_85_, u'cp':cp, u'arguments':arguments}, var)
                var.registers([u'cp'])
                def PyJs_LONG_86_(var=var):
                    return ((((((PyJsStrictEq(var.get(u'cp'),Js(36)) or PyJsStrictEq(var.get(u'cp'),Js(95))) or ((var.get(u'cp')>=Js(65)) and (var.get(u'cp')<=Js(90)))) or ((var.get(u'cp')>=Js(97)) and (var.get(u'cp')<=Js(122)))) or ((var.get(u'cp')>=Js(48)) and (var.get(u'cp')<=Js(57)))) or PyJsStrictEq(var.get(u'cp'),Js(92))) or ((var.get(u'cp')>=Js(128)) and var.get(u'Regex').get(u'NonAsciiIdentifierPart').callprop(u'test', var.get(u'exports').get(u'Character').callprop(u'fromCodePoint', var.get(u'cp')))))
                return PyJs_LONG_86_()
            PyJs_isIdentifierPart_85_._set_name(u'isIdentifierPart')
            @Js
            def PyJs_isDecimalDigit_87_(cp, this, arguments, var=var):
                var = Scope({u'this':this, u'cp':cp, u'arguments':arguments, u'isDecimalDigit':PyJs_isDecimalDigit_87_}, var)
                var.registers([u'cp'])
                return ((var.get(u'cp')>=Js(48)) and (var.get(u'cp')<=Js(57)))
            PyJs_isDecimalDigit_87_._set_name(u'isDecimalDigit')
            @Js
            def PyJs_isHexDigit_88_(cp, this, arguments, var=var):
                var = Scope({u'this':this, u'isHexDigit':PyJs_isHexDigit_88_, u'cp':cp, u'arguments':arguments}, var)
                var.registers([u'cp'])
                return ((((var.get(u'cp')>=Js(48)) and (var.get(u'cp')<=Js(57))) or ((var.get(u'cp')>=Js(65)) and (var.get(u'cp')<=Js(70)))) or ((var.get(u'cp')>=Js(97)) and (var.get(u'cp')<=Js(102))))
            PyJs_isHexDigit_88_._set_name(u'isHexDigit')
            @Js
            def PyJs_isOctalDigit_89_(cp, this, arguments, var=var):
                var = Scope({u'this':this, u'cp':cp, u'isOctalDigit':PyJs_isOctalDigit_89_, u'arguments':arguments}, var)
                var.registers([u'cp'])
                return ((var.get(u'cp')>=Js(48)) and (var.get(u'cp')<=Js(55)))
            PyJs_isOctalDigit_89_._set_name(u'isOctalDigit')
            PyJs_Object_78_ = Js({u'fromCodePoint':PyJs_fromCodePoint_79_,u'isWhiteSpace':PyJs_isWhiteSpace_80_,u'isLineTerminator':PyJs_isLineTerminator_82_,u'isIdentifierStart':PyJs_isIdentifierStart_83_,u'isIdentifierPart':PyJs_isIdentifierPart_85_,u'isDecimalDigit':PyJs_isDecimalDigit_87_,u'isHexDigit':PyJs_isHexDigit_88_,u'isOctalDigit':PyJs_isOctalDigit_89_})
            var.get(u'exports').put(u'Character', PyJs_Object_78_)
        PyJs_anonymous_75_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_90_(module, exports, __webpack_require__, this, arguments, var=var):
            var = Scope({u'this':this, u'exports':exports, u'__webpack_require__':__webpack_require__, u'module':module, u'arguments':arguments}, var)
            var.registers([u'exports', u'JSXSpreadAttribute', u'JSXOpeningElement', u'JSXMemberExpression', u'JSXClosingElement', u'module', u'JSXElement', u'JSXAttribute', u'__webpack_require__', u'JSXNamespacedName', u'JSXText', u'jsx_syntax_1', u'JSXExpressionContainer', u'JSXEmptyExpression', u'JSXIdentifier'])
            Js(u'use strict')
            PyJs_Object_91_ = Js({u'value':Js(True)})
            var.get(u'Object').callprop(u'defineProperty', var.get(u'exports'), Js(u'__esModule'), PyJs_Object_91_)
            var.put(u'jsx_syntax_1', var.get(u'__webpack_require__')(Js(6.0)))
            @Js
            def PyJs_anonymous_92_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'JSXClosingElement'])
                @Js
                def PyJsHoisted_JSXClosingElement_(name, this, arguments, var=var):
                    var = Scope({u'this':this, u'name':name, u'arguments':arguments}, var)
                    var.registers([u'name'])
                    var.get(u"this").put(u'type', var.get(u'jsx_syntax_1').get(u'JSXSyntax').get(u'JSXClosingElement'))
                    var.get(u"this").put(u'name', var.get(u'name'))
                PyJsHoisted_JSXClosingElement_.func_name = u'JSXClosingElement'
                var.put(u'JSXClosingElement', PyJsHoisted_JSXClosingElement_)
                pass
                return var.get(u'JSXClosingElement')
            PyJs_anonymous_92_._set_name(u'anonymous')
            var.put(u'JSXClosingElement', PyJs_anonymous_92_())
            var.get(u'exports').put(u'JSXClosingElement', var.get(u'JSXClosingElement'))
            @Js
            def PyJs_anonymous_93_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'JSXElement'])
                @Js
                def PyJsHoisted_JSXElement_(openingElement, children, closingElement, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'children':children, u'openingElement':openingElement, u'closingElement':closingElement}, var)
                    var.registers([u'children', u'openingElement', u'closingElement'])
                    var.get(u"this").put(u'type', var.get(u'jsx_syntax_1').get(u'JSXSyntax').get(u'JSXElement'))
                    var.get(u"this").put(u'openingElement', var.get(u'openingElement'))
                    var.get(u"this").put(u'children', var.get(u'children'))
                    var.get(u"this").put(u'closingElement', var.get(u'closingElement'))
                PyJsHoisted_JSXElement_.func_name = u'JSXElement'
                var.put(u'JSXElement', PyJsHoisted_JSXElement_)
                pass
                return var.get(u'JSXElement')
            PyJs_anonymous_93_._set_name(u'anonymous')
            var.put(u'JSXElement', PyJs_anonymous_93_())
            var.get(u'exports').put(u'JSXElement', var.get(u'JSXElement'))
            @Js
            def PyJs_anonymous_94_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'JSXEmptyExpression'])
                @Js
                def PyJsHoisted_JSXEmptyExpression_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").put(u'type', var.get(u'jsx_syntax_1').get(u'JSXSyntax').get(u'JSXEmptyExpression'))
                PyJsHoisted_JSXEmptyExpression_.func_name = u'JSXEmptyExpression'
                var.put(u'JSXEmptyExpression', PyJsHoisted_JSXEmptyExpression_)
                pass
                return var.get(u'JSXEmptyExpression')
            PyJs_anonymous_94_._set_name(u'anonymous')
            var.put(u'JSXEmptyExpression', PyJs_anonymous_94_())
            var.get(u'exports').put(u'JSXEmptyExpression', var.get(u'JSXEmptyExpression'))
            @Js
            def PyJs_anonymous_95_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'JSXExpressionContainer'])
                @Js
                def PyJsHoisted_JSXExpressionContainer_(expression, this, arguments, var=var):
                    var = Scope({u'this':this, u'expression':expression, u'arguments':arguments}, var)
                    var.registers([u'expression'])
                    var.get(u"this").put(u'type', var.get(u'jsx_syntax_1').get(u'JSXSyntax').get(u'JSXExpressionContainer'))
                    var.get(u"this").put(u'expression', var.get(u'expression'))
                PyJsHoisted_JSXExpressionContainer_.func_name = u'JSXExpressionContainer'
                var.put(u'JSXExpressionContainer', PyJsHoisted_JSXExpressionContainer_)
                pass
                return var.get(u'JSXExpressionContainer')
            PyJs_anonymous_95_._set_name(u'anonymous')
            var.put(u'JSXExpressionContainer', PyJs_anonymous_95_())
            var.get(u'exports').put(u'JSXExpressionContainer', var.get(u'JSXExpressionContainer'))
            @Js
            def PyJs_anonymous_96_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'JSXIdentifier'])
                @Js
                def PyJsHoisted_JSXIdentifier_(name, this, arguments, var=var):
                    var = Scope({u'this':this, u'name':name, u'arguments':arguments}, var)
                    var.registers([u'name'])
                    var.get(u"this").put(u'type', var.get(u'jsx_syntax_1').get(u'JSXSyntax').get(u'JSXIdentifier'))
                    var.get(u"this").put(u'name', var.get(u'name'))
                PyJsHoisted_JSXIdentifier_.func_name = u'JSXIdentifier'
                var.put(u'JSXIdentifier', PyJsHoisted_JSXIdentifier_)
                pass
                return var.get(u'JSXIdentifier')
            PyJs_anonymous_96_._set_name(u'anonymous')
            var.put(u'JSXIdentifier', PyJs_anonymous_96_())
            var.get(u'exports').put(u'JSXIdentifier', var.get(u'JSXIdentifier'))
            @Js
            def PyJs_anonymous_97_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'JSXMemberExpression'])
                @Js
                def PyJsHoisted_JSXMemberExpression_(object, property, this, arguments, var=var):
                    var = Scope({u'this':this, u'property':property, u'object':object, u'arguments':arguments}, var)
                    var.registers([u'property', u'object'])
                    var.get(u"this").put(u'type', var.get(u'jsx_syntax_1').get(u'JSXSyntax').get(u'JSXMemberExpression'))
                    var.get(u"this").put(u'object', var.get(u'object'))
                    var.get(u"this").put(u'property', var.get(u'property'))
                PyJsHoisted_JSXMemberExpression_.func_name = u'JSXMemberExpression'
                var.put(u'JSXMemberExpression', PyJsHoisted_JSXMemberExpression_)
                pass
                return var.get(u'JSXMemberExpression')
            PyJs_anonymous_97_._set_name(u'anonymous')
            var.put(u'JSXMemberExpression', PyJs_anonymous_97_())
            var.get(u'exports').put(u'JSXMemberExpression', var.get(u'JSXMemberExpression'))
            @Js
            def PyJs_anonymous_98_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'JSXAttribute'])
                @Js
                def PyJsHoisted_JSXAttribute_(name, value, this, arguments, var=var):
                    var = Scope({u'this':this, u'name':name, u'value':value, u'arguments':arguments}, var)
                    var.registers([u'name', u'value'])
                    var.get(u"this").put(u'type', var.get(u'jsx_syntax_1').get(u'JSXSyntax').get(u'JSXAttribute'))
                    var.get(u"this").put(u'name', var.get(u'name'))
                    var.get(u"this").put(u'value', var.get(u'value'))
                PyJsHoisted_JSXAttribute_.func_name = u'JSXAttribute'
                var.put(u'JSXAttribute', PyJsHoisted_JSXAttribute_)
                pass
                return var.get(u'JSXAttribute')
            PyJs_anonymous_98_._set_name(u'anonymous')
            var.put(u'JSXAttribute', PyJs_anonymous_98_())
            var.get(u'exports').put(u'JSXAttribute', var.get(u'JSXAttribute'))
            @Js
            def PyJs_anonymous_99_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'JSXNamespacedName'])
                @Js
                def PyJsHoisted_JSXNamespacedName_(namespace, name, this, arguments, var=var):
                    var = Scope({u'this':this, u'namespace':namespace, u'name':name, u'arguments':arguments}, var)
                    var.registers([u'namespace', u'name'])
                    var.get(u"this").put(u'type', var.get(u'jsx_syntax_1').get(u'JSXSyntax').get(u'JSXNamespacedName'))
                    var.get(u"this").put(u'namespace', var.get(u'namespace'))
                    var.get(u"this").put(u'name', var.get(u'name'))
                PyJsHoisted_JSXNamespacedName_.func_name = u'JSXNamespacedName'
                var.put(u'JSXNamespacedName', PyJsHoisted_JSXNamespacedName_)
                pass
                return var.get(u'JSXNamespacedName')
            PyJs_anonymous_99_._set_name(u'anonymous')
            var.put(u'JSXNamespacedName', PyJs_anonymous_99_())
            var.get(u'exports').put(u'JSXNamespacedName', var.get(u'JSXNamespacedName'))
            @Js
            def PyJs_anonymous_100_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'JSXOpeningElement'])
                @Js
                def PyJsHoisted_JSXOpeningElement_(name, selfClosing, attributes, this, arguments, var=var):
                    var = Scope({u'selfClosing':selfClosing, u'attributes':attributes, u'this':this, u'name':name, u'arguments':arguments}, var)
                    var.registers([u'selfClosing', u'attributes', u'name'])
                    var.get(u"this").put(u'type', var.get(u'jsx_syntax_1').get(u'JSXSyntax').get(u'JSXOpeningElement'))
                    var.get(u"this").put(u'name', var.get(u'name'))
                    var.get(u"this").put(u'selfClosing', var.get(u'selfClosing'))
                    var.get(u"this").put(u'attributes', var.get(u'attributes'))
                PyJsHoisted_JSXOpeningElement_.func_name = u'JSXOpeningElement'
                var.put(u'JSXOpeningElement', PyJsHoisted_JSXOpeningElement_)
                pass
                return var.get(u'JSXOpeningElement')
            PyJs_anonymous_100_._set_name(u'anonymous')
            var.put(u'JSXOpeningElement', PyJs_anonymous_100_())
            var.get(u'exports').put(u'JSXOpeningElement', var.get(u'JSXOpeningElement'))
            @Js
            def PyJs_anonymous_101_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'JSXSpreadAttribute'])
                @Js
                def PyJsHoisted_JSXSpreadAttribute_(argument, this, arguments, var=var):
                    var = Scope({u'this':this, u'argument':argument, u'arguments':arguments}, var)
                    var.registers([u'argument'])
                    var.get(u"this").put(u'type', var.get(u'jsx_syntax_1').get(u'JSXSyntax').get(u'JSXSpreadAttribute'))
                    var.get(u"this").put(u'argument', var.get(u'argument'))
                PyJsHoisted_JSXSpreadAttribute_.func_name = u'JSXSpreadAttribute'
                var.put(u'JSXSpreadAttribute', PyJsHoisted_JSXSpreadAttribute_)
                pass
                return var.get(u'JSXSpreadAttribute')
            PyJs_anonymous_101_._set_name(u'anonymous')
            var.put(u'JSXSpreadAttribute', PyJs_anonymous_101_())
            var.get(u'exports').put(u'JSXSpreadAttribute', var.get(u'JSXSpreadAttribute'))
            @Js
            def PyJs_anonymous_102_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'JSXText'])
                @Js
                def PyJsHoisted_JSXText_(value, raw, this, arguments, var=var):
                    var = Scope({u'this':this, u'raw':raw, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'raw', u'value'])
                    var.get(u"this").put(u'type', var.get(u'jsx_syntax_1').get(u'JSXSyntax').get(u'JSXText'))
                    var.get(u"this").put(u'value', var.get(u'value'))
                    var.get(u"this").put(u'raw', var.get(u'raw'))
                PyJsHoisted_JSXText_.func_name = u'JSXText'
                var.put(u'JSXText', PyJsHoisted_JSXText_)
                pass
                return var.get(u'JSXText')
            PyJs_anonymous_102_._set_name(u'anonymous')
            var.put(u'JSXText', PyJs_anonymous_102_())
            var.get(u'exports').put(u'JSXText', var.get(u'JSXText'))
        PyJs_anonymous_90_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_103_(module, exports, this, arguments, var=var):
            var = Scope({u'this':this, u'exports':exports, u'arguments':arguments, u'module':module}, var)
            var.registers([u'exports', u'module'])
            Js(u'use strict')
            PyJs_Object_104_ = Js({u'value':Js(True)})
            var.get(u'Object').callprop(u'defineProperty', var.get(u'exports'), Js(u'__esModule'), PyJs_Object_104_)
            PyJs_Object_105_ = Js({u'JSXAttribute':Js(u'JSXAttribute'),u'JSXClosingElement':Js(u'JSXClosingElement'),u'JSXElement':Js(u'JSXElement'),u'JSXEmptyExpression':Js(u'JSXEmptyExpression'),u'JSXExpressionContainer':Js(u'JSXExpressionContainer'),u'JSXIdentifier':Js(u'JSXIdentifier'),u'JSXMemberExpression':Js(u'JSXMemberExpression'),u'JSXNamespacedName':Js(u'JSXNamespacedName'),u'JSXOpeningElement':Js(u'JSXOpeningElement'),u'JSXSpreadAttribute':Js(u'JSXSpreadAttribute'),u'JSXText':Js(u'JSXText')})
            var.get(u'exports').put(u'JSXSyntax', PyJs_Object_105_)
        PyJs_anonymous_103_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_106_(module, exports, __webpack_require__, this, arguments, var=var):
            var = Scope({u'this':this, u'exports':exports, u'__webpack_require__':__webpack_require__, u'module':module, u'arguments':arguments}, var)
            var.registers([u'ThisExpression', u'MetaProperty', u'Directive', u'ExportDefaultDeclaration', u'CallExpression', u'WhileStatement', u'ExpressionStatement', u'ObjectPattern', u'LabeledStatement', u'UpdateExpression', u'module', u'Literal', u'ObjectExpression', u'DebuggerStatement', u'TemplateElement', u'Super', u'VariableDeclaration', u'AsyncFunctionDeclaration', u'ClassExpression', u'Property', u'SpreadElement', u'ContinueStatement', u'ImportDeclaration', u'DoWhileStatement', u'ForOfStatement', u'SwitchStatement', u'CatchClause', u'ArrayExpression', u'ForStatement', u'ExportNamedDeclaration', u'BreakStatement', u'syntax_1', u'RestElement', u'BlockStatement', u'TaggedTemplateExpression', u'MethodDefinition', u'VariableDeclarator', u'Script', u'AsyncFunctionExpression', u'ClassBody', u'ThrowStatement', u'AssignmentExpression', u'exports', u'__webpack_require__', u'ArrowFunctionExpression', u'ArrayPattern', u'ExportSpecifier', u'ImportSpecifier', u'StaticMemberExpression', u'ImportNamespaceSpecifier', u'TryStatement', u'SequenceExpression', u'ForInStatement', u'BinaryExpression', u'SwitchCase', u'Identifier', u'ConditionalExpression', u'UnaryExpression', u'AwaitExpression', u'AsyncArrowFunctionExpression', u'WithStatement', u'FunctionDeclaration', u'FunctionExpression', u'Module', u'ImportDefaultSpecifier', u'ComputedMemberExpression', u'YieldExpression', u'ClassDeclaration', u'AssignmentPattern', u'NewExpression', u'EmptyStatement', u'ReturnStatement', u'IfStatement', u'TemplateLiteral', u'RegexLiteral', u'ExportAllDeclaration'])
            Js(u'use strict')
            PyJs_Object_107_ = Js({u'value':Js(True)})
            var.get(u'Object').callprop(u'defineProperty', var.get(u'exports'), Js(u'__esModule'), PyJs_Object_107_)
            var.put(u'syntax_1', var.get(u'__webpack_require__')(Js(2.0)))
            @Js
            def PyJs_anonymous_108_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ArrayExpression'])
                @Js
                def PyJsHoisted_ArrayExpression_(elements, this, arguments, var=var):
                    var = Scope({u'this':this, u'elements':elements, u'arguments':arguments}, var)
                    var.registers([u'elements'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ArrayExpression'))
                    var.get(u"this").put(u'elements', var.get(u'elements'))
                PyJsHoisted_ArrayExpression_.func_name = u'ArrayExpression'
                var.put(u'ArrayExpression', PyJsHoisted_ArrayExpression_)
                pass
                return var.get(u'ArrayExpression')
            PyJs_anonymous_108_._set_name(u'anonymous')
            var.put(u'ArrayExpression', PyJs_anonymous_108_())
            var.get(u'exports').put(u'ArrayExpression', var.get(u'ArrayExpression'))
            @Js
            def PyJs_anonymous_109_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ArrayPattern'])
                @Js
                def PyJsHoisted_ArrayPattern_(elements, this, arguments, var=var):
                    var = Scope({u'this':this, u'elements':elements, u'arguments':arguments}, var)
                    var.registers([u'elements'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ArrayPattern'))
                    var.get(u"this").put(u'elements', var.get(u'elements'))
                PyJsHoisted_ArrayPattern_.func_name = u'ArrayPattern'
                var.put(u'ArrayPattern', PyJsHoisted_ArrayPattern_)
                pass
                return var.get(u'ArrayPattern')
            PyJs_anonymous_109_._set_name(u'anonymous')
            var.put(u'ArrayPattern', PyJs_anonymous_109_())
            var.get(u'exports').put(u'ArrayPattern', var.get(u'ArrayPattern'))
            @Js
            def PyJs_anonymous_110_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ArrowFunctionExpression'])
                @Js
                def PyJsHoisted_ArrowFunctionExpression_(params, body, expression, this, arguments, var=var):
                    var = Scope({u'body':body, u'expression':expression, u'this':this, u'params':params, u'arguments':arguments}, var)
                    var.registers([u'body', u'expression', u'params'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ArrowFunctionExpression'))
                    var.get(u"this").put(u'id', var.get(u"null"))
                    var.get(u"this").put(u'params', var.get(u'params'))
                    var.get(u"this").put(u'body', var.get(u'body'))
                    var.get(u"this").put(u'generator', Js(False))
                    var.get(u"this").put(u'expression', var.get(u'expression'))
                    var.get(u"this").put(u'async', Js(False))
                PyJsHoisted_ArrowFunctionExpression_.func_name = u'ArrowFunctionExpression'
                var.put(u'ArrowFunctionExpression', PyJsHoisted_ArrowFunctionExpression_)
                pass
                return var.get(u'ArrowFunctionExpression')
            PyJs_anonymous_110_._set_name(u'anonymous')
            var.put(u'ArrowFunctionExpression', PyJs_anonymous_110_())
            var.get(u'exports').put(u'ArrowFunctionExpression', var.get(u'ArrowFunctionExpression'))
            @Js
            def PyJs_anonymous_111_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'AssignmentExpression'])
                @Js
                def PyJsHoisted_AssignmentExpression_(operator, left, right, this, arguments, var=var):
                    var = Scope({u'operator':operator, u'this':this, u'right':right, u'arguments':arguments, u'left':left}, var)
                    var.registers([u'operator', u'right', u'left'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'AssignmentExpression'))
                    var.get(u"this").put(u'operator', var.get(u'operator'))
                    var.get(u"this").put(u'left', var.get(u'left'))
                    var.get(u"this").put(u'right', var.get(u'right'))
                PyJsHoisted_AssignmentExpression_.func_name = u'AssignmentExpression'
                var.put(u'AssignmentExpression', PyJsHoisted_AssignmentExpression_)
                pass
                return var.get(u'AssignmentExpression')
            PyJs_anonymous_111_._set_name(u'anonymous')
            var.put(u'AssignmentExpression', PyJs_anonymous_111_())
            var.get(u'exports').put(u'AssignmentExpression', var.get(u'AssignmentExpression'))
            @Js
            def PyJs_anonymous_112_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'AssignmentPattern'])
                @Js
                def PyJsHoisted_AssignmentPattern_(left, right, this, arguments, var=var):
                    var = Scope({u'this':this, u'right':right, u'arguments':arguments, u'left':left}, var)
                    var.registers([u'right', u'left'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'AssignmentPattern'))
                    var.get(u"this").put(u'left', var.get(u'left'))
                    var.get(u"this").put(u'right', var.get(u'right'))
                PyJsHoisted_AssignmentPattern_.func_name = u'AssignmentPattern'
                var.put(u'AssignmentPattern', PyJsHoisted_AssignmentPattern_)
                pass
                return var.get(u'AssignmentPattern')
            PyJs_anonymous_112_._set_name(u'anonymous')
            var.put(u'AssignmentPattern', PyJs_anonymous_112_())
            var.get(u'exports').put(u'AssignmentPattern', var.get(u'AssignmentPattern'))
            @Js
            def PyJs_anonymous_113_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'AsyncArrowFunctionExpression'])
                @Js
                def PyJsHoisted_AsyncArrowFunctionExpression_(params, body, expression, this, arguments, var=var):
                    var = Scope({u'body':body, u'expression':expression, u'this':this, u'params':params, u'arguments':arguments}, var)
                    var.registers([u'body', u'expression', u'params'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ArrowFunctionExpression'))
                    var.get(u"this").put(u'id', var.get(u"null"))
                    var.get(u"this").put(u'params', var.get(u'params'))
                    var.get(u"this").put(u'body', var.get(u'body'))
                    var.get(u"this").put(u'generator', Js(False))
                    var.get(u"this").put(u'expression', var.get(u'expression'))
                    var.get(u"this").put(u'async', Js(True))
                PyJsHoisted_AsyncArrowFunctionExpression_.func_name = u'AsyncArrowFunctionExpression'
                var.put(u'AsyncArrowFunctionExpression', PyJsHoisted_AsyncArrowFunctionExpression_)
                pass
                return var.get(u'AsyncArrowFunctionExpression')
            PyJs_anonymous_113_._set_name(u'anonymous')
            var.put(u'AsyncArrowFunctionExpression', PyJs_anonymous_113_())
            var.get(u'exports').put(u'AsyncArrowFunctionExpression', var.get(u'AsyncArrowFunctionExpression'))
            @Js
            def PyJs_anonymous_114_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'AsyncFunctionDeclaration'])
                @Js
                def PyJsHoisted_AsyncFunctionDeclaration_(id, params, body, this, arguments, var=var):
                    var = Scope({u'body':body, u'this':this, u'params':params, u'id':id, u'arguments':arguments}, var)
                    var.registers([u'body', u'params', u'id'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'FunctionDeclaration'))
                    var.get(u"this").put(u'id', var.get(u'id'))
                    var.get(u"this").put(u'params', var.get(u'params'))
                    var.get(u"this").put(u'body', var.get(u'body'))
                    var.get(u"this").put(u'generator', Js(False))
                    var.get(u"this").put(u'expression', Js(False))
                    var.get(u"this").put(u'async', Js(True))
                PyJsHoisted_AsyncFunctionDeclaration_.func_name = u'AsyncFunctionDeclaration'
                var.put(u'AsyncFunctionDeclaration', PyJsHoisted_AsyncFunctionDeclaration_)
                pass
                return var.get(u'AsyncFunctionDeclaration')
            PyJs_anonymous_114_._set_name(u'anonymous')
            var.put(u'AsyncFunctionDeclaration', PyJs_anonymous_114_())
            var.get(u'exports').put(u'AsyncFunctionDeclaration', var.get(u'AsyncFunctionDeclaration'))
            @Js
            def PyJs_anonymous_115_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'AsyncFunctionExpression'])
                @Js
                def PyJsHoisted_AsyncFunctionExpression_(id, params, body, this, arguments, var=var):
                    var = Scope({u'body':body, u'this':this, u'params':params, u'id':id, u'arguments':arguments}, var)
                    var.registers([u'body', u'params', u'id'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'FunctionExpression'))
                    var.get(u"this").put(u'id', var.get(u'id'))
                    var.get(u"this").put(u'params', var.get(u'params'))
                    var.get(u"this").put(u'body', var.get(u'body'))
                    var.get(u"this").put(u'generator', Js(False))
                    var.get(u"this").put(u'expression', Js(False))
                    var.get(u"this").put(u'async', Js(True))
                PyJsHoisted_AsyncFunctionExpression_.func_name = u'AsyncFunctionExpression'
                var.put(u'AsyncFunctionExpression', PyJsHoisted_AsyncFunctionExpression_)
                pass
                return var.get(u'AsyncFunctionExpression')
            PyJs_anonymous_115_._set_name(u'anonymous')
            var.put(u'AsyncFunctionExpression', PyJs_anonymous_115_())
            var.get(u'exports').put(u'AsyncFunctionExpression', var.get(u'AsyncFunctionExpression'))
            @Js
            def PyJs_anonymous_116_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'AwaitExpression'])
                @Js
                def PyJsHoisted_AwaitExpression_(argument, this, arguments, var=var):
                    var = Scope({u'this':this, u'argument':argument, u'arguments':arguments}, var)
                    var.registers([u'argument'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'AwaitExpression'))
                    var.get(u"this").put(u'argument', var.get(u'argument'))
                PyJsHoisted_AwaitExpression_.func_name = u'AwaitExpression'
                var.put(u'AwaitExpression', PyJsHoisted_AwaitExpression_)
                pass
                return var.get(u'AwaitExpression')
            PyJs_anonymous_116_._set_name(u'anonymous')
            var.put(u'AwaitExpression', PyJs_anonymous_116_())
            var.get(u'exports').put(u'AwaitExpression', var.get(u'AwaitExpression'))
            @Js
            def PyJs_anonymous_117_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'BinaryExpression'])
                @Js
                def PyJsHoisted_BinaryExpression_(operator, left, right, this, arguments, var=var):
                    var = Scope({u'operator':operator, u'this':this, u'right':right, u'arguments':arguments, u'left':left}, var)
                    var.registers([u'operator', u'right', u'logical', u'left'])
                    var.put(u'logical', (PyJsStrictEq(var.get(u'operator'),Js(u'||')) or PyJsStrictEq(var.get(u'operator'),Js(u'&&'))))
                    var.get(u"this").put(u'type', (var.get(u'syntax_1').get(u'Syntax').get(u'LogicalExpression') if var.get(u'logical') else var.get(u'syntax_1').get(u'Syntax').get(u'BinaryExpression')))
                    var.get(u"this").put(u'operator', var.get(u'operator'))
                    var.get(u"this").put(u'left', var.get(u'left'))
                    var.get(u"this").put(u'right', var.get(u'right'))
                PyJsHoisted_BinaryExpression_.func_name = u'BinaryExpression'
                var.put(u'BinaryExpression', PyJsHoisted_BinaryExpression_)
                pass
                return var.get(u'BinaryExpression')
            PyJs_anonymous_117_._set_name(u'anonymous')
            var.put(u'BinaryExpression', PyJs_anonymous_117_())
            var.get(u'exports').put(u'BinaryExpression', var.get(u'BinaryExpression'))
            @Js
            def PyJs_anonymous_118_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'BlockStatement'])
                @Js
                def PyJsHoisted_BlockStatement_(body, this, arguments, var=var):
                    var = Scope({u'body':body, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'body'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'BlockStatement'))
                    var.get(u"this").put(u'body', var.get(u'body'))
                PyJsHoisted_BlockStatement_.func_name = u'BlockStatement'
                var.put(u'BlockStatement', PyJsHoisted_BlockStatement_)
                pass
                return var.get(u'BlockStatement')
            PyJs_anonymous_118_._set_name(u'anonymous')
            var.put(u'BlockStatement', PyJs_anonymous_118_())
            var.get(u'exports').put(u'BlockStatement', var.get(u'BlockStatement'))
            @Js
            def PyJs_anonymous_119_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'BreakStatement'])
                @Js
                def PyJsHoisted_BreakStatement_(label, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'label':label}, var)
                    var.registers([u'label'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'BreakStatement'))
                    var.get(u"this").put(u'label', var.get(u'label'))
                PyJsHoisted_BreakStatement_.func_name = u'BreakStatement'
                var.put(u'BreakStatement', PyJsHoisted_BreakStatement_)
                pass
                return var.get(u'BreakStatement')
            PyJs_anonymous_119_._set_name(u'anonymous')
            var.put(u'BreakStatement', PyJs_anonymous_119_())
            var.get(u'exports').put(u'BreakStatement', var.get(u'BreakStatement'))
            @Js
            def PyJs_anonymous_120_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'CallExpression'])
                @Js
                def PyJsHoisted_CallExpression_(callee, args, this, arguments, var=var):
                    var = Scope({u'this':this, u'args':args, u'callee':callee, u'arguments':arguments}, var)
                    var.registers([u'args', u'callee'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'CallExpression'))
                    var.get(u"this").put(u'callee', var.get(u'callee'))
                    var.get(u"this").put(u'arguments', var.get(u'args'))
                PyJsHoisted_CallExpression_.func_name = u'CallExpression'
                var.put(u'CallExpression', PyJsHoisted_CallExpression_)
                pass
                return var.get(u'CallExpression')
            PyJs_anonymous_120_._set_name(u'anonymous')
            var.put(u'CallExpression', PyJs_anonymous_120_())
            var.get(u'exports').put(u'CallExpression', var.get(u'CallExpression'))
            @Js
            def PyJs_anonymous_121_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'CatchClause'])
                @Js
                def PyJsHoisted_CatchClause_(param, body, this, arguments, var=var):
                    var = Scope({u'body':body, u'this':this, u'arguments':arguments, u'param':param}, var)
                    var.registers([u'body', u'param'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'CatchClause'))
                    var.get(u"this").put(u'param', var.get(u'param'))
                    var.get(u"this").put(u'body', var.get(u'body'))
                PyJsHoisted_CatchClause_.func_name = u'CatchClause'
                var.put(u'CatchClause', PyJsHoisted_CatchClause_)
                pass
                return var.get(u'CatchClause')
            PyJs_anonymous_121_._set_name(u'anonymous')
            var.put(u'CatchClause', PyJs_anonymous_121_())
            var.get(u'exports').put(u'CatchClause', var.get(u'CatchClause'))
            @Js
            def PyJs_anonymous_122_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ClassBody'])
                @Js
                def PyJsHoisted_ClassBody_(body, this, arguments, var=var):
                    var = Scope({u'body':body, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'body'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ClassBody'))
                    var.get(u"this").put(u'body', var.get(u'body'))
                PyJsHoisted_ClassBody_.func_name = u'ClassBody'
                var.put(u'ClassBody', PyJsHoisted_ClassBody_)
                pass
                return var.get(u'ClassBody')
            PyJs_anonymous_122_._set_name(u'anonymous')
            var.put(u'ClassBody', PyJs_anonymous_122_())
            var.get(u'exports').put(u'ClassBody', var.get(u'ClassBody'))
            @Js
            def PyJs_anonymous_123_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ClassDeclaration'])
                @Js
                def PyJsHoisted_ClassDeclaration_(id, superClass, body, this, arguments, var=var):
                    var = Scope({u'body':body, u'this':this, u'id':id, u'arguments':arguments, u'superClass':superClass}, var)
                    var.registers([u'body', u'id', u'superClass'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ClassDeclaration'))
                    var.get(u"this").put(u'id', var.get(u'id'))
                    var.get(u"this").put(u'superClass', var.get(u'superClass'))
                    var.get(u"this").put(u'body', var.get(u'body'))
                PyJsHoisted_ClassDeclaration_.func_name = u'ClassDeclaration'
                var.put(u'ClassDeclaration', PyJsHoisted_ClassDeclaration_)
                pass
                return var.get(u'ClassDeclaration')
            PyJs_anonymous_123_._set_name(u'anonymous')
            var.put(u'ClassDeclaration', PyJs_anonymous_123_())
            var.get(u'exports').put(u'ClassDeclaration', var.get(u'ClassDeclaration'))
            @Js
            def PyJs_anonymous_124_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ClassExpression'])
                @Js
                def PyJsHoisted_ClassExpression_(id, superClass, body, this, arguments, var=var):
                    var = Scope({u'body':body, u'this':this, u'id':id, u'arguments':arguments, u'superClass':superClass}, var)
                    var.registers([u'body', u'id', u'superClass'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ClassExpression'))
                    var.get(u"this").put(u'id', var.get(u'id'))
                    var.get(u"this").put(u'superClass', var.get(u'superClass'))
                    var.get(u"this").put(u'body', var.get(u'body'))
                PyJsHoisted_ClassExpression_.func_name = u'ClassExpression'
                var.put(u'ClassExpression', PyJsHoisted_ClassExpression_)
                pass
                return var.get(u'ClassExpression')
            PyJs_anonymous_124_._set_name(u'anonymous')
            var.put(u'ClassExpression', PyJs_anonymous_124_())
            var.get(u'exports').put(u'ClassExpression', var.get(u'ClassExpression'))
            @Js
            def PyJs_anonymous_125_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ComputedMemberExpression'])
                @Js
                def PyJsHoisted_ComputedMemberExpression_(object, property, this, arguments, var=var):
                    var = Scope({u'this':this, u'property':property, u'object':object, u'arguments':arguments}, var)
                    var.registers([u'property', u'object'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'MemberExpression'))
                    var.get(u"this").put(u'computed', Js(True))
                    var.get(u"this").put(u'object', var.get(u'object'))
                    var.get(u"this").put(u'property', var.get(u'property'))
                PyJsHoisted_ComputedMemberExpression_.func_name = u'ComputedMemberExpression'
                var.put(u'ComputedMemberExpression', PyJsHoisted_ComputedMemberExpression_)
                pass
                return var.get(u'ComputedMemberExpression')
            PyJs_anonymous_125_._set_name(u'anonymous')
            var.put(u'ComputedMemberExpression', PyJs_anonymous_125_())
            var.get(u'exports').put(u'ComputedMemberExpression', var.get(u'ComputedMemberExpression'))
            @Js
            def PyJs_anonymous_126_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ConditionalExpression'])
                @Js
                def PyJsHoisted_ConditionalExpression_(test, consequent, alternate, this, arguments, var=var):
                    var = Scope({u'test':test, u'this':this, u'alternate':alternate, u'arguments':arguments, u'consequent':consequent}, var)
                    var.registers([u'test', u'alternate', u'consequent'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ConditionalExpression'))
                    var.get(u"this").put(u'test', var.get(u'test'))
                    var.get(u"this").put(u'consequent', var.get(u'consequent'))
                    var.get(u"this").put(u'alternate', var.get(u'alternate'))
                PyJsHoisted_ConditionalExpression_.func_name = u'ConditionalExpression'
                var.put(u'ConditionalExpression', PyJsHoisted_ConditionalExpression_)
                pass
                return var.get(u'ConditionalExpression')
            PyJs_anonymous_126_._set_name(u'anonymous')
            var.put(u'ConditionalExpression', PyJs_anonymous_126_())
            var.get(u'exports').put(u'ConditionalExpression', var.get(u'ConditionalExpression'))
            @Js
            def PyJs_anonymous_127_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ContinueStatement'])
                @Js
                def PyJsHoisted_ContinueStatement_(label, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'label':label}, var)
                    var.registers([u'label'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ContinueStatement'))
                    var.get(u"this").put(u'label', var.get(u'label'))
                PyJsHoisted_ContinueStatement_.func_name = u'ContinueStatement'
                var.put(u'ContinueStatement', PyJsHoisted_ContinueStatement_)
                pass
                return var.get(u'ContinueStatement')
            PyJs_anonymous_127_._set_name(u'anonymous')
            var.put(u'ContinueStatement', PyJs_anonymous_127_())
            var.get(u'exports').put(u'ContinueStatement', var.get(u'ContinueStatement'))
            @Js
            def PyJs_anonymous_128_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'DebuggerStatement'])
                @Js
                def PyJsHoisted_DebuggerStatement_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'DebuggerStatement'))
                PyJsHoisted_DebuggerStatement_.func_name = u'DebuggerStatement'
                var.put(u'DebuggerStatement', PyJsHoisted_DebuggerStatement_)
                pass
                return var.get(u'DebuggerStatement')
            PyJs_anonymous_128_._set_name(u'anonymous')
            var.put(u'DebuggerStatement', PyJs_anonymous_128_())
            var.get(u'exports').put(u'DebuggerStatement', var.get(u'DebuggerStatement'))
            @Js
            def PyJs_anonymous_129_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'Directive'])
                @Js
                def PyJsHoisted_Directive_(expression, directive, this, arguments, var=var):
                    var = Scope({u'this':this, u'expression':expression, u'arguments':arguments, u'directive':directive}, var)
                    var.registers([u'expression', u'directive'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ExpressionStatement'))
                    var.get(u"this").put(u'expression', var.get(u'expression'))
                    var.get(u"this").put(u'directive', var.get(u'directive'))
                PyJsHoisted_Directive_.func_name = u'Directive'
                var.put(u'Directive', PyJsHoisted_Directive_)
                pass
                return var.get(u'Directive')
            PyJs_anonymous_129_._set_name(u'anonymous')
            var.put(u'Directive', PyJs_anonymous_129_())
            var.get(u'exports').put(u'Directive', var.get(u'Directive'))
            @Js
            def PyJs_anonymous_130_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'DoWhileStatement'])
                @Js
                def PyJsHoisted_DoWhileStatement_(body, test, this, arguments, var=var):
                    var = Scope({u'body':body, u'test':test, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'body', u'test'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'DoWhileStatement'))
                    var.get(u"this").put(u'body', var.get(u'body'))
                    var.get(u"this").put(u'test', var.get(u'test'))
                PyJsHoisted_DoWhileStatement_.func_name = u'DoWhileStatement'
                var.put(u'DoWhileStatement', PyJsHoisted_DoWhileStatement_)
                pass
                return var.get(u'DoWhileStatement')
            PyJs_anonymous_130_._set_name(u'anonymous')
            var.put(u'DoWhileStatement', PyJs_anonymous_130_())
            var.get(u'exports').put(u'DoWhileStatement', var.get(u'DoWhileStatement'))
            @Js
            def PyJs_anonymous_131_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'EmptyStatement'])
                @Js
                def PyJsHoisted_EmptyStatement_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'EmptyStatement'))
                PyJsHoisted_EmptyStatement_.func_name = u'EmptyStatement'
                var.put(u'EmptyStatement', PyJsHoisted_EmptyStatement_)
                pass
                return var.get(u'EmptyStatement')
            PyJs_anonymous_131_._set_name(u'anonymous')
            var.put(u'EmptyStatement', PyJs_anonymous_131_())
            var.get(u'exports').put(u'EmptyStatement', var.get(u'EmptyStatement'))
            @Js
            def PyJs_anonymous_132_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ExportAllDeclaration'])
                @Js
                def PyJsHoisted_ExportAllDeclaration_(source, this, arguments, var=var):
                    var = Scope({u'this':this, u'source':source, u'arguments':arguments}, var)
                    var.registers([u'source'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ExportAllDeclaration'))
                    var.get(u"this").put(u'source', var.get(u'source'))
                PyJsHoisted_ExportAllDeclaration_.func_name = u'ExportAllDeclaration'
                var.put(u'ExportAllDeclaration', PyJsHoisted_ExportAllDeclaration_)
                pass
                return var.get(u'ExportAllDeclaration')
            PyJs_anonymous_132_._set_name(u'anonymous')
            var.put(u'ExportAllDeclaration', PyJs_anonymous_132_())
            var.get(u'exports').put(u'ExportAllDeclaration', var.get(u'ExportAllDeclaration'))
            @Js
            def PyJs_anonymous_133_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ExportDefaultDeclaration'])
                @Js
                def PyJsHoisted_ExportDefaultDeclaration_(declaration, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'declaration':declaration}, var)
                    var.registers([u'declaration'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ExportDefaultDeclaration'))
                    var.get(u"this").put(u'declaration', var.get(u'declaration'))
                PyJsHoisted_ExportDefaultDeclaration_.func_name = u'ExportDefaultDeclaration'
                var.put(u'ExportDefaultDeclaration', PyJsHoisted_ExportDefaultDeclaration_)
                pass
                return var.get(u'ExportDefaultDeclaration')
            PyJs_anonymous_133_._set_name(u'anonymous')
            var.put(u'ExportDefaultDeclaration', PyJs_anonymous_133_())
            var.get(u'exports').put(u'ExportDefaultDeclaration', var.get(u'ExportDefaultDeclaration'))
            @Js
            def PyJs_anonymous_134_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ExportNamedDeclaration'])
                @Js
                def PyJsHoisted_ExportNamedDeclaration_(declaration, specifiers, source, this, arguments, var=var):
                    var = Scope({u'this':this, u'specifiers':specifiers, u'source':source, u'arguments':arguments, u'declaration':declaration}, var)
                    var.registers([u'specifiers', u'source', u'declaration'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ExportNamedDeclaration'))
                    var.get(u"this").put(u'declaration', var.get(u'declaration'))
                    var.get(u"this").put(u'specifiers', var.get(u'specifiers'))
                    var.get(u"this").put(u'source', var.get(u'source'))
                PyJsHoisted_ExportNamedDeclaration_.func_name = u'ExportNamedDeclaration'
                var.put(u'ExportNamedDeclaration', PyJsHoisted_ExportNamedDeclaration_)
                pass
                return var.get(u'ExportNamedDeclaration')
            PyJs_anonymous_134_._set_name(u'anonymous')
            var.put(u'ExportNamedDeclaration', PyJs_anonymous_134_())
            var.get(u'exports').put(u'ExportNamedDeclaration', var.get(u'ExportNamedDeclaration'))
            @Js
            def PyJs_anonymous_135_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ExportSpecifier'])
                @Js
                def PyJsHoisted_ExportSpecifier_(local, exported, this, arguments, var=var):
                    var = Scope({u'this':this, u'local':local, u'exported':exported, u'arguments':arguments}, var)
                    var.registers([u'local', u'exported'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ExportSpecifier'))
                    var.get(u"this").put(u'exported', var.get(u'exported'))
                    var.get(u"this").put(u'local', var.get(u'local'))
                PyJsHoisted_ExportSpecifier_.func_name = u'ExportSpecifier'
                var.put(u'ExportSpecifier', PyJsHoisted_ExportSpecifier_)
                pass
                return var.get(u'ExportSpecifier')
            PyJs_anonymous_135_._set_name(u'anonymous')
            var.put(u'ExportSpecifier', PyJs_anonymous_135_())
            var.get(u'exports').put(u'ExportSpecifier', var.get(u'ExportSpecifier'))
            @Js
            def PyJs_anonymous_136_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ExpressionStatement'])
                @Js
                def PyJsHoisted_ExpressionStatement_(expression, this, arguments, var=var):
                    var = Scope({u'this':this, u'expression':expression, u'arguments':arguments}, var)
                    var.registers([u'expression'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ExpressionStatement'))
                    var.get(u"this").put(u'expression', var.get(u'expression'))
                PyJsHoisted_ExpressionStatement_.func_name = u'ExpressionStatement'
                var.put(u'ExpressionStatement', PyJsHoisted_ExpressionStatement_)
                pass
                return var.get(u'ExpressionStatement')
            PyJs_anonymous_136_._set_name(u'anonymous')
            var.put(u'ExpressionStatement', PyJs_anonymous_136_())
            var.get(u'exports').put(u'ExpressionStatement', var.get(u'ExpressionStatement'))
            @Js
            def PyJs_anonymous_137_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ForInStatement'])
                @Js
                def PyJsHoisted_ForInStatement_(left, right, body, this, arguments, var=var):
                    var = Scope({u'body':body, u'this':this, u'right':right, u'arguments':arguments, u'left':left}, var)
                    var.registers([u'body', u'right', u'left'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ForInStatement'))
                    var.get(u"this").put(u'left', var.get(u'left'))
                    var.get(u"this").put(u'right', var.get(u'right'))
                    var.get(u"this").put(u'body', var.get(u'body'))
                    var.get(u"this").put(u'each', Js(False))
                PyJsHoisted_ForInStatement_.func_name = u'ForInStatement'
                var.put(u'ForInStatement', PyJsHoisted_ForInStatement_)
                pass
                return var.get(u'ForInStatement')
            PyJs_anonymous_137_._set_name(u'anonymous')
            var.put(u'ForInStatement', PyJs_anonymous_137_())
            var.get(u'exports').put(u'ForInStatement', var.get(u'ForInStatement'))
            @Js
            def PyJs_anonymous_138_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ForOfStatement'])
                @Js
                def PyJsHoisted_ForOfStatement_(left, right, body, this, arguments, var=var):
                    var = Scope({u'body':body, u'this':this, u'right':right, u'arguments':arguments, u'left':left}, var)
                    var.registers([u'body', u'right', u'left'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ForOfStatement'))
                    var.get(u"this").put(u'left', var.get(u'left'))
                    var.get(u"this").put(u'right', var.get(u'right'))
                    var.get(u"this").put(u'body', var.get(u'body'))
                PyJsHoisted_ForOfStatement_.func_name = u'ForOfStatement'
                var.put(u'ForOfStatement', PyJsHoisted_ForOfStatement_)
                pass
                return var.get(u'ForOfStatement')
            PyJs_anonymous_138_._set_name(u'anonymous')
            var.put(u'ForOfStatement', PyJs_anonymous_138_())
            var.get(u'exports').put(u'ForOfStatement', var.get(u'ForOfStatement'))
            @Js
            def PyJs_anonymous_139_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ForStatement'])
                @Js
                def PyJsHoisted_ForStatement_(init, test, update, body, this, arguments, var=var):
                    var = Scope({u'body':body, u'this':this, u'init':init, u'arguments':arguments, u'test':test, u'update':update}, var)
                    var.registers([u'test', u'body', u'init', u'update'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ForStatement'))
                    var.get(u"this").put(u'init', var.get(u'init'))
                    var.get(u"this").put(u'test', var.get(u'test'))
                    var.get(u"this").put(u'update', var.get(u'update'))
                    var.get(u"this").put(u'body', var.get(u'body'))
                PyJsHoisted_ForStatement_.func_name = u'ForStatement'
                var.put(u'ForStatement', PyJsHoisted_ForStatement_)
                pass
                return var.get(u'ForStatement')
            PyJs_anonymous_139_._set_name(u'anonymous')
            var.put(u'ForStatement', PyJs_anonymous_139_())
            var.get(u'exports').put(u'ForStatement', var.get(u'ForStatement'))
            @Js
            def PyJs_anonymous_140_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'FunctionDeclaration'])
                @Js
                def PyJsHoisted_FunctionDeclaration_(id, params, body, generator, this, arguments, var=var):
                    var = Scope({u'body':body, u'params':params, u'arguments':arguments, u'generator':generator, u'this':this, u'id':id}, var)
                    var.registers([u'body', u'params', u'id', u'generator'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'FunctionDeclaration'))
                    var.get(u"this").put(u'id', var.get(u'id'))
                    var.get(u"this").put(u'params', var.get(u'params'))
                    var.get(u"this").put(u'body', var.get(u'body'))
                    var.get(u"this").put(u'generator', var.get(u'generator'))
                    var.get(u"this").put(u'expression', Js(False))
                    var.get(u"this").put(u'async', Js(False))
                PyJsHoisted_FunctionDeclaration_.func_name = u'FunctionDeclaration'
                var.put(u'FunctionDeclaration', PyJsHoisted_FunctionDeclaration_)
                pass
                return var.get(u'FunctionDeclaration')
            PyJs_anonymous_140_._set_name(u'anonymous')
            var.put(u'FunctionDeclaration', PyJs_anonymous_140_())
            var.get(u'exports').put(u'FunctionDeclaration', var.get(u'FunctionDeclaration'))
            @Js
            def PyJs_anonymous_141_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'FunctionExpression'])
                @Js
                def PyJsHoisted_FunctionExpression_(id, params, body, generator, this, arguments, var=var):
                    var = Scope({u'body':body, u'params':params, u'arguments':arguments, u'generator':generator, u'this':this, u'id':id}, var)
                    var.registers([u'body', u'params', u'id', u'generator'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'FunctionExpression'))
                    var.get(u"this").put(u'id', var.get(u'id'))
                    var.get(u"this").put(u'params', var.get(u'params'))
                    var.get(u"this").put(u'body', var.get(u'body'))
                    var.get(u"this").put(u'generator', var.get(u'generator'))
                    var.get(u"this").put(u'expression', Js(False))
                    var.get(u"this").put(u'async', Js(False))
                PyJsHoisted_FunctionExpression_.func_name = u'FunctionExpression'
                var.put(u'FunctionExpression', PyJsHoisted_FunctionExpression_)
                pass
                return var.get(u'FunctionExpression')
            PyJs_anonymous_141_._set_name(u'anonymous')
            var.put(u'FunctionExpression', PyJs_anonymous_141_())
            var.get(u'exports').put(u'FunctionExpression', var.get(u'FunctionExpression'))
            @Js
            def PyJs_anonymous_142_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'Identifier'])
                @Js
                def PyJsHoisted_Identifier_(name, this, arguments, var=var):
                    var = Scope({u'this':this, u'name':name, u'arguments':arguments}, var)
                    var.registers([u'name'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'Identifier'))
                    var.get(u"this").put(u'name', var.get(u'name'))
                PyJsHoisted_Identifier_.func_name = u'Identifier'
                var.put(u'Identifier', PyJsHoisted_Identifier_)
                pass
                return var.get(u'Identifier')
            PyJs_anonymous_142_._set_name(u'anonymous')
            var.put(u'Identifier', PyJs_anonymous_142_())
            var.get(u'exports').put(u'Identifier', var.get(u'Identifier'))
            @Js
            def PyJs_anonymous_143_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'IfStatement'])
                @Js
                def PyJsHoisted_IfStatement_(test, consequent, alternate, this, arguments, var=var):
                    var = Scope({u'test':test, u'this':this, u'alternate':alternate, u'arguments':arguments, u'consequent':consequent}, var)
                    var.registers([u'test', u'alternate', u'consequent'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'IfStatement'))
                    var.get(u"this").put(u'test', var.get(u'test'))
                    var.get(u"this").put(u'consequent', var.get(u'consequent'))
                    var.get(u"this").put(u'alternate', var.get(u'alternate'))
                PyJsHoisted_IfStatement_.func_name = u'IfStatement'
                var.put(u'IfStatement', PyJsHoisted_IfStatement_)
                pass
                return var.get(u'IfStatement')
            PyJs_anonymous_143_._set_name(u'anonymous')
            var.put(u'IfStatement', PyJs_anonymous_143_())
            var.get(u'exports').put(u'IfStatement', var.get(u'IfStatement'))
            @Js
            def PyJs_anonymous_144_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ImportDeclaration'])
                @Js
                def PyJsHoisted_ImportDeclaration_(specifiers, source, this, arguments, var=var):
                    var = Scope({u'this':this, u'specifiers':specifiers, u'arguments':arguments, u'source':source}, var)
                    var.registers([u'specifiers', u'source'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ImportDeclaration'))
                    var.get(u"this").put(u'specifiers', var.get(u'specifiers'))
                    var.get(u"this").put(u'source', var.get(u'source'))
                PyJsHoisted_ImportDeclaration_.func_name = u'ImportDeclaration'
                var.put(u'ImportDeclaration', PyJsHoisted_ImportDeclaration_)
                pass
                return var.get(u'ImportDeclaration')
            PyJs_anonymous_144_._set_name(u'anonymous')
            var.put(u'ImportDeclaration', PyJs_anonymous_144_())
            var.get(u'exports').put(u'ImportDeclaration', var.get(u'ImportDeclaration'))
            @Js
            def PyJs_anonymous_145_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ImportDefaultSpecifier'])
                @Js
                def PyJsHoisted_ImportDefaultSpecifier_(local, this, arguments, var=var):
                    var = Scope({u'this':this, u'local':local, u'arguments':arguments}, var)
                    var.registers([u'local'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ImportDefaultSpecifier'))
                    var.get(u"this").put(u'local', var.get(u'local'))
                PyJsHoisted_ImportDefaultSpecifier_.func_name = u'ImportDefaultSpecifier'
                var.put(u'ImportDefaultSpecifier', PyJsHoisted_ImportDefaultSpecifier_)
                pass
                return var.get(u'ImportDefaultSpecifier')
            PyJs_anonymous_145_._set_name(u'anonymous')
            var.put(u'ImportDefaultSpecifier', PyJs_anonymous_145_())
            var.get(u'exports').put(u'ImportDefaultSpecifier', var.get(u'ImportDefaultSpecifier'))
            @Js
            def PyJs_anonymous_146_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ImportNamespaceSpecifier'])
                @Js
                def PyJsHoisted_ImportNamespaceSpecifier_(local, this, arguments, var=var):
                    var = Scope({u'this':this, u'local':local, u'arguments':arguments}, var)
                    var.registers([u'local'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ImportNamespaceSpecifier'))
                    var.get(u"this").put(u'local', var.get(u'local'))
                PyJsHoisted_ImportNamespaceSpecifier_.func_name = u'ImportNamespaceSpecifier'
                var.put(u'ImportNamespaceSpecifier', PyJsHoisted_ImportNamespaceSpecifier_)
                pass
                return var.get(u'ImportNamespaceSpecifier')
            PyJs_anonymous_146_._set_name(u'anonymous')
            var.put(u'ImportNamespaceSpecifier', PyJs_anonymous_146_())
            var.get(u'exports').put(u'ImportNamespaceSpecifier', var.get(u'ImportNamespaceSpecifier'))
            @Js
            def PyJs_anonymous_147_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ImportSpecifier'])
                @Js
                def PyJsHoisted_ImportSpecifier_(local, imported, this, arguments, var=var):
                    var = Scope({u'this':this, u'imported':imported, u'local':local, u'arguments':arguments}, var)
                    var.registers([u'imported', u'local'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ImportSpecifier'))
                    var.get(u"this").put(u'local', var.get(u'local'))
                    var.get(u"this").put(u'imported', var.get(u'imported'))
                PyJsHoisted_ImportSpecifier_.func_name = u'ImportSpecifier'
                var.put(u'ImportSpecifier', PyJsHoisted_ImportSpecifier_)
                pass
                return var.get(u'ImportSpecifier')
            PyJs_anonymous_147_._set_name(u'anonymous')
            var.put(u'ImportSpecifier', PyJs_anonymous_147_())
            var.get(u'exports').put(u'ImportSpecifier', var.get(u'ImportSpecifier'))
            @Js
            def PyJs_anonymous_148_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'LabeledStatement'])
                @Js
                def PyJsHoisted_LabeledStatement_(label, body, this, arguments, var=var):
                    var = Scope({u'body':body, u'this':this, u'arguments':arguments, u'label':label}, var)
                    var.registers([u'body', u'label'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'LabeledStatement'))
                    var.get(u"this").put(u'label', var.get(u'label'))
                    var.get(u"this").put(u'body', var.get(u'body'))
                PyJsHoisted_LabeledStatement_.func_name = u'LabeledStatement'
                var.put(u'LabeledStatement', PyJsHoisted_LabeledStatement_)
                pass
                return var.get(u'LabeledStatement')
            PyJs_anonymous_148_._set_name(u'anonymous')
            var.put(u'LabeledStatement', PyJs_anonymous_148_())
            var.get(u'exports').put(u'LabeledStatement', var.get(u'LabeledStatement'))
            @Js
            def PyJs_anonymous_149_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'Literal'])
                @Js
                def PyJsHoisted_Literal_(value, raw, this, arguments, var=var):
                    var = Scope({u'this':this, u'raw':raw, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'raw', u'value'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'Literal'))
                    var.get(u"this").put(u'value', var.get(u'value'))
                    var.get(u"this").put(u'raw', var.get(u'raw'))
                PyJsHoisted_Literal_.func_name = u'Literal'
                var.put(u'Literal', PyJsHoisted_Literal_)
                pass
                return var.get(u'Literal')
            PyJs_anonymous_149_._set_name(u'anonymous')
            var.put(u'Literal', PyJs_anonymous_149_())
            var.get(u'exports').put(u'Literal', var.get(u'Literal'))
            @Js
            def PyJs_anonymous_150_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'MetaProperty'])
                @Js
                def PyJsHoisted_MetaProperty_(meta, property, this, arguments, var=var):
                    var = Scope({u'this':this, u'property':property, u'meta':meta, u'arguments':arguments}, var)
                    var.registers([u'property', u'meta'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'MetaProperty'))
                    var.get(u"this").put(u'meta', var.get(u'meta'))
                    var.get(u"this").put(u'property', var.get(u'property'))
                PyJsHoisted_MetaProperty_.func_name = u'MetaProperty'
                var.put(u'MetaProperty', PyJsHoisted_MetaProperty_)
                pass
                return var.get(u'MetaProperty')
            PyJs_anonymous_150_._set_name(u'anonymous')
            var.put(u'MetaProperty', PyJs_anonymous_150_())
            var.get(u'exports').put(u'MetaProperty', var.get(u'MetaProperty'))
            @Js
            def PyJs_anonymous_151_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'MethodDefinition'])
                @Js
                def PyJsHoisted_MethodDefinition_(key, computed, value, kind, isStatic, this, arguments, var=var):
                    var = Scope({u'kind':kind, u'computed':computed, u'key':key, u'this':this, u'isStatic':isStatic, u'value':value, u'arguments':arguments}, var)
                    var.registers([u'value', u'kind', u'isStatic', u'computed', u'key'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'MethodDefinition'))
                    var.get(u"this").put(u'key', var.get(u'key'))
                    var.get(u"this").put(u'computed', var.get(u'computed'))
                    var.get(u"this").put(u'value', var.get(u'value'))
                    var.get(u"this").put(u'kind', var.get(u'kind'))
                    var.get(u"this").put(u'static', var.get(u'isStatic'))
                PyJsHoisted_MethodDefinition_.func_name = u'MethodDefinition'
                var.put(u'MethodDefinition', PyJsHoisted_MethodDefinition_)
                pass
                return var.get(u'MethodDefinition')
            PyJs_anonymous_151_._set_name(u'anonymous')
            var.put(u'MethodDefinition', PyJs_anonymous_151_())
            var.get(u'exports').put(u'MethodDefinition', var.get(u'MethodDefinition'))
            @Js
            def PyJs_anonymous_152_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'Module'])
                @Js
                def PyJsHoisted_Module_(body, this, arguments, var=var):
                    var = Scope({u'body':body, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'body'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'Program'))
                    var.get(u"this").put(u'body', var.get(u'body'))
                    var.get(u"this").put(u'sourceType', Js(u'module'))
                PyJsHoisted_Module_.func_name = u'Module'
                var.put(u'Module', PyJsHoisted_Module_)
                pass
                return var.get(u'Module')
            PyJs_anonymous_152_._set_name(u'anonymous')
            var.put(u'Module', PyJs_anonymous_152_())
            var.get(u'exports').put(u'Module', var.get(u'Module'))
            @Js
            def PyJs_anonymous_153_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'NewExpression'])
                @Js
                def PyJsHoisted_NewExpression_(callee, args, this, arguments, var=var):
                    var = Scope({u'this':this, u'args':args, u'callee':callee, u'arguments':arguments}, var)
                    var.registers([u'args', u'callee'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'NewExpression'))
                    var.get(u"this").put(u'callee', var.get(u'callee'))
                    var.get(u"this").put(u'arguments', var.get(u'args'))
                PyJsHoisted_NewExpression_.func_name = u'NewExpression'
                var.put(u'NewExpression', PyJsHoisted_NewExpression_)
                pass
                return var.get(u'NewExpression')
            PyJs_anonymous_153_._set_name(u'anonymous')
            var.put(u'NewExpression', PyJs_anonymous_153_())
            var.get(u'exports').put(u'NewExpression', var.get(u'NewExpression'))
            @Js
            def PyJs_anonymous_154_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ObjectExpression'])
                @Js
                def PyJsHoisted_ObjectExpression_(properties, this, arguments, var=var):
                    var = Scope({u'this':this, u'properties':properties, u'arguments':arguments}, var)
                    var.registers([u'properties'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ObjectExpression'))
                    var.get(u"this").put(u'properties', var.get(u'properties'))
                PyJsHoisted_ObjectExpression_.func_name = u'ObjectExpression'
                var.put(u'ObjectExpression', PyJsHoisted_ObjectExpression_)
                pass
                return var.get(u'ObjectExpression')
            PyJs_anonymous_154_._set_name(u'anonymous')
            var.put(u'ObjectExpression', PyJs_anonymous_154_())
            var.get(u'exports').put(u'ObjectExpression', var.get(u'ObjectExpression'))
            @Js
            def PyJs_anonymous_155_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ObjectPattern'])
                @Js
                def PyJsHoisted_ObjectPattern_(properties, this, arguments, var=var):
                    var = Scope({u'this':this, u'properties':properties, u'arguments':arguments}, var)
                    var.registers([u'properties'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ObjectPattern'))
                    var.get(u"this").put(u'properties', var.get(u'properties'))
                PyJsHoisted_ObjectPattern_.func_name = u'ObjectPattern'
                var.put(u'ObjectPattern', PyJsHoisted_ObjectPattern_)
                pass
                return var.get(u'ObjectPattern')
            PyJs_anonymous_155_._set_name(u'anonymous')
            var.put(u'ObjectPattern', PyJs_anonymous_155_())
            var.get(u'exports').put(u'ObjectPattern', var.get(u'ObjectPattern'))
            @Js
            def PyJs_anonymous_156_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'Property'])
                @Js
                def PyJsHoisted_Property_(kind, key, computed, value, method, shorthand, this, arguments, var=var):
                    var = Scope({u'kind':kind, u'shorthand':shorthand, u'computed':computed, u'this':this, u'value':value, u'arguments':arguments, u'key':key, u'method':method}, var)
                    var.registers([u'kind', u'shorthand', u'computed', u'value', u'key', u'method'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'Property'))
                    var.get(u"this").put(u'key', var.get(u'key'))
                    var.get(u"this").put(u'computed', var.get(u'computed'))
                    var.get(u"this").put(u'value', var.get(u'value'))
                    var.get(u"this").put(u'kind', var.get(u'kind'))
                    var.get(u"this").put(u'method', var.get(u'method'))
                    var.get(u"this").put(u'shorthand', var.get(u'shorthand'))
                PyJsHoisted_Property_.func_name = u'Property'
                var.put(u'Property', PyJsHoisted_Property_)
                pass
                return var.get(u'Property')
            PyJs_anonymous_156_._set_name(u'anonymous')
            var.put(u'Property', PyJs_anonymous_156_())
            var.get(u'exports').put(u'Property', var.get(u'Property'))
            @Js
            def PyJs_anonymous_157_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'RegexLiteral'])
                @Js
                def PyJsHoisted_RegexLiteral_(value, raw, pattern, flags, this, arguments, var=var):
                    var = Scope({u'raw':raw, u'flags':flags, u'arguments':arguments, u'this':this, u'pattern':pattern, u'value':value}, var)
                    var.registers([u'raw', u'flags', u'value', u'pattern'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'Literal'))
                    var.get(u"this").put(u'value', var.get(u'value'))
                    var.get(u"this").put(u'raw', var.get(u'raw'))
                    PyJs_Object_158_ = Js({u'pattern':var.get(u'pattern'),u'flags':var.get(u'flags')})
                    var.get(u"this").put(u'regex', PyJs_Object_158_)
                PyJsHoisted_RegexLiteral_.func_name = u'RegexLiteral'
                var.put(u'RegexLiteral', PyJsHoisted_RegexLiteral_)
                pass
                return var.get(u'RegexLiteral')
            PyJs_anonymous_157_._set_name(u'anonymous')
            var.put(u'RegexLiteral', PyJs_anonymous_157_())
            var.get(u'exports').put(u'RegexLiteral', var.get(u'RegexLiteral'))
            @Js
            def PyJs_anonymous_159_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'RestElement'])
                @Js
                def PyJsHoisted_RestElement_(argument, this, arguments, var=var):
                    var = Scope({u'this':this, u'argument':argument, u'arguments':arguments}, var)
                    var.registers([u'argument'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'RestElement'))
                    var.get(u"this").put(u'argument', var.get(u'argument'))
                PyJsHoisted_RestElement_.func_name = u'RestElement'
                var.put(u'RestElement', PyJsHoisted_RestElement_)
                pass
                return var.get(u'RestElement')
            PyJs_anonymous_159_._set_name(u'anonymous')
            var.put(u'RestElement', PyJs_anonymous_159_())
            var.get(u'exports').put(u'RestElement', var.get(u'RestElement'))
            @Js
            def PyJs_anonymous_160_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ReturnStatement'])
                @Js
                def PyJsHoisted_ReturnStatement_(argument, this, arguments, var=var):
                    var = Scope({u'this':this, u'argument':argument, u'arguments':arguments}, var)
                    var.registers([u'argument'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ReturnStatement'))
                    var.get(u"this").put(u'argument', var.get(u'argument'))
                PyJsHoisted_ReturnStatement_.func_name = u'ReturnStatement'
                var.put(u'ReturnStatement', PyJsHoisted_ReturnStatement_)
                pass
                return var.get(u'ReturnStatement')
            PyJs_anonymous_160_._set_name(u'anonymous')
            var.put(u'ReturnStatement', PyJs_anonymous_160_())
            var.get(u'exports').put(u'ReturnStatement', var.get(u'ReturnStatement'))
            @Js
            def PyJs_anonymous_161_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'Script'])
                @Js
                def PyJsHoisted_Script_(body, this, arguments, var=var):
                    var = Scope({u'body':body, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'body'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'Program'))
                    var.get(u"this").put(u'body', var.get(u'body'))
                    var.get(u"this").put(u'sourceType', Js(u'script'))
                PyJsHoisted_Script_.func_name = u'Script'
                var.put(u'Script', PyJsHoisted_Script_)
                pass
                return var.get(u'Script')
            PyJs_anonymous_161_._set_name(u'anonymous')
            var.put(u'Script', PyJs_anonymous_161_())
            var.get(u'exports').put(u'Script', var.get(u'Script'))
            @Js
            def PyJs_anonymous_162_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'SequenceExpression'])
                @Js
                def PyJsHoisted_SequenceExpression_(expressions, this, arguments, var=var):
                    var = Scope({u'this':this, u'expressions':expressions, u'arguments':arguments}, var)
                    var.registers([u'expressions'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'SequenceExpression'))
                    var.get(u"this").put(u'expressions', var.get(u'expressions'))
                PyJsHoisted_SequenceExpression_.func_name = u'SequenceExpression'
                var.put(u'SequenceExpression', PyJsHoisted_SequenceExpression_)
                pass
                return var.get(u'SequenceExpression')
            PyJs_anonymous_162_._set_name(u'anonymous')
            var.put(u'SequenceExpression', PyJs_anonymous_162_())
            var.get(u'exports').put(u'SequenceExpression', var.get(u'SequenceExpression'))
            @Js
            def PyJs_anonymous_163_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'SpreadElement'])
                @Js
                def PyJsHoisted_SpreadElement_(argument, this, arguments, var=var):
                    var = Scope({u'this':this, u'argument':argument, u'arguments':arguments}, var)
                    var.registers([u'argument'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'SpreadElement'))
                    var.get(u"this").put(u'argument', var.get(u'argument'))
                PyJsHoisted_SpreadElement_.func_name = u'SpreadElement'
                var.put(u'SpreadElement', PyJsHoisted_SpreadElement_)
                pass
                return var.get(u'SpreadElement')
            PyJs_anonymous_163_._set_name(u'anonymous')
            var.put(u'SpreadElement', PyJs_anonymous_163_())
            var.get(u'exports').put(u'SpreadElement', var.get(u'SpreadElement'))
            @Js
            def PyJs_anonymous_164_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'StaticMemberExpression'])
                @Js
                def PyJsHoisted_StaticMemberExpression_(object, property, this, arguments, var=var):
                    var = Scope({u'this':this, u'property':property, u'object':object, u'arguments':arguments}, var)
                    var.registers([u'property', u'object'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'MemberExpression'))
                    var.get(u"this").put(u'computed', Js(False))
                    var.get(u"this").put(u'object', var.get(u'object'))
                    var.get(u"this").put(u'property', var.get(u'property'))
                PyJsHoisted_StaticMemberExpression_.func_name = u'StaticMemberExpression'
                var.put(u'StaticMemberExpression', PyJsHoisted_StaticMemberExpression_)
                pass
                return var.get(u'StaticMemberExpression')
            PyJs_anonymous_164_._set_name(u'anonymous')
            var.put(u'StaticMemberExpression', PyJs_anonymous_164_())
            var.get(u'exports').put(u'StaticMemberExpression', var.get(u'StaticMemberExpression'))
            @Js
            def PyJs_anonymous_165_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'Super'])
                @Js
                def PyJsHoisted_Super_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'Super'))
                PyJsHoisted_Super_.func_name = u'Super'
                var.put(u'Super', PyJsHoisted_Super_)
                pass
                return var.get(u'Super')
            PyJs_anonymous_165_._set_name(u'anonymous')
            var.put(u'Super', PyJs_anonymous_165_())
            var.get(u'exports').put(u'Super', var.get(u'Super'))
            @Js
            def PyJs_anonymous_166_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'SwitchCase'])
                @Js
                def PyJsHoisted_SwitchCase_(test, consequent, this, arguments, var=var):
                    var = Scope({u'test':test, u'this':this, u'arguments':arguments, u'consequent':consequent}, var)
                    var.registers([u'test', u'consequent'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'SwitchCase'))
                    var.get(u"this").put(u'test', var.get(u'test'))
                    var.get(u"this").put(u'consequent', var.get(u'consequent'))
                PyJsHoisted_SwitchCase_.func_name = u'SwitchCase'
                var.put(u'SwitchCase', PyJsHoisted_SwitchCase_)
                pass
                return var.get(u'SwitchCase')
            PyJs_anonymous_166_._set_name(u'anonymous')
            var.put(u'SwitchCase', PyJs_anonymous_166_())
            var.get(u'exports').put(u'SwitchCase', var.get(u'SwitchCase'))
            @Js
            def PyJs_anonymous_167_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'SwitchStatement'])
                @Js
                def PyJsHoisted_SwitchStatement_(discriminant, cases, this, arguments, var=var):
                    var = Scope({u'this':this, u'cases':cases, u'arguments':arguments, u'discriminant':discriminant}, var)
                    var.registers([u'cases', u'discriminant'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'SwitchStatement'))
                    var.get(u"this").put(u'discriminant', var.get(u'discriminant'))
                    var.get(u"this").put(u'cases', var.get(u'cases'))
                PyJsHoisted_SwitchStatement_.func_name = u'SwitchStatement'
                var.put(u'SwitchStatement', PyJsHoisted_SwitchStatement_)
                pass
                return var.get(u'SwitchStatement')
            PyJs_anonymous_167_._set_name(u'anonymous')
            var.put(u'SwitchStatement', PyJs_anonymous_167_())
            var.get(u'exports').put(u'SwitchStatement', var.get(u'SwitchStatement'))
            @Js
            def PyJs_anonymous_168_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'TaggedTemplateExpression'])
                @Js
                def PyJsHoisted_TaggedTemplateExpression_(tag, quasi, this, arguments, var=var):
                    var = Scope({u'this':this, u'quasi':quasi, u'tag':tag, u'arguments':arguments}, var)
                    var.registers([u'quasi', u'tag'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'TaggedTemplateExpression'))
                    var.get(u"this").put(u'tag', var.get(u'tag'))
                    var.get(u"this").put(u'quasi', var.get(u'quasi'))
                PyJsHoisted_TaggedTemplateExpression_.func_name = u'TaggedTemplateExpression'
                var.put(u'TaggedTemplateExpression', PyJsHoisted_TaggedTemplateExpression_)
                pass
                return var.get(u'TaggedTemplateExpression')
            PyJs_anonymous_168_._set_name(u'anonymous')
            var.put(u'TaggedTemplateExpression', PyJs_anonymous_168_())
            var.get(u'exports').put(u'TaggedTemplateExpression', var.get(u'TaggedTemplateExpression'))
            @Js
            def PyJs_anonymous_169_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'TemplateElement'])
                @Js
                def PyJsHoisted_TemplateElement_(value, tail, this, arguments, var=var):
                    var = Scope({u'this':this, u'tail':tail, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'tail', u'value'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'TemplateElement'))
                    var.get(u"this").put(u'value', var.get(u'value'))
                    var.get(u"this").put(u'tail', var.get(u'tail'))
                PyJsHoisted_TemplateElement_.func_name = u'TemplateElement'
                var.put(u'TemplateElement', PyJsHoisted_TemplateElement_)
                pass
                return var.get(u'TemplateElement')
            PyJs_anonymous_169_._set_name(u'anonymous')
            var.put(u'TemplateElement', PyJs_anonymous_169_())
            var.get(u'exports').put(u'TemplateElement', var.get(u'TemplateElement'))
            @Js
            def PyJs_anonymous_170_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'TemplateLiteral'])
                @Js
                def PyJsHoisted_TemplateLiteral_(quasis, expressions, this, arguments, var=var):
                    var = Scope({u'quasis':quasis, u'this':this, u'expressions':expressions, u'arguments':arguments}, var)
                    var.registers([u'quasis', u'expressions'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'TemplateLiteral'))
                    var.get(u"this").put(u'quasis', var.get(u'quasis'))
                    var.get(u"this").put(u'expressions', var.get(u'expressions'))
                PyJsHoisted_TemplateLiteral_.func_name = u'TemplateLiteral'
                var.put(u'TemplateLiteral', PyJsHoisted_TemplateLiteral_)
                pass
                return var.get(u'TemplateLiteral')
            PyJs_anonymous_170_._set_name(u'anonymous')
            var.put(u'TemplateLiteral', PyJs_anonymous_170_())
            var.get(u'exports').put(u'TemplateLiteral', var.get(u'TemplateLiteral'))
            @Js
            def PyJs_anonymous_171_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ThisExpression'])
                @Js
                def PyJsHoisted_ThisExpression_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ThisExpression'))
                PyJsHoisted_ThisExpression_.func_name = u'ThisExpression'
                var.put(u'ThisExpression', PyJsHoisted_ThisExpression_)
                pass
                return var.get(u'ThisExpression')
            PyJs_anonymous_171_._set_name(u'anonymous')
            var.put(u'ThisExpression', PyJs_anonymous_171_())
            var.get(u'exports').put(u'ThisExpression', var.get(u'ThisExpression'))
            @Js
            def PyJs_anonymous_172_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ThrowStatement'])
                @Js
                def PyJsHoisted_ThrowStatement_(argument, this, arguments, var=var):
                    var = Scope({u'this':this, u'argument':argument, u'arguments':arguments}, var)
                    var.registers([u'argument'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ThrowStatement'))
                    var.get(u"this").put(u'argument', var.get(u'argument'))
                PyJsHoisted_ThrowStatement_.func_name = u'ThrowStatement'
                var.put(u'ThrowStatement', PyJsHoisted_ThrowStatement_)
                pass
                return var.get(u'ThrowStatement')
            PyJs_anonymous_172_._set_name(u'anonymous')
            var.put(u'ThrowStatement', PyJs_anonymous_172_())
            var.get(u'exports').put(u'ThrowStatement', var.get(u'ThrowStatement'))
            @Js
            def PyJs_anonymous_173_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'TryStatement'])
                @Js
                def PyJsHoisted_TryStatement_(block, handler, finalizer, this, arguments, var=var):
                    var = Scope({u'this':this, u'finalizer':finalizer, u'handler':handler, u'arguments':arguments, u'block':block}, var)
                    var.registers([u'finalizer', u'handler', u'block'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'TryStatement'))
                    var.get(u"this").put(u'block', var.get(u'block'))
                    var.get(u"this").put(u'handler', var.get(u'handler'))
                    var.get(u"this").put(u'finalizer', var.get(u'finalizer'))
                PyJsHoisted_TryStatement_.func_name = u'TryStatement'
                var.put(u'TryStatement', PyJsHoisted_TryStatement_)
                pass
                return var.get(u'TryStatement')
            PyJs_anonymous_173_._set_name(u'anonymous')
            var.put(u'TryStatement', PyJs_anonymous_173_())
            var.get(u'exports').put(u'TryStatement', var.get(u'TryStatement'))
            @Js
            def PyJs_anonymous_174_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'UnaryExpression'])
                @Js
                def PyJsHoisted_UnaryExpression_(operator, argument, this, arguments, var=var):
                    var = Scope({u'operator':operator, u'this':this, u'argument':argument, u'arguments':arguments}, var)
                    var.registers([u'operator', u'argument'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'UnaryExpression'))
                    var.get(u"this").put(u'operator', var.get(u'operator'))
                    var.get(u"this").put(u'argument', var.get(u'argument'))
                    var.get(u"this").put(u'prefix', Js(True))
                PyJsHoisted_UnaryExpression_.func_name = u'UnaryExpression'
                var.put(u'UnaryExpression', PyJsHoisted_UnaryExpression_)
                pass
                return var.get(u'UnaryExpression')
            PyJs_anonymous_174_._set_name(u'anonymous')
            var.put(u'UnaryExpression', PyJs_anonymous_174_())
            var.get(u'exports').put(u'UnaryExpression', var.get(u'UnaryExpression'))
            @Js
            def PyJs_anonymous_175_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'UpdateExpression'])
                @Js
                def PyJsHoisted_UpdateExpression_(operator, argument, prefix, this, arguments, var=var):
                    var = Scope({u'operator':operator, u'this':this, u'prefix':prefix, u'argument':argument, u'arguments':arguments}, var)
                    var.registers([u'operator', u'prefix', u'argument'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'UpdateExpression'))
                    var.get(u"this").put(u'operator', var.get(u'operator'))
                    var.get(u"this").put(u'argument', var.get(u'argument'))
                    var.get(u"this").put(u'prefix', var.get(u'prefix'))
                PyJsHoisted_UpdateExpression_.func_name = u'UpdateExpression'
                var.put(u'UpdateExpression', PyJsHoisted_UpdateExpression_)
                pass
                return var.get(u'UpdateExpression')
            PyJs_anonymous_175_._set_name(u'anonymous')
            var.put(u'UpdateExpression', PyJs_anonymous_175_())
            var.get(u'exports').put(u'UpdateExpression', var.get(u'UpdateExpression'))
            @Js
            def PyJs_anonymous_176_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'VariableDeclaration'])
                @Js
                def PyJsHoisted_VariableDeclaration_(declarations, kind, this, arguments, var=var):
                    var = Scope({u'this':this, u'kind':kind, u'declarations':declarations, u'arguments':arguments}, var)
                    var.registers([u'kind', u'declarations'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'VariableDeclaration'))
                    var.get(u"this").put(u'declarations', var.get(u'declarations'))
                    var.get(u"this").put(u'kind', var.get(u'kind'))
                PyJsHoisted_VariableDeclaration_.func_name = u'VariableDeclaration'
                var.put(u'VariableDeclaration', PyJsHoisted_VariableDeclaration_)
                pass
                return var.get(u'VariableDeclaration')
            PyJs_anonymous_176_._set_name(u'anonymous')
            var.put(u'VariableDeclaration', PyJs_anonymous_176_())
            var.get(u'exports').put(u'VariableDeclaration', var.get(u'VariableDeclaration'))
            @Js
            def PyJs_anonymous_177_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'VariableDeclarator'])
                @Js
                def PyJsHoisted_VariableDeclarator_(id, init, this, arguments, var=var):
                    var = Scope({u'this':this, u'init':init, u'id':id, u'arguments':arguments}, var)
                    var.registers([u'init', u'id'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'VariableDeclarator'))
                    var.get(u"this").put(u'id', var.get(u'id'))
                    var.get(u"this").put(u'init', var.get(u'init'))
                PyJsHoisted_VariableDeclarator_.func_name = u'VariableDeclarator'
                var.put(u'VariableDeclarator', PyJsHoisted_VariableDeclarator_)
                pass
                return var.get(u'VariableDeclarator')
            PyJs_anonymous_177_._set_name(u'anonymous')
            var.put(u'VariableDeclarator', PyJs_anonymous_177_())
            var.get(u'exports').put(u'VariableDeclarator', var.get(u'VariableDeclarator'))
            @Js
            def PyJs_anonymous_178_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'WhileStatement'])
                @Js
                def PyJsHoisted_WhileStatement_(test, body, this, arguments, var=var):
                    var = Scope({u'test':test, u'body':body, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'test', u'body'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'WhileStatement'))
                    var.get(u"this").put(u'test', var.get(u'test'))
                    var.get(u"this").put(u'body', var.get(u'body'))
                PyJsHoisted_WhileStatement_.func_name = u'WhileStatement'
                var.put(u'WhileStatement', PyJsHoisted_WhileStatement_)
                pass
                return var.get(u'WhileStatement')
            PyJs_anonymous_178_._set_name(u'anonymous')
            var.put(u'WhileStatement', PyJs_anonymous_178_())
            var.get(u'exports').put(u'WhileStatement', var.get(u'WhileStatement'))
            @Js
            def PyJs_anonymous_179_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'WithStatement'])
                @Js
                def PyJsHoisted_WithStatement_(object, body, this, arguments, var=var):
                    var = Scope({u'body':body, u'this':this, u'object':object, u'arguments':arguments}, var)
                    var.registers([u'body', u'object'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'WithStatement'))
                    var.get(u"this").put(u'object', var.get(u'object'))
                    var.get(u"this").put(u'body', var.get(u'body'))
                PyJsHoisted_WithStatement_.func_name = u'WithStatement'
                var.put(u'WithStatement', PyJsHoisted_WithStatement_)
                pass
                return var.get(u'WithStatement')
            PyJs_anonymous_179_._set_name(u'anonymous')
            var.put(u'WithStatement', PyJs_anonymous_179_())
            var.get(u'exports').put(u'WithStatement', var.get(u'WithStatement'))
            @Js
            def PyJs_anonymous_180_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'YieldExpression'])
                @Js
                def PyJsHoisted_YieldExpression_(argument, delegate, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'argument':argument, u'delegate':delegate}, var)
                    var.registers([u'argument', u'delegate'])
                    var.get(u"this").put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'YieldExpression'))
                    var.get(u"this").put(u'argument', var.get(u'argument'))
                    var.get(u"this").put(u'delegate', var.get(u'delegate'))
                PyJsHoisted_YieldExpression_.func_name = u'YieldExpression'
                var.put(u'YieldExpression', PyJsHoisted_YieldExpression_)
                pass
                return var.get(u'YieldExpression')
            PyJs_anonymous_180_._set_name(u'anonymous')
            var.put(u'YieldExpression', PyJs_anonymous_180_())
            var.get(u'exports').put(u'YieldExpression', var.get(u'YieldExpression'))
        PyJs_anonymous_106_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_181_(module, exports, __webpack_require__, this, arguments, var=var):
            var = Scope({u'this':this, u'exports':exports, u'__webpack_require__':__webpack_require__, u'module':module, u'arguments':arguments}, var)
            var.registers([u'Node', u'messages_1', u'module', u'Parser', u'exports', u'assert_1', u'token_1', u'__webpack_require__', u'scanner_1', u'syntax_1', u'error_handler_1', u'ArrowParameterPlaceHolder'])
            Js(u'use strict')
            PyJs_Object_182_ = Js({u'value':Js(True)})
            var.get(u'Object').callprop(u'defineProperty', var.get(u'exports'), Js(u'__esModule'), PyJs_Object_182_)
            var.put(u'assert_1', var.get(u'__webpack_require__')(Js(9.0)))
            var.put(u'error_handler_1', var.get(u'__webpack_require__')(Js(10.0)))
            var.put(u'messages_1', var.get(u'__webpack_require__')(Js(11.0)))
            var.put(u'Node', var.get(u'__webpack_require__')(Js(7.0)))
            var.put(u'scanner_1', var.get(u'__webpack_require__')(Js(12.0)))
            var.put(u'syntax_1', var.get(u'__webpack_require__')(Js(2.0)))
            var.put(u'token_1', var.get(u'__webpack_require__')(Js(13.0)))
            var.put(u'ArrowParameterPlaceHolder', Js(u'ArrowParameterPlaceHolder'))
            @Js
            def PyJs_anonymous_183_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'Parser'])
                @Js
                def PyJsHoisted_Parser_(code, options, delegate, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'code':code, u'options':options, u'delegate':delegate}, var)
                    var.registers([u'code', u'options', u'delegate'])
                    if PyJsStrictEq(var.get(u'options'),PyJsComma(Js(0.0), Js(None))):
                        PyJs_Object_184_ = Js({})
                        var.put(u'options', PyJs_Object_184_)
                    PyJs_Object_185_ = Js({u'range':(PyJsStrictEq(var.get(u'options').get(u'range').typeof(),Js(u'boolean')) and var.get(u'options').get(u'range')),u'loc':(PyJsStrictEq(var.get(u'options').get(u'loc').typeof(),Js(u'boolean')) and var.get(u'options').get(u'loc')),u'source':var.get(u"null"),u'tokens':(PyJsStrictEq(var.get(u'options').get(u'tokens').typeof(),Js(u'boolean')) and var.get(u'options').get(u'tokens')),u'comment':(PyJsStrictEq(var.get(u'options').get(u'comment').typeof(),Js(u'boolean')) and var.get(u'options').get(u'comment')),u'tolerant':(PyJsStrictEq(var.get(u'options').get(u'tolerant').typeof(),Js(u'boolean')) and var.get(u'options').get(u'tolerant'))})
                    var.get(u"this").put(u'config', PyJs_Object_185_)
                    if ((var.get(u"this").get(u'config').get(u'loc') and var.get(u'options').get(u'source')) and PyJsStrictNeq(var.get(u'options').get(u'source'),var.get(u"null"))):
                        var.get(u"this").get(u'config').put(u'source', var.get(u'String')(var.get(u'options').get(u'source')))
                    var.get(u"this").put(u'delegate', var.get(u'delegate'))
                    var.get(u"this").put(u'errorHandler', var.get(u'error_handler_1').get(u'ErrorHandler').create())
                    var.get(u"this").get(u'errorHandler').put(u'tolerant', var.get(u"this").get(u'config').get(u'tolerant'))
                    var.get(u"this").put(u'scanner', var.get(u'scanner_1').get(u'Scanner').create(var.get(u'code'), var.get(u"this").get(u'errorHandler')))
                    var.get(u"this").get(u'scanner').put(u'trackComment', var.get(u"this").get(u'config').get(u'comment'))
                    PyJs_Object_186_ = Js({u')':Js(0.0),u';':Js(0.0),u',':Js(0.0),u'=':Js(0.0),u']':Js(0.0),u'||':Js(1.0),u'&&':Js(2.0),u'|':Js(3.0),u'^':Js(4.0),u'&':Js(5.0),u'==':Js(6.0),u'!=':Js(6.0),u'===':Js(6.0),u'!==':Js(6.0),u'<':Js(7.0),u'>':Js(7.0),u'<=':Js(7.0),u'>=':Js(7.0),u'<<':Js(8.0),u'>>':Js(8.0),u'>>>':Js(8.0),u'+':Js(9.0),u'-':Js(9.0),u'*':Js(11.0),u'/':Js(11.0),u'%':Js(11.0)})
                    var.get(u"this").put(u'operatorPrecedence', PyJs_Object_186_)
                    PyJs_Object_187_ = Js({u'type':Js(2.0),u'value':Js(u''),u'lineNumber':var.get(u"this").get(u'scanner').get(u'lineNumber'),u'lineStart':Js(0.0),u'start':Js(0.0),u'end':Js(0.0)})
                    var.get(u"this").put(u'lookahead', PyJs_Object_187_)
                    var.get(u"this").put(u'hasLineTerminator', Js(False))
                    PyJs_Object_189_ = Js({})
                    PyJs_Object_188_ = Js({u'isModule':Js(False),u'await':Js(False),u'allowIn':Js(True),u'allowStrictDirective':Js(True),u'allowYield':Js(True),u'firstCoverInitializedNameError':var.get(u"null"),u'isAssignmentTarget':Js(False),u'isBindingElement':Js(False),u'inFunctionBody':Js(False),u'inIteration':Js(False),u'inSwitch':Js(False),u'labelSet':PyJs_Object_189_,u'strict':Js(False)})
                    var.get(u"this").put(u'context', PyJs_Object_188_)
                    var.get(u"this").put(u'tokens', Js([]))
                    PyJs_Object_190_ = Js({u'index':Js(0.0),u'line':var.get(u"this").get(u'scanner').get(u'lineNumber'),u'column':Js(0.0)})
                    var.get(u"this").put(u'startMarker', PyJs_Object_190_)
                    PyJs_Object_191_ = Js({u'index':Js(0.0),u'line':var.get(u"this").get(u'scanner').get(u'lineNumber'),u'column':Js(0.0)})
                    var.get(u"this").put(u'lastMarker', PyJs_Object_191_)
                    var.get(u"this").callprop(u'nextToken')
                    PyJs_Object_192_ = Js({u'index':var.get(u"this").get(u'scanner').get(u'index'),u'line':var.get(u"this").get(u'scanner').get(u'lineNumber'),u'column':(var.get(u"this").get(u'scanner').get(u'index')-var.get(u"this").get(u'scanner').get(u'lineStart'))})
                    var.get(u"this").put(u'lastMarker', PyJs_Object_192_)
                PyJsHoisted_Parser_.func_name = u'Parser'
                var.put(u'Parser', PyJsHoisted_Parser_)
                pass
                @Js
                def PyJs_anonymous_193_(messageFormat, this, arguments, var=var):
                    var = Scope({u'this':this, u'messageFormat':messageFormat, u'arguments':arguments}, var)
                    var.registers([u'index', u'column', u'args', u'messageFormat', u'values', u'_i', u'msg', u'line'])
                    var.put(u'values', Js([]))
                    #for JS loop
                    var.put(u'_i', Js(1.0))
                    while (var.get(u'_i')<var.get(u'arguments').get(u'length')):
                        try:
                            var.get(u'values').put((var.get(u'_i')-Js(1.0)), var.get(u'arguments').get(var.get(u'_i')))
                        finally:
                                (var.put(u'_i',Js(var.get(u'_i').to_number())+Js(1))-Js(1))
                    var.put(u'args', var.get(u'Array').get(u'prototype').get(u'slice').callprop(u'call', var.get(u'arguments'), Js(1.0)))
                    @Js
                    def PyJs_anonymous_194_(whole, idx, this, arguments, var=var):
                        var = Scope({u'this':this, u'whole':whole, u'arguments':arguments, u'idx':idx}, var)
                        var.registers([u'whole', u'idx'])
                        var.get(u'assert_1').callprop(u'assert', (var.get(u'idx')<var.get(u'args').get(u'length')), Js(u'Message reference must be in range'))
                        return var.get(u'args').get(var.get(u'idx'))
                    PyJs_anonymous_194_._set_name(u'anonymous')
                    var.put(u'msg', var.get(u'messageFormat').callprop(u'replace', JsRegExp(u'/%(\\d)/g'), PyJs_anonymous_194_))
                    var.put(u'index', var.get(u"this").get(u'lastMarker').get(u'index'))
                    var.put(u'line', var.get(u"this").get(u'lastMarker').get(u'line'))
                    var.put(u'column', (var.get(u"this").get(u'lastMarker').get(u'column')+Js(1.0)))
                    PyJsTempException = JsToPyException(var.get(u"this").get(u'errorHandler').callprop(u'createError', var.get(u'index'), var.get(u'line'), var.get(u'column'), var.get(u'msg')))
                    raise PyJsTempException
                PyJs_anonymous_193_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'throwError', PyJs_anonymous_193_)
                @Js
                def PyJs_anonymous_195_(messageFormat, this, arguments, var=var):
                    var = Scope({u'this':this, u'messageFormat':messageFormat, u'arguments':arguments}, var)
                    var.registers([u'index', u'column', u'args', u'messageFormat', u'values', u'_i', u'msg', u'line'])
                    var.put(u'values', Js([]))
                    #for JS loop
                    var.put(u'_i', Js(1.0))
                    while (var.get(u'_i')<var.get(u'arguments').get(u'length')):
                        try:
                            var.get(u'values').put((var.get(u'_i')-Js(1.0)), var.get(u'arguments').get(var.get(u'_i')))
                        finally:
                                (var.put(u'_i',Js(var.get(u'_i').to_number())+Js(1))-Js(1))
                    var.put(u'args', var.get(u'Array').get(u'prototype').get(u'slice').callprop(u'call', var.get(u'arguments'), Js(1.0)))
                    @Js
                    def PyJs_anonymous_196_(whole, idx, this, arguments, var=var):
                        var = Scope({u'this':this, u'whole':whole, u'arguments':arguments, u'idx':idx}, var)
                        var.registers([u'whole', u'idx'])
                        var.get(u'assert_1').callprop(u'assert', (var.get(u'idx')<var.get(u'args').get(u'length')), Js(u'Message reference must be in range'))
                        return var.get(u'args').get(var.get(u'idx'))
                    PyJs_anonymous_196_._set_name(u'anonymous')
                    var.put(u'msg', var.get(u'messageFormat').callprop(u'replace', JsRegExp(u'/%(\\d)/g'), PyJs_anonymous_196_))
                    var.put(u'index', var.get(u"this").get(u'lastMarker').get(u'index'))
                    var.put(u'line', var.get(u"this").get(u'scanner').get(u'lineNumber'))
                    var.put(u'column', (var.get(u"this").get(u'lastMarker').get(u'column')+Js(1.0)))
                    var.get(u"this").get(u'errorHandler').callprop(u'tolerateError', var.get(u'index'), var.get(u'line'), var.get(u'column'), var.get(u'msg'))
                PyJs_anonymous_195_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'tolerateError', PyJs_anonymous_195_)
                @Js
                def PyJs_anonymous_197_(token, message, this, arguments, var=var):
                    var = Scope({u'this':this, u'token':token, u'message':message, u'arguments':arguments}, var)
                    var.registers([u'index', u'column', u'value', u'token', u'msg', u'line', u'message', u'lastMarkerLineStart'])
                    var.put(u'msg', (var.get(u'message') or var.get(u'messages_1').get(u'Messages').get(u'UnexpectedToken')))
                    pass
                    if var.get(u'token'):
                        if var.get(u'message').neg():
                            def PyJs_LONG_198_(var=var):
                                return (var.get(u'messages_1').get(u'Messages').get(u'UnexpectedNumber') if PyJsStrictEq(var.get(u'token').get(u'type'),Js(6.0)) else (var.get(u'messages_1').get(u'Messages').get(u'UnexpectedString') if PyJsStrictEq(var.get(u'token').get(u'type'),Js(8.0)) else (var.get(u'messages_1').get(u'Messages').get(u'UnexpectedTemplate') if PyJsStrictEq(var.get(u'token').get(u'type'),Js(10.0)) else var.get(u'messages_1').get(u'Messages').get(u'UnexpectedToken'))))
                            var.put(u'msg', (var.get(u'messages_1').get(u'Messages').get(u'UnexpectedEOS') if PyJsStrictEq(var.get(u'token').get(u'type'),Js(2.0)) else (var.get(u'messages_1').get(u'Messages').get(u'UnexpectedIdentifier') if PyJsStrictEq(var.get(u'token').get(u'type'),Js(3.0)) else PyJs_LONG_198_())))
                            if PyJsStrictEq(var.get(u'token').get(u'type'),Js(4.0)):
                                if var.get(u"this").get(u'scanner').callprop(u'isFutureReservedWord', var.get(u'token').get(u'value')):
                                    var.put(u'msg', var.get(u'messages_1').get(u'Messages').get(u'UnexpectedReserved'))
                                else:
                                    if (var.get(u"this").get(u'context').get(u'strict') and var.get(u"this").get(u'scanner').callprop(u'isStrictModeReservedWord', var.get(u'token').get(u'value'))):
                                        var.put(u'msg', var.get(u'messages_1').get(u'Messages').get(u'StrictReservedWord'))
                        var.put(u'value', var.get(u'token').get(u'value'))
                    else:
                        var.put(u'value', Js(u'ILLEGAL'))
                    var.put(u'msg', var.get(u'msg').callprop(u'replace', Js(u'%0'), var.get(u'value')))
                    if (var.get(u'token') and PyJsStrictEq(var.get(u'token').get(u'lineNumber').typeof(),Js(u'number'))):
                        var.put(u'index', var.get(u'token').get(u'start'))
                        var.put(u'line', var.get(u'token').get(u'lineNumber'))
                        var.put(u'lastMarkerLineStart', (var.get(u"this").get(u'lastMarker').get(u'index')-var.get(u"this").get(u'lastMarker').get(u'column')))
                        var.put(u'column', ((var.get(u'token').get(u'start')-var.get(u'lastMarkerLineStart'))+Js(1.0)))
                        return var.get(u"this").get(u'errorHandler').callprop(u'createError', var.get(u'index'), var.get(u'line'), var.get(u'column'), var.get(u'msg'))
                    else:
                        var.put(u'index', var.get(u"this").get(u'lastMarker').get(u'index'))
                        var.put(u'line', var.get(u"this").get(u'lastMarker').get(u'line'))
                        var.put(u'column', (var.get(u"this").get(u'lastMarker').get(u'column')+Js(1.0)))
                        return var.get(u"this").get(u'errorHandler').callprop(u'createError', var.get(u'index'), var.get(u'line'), var.get(u'column'), var.get(u'msg'))
                PyJs_anonymous_197_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'unexpectedTokenError', PyJs_anonymous_197_)
                @Js
                def PyJs_anonymous_199_(token, message, this, arguments, var=var):
                    var = Scope({u'this':this, u'token':token, u'message':message, u'arguments':arguments}, var)
                    var.registers([u'token', u'message'])
                    PyJsTempException = JsToPyException(var.get(u"this").callprop(u'unexpectedTokenError', var.get(u'token'), var.get(u'message')))
                    raise PyJsTempException
                PyJs_anonymous_199_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'throwUnexpectedToken', PyJs_anonymous_199_)
                @Js
                def PyJs_anonymous_200_(token, message, this, arguments, var=var):
                    var = Scope({u'this':this, u'token':token, u'message':message, u'arguments':arguments}, var)
                    var.registers([u'token', u'message'])
                    var.get(u"this").get(u'errorHandler').callprop(u'tolerate', var.get(u"this").callprop(u'unexpectedTokenError', var.get(u'token'), var.get(u'message')))
                PyJs_anonymous_200_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'tolerateUnexpectedToken', PyJs_anonymous_200_)
                @Js
                def PyJs_anonymous_201_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'i', u'node', u'e', u'comments', u'metadata'])
                    if var.get(u"this").get(u'config').get(u'comment').neg():
                        var.get(u"this").get(u'scanner').callprop(u'scanComments')
                    else:
                        var.put(u'comments', var.get(u"this").get(u'scanner').callprop(u'scanComments'))
                        if ((var.get(u'comments').get(u'length')>Js(0.0)) and var.get(u"this").get(u'delegate')):
                            #for JS loop
                            var.put(u'i', Js(0.0))
                            while (var.get(u'i')<var.get(u'comments').get(u'length')):
                                try:
                                    var.put(u'e', var.get(u'comments').get(var.get(u'i')))
                                    var.put(u'node', PyJsComma(Js(0.0), Js(None)))
                                    PyJs_Object_202_ = Js({u'type':(Js(u'BlockComment') if var.get(u'e').get(u'multiLine') else Js(u'LineComment')),u'value':var.get(u"this").get(u'scanner').get(u'source').callprop(u'slice', var.get(u'e').get(u'slice').get(u'0'), var.get(u'e').get(u'slice').get(u'1'))})
                                    var.put(u'node', PyJs_Object_202_)
                                    if var.get(u"this").get(u'config').get(u'range'):
                                        var.get(u'node').put(u'range', var.get(u'e').get(u'range'))
                                    if var.get(u"this").get(u'config').get(u'loc'):
                                        var.get(u'node').put(u'loc', var.get(u'e').get(u'loc'))
                                    PyJs_Object_204_ = Js({u'line':var.get(u'e').get(u'loc').get(u'start').get(u'line'),u'column':var.get(u'e').get(u'loc').get(u'start').get(u'column'),u'offset':var.get(u'e').get(u'range').get(u'0')})
                                    PyJs_Object_205_ = Js({u'line':var.get(u'e').get(u'loc').get(u'end').get(u'line'),u'column':var.get(u'e').get(u'loc').get(u'end').get(u'column'),u'offset':var.get(u'e').get(u'range').get(u'1')})
                                    PyJs_Object_203_ = Js({u'start':PyJs_Object_204_,u'end':PyJs_Object_205_})
                                    var.put(u'metadata', PyJs_Object_203_)
                                    var.get(u"this").callprop(u'delegate', var.get(u'node'), var.get(u'metadata'))
                                finally:
                                        var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                PyJs_anonymous_201_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'collectComments', PyJs_anonymous_201_)
                @Js
                def PyJs_anonymous_206_(token, this, arguments, var=var):
                    var = Scope({u'this':this, u'token':token, u'arguments':arguments}, var)
                    var.registers([u'token'])
                    return var.get(u"this").get(u'scanner').get(u'source').callprop(u'slice', var.get(u'token').get(u'start'), var.get(u'token').get(u'end'))
                PyJs_anonymous_206_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'getTokenRaw', PyJs_anonymous_206_)
                @Js
                def PyJs_anonymous_207_(token, this, arguments, var=var):
                    var = Scope({u'this':this, u'token':token, u'arguments':arguments}, var)
                    var.registers([u'pattern', u'token', u'flags', u't'])
                    PyJs_Object_208_ = Js({u'type':var.get(u'token_1').get(u'TokenName').get(var.get(u'token').get(u'type')),u'value':var.get(u"this").callprop(u'getTokenRaw', var.get(u'token'))})
                    var.put(u't', PyJs_Object_208_)
                    if var.get(u"this").get(u'config').get(u'range'):
                        var.get(u't').put(u'range', Js([var.get(u'token').get(u'start'), var.get(u'token').get(u'end')]))
                    if var.get(u"this").get(u'config').get(u'loc'):
                        PyJs_Object_210_ = Js({u'line':var.get(u"this").get(u'startMarker').get(u'line'),u'column':var.get(u"this").get(u'startMarker').get(u'column')})
                        PyJs_Object_211_ = Js({u'line':var.get(u"this").get(u'scanner').get(u'lineNumber'),u'column':(var.get(u"this").get(u'scanner').get(u'index')-var.get(u"this").get(u'scanner').get(u'lineStart'))})
                        PyJs_Object_209_ = Js({u'start':PyJs_Object_210_,u'end':PyJs_Object_211_})
                        var.get(u't').put(u'loc', PyJs_Object_209_)
                    if PyJsStrictEq(var.get(u'token').get(u'type'),Js(9.0)):
                        var.put(u'pattern', var.get(u'token').get(u'pattern'))
                        var.put(u'flags', var.get(u'token').get(u'flags'))
                        PyJs_Object_212_ = Js({u'pattern':var.get(u'pattern'),u'flags':var.get(u'flags')})
                        var.get(u't').put(u'regex', PyJs_Object_212_)
                    return var.get(u't')
                PyJs_anonymous_207_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'convertToken', PyJs_anonymous_207_)
                @Js
                def PyJs_anonymous_213_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'token', u'next'])
                    var.put(u'token', var.get(u"this").get(u'lookahead'))
                    var.get(u"this").get(u'lastMarker').put(u'index', var.get(u"this").get(u'scanner').get(u'index'))
                    var.get(u"this").get(u'lastMarker').put(u'line', var.get(u"this").get(u'scanner').get(u'lineNumber'))
                    var.get(u"this").get(u'lastMarker').put(u'column', (var.get(u"this").get(u'scanner').get(u'index')-var.get(u"this").get(u'scanner').get(u'lineStart')))
                    var.get(u"this").callprop(u'collectComments')
                    if PyJsStrictNeq(var.get(u"this").get(u'scanner').get(u'index'),var.get(u"this").get(u'startMarker').get(u'index')):
                        var.get(u"this").get(u'startMarker').put(u'index', var.get(u"this").get(u'scanner').get(u'index'))
                        var.get(u"this").get(u'startMarker').put(u'line', var.get(u"this").get(u'scanner').get(u'lineNumber'))
                        var.get(u"this").get(u'startMarker').put(u'column', (var.get(u"this").get(u'scanner').get(u'index')-var.get(u"this").get(u'scanner').get(u'lineStart')))
                    var.put(u'next', var.get(u"this").get(u'scanner').callprop(u'lex'))
                    var.get(u"this").put(u'hasLineTerminator', PyJsStrictNeq(var.get(u'token').get(u'lineNumber'),var.get(u'next').get(u'lineNumber')))
                    if ((var.get(u'next') and var.get(u"this").get(u'context').get(u'strict')) and PyJsStrictEq(var.get(u'next').get(u'type'),Js(3.0))):
                        if var.get(u"this").get(u'scanner').callprop(u'isStrictModeReservedWord', var.get(u'next').get(u'value')):
                            var.get(u'next').put(u'type', Js(4.0))
                    var.get(u"this").put(u'lookahead', var.get(u'next'))
                    if (var.get(u"this").get(u'config').get(u'tokens') and PyJsStrictNeq(var.get(u'next').get(u'type'),Js(2.0))):
                        var.get(u"this").get(u'tokens').callprop(u'push', var.get(u"this").callprop(u'convertToken', var.get(u'next')))
                    return var.get(u'token')
                PyJs_anonymous_213_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'nextToken', PyJs_anonymous_213_)
                @Js
                def PyJs_anonymous_214_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'token'])
                    var.get(u"this").callprop(u'collectComments')
                    var.put(u'token', var.get(u"this").get(u'scanner').callprop(u'scanRegExp'))
                    if var.get(u"this").get(u'config').get(u'tokens'):
                        var.get(u"this").get(u'tokens').callprop(u'pop')
                        var.get(u"this").get(u'tokens').callprop(u'push', var.get(u"this").callprop(u'convertToken', var.get(u'token')))
                    var.get(u"this").put(u'lookahead', var.get(u'token'))
                    var.get(u"this").callprop(u'nextToken')
                    return var.get(u'token')
                PyJs_anonymous_214_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'nextRegexToken', PyJs_anonymous_214_)
                @Js
                def PyJs_anonymous_215_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    PyJs_Object_216_ = Js({u'index':var.get(u"this").get(u'startMarker').get(u'index'),u'line':var.get(u"this").get(u'startMarker').get(u'line'),u'column':var.get(u"this").get(u'startMarker').get(u'column')})
                    return PyJs_Object_216_
                PyJs_anonymous_215_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'createNode', PyJs_anonymous_215_)
                @Js
                def PyJs_anonymous_217_(token, lastLineStart, this, arguments, var=var):
                    var = Scope({u'this':this, u'token':token, u'lastLineStart':lastLineStart, u'arguments':arguments}, var)
                    var.registers([u'column', u'line', u'lastLineStart', u'token'])
                    if PyJsStrictEq(var.get(u'lastLineStart'),PyJsComma(Js(0.0), Js(None))):
                        var.put(u'lastLineStart', Js(0.0))
                    var.put(u'column', (var.get(u'token').get(u'start')-var.get(u'token').get(u'lineStart')))
                    var.put(u'line', var.get(u'token').get(u'lineNumber'))
                    if (var.get(u'column')<Js(0.0)):
                        var.put(u'column', var.get(u'lastLineStart'), u'+')
                        (var.put(u'line',Js(var.get(u'line').to_number())-Js(1))+Js(1))
                    PyJs_Object_218_ = Js({u'index':var.get(u'token').get(u'start'),u'line':var.get(u'line'),u'column':var.get(u'column')})
                    return PyJs_Object_218_
                PyJs_anonymous_217_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'startNode', PyJs_anonymous_217_)
                @Js
                def PyJs_anonymous_219_(marker, node, this, arguments, var=var):
                    var = Scope({u'marker':marker, u'node':node, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'marker', u'node', u'metadata'])
                    if var.get(u"this").get(u'config').get(u'range'):
                        var.get(u'node').put(u'range', Js([var.get(u'marker').get(u'index'), var.get(u"this").get(u'lastMarker').get(u'index')]))
                    if var.get(u"this").get(u'config').get(u'loc'):
                        PyJs_Object_221_ = Js({u'line':var.get(u'marker').get(u'line'),u'column':var.get(u'marker').get(u'column')})
                        PyJs_Object_222_ = Js({u'line':var.get(u"this").get(u'lastMarker').get(u'line'),u'column':var.get(u"this").get(u'lastMarker').get(u'column')})
                        PyJs_Object_220_ = Js({u'start':PyJs_Object_221_,u'end':PyJs_Object_222_})
                        var.get(u'node').put(u'loc', PyJs_Object_220_)
                        if var.get(u"this").get(u'config').get(u'source'):
                            var.get(u'node').get(u'loc').put(u'source', var.get(u"this").get(u'config').get(u'source'))
                    if var.get(u"this").get(u'delegate'):
                        PyJs_Object_224_ = Js({u'line':var.get(u'marker').get(u'line'),u'column':var.get(u'marker').get(u'column'),u'offset':var.get(u'marker').get(u'index')})
                        PyJs_Object_225_ = Js({u'line':var.get(u"this").get(u'lastMarker').get(u'line'),u'column':var.get(u"this").get(u'lastMarker').get(u'column'),u'offset':var.get(u"this").get(u'lastMarker').get(u'index')})
                        PyJs_Object_223_ = Js({u'start':PyJs_Object_224_,u'end':PyJs_Object_225_})
                        var.put(u'metadata', PyJs_Object_223_)
                        var.get(u"this").callprop(u'delegate', var.get(u'node'), var.get(u'metadata'))
                    return var.get(u'node')
                PyJs_anonymous_219_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'finalize', PyJs_anonymous_219_)
                @Js
                def PyJs_anonymous_226_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'token', u'value'])
                    var.put(u'token', var.get(u"this").callprop(u'nextToken'))
                    if (PyJsStrictNeq(var.get(u'token').get(u'type'),Js(7.0)) or PyJsStrictNeq(var.get(u'token').get(u'value'),var.get(u'value'))):
                        var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'token'))
                PyJs_anonymous_226_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'expect', PyJs_anonymous_226_)
                @Js
                def PyJs_anonymous_227_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'token'])
                    if var.get(u"this").get(u'config').get(u'tolerant'):
                        var.put(u'token', var.get(u"this").get(u'lookahead'))
                        if (PyJsStrictEq(var.get(u'token').get(u'type'),Js(7.0)) and PyJsStrictEq(var.get(u'token').get(u'value'),Js(u','))):
                            var.get(u"this").callprop(u'nextToken')
                        else:
                            if (PyJsStrictEq(var.get(u'token').get(u'type'),Js(7.0)) and PyJsStrictEq(var.get(u'token').get(u'value'),Js(u';'))):
                                var.get(u"this").callprop(u'nextToken')
                                var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'token'))
                            else:
                                var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'token'), var.get(u'messages_1').get(u'Messages').get(u'UnexpectedToken'))
                    else:
                        var.get(u"this").callprop(u'expect', Js(u','))
                PyJs_anonymous_227_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'expectCommaSeparator', PyJs_anonymous_227_)
                @Js
                def PyJs_anonymous_228_(keyword, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'keyword':keyword}, var)
                    var.registers([u'token', u'keyword'])
                    var.put(u'token', var.get(u"this").callprop(u'nextToken'))
                    if (PyJsStrictNeq(var.get(u'token').get(u'type'),Js(4.0)) or PyJsStrictNeq(var.get(u'token').get(u'value'),var.get(u'keyword'))):
                        var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'token'))
                PyJs_anonymous_228_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'expectKeyword', PyJs_anonymous_228_)
                @Js
                def PyJs_anonymous_229_(value, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'value':value}, var)
                    var.registers([u'value'])
                    return (PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'type'),Js(7.0)) and PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'value'),var.get(u'value')))
                PyJs_anonymous_229_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'match', PyJs_anonymous_229_)
                @Js
                def PyJs_anonymous_230_(keyword, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'keyword':keyword}, var)
                    var.registers([u'keyword'])
                    return (PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'type'),Js(4.0)) and PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'value'),var.get(u'keyword')))
                PyJs_anonymous_230_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'matchKeyword', PyJs_anonymous_230_)
                @Js
                def PyJs_anonymous_231_(keyword, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'keyword':keyword}, var)
                    var.registers([u'keyword'])
                    return (PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'type'),Js(3.0)) and PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'value'),var.get(u'keyword')))
                PyJs_anonymous_231_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'matchContextualKeyword', PyJs_anonymous_231_)
                @Js
                def PyJs_anonymous_232_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'op'])
                    if PyJsStrictNeq(var.get(u"this").get(u'lookahead').get(u'type'),Js(7.0)):
                        return Js(False)
                    var.put(u'op', var.get(u"this").get(u'lookahead').get(u'value'))
                    def PyJs_LONG_233_(var=var):
                        return (((((((((PyJsStrictEq(var.get(u'op'),Js(u'=')) or PyJsStrictEq(var.get(u'op'),Js(u'*='))) or PyJsStrictEq(var.get(u'op'),Js(u'**='))) or PyJsStrictEq(var.get(u'op'),Js(u'/='))) or PyJsStrictEq(var.get(u'op'),Js(u'%='))) or PyJsStrictEq(var.get(u'op'),Js(u'+='))) or PyJsStrictEq(var.get(u'op'),Js(u'-='))) or PyJsStrictEq(var.get(u'op'),Js(u'<<='))) or PyJsStrictEq(var.get(u'op'),Js(u'>>='))) or PyJsStrictEq(var.get(u'op'),Js(u'>>>=')))
                    return (((PyJs_LONG_233_() or PyJsStrictEq(var.get(u'op'),Js(u'&='))) or PyJsStrictEq(var.get(u'op'),Js(u'^='))) or PyJsStrictEq(var.get(u'op'),Js(u'|=')))
                PyJs_anonymous_232_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'matchAssign', PyJs_anonymous_232_)
                @Js
                def PyJs_anonymous_234_(parseFunction, this, arguments, var=var):
                    var = Scope({u'parseFunction':parseFunction, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'parseFunction', u'previousIsAssignmentTarget', u'result', u'previousIsBindingElement', u'previousFirstCoverInitializedNameError'])
                    var.put(u'previousIsBindingElement', var.get(u"this").get(u'context').get(u'isBindingElement'))
                    var.put(u'previousIsAssignmentTarget', var.get(u"this").get(u'context').get(u'isAssignmentTarget'))
                    var.put(u'previousFirstCoverInitializedNameError', var.get(u"this").get(u'context').get(u'firstCoverInitializedNameError'))
                    var.get(u"this").get(u'context').put(u'isBindingElement', Js(True))
                    var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(True))
                    var.get(u"this").get(u'context').put(u'firstCoverInitializedNameError', var.get(u"null"))
                    var.put(u'result', var.get(u'parseFunction').callprop(u'call', var.get(u"this")))
                    if PyJsStrictNeq(var.get(u"this").get(u'context').get(u'firstCoverInitializedNameError'),var.get(u"null")):
                        var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").get(u'context').get(u'firstCoverInitializedNameError'))
                    var.get(u"this").get(u'context').put(u'isBindingElement', var.get(u'previousIsBindingElement'))
                    var.get(u"this").get(u'context').put(u'isAssignmentTarget', var.get(u'previousIsAssignmentTarget'))
                    var.get(u"this").get(u'context').put(u'firstCoverInitializedNameError', var.get(u'previousFirstCoverInitializedNameError'))
                    return var.get(u'result')
                PyJs_anonymous_234_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'isolateCoverGrammar', PyJs_anonymous_234_)
                @Js
                def PyJs_anonymous_235_(parseFunction, this, arguments, var=var):
                    var = Scope({u'parseFunction':parseFunction, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'parseFunction', u'previousIsAssignmentTarget', u'result', u'previousIsBindingElement', u'previousFirstCoverInitializedNameError'])
                    var.put(u'previousIsBindingElement', var.get(u"this").get(u'context').get(u'isBindingElement'))
                    var.put(u'previousIsAssignmentTarget', var.get(u"this").get(u'context').get(u'isAssignmentTarget'))
                    var.put(u'previousFirstCoverInitializedNameError', var.get(u"this").get(u'context').get(u'firstCoverInitializedNameError'))
                    var.get(u"this").get(u'context').put(u'isBindingElement', Js(True))
                    var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(True))
                    var.get(u"this").get(u'context').put(u'firstCoverInitializedNameError', var.get(u"null"))
                    var.put(u'result', var.get(u'parseFunction').callprop(u'call', var.get(u"this")))
                    var.get(u"this").get(u'context').put(u'isBindingElement', (var.get(u"this").get(u'context').get(u'isBindingElement') and var.get(u'previousIsBindingElement')))
                    var.get(u"this").get(u'context').put(u'isAssignmentTarget', (var.get(u"this").get(u'context').get(u'isAssignmentTarget') and var.get(u'previousIsAssignmentTarget')))
                    var.get(u"this").get(u'context').put(u'firstCoverInitializedNameError', (var.get(u'previousFirstCoverInitializedNameError') or var.get(u"this").get(u'context').get(u'firstCoverInitializedNameError')))
                    return var.get(u'result')
                PyJs_anonymous_235_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'inheritCoverGrammar', PyJs_anonymous_235_)
                @Js
                def PyJs_anonymous_236_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    if var.get(u"this").callprop(u'match', Js(u';')):
                        var.get(u"this").callprop(u'nextToken')
                    else:
                        if var.get(u"this").get(u'hasLineTerminator').neg():
                            if (PyJsStrictNeq(var.get(u"this").get(u'lookahead').get(u'type'),Js(2.0)) and var.get(u"this").callprop(u'match', Js(u'}')).neg()):
                                var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").get(u'lookahead'))
                            var.get(u"this").get(u'lastMarker').put(u'index', var.get(u"this").get(u'startMarker').get(u'index'))
                            var.get(u"this").get(u'lastMarker').put(u'line', var.get(u"this").get(u'startMarker').get(u'line'))
                            var.get(u"this").get(u'lastMarker').put(u'column', var.get(u"this").get(u'startMarker').get(u'column'))
                PyJs_anonymous_236_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'consumeSemicolon', PyJs_anonymous_236_)
                @Js
                def PyJs_anonymous_237_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'expr', u'token', u'raw'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    pass
                    pass
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get(u"this").get(u'lookahead').get(u'type'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                            SWITCHED = True
                            if ((var.get(u"this").get(u'context').get(u'isModule') or var.get(u"this").get(u'context').get(u'await')) and PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'value'),Js(u'await'))):
                                var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u"this").get(u'lookahead'))
                            var.put(u'expr', (var.get(u"this").callprop(u'parseFunctionExpression') if var.get(u"this").callprop(u'matchAsyncFunction') else var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'Identifier').create(var.get(u"this").callprop(u'nextToken').get(u'value')))))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(6.0)):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(8.0)):
                            SWITCHED = True
                            if (var.get(u"this").get(u'context').get(u'strict') and var.get(u"this").get(u'lookahead').get(u'octal')):
                                var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u"this").get(u'lookahead'), var.get(u'messages_1').get(u'Messages').get(u'StrictOctalLiteral'))
                            var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(False))
                            var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                            var.put(u'token', var.get(u"this").callprop(u'nextToken'))
                            var.put(u'raw', var.get(u"this").callprop(u'getTokenRaw', var.get(u'token')))
                            var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'Literal').create(var.get(u'token').get(u'value'), var.get(u'raw'))))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                            SWITCHED = True
                            var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(False))
                            var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                            var.put(u'token', var.get(u"this").callprop(u'nextToken'))
                            var.put(u'raw', var.get(u"this").callprop(u'getTokenRaw', var.get(u'token')))
                            var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'Literal').create(PyJsStrictEq(var.get(u'token').get(u'value'),Js(u'true')), var.get(u'raw'))))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(5.0)):
                            SWITCHED = True
                            var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(False))
                            var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                            var.put(u'token', var.get(u"this").callprop(u'nextToken'))
                            var.put(u'raw', var.get(u"this").callprop(u'getTokenRaw', var.get(u'token')))
                            var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'Literal').create(var.get(u"null"), var.get(u'raw'))))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(10.0)):
                            SWITCHED = True
                            var.put(u'expr', var.get(u"this").callprop(u'parseTemplateLiteral'))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(7.0)):
                            SWITCHED = True
                            while 1:
                                SWITCHED = False
                                CONDITION = (var.get(u"this").get(u'lookahead').get(u'value'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'(')):
                                    SWITCHED = True
                                    var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                                    var.put(u'expr', var.get(u"this").callprop(u'inheritCoverGrammar', var.get(u"this").get(u'parseGroupExpression')))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'[')):
                                    SWITCHED = True
                                    var.put(u'expr', var.get(u"this").callprop(u'inheritCoverGrammar', var.get(u"this").get(u'parseArrayInitializer')))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'{')):
                                    SWITCHED = True
                                    var.put(u'expr', var.get(u"this").callprop(u'inheritCoverGrammar', var.get(u"this").get(u'parseObjectInitializer')))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'/')):
                                    SWITCHED = True
                                    pass
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'/=')):
                                    SWITCHED = True
                                    var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(False))
                                    var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                                    var.get(u"this").get(u'scanner').put(u'index', var.get(u"this").get(u'startMarker').get(u'index'))
                                    var.put(u'token', var.get(u"this").callprop(u'nextRegexToken'))
                                    var.put(u'raw', var.get(u"this").callprop(u'getTokenRaw', var.get(u'token')))
                                    var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'RegexLiteral').create(var.get(u'token').get(u'regex'), var.get(u'raw'), var.get(u'token').get(u'pattern'), var.get(u'token').get(u'flags'))))
                                    break
                                if True:
                                    SWITCHED = True
                                    var.put(u'expr', var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").callprop(u'nextToken')))
                                SWITCHED = True
                                break
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                            SWITCHED = True
                            if ((var.get(u"this").get(u'context').get(u'strict').neg() and var.get(u"this").get(u'context').get(u'allowYield')) and var.get(u"this").callprop(u'matchKeyword', Js(u'yield'))):
                                var.put(u'expr', var.get(u"this").callprop(u'parseIdentifierName'))
                            else:
                                if (var.get(u"this").get(u'context').get(u'strict').neg() and var.get(u"this").callprop(u'matchKeyword', Js(u'let'))):
                                    var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'Identifier').create(var.get(u"this").callprop(u'nextToken').get(u'value'))))
                                else:
                                    var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(False))
                                    var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                                    if var.get(u"this").callprop(u'matchKeyword', Js(u'function')):
                                        var.put(u'expr', var.get(u"this").callprop(u'parseFunctionExpression'))
                                    else:
                                        if var.get(u"this").callprop(u'matchKeyword', Js(u'this')):
                                            var.get(u"this").callprop(u'nextToken')
                                            var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ThisExpression').create()))
                                        else:
                                            if var.get(u"this").callprop(u'matchKeyword', Js(u'class')):
                                                var.put(u'expr', var.get(u"this").callprop(u'parseClassExpression'))
                                            else:
                                                var.put(u'expr', var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").callprop(u'nextToken')))
                            break
                        if True:
                            SWITCHED = True
                            var.put(u'expr', var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").callprop(u'nextToken')))
                        SWITCHED = True
                        break
                    return var.get(u'expr')
                PyJs_anonymous_237_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parsePrimaryExpression', PyJs_anonymous_237_)
                @Js
                def PyJs_anonymous_238_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'arg'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expect', Js(u'...'))
                    var.put(u'arg', var.get(u"this").callprop(u'inheritCoverGrammar', var.get(u"this").get(u'parseAssignmentExpression')))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'SpreadElement').create(var.get(u'arg')))
                PyJs_anonymous_238_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseSpreadElement', PyJs_anonymous_238_)
                @Js
                def PyJs_anonymous_239_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'elements', u'element'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'elements', Js([]))
                    var.get(u"this").callprop(u'expect', Js(u'['))
                    while var.get(u"this").callprop(u'match', Js(u']')).neg():
                        if var.get(u"this").callprop(u'match', Js(u',')):
                            var.get(u"this").callprop(u'nextToken')
                            var.get(u'elements').callprop(u'push', var.get(u"null"))
                        else:
                            if var.get(u"this").callprop(u'match', Js(u'...')):
                                var.put(u'element', var.get(u"this").callprop(u'parseSpreadElement'))
                                if var.get(u"this").callprop(u'match', Js(u']')).neg():
                                    var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(False))
                                    var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                                    var.get(u"this").callprop(u'expect', Js(u','))
                                var.get(u'elements').callprop(u'push', var.get(u'element'))
                            else:
                                var.get(u'elements').callprop(u'push', var.get(u"this").callprop(u'inheritCoverGrammar', var.get(u"this").get(u'parseAssignmentExpression')))
                                if var.get(u"this").callprop(u'match', Js(u']')).neg():
                                    var.get(u"this").callprop(u'expect', Js(u','))
                    var.get(u"this").callprop(u'expect', Js(u']'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ArrayExpression').create(var.get(u'elements')))
                PyJs_anonymous_239_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseArrayInitializer', PyJs_anonymous_239_)
                @Js
                def PyJs_anonymous_240_(params, this, arguments, var=var):
                    var = Scope({u'this':this, u'params':params, u'arguments':arguments}, var)
                    var.registers([u'body', u'params', u'previousStrict', u'previousAllowStrictDirective'])
                    var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(False))
                    var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                    var.put(u'previousStrict', var.get(u"this").get(u'context').get(u'strict'))
                    var.put(u'previousAllowStrictDirective', var.get(u"this").get(u'context').get(u'allowStrictDirective'))
                    var.get(u"this").get(u'context').put(u'allowStrictDirective', var.get(u'params').get(u'simple'))
                    var.put(u'body', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseFunctionSourceElements')))
                    if (var.get(u"this").get(u'context').get(u'strict') and var.get(u'params').get(u'firstRestricted')):
                        var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'params').get(u'firstRestricted'), var.get(u'params').get(u'message'))
                    if (var.get(u"this").get(u'context').get(u'strict') and var.get(u'params').get(u'stricted')):
                        var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'params').get(u'stricted'), var.get(u'params').get(u'message'))
                    var.get(u"this").get(u'context').put(u'strict', var.get(u'previousStrict'))
                    var.get(u"this").get(u'context').put(u'allowStrictDirective', var.get(u'previousAllowStrictDirective'))
                    return var.get(u'body')
                PyJs_anonymous_240_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parsePropertyMethod', PyJs_anonymous_240_)
                @Js
                def PyJs_anonymous_241_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'params', u'isGenerator', u'method', u'previousAllowYield'])
                    var.put(u'isGenerator', Js(False))
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'previousAllowYield', var.get(u"this").get(u'context').get(u'allowYield'))
                    var.get(u"this").get(u'context').put(u'allowYield', Js(True))
                    var.put(u'params', var.get(u"this").callprop(u'parseFormalParameters'))
                    var.put(u'method', var.get(u"this").callprop(u'parsePropertyMethod', var.get(u'params')))
                    var.get(u"this").get(u'context').put(u'allowYield', var.get(u'previousAllowYield'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'FunctionExpression').create(var.get(u"null"), var.get(u'params').get(u'params'), var.get(u'method'), var.get(u'isGenerator')))
                PyJs_anonymous_241_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parsePropertyMethodFunction', PyJs_anonymous_241_)
                @Js
                def PyJs_anonymous_242_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'previousAwait', u'params', u'method', u'previousAllowYield'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'previousAllowYield', var.get(u"this").get(u'context').get(u'allowYield'))
                    var.put(u'previousAwait', var.get(u"this").get(u'context').get(u'await'))
                    var.get(u"this").get(u'context').put(u'allowYield', Js(False))
                    var.get(u"this").get(u'context').put(u'await', Js(True))
                    var.put(u'params', var.get(u"this").callprop(u'parseFormalParameters'))
                    var.put(u'method', var.get(u"this").callprop(u'parsePropertyMethod', var.get(u'params')))
                    var.get(u"this").get(u'context').put(u'allowYield', var.get(u'previousAllowYield'))
                    var.get(u"this").get(u'context').put(u'await', var.get(u'previousAwait'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'AsyncFunctionExpression').create(var.get(u"null"), var.get(u'params').get(u'params'), var.get(u'method')))
                PyJs_anonymous_242_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parsePropertyMethodAsyncFunction', PyJs_anonymous_242_)
                @Js
                def PyJs_anonymous_243_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'raw', u'token', u'key'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'token', var.get(u"this").callprop(u'nextToken'))
                    pass
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get(u'token').get(u'type'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(8.0)):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(6.0)):
                            SWITCHED = True
                            if (var.get(u"this").get(u'context').get(u'strict') and var.get(u'token').get(u'octal')):
                                var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'token'), var.get(u'messages_1').get(u'Messages').get(u'StrictOctalLiteral'))
                            var.put(u'raw', var.get(u"this").callprop(u'getTokenRaw', var.get(u'token')))
                            var.put(u'key', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'Literal').create(var.get(u'token').get(u'value'), var.get(u'raw'))))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(5.0)):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                            SWITCHED = True
                            var.put(u'key', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'Identifier').create(var.get(u'token').get(u'value'))))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(7.0)):
                            SWITCHED = True
                            if PyJsStrictEq(var.get(u'token').get(u'value'),Js(u'[')):
                                var.put(u'key', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseAssignmentExpression')))
                                var.get(u"this").callprop(u'expect', Js(u']'))
                            else:
                                var.put(u'key', var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'token')))
                            break
                        if True:
                            SWITCHED = True
                            var.put(u'key', var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'token')))
                        SWITCHED = True
                        break
                    return var.get(u'key')
                PyJs_anonymous_243_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseObjectPropertyKey', PyJs_anonymous_243_)
                @Js
                def PyJs_anonymous_244_(key, value, this, arguments, var=var):
                    var = Scope({u'this':this, u'value':value, u'key':key, u'arguments':arguments}, var)
                    var.registers([u'value', u'key'])
                    return ((PyJsStrictEq(var.get(u'key').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'Identifier')) and PyJsStrictEq(var.get(u'key').get(u'name'),var.get(u'value'))) or (PyJsStrictEq(var.get(u'key').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'Literal')) and PyJsStrictEq(var.get(u'key').get(u'value'),var.get(u'value'))))
                PyJs_anonymous_244_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'isPropertyKey', PyJs_anonymous_244_)
                @Js
                def PyJs_anonymous_245_(hasProto, this, arguments, var=var):
                    var = Scope({u'this':this, u'hasProto':hasProto, u'arguments':arguments}, var)
                    var.registers([u'node', u'kind', u'hasProto', u'shorthand', u'computed', u'init', u'value', u'id', u'token', u'isAsync', u'lookaheadPropertyKey', u'key', u'method'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'token', var.get(u"this").get(u'lookahead'))
                    pass
                    var.put(u'key', var.get(u"null"))
                    var.put(u'value', var.get(u"null"))
                    var.put(u'computed', Js(False))
                    var.put(u'method', Js(False))
                    var.put(u'shorthand', Js(False))
                    var.put(u'isAsync', Js(False))
                    if PyJsStrictEq(var.get(u'token').get(u'type'),Js(3.0)):
                        var.put(u'id', var.get(u'token').get(u'value'))
                        var.get(u"this").callprop(u'nextToken')
                        var.put(u'computed', var.get(u"this").callprop(u'match', Js(u'[')))
                        var.put(u'isAsync', (((((var.get(u"this").get(u'hasLineTerminator').neg() and PyJsStrictEq(var.get(u'id'),Js(u'async'))) and var.get(u"this").callprop(u'match', Js(u':')).neg()) and var.get(u"this").callprop(u'match', Js(u'(')).neg()) and var.get(u"this").callprop(u'match', Js(u'*')).neg()) and var.get(u"this").callprop(u'match', Js(u',')).neg()))
                        var.put(u'key', (var.get(u"this").callprop(u'parseObjectPropertyKey') if var.get(u'isAsync') else var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'Identifier').create(var.get(u'id')))))
                    else:
                        if var.get(u"this").callprop(u'match', Js(u'*')):
                            var.get(u"this").callprop(u'nextToken')
                        else:
                            var.put(u'computed', var.get(u"this").callprop(u'match', Js(u'[')))
                            var.put(u'key', var.get(u"this").callprop(u'parseObjectPropertyKey'))
                    var.put(u'lookaheadPropertyKey', var.get(u"this").callprop(u'qualifiedPropertyName', var.get(u"this").get(u'lookahead')))
                    if (((PyJsStrictEq(var.get(u'token').get(u'type'),Js(3.0)) and var.get(u'isAsync').neg()) and PyJsStrictEq(var.get(u'token').get(u'value'),Js(u'get'))) and var.get(u'lookaheadPropertyKey')):
                        var.put(u'kind', Js(u'get'))
                        var.put(u'computed', var.get(u"this").callprop(u'match', Js(u'[')))
                        var.put(u'key', var.get(u"this").callprop(u'parseObjectPropertyKey'))
                        var.get(u"this").get(u'context').put(u'allowYield', Js(False))
                        var.put(u'value', var.get(u"this").callprop(u'parseGetterMethod'))
                    else:
                        if (((PyJsStrictEq(var.get(u'token').get(u'type'),Js(3.0)) and var.get(u'isAsync').neg()) and PyJsStrictEq(var.get(u'token').get(u'value'),Js(u'set'))) and var.get(u'lookaheadPropertyKey')):
                            var.put(u'kind', Js(u'set'))
                            var.put(u'computed', var.get(u"this").callprop(u'match', Js(u'[')))
                            var.put(u'key', var.get(u"this").callprop(u'parseObjectPropertyKey'))
                            var.put(u'value', var.get(u"this").callprop(u'parseSetterMethod'))
                        else:
                            if ((PyJsStrictEq(var.get(u'token').get(u'type'),Js(7.0)) and PyJsStrictEq(var.get(u'token').get(u'value'),Js(u'*'))) and var.get(u'lookaheadPropertyKey')):
                                var.put(u'kind', Js(u'init'))
                                var.put(u'computed', var.get(u"this").callprop(u'match', Js(u'[')))
                                var.put(u'key', var.get(u"this").callprop(u'parseObjectPropertyKey'))
                                var.put(u'value', var.get(u"this").callprop(u'parseGeneratorMethod'))
                                var.put(u'method', Js(True))
                            else:
                                if var.get(u'key').neg():
                                    var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").get(u'lookahead'))
                                var.put(u'kind', Js(u'init'))
                                if (var.get(u"this").callprop(u'match', Js(u':')) and var.get(u'isAsync').neg()):
                                    if (var.get(u'computed').neg() and var.get(u"this").callprop(u'isPropertyKey', var.get(u'key'), Js(u'__proto__'))):
                                        if var.get(u'hasProto').get(u'value'):
                                            var.get(u"this").callprop(u'tolerateError', var.get(u'messages_1').get(u'Messages').get(u'DuplicateProtoProperty'))
                                        var.get(u'hasProto').put(u'value', Js(True))
                                    var.get(u"this").callprop(u'nextToken')
                                    var.put(u'value', var.get(u"this").callprop(u'inheritCoverGrammar', var.get(u"this").get(u'parseAssignmentExpression')))
                                else:
                                    if var.get(u"this").callprop(u'match', Js(u'(')):
                                        var.put(u'value', (var.get(u"this").callprop(u'parsePropertyMethodAsyncFunction') if var.get(u'isAsync') else var.get(u"this").callprop(u'parsePropertyMethodFunction')))
                                        var.put(u'method', Js(True))
                                    else:
                                        if PyJsStrictEq(var.get(u'token').get(u'type'),Js(3.0)):
                                            var.put(u'id', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'Identifier').create(var.get(u'token').get(u'value'))))
                                            if var.get(u"this").callprop(u'match', Js(u'=')):
                                                var.get(u"this").get(u'context').put(u'firstCoverInitializedNameError', var.get(u"this").get(u'lookahead'))
                                                var.get(u"this").callprop(u'nextToken')
                                                var.put(u'shorthand', Js(True))
                                                var.put(u'init', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseAssignmentExpression')))
                                                var.put(u'value', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'AssignmentPattern').create(var.get(u'id'), var.get(u'init'))))
                                            else:
                                                var.put(u'shorthand', Js(True))
                                                var.put(u'value', var.get(u'id'))
                                        else:
                                            var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").callprop(u'nextToken'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'Property').create(var.get(u'kind'), var.get(u'key'), var.get(u'computed'), var.get(u'value'), var.get(u'method'), var.get(u'shorthand')))
                PyJs_anonymous_245_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseObjectProperty', PyJs_anonymous_245_)
                @Js
                def PyJs_anonymous_246_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'hasProto', u'properties'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expect', Js(u'{'))
                    var.put(u'properties', Js([]))
                    PyJs_Object_247_ = Js({u'value':Js(False)})
                    var.put(u'hasProto', PyJs_Object_247_)
                    while var.get(u"this").callprop(u'match', Js(u'}')).neg():
                        var.get(u'properties').callprop(u'push', var.get(u"this").callprop(u'parseObjectProperty', var.get(u'hasProto')))
                        if var.get(u"this").callprop(u'match', Js(u'}')).neg():
                            var.get(u"this").callprop(u'expectCommaSeparator')
                    var.get(u"this").callprop(u'expect', Js(u'}'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ObjectExpression').create(var.get(u'properties')))
                PyJs_anonymous_246_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseObjectInitializer', PyJs_anonymous_246_)
                @Js
                def PyJs_anonymous_248_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'raw', u'token', u'cooked'])
                    var.get(u'assert_1').callprop(u'assert', var.get(u"this").get(u'lookahead').get(u'head'), Js(u'Template literal must start with a template head'))
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'token', var.get(u"this").callprop(u'nextToken'))
                    var.put(u'raw', var.get(u'token').get(u'value'))
                    var.put(u'cooked', var.get(u'token').get(u'cooked'))
                    PyJs_Object_249_ = Js({u'raw':var.get(u'raw'),u'cooked':var.get(u'cooked')})
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'TemplateElement').create(PyJs_Object_249_, var.get(u'token').get(u'tail')))
                PyJs_anonymous_248_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseTemplateHead', PyJs_anonymous_248_)
                @Js
                def PyJs_anonymous_250_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'raw', u'token', u'cooked'])
                    if PyJsStrictNeq(var.get(u"this").get(u'lookahead').get(u'type'),Js(10.0)):
                        var.get(u"this").callprop(u'throwUnexpectedToken')
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'token', var.get(u"this").callprop(u'nextToken'))
                    var.put(u'raw', var.get(u'token').get(u'value'))
                    var.put(u'cooked', var.get(u'token').get(u'cooked'))
                    PyJs_Object_251_ = Js({u'raw':var.get(u'raw'),u'cooked':var.get(u'cooked')})
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'TemplateElement').create(PyJs_Object_251_, var.get(u'token').get(u'tail')))
                PyJs_anonymous_250_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseTemplateElement', PyJs_anonymous_250_)
                @Js
                def PyJs_anonymous_252_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'quasis', u'expressions', u'quasi'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'expressions', Js([]))
                    var.put(u'quasis', Js([]))
                    var.put(u'quasi', var.get(u"this").callprop(u'parseTemplateHead'))
                    var.get(u'quasis').callprop(u'push', var.get(u'quasi'))
                    while var.get(u'quasi').get(u'tail').neg():
                        var.get(u'expressions').callprop(u'push', var.get(u"this").callprop(u'parseExpression'))
                        var.put(u'quasi', var.get(u"this").callprop(u'parseTemplateElement'))
                        var.get(u'quasis').callprop(u'push', var.get(u'quasi'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'TemplateLiteral').create(var.get(u'quasis'), var.get(u'expressions')))
                PyJs_anonymous_252_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseTemplateLiteral', PyJs_anonymous_252_)
                @Js
                def PyJs_anonymous_253_(expr, this, arguments, var=var):
                    var = Scope({u'this':this, u'expr':expr, u'arguments':arguments}, var)
                    var.registers([u'i', u'expr'])
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get(u'expr').get(u'type'))
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'syntax_1').get(u'Syntax').get(u'Identifier')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'syntax_1').get(u'Syntax').get(u'MemberExpression')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'syntax_1').get(u'Syntax').get(u'RestElement')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'syntax_1').get(u'Syntax').get(u'AssignmentPattern')):
                            SWITCHED = True
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'syntax_1').get(u'Syntax').get(u'SpreadElement')):
                            SWITCHED = True
                            var.get(u'expr').put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'RestElement'))
                            var.get(u"this").callprop(u'reinterpretExpressionAsPattern', var.get(u'expr').get(u'argument'))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'syntax_1').get(u'Syntax').get(u'ArrayExpression')):
                            SWITCHED = True
                            var.get(u'expr').put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ArrayPattern'))
                            #for JS loop
                            var.put(u'i', Js(0.0))
                            while (var.get(u'i')<var.get(u'expr').get(u'elements').get(u'length')):
                                try:
                                    if PyJsStrictNeq(var.get(u'expr').get(u'elements').get(var.get(u'i')),var.get(u"null")):
                                        var.get(u"this").callprop(u'reinterpretExpressionAsPattern', var.get(u'expr').get(u'elements').get(var.get(u'i')))
                                finally:
                                        (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'syntax_1').get(u'Syntax').get(u'ObjectExpression')):
                            SWITCHED = True
                            var.get(u'expr').put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'ObjectPattern'))
                            #for JS loop
                            var.put(u'i', Js(0.0))
                            while (var.get(u'i')<var.get(u'expr').get(u'properties').get(u'length')):
                                try:
                                    var.get(u"this").callprop(u'reinterpretExpressionAsPattern', var.get(u'expr').get(u'properties').get(var.get(u'i')).get(u'value'))
                                finally:
                                        (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'syntax_1').get(u'Syntax').get(u'AssignmentExpression')):
                            SWITCHED = True
                            var.get(u'expr').put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'AssignmentPattern'))
                            var.get(u'expr').delete(u'operator')
                            var.get(u"this").callprop(u'reinterpretExpressionAsPattern', var.get(u'expr').get(u'left'))
                            break
                        if True:
                            SWITCHED = True
                            break
                        SWITCHED = True
                        break
                PyJs_anonymous_253_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'reinterpretExpressionAsPattern', PyJs_anonymous_253_)
                @Js
                def PyJs_anonymous_254_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'parameters', u'i', u'expr', u'params', u'arrow', u'startToken', u'expressions'])
                    pass
                    var.get(u"this").callprop(u'expect', Js(u'('))
                    if var.get(u"this").callprop(u'match', Js(u')')):
                        var.get(u"this").callprop(u'nextToken')
                        if var.get(u"this").callprop(u'match', Js(u'=>')).neg():
                            var.get(u"this").callprop(u'expect', Js(u'=>'))
                        PyJs_Object_255_ = Js({u'type':var.get(u'ArrowParameterPlaceHolder'),u'params':Js([]),u'async':Js(False)})
                        var.put(u'expr', PyJs_Object_255_)
                    else:
                        var.put(u'startToken', var.get(u"this").get(u'lookahead'))
                        var.put(u'params', Js([]))
                        if var.get(u"this").callprop(u'match', Js(u'...')):
                            var.put(u'expr', var.get(u"this").callprop(u'parseRestElement', var.get(u'params')))
                            var.get(u"this").callprop(u'expect', Js(u')'))
                            if var.get(u"this").callprop(u'match', Js(u'=>')).neg():
                                var.get(u"this").callprop(u'expect', Js(u'=>'))
                            PyJs_Object_256_ = Js({u'type':var.get(u'ArrowParameterPlaceHolder'),u'params':Js([var.get(u'expr')]),u'async':Js(False)})
                            var.put(u'expr', PyJs_Object_256_)
                        else:
                            var.put(u'arrow', Js(False))
                            var.get(u"this").get(u'context').put(u'isBindingElement', Js(True))
                            var.put(u'expr', var.get(u"this").callprop(u'inheritCoverGrammar', var.get(u"this").get(u'parseAssignmentExpression')))
                            if var.get(u"this").callprop(u'match', Js(u',')):
                                var.put(u'expressions', Js([]))
                                var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(False))
                                var.get(u'expressions').callprop(u'push', var.get(u'expr'))
                                while PyJsStrictNeq(var.get(u"this").get(u'lookahead').get(u'type'),Js(2.0)):
                                    if var.get(u"this").callprop(u'match', Js(u',')).neg():
                                        break
                                    var.get(u"this").callprop(u'nextToken')
                                    if var.get(u"this").callprop(u'match', Js(u')')):
                                        var.get(u"this").callprop(u'nextToken')
                                        #for JS loop
                                        var.put(u'i', Js(0.0))
                                        while (var.get(u'i')<var.get(u'expressions').get(u'length')):
                                            try:
                                                var.get(u"this").callprop(u'reinterpretExpressionAsPattern', var.get(u'expressions').get(var.get(u'i')))
                                            finally:
                                                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
                                        var.put(u'arrow', Js(True))
                                        PyJs_Object_257_ = Js({u'type':var.get(u'ArrowParameterPlaceHolder'),u'params':var.get(u'expressions'),u'async':Js(False)})
                                        var.put(u'expr', PyJs_Object_257_)
                                    else:
                                        if var.get(u"this").callprop(u'match', Js(u'...')):
                                            if var.get(u"this").get(u'context').get(u'isBindingElement').neg():
                                                var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").get(u'lookahead'))
                                            var.get(u'expressions').callprop(u'push', var.get(u"this").callprop(u'parseRestElement', var.get(u'params')))
                                            var.get(u"this").callprop(u'expect', Js(u')'))
                                            if var.get(u"this").callprop(u'match', Js(u'=>')).neg():
                                                var.get(u"this").callprop(u'expect', Js(u'=>'))
                                            var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                                            #for JS loop
                                            var.put(u'i', Js(0.0))
                                            while (var.get(u'i')<var.get(u'expressions').get(u'length')):
                                                try:
                                                    var.get(u"this").callprop(u'reinterpretExpressionAsPattern', var.get(u'expressions').get(var.get(u'i')))
                                                finally:
                                                        (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
                                            var.put(u'arrow', Js(True))
                                            PyJs_Object_258_ = Js({u'type':var.get(u'ArrowParameterPlaceHolder'),u'params':var.get(u'expressions'),u'async':Js(False)})
                                            var.put(u'expr', PyJs_Object_258_)
                                        else:
                                            var.get(u'expressions').callprop(u'push', var.get(u"this").callprop(u'inheritCoverGrammar', var.get(u"this").get(u'parseAssignmentExpression')))
                                    if var.get(u'arrow'):
                                        break
                                if var.get(u'arrow').neg():
                                    var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u"this").callprop(u'startNode', var.get(u'startToken')), var.get(u'Node').get(u'SequenceExpression').create(var.get(u'expressions'))))
                            if var.get(u'arrow').neg():
                                var.get(u"this").callprop(u'expect', Js(u')'))
                                if var.get(u"this").callprop(u'match', Js(u'=>')):
                                    if (PyJsStrictEq(var.get(u'expr').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'Identifier')) and PyJsStrictEq(var.get(u'expr').get(u'name'),Js(u'yield'))):
                                        var.put(u'arrow', Js(True))
                                        PyJs_Object_259_ = Js({u'type':var.get(u'ArrowParameterPlaceHolder'),u'params':Js([var.get(u'expr')]),u'async':Js(False)})
                                        var.put(u'expr', PyJs_Object_259_)
                                    if var.get(u'arrow').neg():
                                        if var.get(u"this").get(u'context').get(u'isBindingElement').neg():
                                            var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").get(u'lookahead'))
                                        if PyJsStrictEq(var.get(u'expr').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'SequenceExpression')):
                                            #for JS loop
                                            var.put(u'i', Js(0.0))
                                            while (var.get(u'i')<var.get(u'expr').get(u'expressions').get(u'length')):
                                                try:
                                                    var.get(u"this").callprop(u'reinterpretExpressionAsPattern', var.get(u'expr').get(u'expressions').get(var.get(u'i')))
                                                finally:
                                                        (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
                                        else:
                                            var.get(u"this").callprop(u'reinterpretExpressionAsPattern', var.get(u'expr'))
                                        var.put(u'parameters', (var.get(u'expr').get(u'expressions') if PyJsStrictEq(var.get(u'expr').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'SequenceExpression')) else Js([var.get(u'expr')])))
                                        PyJs_Object_260_ = Js({u'type':var.get(u'ArrowParameterPlaceHolder'),u'params':var.get(u'parameters'),u'async':Js(False)})
                                        var.put(u'expr', PyJs_Object_260_)
                                var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                    return var.get(u'expr')
                PyJs_anonymous_254_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseGroupExpression', PyJs_anonymous_254_)
                @Js
                def PyJs_anonymous_261_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'expr', u'args'])
                    var.get(u"this").callprop(u'expect', Js(u'('))
                    var.put(u'args', Js([]))
                    if var.get(u"this").callprop(u'match', Js(u')')).neg():
                        while Js(True):
                            var.put(u'expr', (var.get(u"this").callprop(u'parseSpreadElement') if var.get(u"this").callprop(u'match', Js(u'...')) else var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseAssignmentExpression'))))
                            var.get(u'args').callprop(u'push', var.get(u'expr'))
                            if var.get(u"this").callprop(u'match', Js(u')')):
                                break
                            var.get(u"this").callprop(u'expectCommaSeparator')
                            if var.get(u"this").callprop(u'match', Js(u')')):
                                break
                    var.get(u"this").callprop(u'expect', Js(u')'))
                    return var.get(u'args')
                PyJs_anonymous_261_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseArguments', PyJs_anonymous_261_)
                @Js
                def PyJs_anonymous_262_(token, this, arguments, var=var):
                    var = Scope({u'this':this, u'token':token, u'arguments':arguments}, var)
                    var.registers([u'token'])
                    return (((PyJsStrictEq(var.get(u'token').get(u'type'),Js(3.0)) or PyJsStrictEq(var.get(u'token').get(u'type'),Js(4.0))) or PyJsStrictEq(var.get(u'token').get(u'type'),Js(1.0))) or PyJsStrictEq(var.get(u'token').get(u'type'),Js(5.0)))
                PyJs_anonymous_262_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'isIdentifierName', PyJs_anonymous_262_)
                @Js
                def PyJs_anonymous_263_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'token'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'token', var.get(u"this").callprop(u'nextToken'))
                    if var.get(u"this").callprop(u'isIdentifierName', var.get(u'token')).neg():
                        var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'token'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'Identifier').create(var.get(u'token').get(u'value')))
                PyJs_anonymous_263_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseIdentifierName', PyJs_anonymous_263_)
                @Js
                def PyJs_anonymous_264_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'expr', u'args', u'property', u'callee', u'id'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'id', var.get(u"this").callprop(u'parseIdentifierName'))
                    var.get(u'assert_1').callprop(u'assert', PyJsStrictEq(var.get(u'id').get(u'name'),Js(u'new')), Js(u'New expression must start with `new`'))
                    pass
                    if var.get(u"this").callprop(u'match', Js(u'.')):
                        var.get(u"this").callprop(u'nextToken')
                        if ((PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'type'),Js(3.0)) and var.get(u"this").get(u'context').get(u'inFunctionBody')) and PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'value'),Js(u'target'))):
                            var.put(u'property', var.get(u"this").callprop(u'parseIdentifierName'))
                            var.put(u'expr', var.get(u'Node').get(u'MetaProperty').create(var.get(u'id'), var.get(u'property')))
                        else:
                            var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").get(u'lookahead'))
                    else:
                        var.put(u'callee', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseLeftHandSideExpression')))
                        var.put(u'args', (var.get(u"this").callprop(u'parseArguments') if var.get(u"this").callprop(u'match', Js(u'(')) else Js([])))
                        var.put(u'expr', var.get(u'Node').get(u'NewExpression').create(var.get(u'callee'), var.get(u'args')))
                        var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(False))
                        var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'expr'))
                PyJs_anonymous_264_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseNewExpression', PyJs_anonymous_264_)
                @Js
                def PyJs_anonymous_265_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'arg'])
                    var.put(u'arg', var.get(u"this").callprop(u'parseAssignmentExpression'))
                    var.get(u"this").get(u'context').put(u'firstCoverInitializedNameError', var.get(u"null"))
                    return var.get(u'arg')
                PyJs_anonymous_265_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseAsyncArgument', PyJs_anonymous_265_)
                @Js
                def PyJs_anonymous_266_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'expr', u'args'])
                    var.get(u"this").callprop(u'expect', Js(u'('))
                    var.put(u'args', Js([]))
                    if var.get(u"this").callprop(u'match', Js(u')')).neg():
                        while Js(True):
                            var.put(u'expr', (var.get(u"this").callprop(u'parseSpreadElement') if var.get(u"this").callprop(u'match', Js(u'...')) else var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseAsyncArgument'))))
                            var.get(u'args').callprop(u'push', var.get(u'expr'))
                            if var.get(u"this").callprop(u'match', Js(u')')):
                                break
                            var.get(u"this").callprop(u'expectCommaSeparator')
                            if var.get(u"this").callprop(u'match', Js(u')')):
                                break
                    var.get(u"this").callprop(u'expect', Js(u')'))
                    return var.get(u'args')
                PyJs_anonymous_266_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseAsyncArguments', PyJs_anonymous_266_)
                @Js
                def PyJs_anonymous_267_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'previousAllowIn', u'quasi', u'i', u'startToken', u'args', u'asyncArrow', u'maybeAsync', u'expr', u'property'])
                    var.put(u'startToken', var.get(u"this").get(u'lookahead'))
                    var.put(u'maybeAsync', var.get(u"this").callprop(u'matchContextualKeyword', Js(u'async')))
                    var.put(u'previousAllowIn', var.get(u"this").get(u'context').get(u'allowIn'))
                    var.get(u"this").get(u'context').put(u'allowIn', Js(True))
                    pass
                    if (var.get(u"this").callprop(u'matchKeyword', Js(u'super')) and var.get(u"this").get(u'context').get(u'inFunctionBody')):
                        var.put(u'expr', var.get(u"this").callprop(u'createNode'))
                        var.get(u"this").callprop(u'nextToken')
                        var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u'expr'), var.get(u'Node').get(u'Super').create()))
                        if ((var.get(u"this").callprop(u'match', Js(u'(')).neg() and var.get(u"this").callprop(u'match', Js(u'.')).neg()) and var.get(u"this").callprop(u'match', Js(u'[')).neg()):
                            var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").get(u'lookahead'))
                    else:
                        var.put(u'expr', var.get(u"this").callprop(u'inheritCoverGrammar', (var.get(u"this").get(u'parseNewExpression') if var.get(u"this").callprop(u'matchKeyword', Js(u'new')) else var.get(u"this").get(u'parsePrimaryExpression'))))
                    while Js(True):
                        if var.get(u"this").callprop(u'match', Js(u'.')):
                            var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                            var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(True))
                            var.get(u"this").callprop(u'expect', Js(u'.'))
                            var.put(u'property', var.get(u"this").callprop(u'parseIdentifierName'))
                            var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u"this").callprop(u'startNode', var.get(u'startToken')), var.get(u'Node').get(u'StaticMemberExpression').create(var.get(u'expr'), var.get(u'property'))))
                        else:
                            if var.get(u"this").callprop(u'match', Js(u'(')):
                                var.put(u'asyncArrow', (var.get(u'maybeAsync') and PyJsStrictEq(var.get(u'startToken').get(u'lineNumber'),var.get(u"this").get(u'lookahead').get(u'lineNumber'))))
                                var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                                var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(False))
                                var.put(u'args', (var.get(u"this").callprop(u'parseAsyncArguments') if var.get(u'asyncArrow') else var.get(u"this").callprop(u'parseArguments')))
                                var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u"this").callprop(u'startNode', var.get(u'startToken')), var.get(u'Node').get(u'CallExpression').create(var.get(u'expr'), var.get(u'args'))))
                                if (var.get(u'asyncArrow') and var.get(u"this").callprop(u'match', Js(u'=>'))):
                                    #for JS loop
                                    var.put(u'i', Js(0.0))
                                    while (var.get(u'i')<var.get(u'args').get(u'length')):
                                        try:
                                            var.get(u"this").callprop(u'reinterpretExpressionAsPattern', var.get(u'args').get(var.get(u'i')))
                                        finally:
                                                var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                                    PyJs_Object_268_ = Js({u'type':var.get(u'ArrowParameterPlaceHolder'),u'params':var.get(u'args'),u'async':Js(True)})
                                    var.put(u'expr', PyJs_Object_268_)
                            else:
                                if var.get(u"this").callprop(u'match', Js(u'[')):
                                    var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                                    var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(True))
                                    var.get(u"this").callprop(u'expect', Js(u'['))
                                    var.put(u'property', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseExpression')))
                                    var.get(u"this").callprop(u'expect', Js(u']'))
                                    var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u"this").callprop(u'startNode', var.get(u'startToken')), var.get(u'Node').get(u'ComputedMemberExpression').create(var.get(u'expr'), var.get(u'property'))))
                                else:
                                    if (PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'type'),Js(10.0)) and var.get(u"this").get(u'lookahead').get(u'head')):
                                        var.put(u'quasi', var.get(u"this").callprop(u'parseTemplateLiteral'))
                                        var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u"this").callprop(u'startNode', var.get(u'startToken')), var.get(u'Node').get(u'TaggedTemplateExpression').create(var.get(u'expr'), var.get(u'quasi'))))
                                    else:
                                        break
                    var.get(u"this").get(u'context').put(u'allowIn', var.get(u'previousAllowIn'))
                    return var.get(u'expr')
                PyJs_anonymous_267_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseLeftHandSideExpressionAllowCall', PyJs_anonymous_267_)
                @Js
                def PyJs_anonymous_269_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expectKeyword', Js(u'super'))
                    if (var.get(u"this").callprop(u'match', Js(u'[')).neg() and var.get(u"this").callprop(u'match', Js(u'.')).neg()):
                        var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").get(u'lookahead'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'Super').create())
                PyJs_anonymous_269_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseSuper', PyJs_anonymous_269_)
                @Js
                def PyJs_anonymous_270_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'expr', u'quasi', u'property'])
                    var.get(u'assert_1').callprop(u'assert', var.get(u"this").get(u'context').get(u'allowIn'), Js(u'callee of new expression always allow in keyword.'))
                    var.put(u'node', var.get(u"this").callprop(u'startNode', var.get(u"this").get(u'lookahead')))
                    var.put(u'expr', (var.get(u"this").callprop(u'parseSuper') if (var.get(u"this").callprop(u'matchKeyword', Js(u'super')) and var.get(u"this").get(u'context').get(u'inFunctionBody')) else var.get(u"this").callprop(u'inheritCoverGrammar', (var.get(u"this").get(u'parseNewExpression') if var.get(u"this").callprop(u'matchKeyword', Js(u'new')) else var.get(u"this").get(u'parsePrimaryExpression')))))
                    while Js(True):
                        if var.get(u"this").callprop(u'match', Js(u'[')):
                            var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                            var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(True))
                            var.get(u"this").callprop(u'expect', Js(u'['))
                            var.put(u'property', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseExpression')))
                            var.get(u"this").callprop(u'expect', Js(u']'))
                            var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ComputedMemberExpression').create(var.get(u'expr'), var.get(u'property'))))
                        else:
                            if var.get(u"this").callprop(u'match', Js(u'.')):
                                var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                                var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(True))
                                var.get(u"this").callprop(u'expect', Js(u'.'))
                                var.put(u'property', var.get(u"this").callprop(u'parseIdentifierName'))
                                var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'StaticMemberExpression').create(var.get(u'expr'), var.get(u'property'))))
                            else:
                                if (PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'type'),Js(10.0)) and var.get(u"this").get(u'lookahead').get(u'head')):
                                    var.put(u'quasi', var.get(u"this").callprop(u'parseTemplateLiteral'))
                                    var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'TaggedTemplateExpression').create(var.get(u'expr'), var.get(u'quasi'))))
                                else:
                                    break
                    return var.get(u'expr')
                PyJs_anonymous_270_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseLeftHandSideExpression', PyJs_anonymous_270_)
                @Js
                def PyJs_anonymous_271_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'expr', u'prefix', u'token', u'startToken', u'operator'])
                    pass
                    var.put(u'startToken', var.get(u"this").get(u'lookahead'))
                    if (var.get(u"this").callprop(u'match', Js(u'++')) or var.get(u"this").callprop(u'match', Js(u'--'))):
                        var.put(u'node', var.get(u"this").callprop(u'startNode', var.get(u'startToken')))
                        var.put(u'token', var.get(u"this").callprop(u'nextToken'))
                        var.put(u'expr', var.get(u"this").callprop(u'inheritCoverGrammar', var.get(u"this").get(u'parseUnaryExpression')))
                        if ((var.get(u"this").get(u'context').get(u'strict') and PyJsStrictEq(var.get(u'expr').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'Identifier'))) and var.get(u"this").get(u'scanner').callprop(u'isRestrictedWord', var.get(u'expr').get(u'name'))):
                            var.get(u"this").callprop(u'tolerateError', var.get(u'messages_1').get(u'Messages').get(u'StrictLHSPrefix'))
                        if var.get(u"this").get(u'context').get(u'isAssignmentTarget').neg():
                            var.get(u"this").callprop(u'tolerateError', var.get(u'messages_1').get(u'Messages').get(u'InvalidLHSInAssignment'))
                        var.put(u'prefix', Js(True))
                        var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'UpdateExpression').create(var.get(u'token').get(u'value'), var.get(u'expr'), var.get(u'prefix'))))
                        var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(False))
                        var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                    else:
                        var.put(u'expr', var.get(u"this").callprop(u'inheritCoverGrammar', var.get(u"this").get(u'parseLeftHandSideExpressionAllowCall')))
                        if (var.get(u"this").get(u'hasLineTerminator').neg() and PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'type'),Js(7.0))):
                            if (var.get(u"this").callprop(u'match', Js(u'++')) or var.get(u"this").callprop(u'match', Js(u'--'))):
                                if ((var.get(u"this").get(u'context').get(u'strict') and PyJsStrictEq(var.get(u'expr').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'Identifier'))) and var.get(u"this").get(u'scanner').callprop(u'isRestrictedWord', var.get(u'expr').get(u'name'))):
                                    var.get(u"this").callprop(u'tolerateError', var.get(u'messages_1').get(u'Messages').get(u'StrictLHSPostfix'))
                                if var.get(u"this").get(u'context').get(u'isAssignmentTarget').neg():
                                    var.get(u"this").callprop(u'tolerateError', var.get(u'messages_1').get(u'Messages').get(u'InvalidLHSInAssignment'))
                                var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(False))
                                var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                                var.put(u'operator', var.get(u"this").callprop(u'nextToken').get(u'value'))
                                var.put(u'prefix', Js(False))
                                var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u"this").callprop(u'startNode', var.get(u'startToken')), var.get(u'Node').get(u'UpdateExpression').create(var.get(u'operator'), var.get(u'expr'), var.get(u'prefix'))))
                    return var.get(u'expr')
                PyJs_anonymous_271_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseUpdateExpression', PyJs_anonymous_271_)
                @Js
                def PyJs_anonymous_272_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'argument'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'nextToken')
                    var.put(u'argument', var.get(u"this").callprop(u'parseUnaryExpression'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'AwaitExpression').create(var.get(u'argument')))
                PyJs_anonymous_272_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseAwaitExpression', PyJs_anonymous_272_)
                @Js
                def PyJs_anonymous_273_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'expr', u'token'])
                    pass
                    if ((((((var.get(u"this").callprop(u'match', Js(u'+')) or var.get(u"this").callprop(u'match', Js(u'-'))) or var.get(u"this").callprop(u'match', Js(u'~'))) or var.get(u"this").callprop(u'match', Js(u'!'))) or var.get(u"this").callprop(u'matchKeyword', Js(u'delete'))) or var.get(u"this").callprop(u'matchKeyword', Js(u'void'))) or var.get(u"this").callprop(u'matchKeyword', Js(u'typeof'))):
                        var.put(u'node', var.get(u"this").callprop(u'startNode', var.get(u"this").get(u'lookahead')))
                        var.put(u'token', var.get(u"this").callprop(u'nextToken'))
                        var.put(u'expr', var.get(u"this").callprop(u'inheritCoverGrammar', var.get(u"this").get(u'parseUnaryExpression')))
                        var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'UnaryExpression').create(var.get(u'token').get(u'value'), var.get(u'expr'))))
                        if ((var.get(u"this").get(u'context').get(u'strict') and PyJsStrictEq(var.get(u'expr').get(u'operator'),Js(u'delete'))) and PyJsStrictEq(var.get(u'expr').get(u'argument').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'Identifier'))):
                            var.get(u"this").callprop(u'tolerateError', var.get(u'messages_1').get(u'Messages').get(u'StrictDelete'))
                        var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(False))
                        var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                    else:
                        if (var.get(u"this").get(u'context').get(u'await') and var.get(u"this").callprop(u'matchContextualKeyword', Js(u'await'))):
                            var.put(u'expr', var.get(u"this").callprop(u'parseAwaitExpression'))
                        else:
                            var.put(u'expr', var.get(u"this").callprop(u'parseUpdateExpression'))
                    return var.get(u'expr')
                PyJs_anonymous_273_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseUnaryExpression', PyJs_anonymous_273_)
                @Js
                def PyJs_anonymous_274_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'startToken', u'left', u'right', u'expr'])
                    var.put(u'startToken', var.get(u"this").get(u'lookahead'))
                    var.put(u'expr', var.get(u"this").callprop(u'inheritCoverGrammar', var.get(u"this").get(u'parseUnaryExpression')))
                    if (PyJsStrictNeq(var.get(u'expr').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'UnaryExpression')) and var.get(u"this").callprop(u'match', Js(u'**'))):
                        var.get(u"this").callprop(u'nextToken')
                        var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(False))
                        var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                        var.put(u'left', var.get(u'expr'))
                        var.put(u'right', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseExponentiationExpression')))
                        var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u"this").callprop(u'startNode', var.get(u'startToken')), var.get(u'Node').get(u'BinaryExpression').create(Js(u'**'), var.get(u'left'), var.get(u'right'))))
                    return var.get(u'expr')
                PyJs_anonymous_274_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseExponentiationExpression', PyJs_anonymous_274_)
                @Js
                def PyJs_anonymous_275_(token, this, arguments, var=var):
                    var = Scope({u'this':this, u'token':token, u'arguments':arguments}, var)
                    var.registers([u'token', u'precedence', u'op'])
                    var.put(u'op', var.get(u'token').get(u'value'))
                    pass
                    if PyJsStrictEq(var.get(u'token').get(u'type'),Js(7.0)):
                        var.put(u'precedence', (var.get(u"this").get(u'operatorPrecedence').get(var.get(u'op')) or Js(0.0)))
                    else:
                        if PyJsStrictEq(var.get(u'token').get(u'type'),Js(4.0)):
                            var.put(u'precedence', (Js(7.0) if (PyJsStrictEq(var.get(u'op'),Js(u'instanceof')) or (var.get(u"this").get(u'context').get(u'allowIn') and PyJsStrictEq(var.get(u'op'),Js(u'in')))) else Js(0.0)))
                        else:
                            var.put(u'precedence', Js(0.0))
                    return var.get(u'precedence')
                PyJs_anonymous_275_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'binaryPrecedence', PyJs_anonymous_275_)
                @Js
                def PyJs_anonymous_276_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'right', u'i', u'startToken', u'markers', u'marker', u'token', u'lastMarker', u'prec', u'expr', u'operator', u'lastLineStart', u'precedences', u'stack', u'left'])
                    var.put(u'startToken', var.get(u"this").get(u'lookahead'))
                    var.put(u'expr', var.get(u"this").callprop(u'inheritCoverGrammar', var.get(u"this").get(u'parseExponentiationExpression')))
                    var.put(u'token', var.get(u"this").get(u'lookahead'))
                    var.put(u'prec', var.get(u"this").callprop(u'binaryPrecedence', var.get(u'token')))
                    if (var.get(u'prec')>Js(0.0)):
                        var.get(u"this").callprop(u'nextToken')
                        var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(False))
                        var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                        var.put(u'markers', Js([var.get(u'startToken'), var.get(u"this").get(u'lookahead')]))
                        var.put(u'left', var.get(u'expr'))
                        var.put(u'right', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseExponentiationExpression')))
                        var.put(u'stack', Js([var.get(u'left'), var.get(u'token').get(u'value'), var.get(u'right')]))
                        var.put(u'precedences', Js([var.get(u'prec')]))
                        while Js(True):
                            var.put(u'prec', var.get(u"this").callprop(u'binaryPrecedence', var.get(u"this").get(u'lookahead')))
                            if (var.get(u'prec')<=Js(0.0)):
                                break
                            while ((var.get(u'stack').get(u'length')>Js(2.0)) and (var.get(u'prec')<=var.get(u'precedences').get((var.get(u'precedences').get(u'length')-Js(1.0))))):
                                var.put(u'right', var.get(u'stack').callprop(u'pop'))
                                var.put(u'operator', var.get(u'stack').callprop(u'pop'))
                                var.get(u'precedences').callprop(u'pop')
                                var.put(u'left', var.get(u'stack').callprop(u'pop'))
                                var.get(u'markers').callprop(u'pop')
                                var.put(u'node', var.get(u"this").callprop(u'startNode', var.get(u'markers').get((var.get(u'markers').get(u'length')-Js(1.0)))))
                                var.get(u'stack').callprop(u'push', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'BinaryExpression').create(var.get(u'operator'), var.get(u'left'), var.get(u'right'))))
                            var.get(u'stack').callprop(u'push', var.get(u"this").callprop(u'nextToken').get(u'value'))
                            var.get(u'precedences').callprop(u'push', var.get(u'prec'))
                            var.get(u'markers').callprop(u'push', var.get(u"this").get(u'lookahead'))
                            var.get(u'stack').callprop(u'push', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseExponentiationExpression')))
                        var.put(u'i', (var.get(u'stack').get(u'length')-Js(1.0)))
                        var.put(u'expr', var.get(u'stack').get(var.get(u'i')))
                        var.put(u'lastMarker', var.get(u'markers').callprop(u'pop'))
                        while (var.get(u'i')>Js(1.0)):
                            var.put(u'marker', var.get(u'markers').callprop(u'pop'))
                            var.put(u'lastLineStart', (var.get(u'lastMarker') and var.get(u'lastMarker').get(u'lineStart')))
                            var.put(u'node', var.get(u"this").callprop(u'startNode', var.get(u'marker'), var.get(u'lastLineStart')))
                            var.put(u'operator', var.get(u'stack').get((var.get(u'i')-Js(1.0))))
                            var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'BinaryExpression').create(var.get(u'operator'), var.get(u'stack').get((var.get(u'i')-Js(2.0))), var.get(u'expr'))))
                            var.put(u'i', Js(2.0), u'-')
                            var.put(u'lastMarker', var.get(u'marker'))
                    return var.get(u'expr')
                PyJs_anonymous_276_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseBinaryExpression', PyJs_anonymous_276_)
                @Js
                def PyJs_anonymous_277_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'previousAllowIn', u'startToken', u'consequent', u'alternate', u'expr'])
                    var.put(u'startToken', var.get(u"this").get(u'lookahead'))
                    var.put(u'expr', var.get(u"this").callprop(u'inheritCoverGrammar', var.get(u"this").get(u'parseBinaryExpression')))
                    if var.get(u"this").callprop(u'match', Js(u'?')):
                        var.get(u"this").callprop(u'nextToken')
                        var.put(u'previousAllowIn', var.get(u"this").get(u'context').get(u'allowIn'))
                        var.get(u"this").get(u'context').put(u'allowIn', Js(True))
                        var.put(u'consequent', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseAssignmentExpression')))
                        var.get(u"this").get(u'context').put(u'allowIn', var.get(u'previousAllowIn'))
                        var.get(u"this").callprop(u'expect', Js(u':'))
                        var.put(u'alternate', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseAssignmentExpression')))
                        var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u"this").callprop(u'startNode', var.get(u'startToken')), var.get(u'Node').get(u'ConditionalExpression').create(var.get(u'expr'), var.get(u'consequent'), var.get(u'alternate'))))
                        var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(False))
                        var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                    return var.get(u'expr')
                PyJs_anonymous_277_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseConditionalExpression', PyJs_anonymous_277_)
                @Js
                def PyJs_anonymous_278_(options, param, this, arguments, var=var):
                    var = Scope({u'this':this, u'options':options, u'param':param, u'arguments':arguments}, var)
                    var.registers([u'i', u'options', u'param'])
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get(u'param').get(u'type'))
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'syntax_1').get(u'Syntax').get(u'Identifier')):
                            SWITCHED = True
                            var.get(u"this").callprop(u'validateParam', var.get(u'options'), var.get(u'param'), var.get(u'param').get(u'name'))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'syntax_1').get(u'Syntax').get(u'RestElement')):
                            SWITCHED = True
                            var.get(u"this").callprop(u'checkPatternParam', var.get(u'options'), var.get(u'param').get(u'argument'))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'syntax_1').get(u'Syntax').get(u'AssignmentPattern')):
                            SWITCHED = True
                            var.get(u"this").callprop(u'checkPatternParam', var.get(u'options'), var.get(u'param').get(u'left'))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'syntax_1').get(u'Syntax').get(u'ArrayPattern')):
                            SWITCHED = True
                            #for JS loop
                            var.put(u'i', Js(0.0))
                            while (var.get(u'i')<var.get(u'param').get(u'elements').get(u'length')):
                                try:
                                    if PyJsStrictNeq(var.get(u'param').get(u'elements').get(var.get(u'i')),var.get(u"null")):
                                        var.get(u"this").callprop(u'checkPatternParam', var.get(u'options'), var.get(u'param').get(u'elements').get(var.get(u'i')))
                                finally:
                                        (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'syntax_1').get(u'Syntax').get(u'ObjectPattern')):
                            SWITCHED = True
                            #for JS loop
                            var.put(u'i', Js(0.0))
                            while (var.get(u'i')<var.get(u'param').get(u'properties').get(u'length')):
                                try:
                                    var.get(u"this").callprop(u'checkPatternParam', var.get(u'options'), var.get(u'param').get(u'properties').get(var.get(u'i')).get(u'value'))
                                finally:
                                        (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
                            break
                        if True:
                            SWITCHED = True
                            break
                        SWITCHED = True
                        break
                    var.get(u'options').put(u'simple', (var.get(u'options').get(u'simple') and var.get(u'param').instanceof(var.get(u'Node').get(u'Identifier'))))
                PyJs_anonymous_278_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'checkPatternParam', PyJs_anonymous_278_)
                @Js
                def PyJs_anonymous_279_(expr, this, arguments, var=var):
                    var = Scope({u'this':this, u'expr':expr, u'arguments':arguments}, var)
                    var.registers([u'i', u'expr', u'asyncArrow', u'param', u'token', u'params', u'options'])
                    var.put(u'params', Js([var.get(u'expr')]))
                    pass
                    var.put(u'asyncArrow', Js(False))
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get(u'expr').get(u'type'))
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'syntax_1').get(u'Syntax').get(u'Identifier')):
                            SWITCHED = True
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, var.get(u'ArrowParameterPlaceHolder')):
                            SWITCHED = True
                            var.put(u'params', var.get(u'expr').get(u'params'))
                            var.put(u'asyncArrow', var.get(u'expr').get(u'async'))
                            break
                        if True:
                            SWITCHED = True
                            return var.get(u"null")
                        SWITCHED = True
                        break
                    PyJs_Object_281_ = Js({})
                    PyJs_Object_280_ = Js({u'simple':Js(True),u'paramSet':PyJs_Object_281_})
                    var.put(u'options', PyJs_Object_280_)
                    #for JS loop
                    var.put(u'i', Js(0.0))
                    while (var.get(u'i')<var.get(u'params').get(u'length')):
                        try:
                            var.put(u'param', var.get(u'params').get(var.get(u'i')))
                            if PyJsStrictEq(var.get(u'param').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'AssignmentPattern')):
                                if PyJsStrictEq(var.get(u'param').get(u'right').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'YieldExpression')):
                                    if var.get(u'param').get(u'right').get(u'argument'):
                                        var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").get(u'lookahead'))
                                    var.get(u'param').get(u'right').put(u'type', var.get(u'syntax_1').get(u'Syntax').get(u'Identifier'))
                                    var.get(u'param').get(u'right').put(u'name', Js(u'yield'))
                                    var.get(u'param').get(u'right').delete(u'argument')
                                    var.get(u'param').get(u'right').delete(u'delegate')
                            else:
                                if ((var.get(u'asyncArrow') and PyJsStrictEq(var.get(u'param').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'Identifier'))) and PyJsStrictEq(var.get(u'param').get(u'name'),Js(u'await'))):
                                    var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").get(u'lookahead'))
                            var.get(u"this").callprop(u'checkPatternParam', var.get(u'options'), var.get(u'param'))
                            var.get(u'params').put(var.get(u'i'), var.get(u'param'))
                        finally:
                                var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                    if (var.get(u"this").get(u'context').get(u'strict') or var.get(u"this").get(u'context').get(u'allowYield').neg()):
                        #for JS loop
                        var.put(u'i', Js(0.0))
                        while (var.get(u'i')<var.get(u'params').get(u'length')):
                            try:
                                var.put(u'param', var.get(u'params').get(var.get(u'i')))
                                if PyJsStrictEq(var.get(u'param').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'YieldExpression')):
                                    var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").get(u'lookahead'))
                            finally:
                                    var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                    if PyJsStrictEq(var.get(u'options').get(u'message'),var.get(u'messages_1').get(u'Messages').get(u'StrictParamDupe')):
                        var.put(u'token', (var.get(u'options').get(u'stricted') if var.get(u"this").get(u'context').get(u'strict') else var.get(u'options').get(u'firstRestricted')))
                        var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'token'), var.get(u'options').get(u'message'))
                    PyJs_Object_282_ = Js({u'simple':var.get(u'options').get(u'simple'),u'params':var.get(u'params'),u'stricted':var.get(u'options').get(u'stricted'),u'firstRestricted':var.get(u'options').get(u'firstRestricted'),u'message':var.get(u'options').get(u'message')})
                    return PyJs_Object_282_
                PyJs_anonymous_279_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'reinterpretAsCoverFormalsList', PyJs_anonymous_279_)
                @Js
                def PyJs_anonymous_283_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'body', u'previousStrict', u'right', u'expr', u'previousAllowYield', u'list', u'previousAwait', u'startToken', u'operator', u'token', u'isAsync', u'expression', u'arg', u'previousAllowIn', u'previousAllowStrictDirective', u'id'])
                    pass
                    if (var.get(u"this").get(u'context').get(u'allowYield').neg() and var.get(u"this").callprop(u'matchKeyword', Js(u'yield'))):
                        var.put(u'expr', var.get(u"this").callprop(u'parseYieldExpression'))
                    else:
                        var.put(u'startToken', var.get(u"this").get(u'lookahead'))
                        var.put(u'token', var.get(u'startToken'))
                        var.put(u'expr', var.get(u"this").callprop(u'parseConditionalExpression'))
                        if ((PyJsStrictEq(var.get(u'token').get(u'type'),Js(3.0)) and PyJsStrictEq(var.get(u'token').get(u'lineNumber'),var.get(u"this").get(u'lookahead').get(u'lineNumber'))) and PyJsStrictEq(var.get(u'token').get(u'value'),Js(u'async'))):
                            if (PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'type'),Js(3.0)) or var.get(u"this").callprop(u'matchKeyword', Js(u'yield'))):
                                var.put(u'arg', var.get(u"this").callprop(u'parsePrimaryExpression'))
                                var.get(u"this").callprop(u'reinterpretExpressionAsPattern', var.get(u'arg'))
                                PyJs_Object_284_ = Js({u'type':var.get(u'ArrowParameterPlaceHolder'),u'params':Js([var.get(u'arg')]),u'async':Js(True)})
                                var.put(u'expr', PyJs_Object_284_)
                        if (PyJsStrictEq(var.get(u'expr').get(u'type'),var.get(u'ArrowParameterPlaceHolder')) or var.get(u"this").callprop(u'match', Js(u'=>'))):
                            var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(False))
                            var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                            var.put(u'isAsync', var.get(u'expr').get(u'async'))
                            var.put(u'list', var.get(u"this").callprop(u'reinterpretAsCoverFormalsList', var.get(u'expr')))
                            if var.get(u'list'):
                                if var.get(u"this").get(u'hasLineTerminator'):
                                    var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u"this").get(u'lookahead'))
                                var.get(u"this").get(u'context').put(u'firstCoverInitializedNameError', var.get(u"null"))
                                var.put(u'previousStrict', var.get(u"this").get(u'context').get(u'strict'))
                                var.put(u'previousAllowStrictDirective', var.get(u"this").get(u'context').get(u'allowStrictDirective'))
                                var.get(u"this").get(u'context').put(u'allowStrictDirective', var.get(u'list').get(u'simple'))
                                var.put(u'previousAllowYield', var.get(u"this").get(u'context').get(u'allowYield'))
                                var.put(u'previousAwait', var.get(u"this").get(u'context').get(u'await'))
                                var.get(u"this").get(u'context').put(u'allowYield', Js(True))
                                var.get(u"this").get(u'context').put(u'await', var.get(u'isAsync'))
                                var.put(u'node', var.get(u"this").callprop(u'startNode', var.get(u'startToken')))
                                var.get(u"this").callprop(u'expect', Js(u'=>'))
                                var.put(u'body', PyJsComma(Js(0.0), Js(None)))
                                if var.get(u"this").callprop(u'match', Js(u'{')):
                                    var.put(u'previousAllowIn', var.get(u"this").get(u'context').get(u'allowIn'))
                                    var.get(u"this").get(u'context').put(u'allowIn', Js(True))
                                    var.put(u'body', var.get(u"this").callprop(u'parseFunctionSourceElements'))
                                    var.get(u"this").get(u'context').put(u'allowIn', var.get(u'previousAllowIn'))
                                else:
                                    var.put(u'body', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseAssignmentExpression')))
                                var.put(u'expression', PyJsStrictNeq(var.get(u'body').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'BlockStatement')))
                                if (var.get(u"this").get(u'context').get(u'strict') and var.get(u'list').get(u'firstRestricted')):
                                    var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'list').get(u'firstRestricted'), var.get(u'list').get(u'message'))
                                if (var.get(u"this").get(u'context').get(u'strict') and var.get(u'list').get(u'stricted')):
                                    var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'list').get(u'stricted'), var.get(u'list').get(u'message'))
                                def PyJs_LONG_285_(var=var):
                                    return (var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'AsyncArrowFunctionExpression').create(var.get(u'list').get(u'params'), var.get(u'body'), var.get(u'expression'))) if var.get(u'isAsync') else var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ArrowFunctionExpression').create(var.get(u'list').get(u'params'), var.get(u'body'), var.get(u'expression'))))
                                var.put(u'expr', PyJs_LONG_285_())
                                var.get(u"this").get(u'context').put(u'strict', var.get(u'previousStrict'))
                                var.get(u"this").get(u'context').put(u'allowStrictDirective', var.get(u'previousAllowStrictDirective'))
                                var.get(u"this").get(u'context').put(u'allowYield', var.get(u'previousAllowYield'))
                                var.get(u"this").get(u'context').put(u'await', var.get(u'previousAwait'))
                        else:
                            if var.get(u"this").callprop(u'matchAssign'):
                                if var.get(u"this").get(u'context').get(u'isAssignmentTarget').neg():
                                    var.get(u"this").callprop(u'tolerateError', var.get(u'messages_1').get(u'Messages').get(u'InvalidLHSInAssignment'))
                                if (var.get(u"this").get(u'context').get(u'strict') and PyJsStrictEq(var.get(u'expr').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'Identifier'))):
                                    var.put(u'id', var.get(u'expr'))
                                    if var.get(u"this").get(u'scanner').callprop(u'isRestrictedWord', var.get(u'id').get(u'name')):
                                        var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'token'), var.get(u'messages_1').get(u'Messages').get(u'StrictLHSAssignment'))
                                    if var.get(u"this").get(u'scanner').callprop(u'isStrictModeReservedWord', var.get(u'id').get(u'name')):
                                        var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'token'), var.get(u'messages_1').get(u'Messages').get(u'StrictReservedWord'))
                                if var.get(u"this").callprop(u'match', Js(u'=')).neg():
                                    var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(False))
                                    var.get(u"this").get(u'context').put(u'isBindingElement', Js(False))
                                else:
                                    var.get(u"this").callprop(u'reinterpretExpressionAsPattern', var.get(u'expr'))
                                var.put(u'token', var.get(u"this").callprop(u'nextToken'))
                                var.put(u'operator', var.get(u'token').get(u'value'))
                                var.put(u'right', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseAssignmentExpression')))
                                var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u"this").callprop(u'startNode', var.get(u'startToken')), var.get(u'Node').get(u'AssignmentExpression').create(var.get(u'operator'), var.get(u'expr'), var.get(u'right'))))
                                var.get(u"this").get(u'context').put(u'firstCoverInitializedNameError', var.get(u"null"))
                    return var.get(u'expr')
                PyJs_anonymous_283_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseAssignmentExpression', PyJs_anonymous_283_)
                @Js
                def PyJs_anonymous_286_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'startToken', u'expressions', u'expr'])
                    var.put(u'startToken', var.get(u"this").get(u'lookahead'))
                    var.put(u'expr', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseAssignmentExpression')))
                    if var.get(u"this").callprop(u'match', Js(u',')):
                        var.put(u'expressions', Js([]))
                        var.get(u'expressions').callprop(u'push', var.get(u'expr'))
                        while PyJsStrictNeq(var.get(u"this").get(u'lookahead').get(u'type'),Js(2.0)):
                            if var.get(u"this").callprop(u'match', Js(u',')).neg():
                                break
                            var.get(u"this").callprop(u'nextToken')
                            var.get(u'expressions').callprop(u'push', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseAssignmentExpression')))
                        var.put(u'expr', var.get(u"this").callprop(u'finalize', var.get(u"this").callprop(u'startNode', var.get(u'startToken')), var.get(u'Node').get(u'SequenceExpression').create(var.get(u'expressions'))))
                    return var.get(u'expr')
                PyJs_anonymous_286_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseExpression', PyJs_anonymous_286_)
                @Js
                def PyJs_anonymous_287_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'statement'])
                    pass
                    var.get(u"this").get(u'context').put(u'isAssignmentTarget', Js(True))
                    var.get(u"this").get(u'context').put(u'isBindingElement', Js(True))
                    if PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'type'),Js(4.0)):
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get(u"this").get(u'lookahead').get(u'value'))
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(u'export')):
                                SWITCHED = True
                                if var.get(u"this").get(u'context').get(u'isModule').neg():
                                    var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u"this").get(u'lookahead'), var.get(u'messages_1').get(u'Messages').get(u'IllegalExportDeclaration'))
                                var.put(u'statement', var.get(u"this").callprop(u'parseExportDeclaration'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(u'import')):
                                SWITCHED = True
                                if var.get(u"this").get(u'context').get(u'isModule').neg():
                                    var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u"this").get(u'lookahead'), var.get(u'messages_1').get(u'Messages').get(u'IllegalImportDeclaration'))
                                var.put(u'statement', var.get(u"this").callprop(u'parseImportDeclaration'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(u'const')):
                                SWITCHED = True
                                PyJs_Object_288_ = Js({u'inFor':Js(False)})
                                var.put(u'statement', var.get(u"this").callprop(u'parseLexicalDeclaration', PyJs_Object_288_))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(u'function')):
                                SWITCHED = True
                                var.put(u'statement', var.get(u"this").callprop(u'parseFunctionDeclaration'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(u'class')):
                                SWITCHED = True
                                var.put(u'statement', var.get(u"this").callprop(u'parseClassDeclaration'))
                                break
                            if SWITCHED or PyJsStrictEq(CONDITION, Js(u'let')):
                                SWITCHED = True
                                PyJs_Object_289_ = Js({u'inFor':Js(False)})
                                var.put(u'statement', (var.get(u"this").callprop(u'parseLexicalDeclaration', PyJs_Object_289_) if var.get(u"this").callprop(u'isLexicalDeclaration') else var.get(u"this").callprop(u'parseStatement')))
                                break
                            if True:
                                SWITCHED = True
                                var.put(u'statement', var.get(u"this").callprop(u'parseStatement'))
                                break
                            SWITCHED = True
                            break
                    else:
                        var.put(u'statement', var.get(u"this").callprop(u'parseStatement'))
                    return var.get(u'statement')
                PyJs_anonymous_287_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseStatementListItem', PyJs_anonymous_287_)
                @Js
                def PyJs_anonymous_290_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'block'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expect', Js(u'{'))
                    var.put(u'block', Js([]))
                    while Js(True):
                        if var.get(u"this").callprop(u'match', Js(u'}')):
                            break
                        var.get(u'block').callprop(u'push', var.get(u"this").callprop(u'parseStatementListItem'))
                    var.get(u"this").callprop(u'expect', Js(u'}'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'BlockStatement').create(var.get(u'block')))
                PyJs_anonymous_290_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseBlock', PyJs_anonymous_290_)
                @Js
                def PyJs_anonymous_291_(kind, options, this, arguments, var=var):
                    var = Scope({u'this':this, u'kind':kind, u'options':options, u'arguments':arguments}, var)
                    var.registers([u'node', u'kind', u'options', u'init', u'params', u'id'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'params', Js([]))
                    var.put(u'id', var.get(u"this").callprop(u'parsePattern', var.get(u'params'), var.get(u'kind')))
                    if (var.get(u"this").get(u'context').get(u'strict') and PyJsStrictEq(var.get(u'id').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'Identifier'))):
                        if var.get(u"this").get(u'scanner').callprop(u'isRestrictedWord', var.get(u'id').get(u'name')):
                            var.get(u"this").callprop(u'tolerateError', var.get(u'messages_1').get(u'Messages').get(u'StrictVarName'))
                    var.put(u'init', var.get(u"null"))
                    if PyJsStrictEq(var.get(u'kind'),Js(u'const')):
                        if (var.get(u"this").callprop(u'matchKeyword', Js(u'in')).neg() and var.get(u"this").callprop(u'matchContextualKeyword', Js(u'of')).neg()):
                            if var.get(u"this").callprop(u'match', Js(u'=')):
                                var.get(u"this").callprop(u'nextToken')
                                var.put(u'init', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseAssignmentExpression')))
                            else:
                                var.get(u"this").callprop(u'throwError', var.get(u'messages_1').get(u'Messages').get(u'DeclarationMissingInitializer'), Js(u'const'))
                    else:
                        if ((var.get(u'options').get(u'inFor').neg() and PyJsStrictNeq(var.get(u'id').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'Identifier'))) or var.get(u"this").callprop(u'match', Js(u'='))):
                            var.get(u"this").callprop(u'expect', Js(u'='))
                            var.put(u'init', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseAssignmentExpression')))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'VariableDeclarator').create(var.get(u'id'), var.get(u'init')))
                PyJs_anonymous_291_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseLexicalBinding', PyJs_anonymous_291_)
                @Js
                def PyJs_anonymous_292_(kind, options, this, arguments, var=var):
                    var = Scope({u'this':this, u'kind':kind, u'options':options, u'arguments':arguments}, var)
                    var.registers([u'kind', u'list', u'options'])
                    var.put(u'list', Js([var.get(u"this").callprop(u'parseLexicalBinding', var.get(u'kind'), var.get(u'options'))]))
                    while var.get(u"this").callprop(u'match', Js(u',')):
                        var.get(u"this").callprop(u'nextToken')
                        var.get(u'list').callprop(u'push', var.get(u"this").callprop(u'parseLexicalBinding', var.get(u'kind'), var.get(u'options')))
                    return var.get(u'list')
                PyJs_anonymous_292_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseBindingList', PyJs_anonymous_292_)
                @Js
                def PyJs_anonymous_293_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'state', u'next'])
                    var.put(u'state', var.get(u"this").get(u'scanner').callprop(u'saveState'))
                    var.get(u"this").get(u'scanner').callprop(u'scanComments')
                    var.put(u'next', var.get(u"this").get(u'scanner').callprop(u'lex'))
                    var.get(u"this").get(u'scanner').callprop(u'restoreState', var.get(u'state'))
                    def PyJs_LONG_294_(var=var):
                        return (((PyJsStrictEq(var.get(u'next').get(u'type'),Js(3.0)) or (PyJsStrictEq(var.get(u'next').get(u'type'),Js(7.0)) and PyJsStrictEq(var.get(u'next').get(u'value'),Js(u'[')))) or (PyJsStrictEq(var.get(u'next').get(u'type'),Js(7.0)) and PyJsStrictEq(var.get(u'next').get(u'value'),Js(u'{')))) or (PyJsStrictEq(var.get(u'next').get(u'type'),Js(4.0)) and PyJsStrictEq(var.get(u'next').get(u'value'),Js(u'let'))))
                    return (PyJs_LONG_294_() or (PyJsStrictEq(var.get(u'next').get(u'type'),Js(4.0)) and PyJsStrictEq(var.get(u'next').get(u'value'),Js(u'yield'))))
                PyJs_anonymous_293_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'isLexicalDeclaration', PyJs_anonymous_293_)
                @Js
                def PyJs_anonymous_295_(options, this, arguments, var=var):
                    var = Scope({u'this':this, u'options':options, u'arguments':arguments}, var)
                    var.registers([u'node', u'kind', u'declarations', u'options'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'kind', var.get(u"this").callprop(u'nextToken').get(u'value'))
                    var.get(u'assert_1').callprop(u'assert', (PyJsStrictEq(var.get(u'kind'),Js(u'let')) or PyJsStrictEq(var.get(u'kind'),Js(u'const'))), Js(u'Lexical declaration must be either let or const'))
                    var.put(u'declarations', var.get(u"this").callprop(u'parseBindingList', var.get(u'kind'), var.get(u'options')))
                    var.get(u"this").callprop(u'consumeSemicolon')
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'VariableDeclaration').create(var.get(u'declarations'), var.get(u'kind')))
                PyJs_anonymous_295_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseLexicalDeclaration', PyJs_anonymous_295_)
                @Js
                def PyJs_anonymous_296_(params, kind, this, arguments, var=var):
                    var = Scope({u'this':this, u'kind':kind, u'params':params, u'arguments':arguments}, var)
                    var.registers([u'node', u'kind', u'params', u'arg'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expect', Js(u'...'))
                    var.put(u'arg', var.get(u"this").callprop(u'parsePattern', var.get(u'params'), var.get(u'kind')))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'RestElement').create(var.get(u'arg')))
                PyJs_anonymous_296_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseBindingRestElement', PyJs_anonymous_296_)
                @Js
                def PyJs_anonymous_297_(params, kind, this, arguments, var=var):
                    var = Scope({u'this':this, u'kind':kind, u'params':params, u'arguments':arguments}, var)
                    var.registers([u'node', u'kind', u'elements', u'params'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expect', Js(u'['))
                    var.put(u'elements', Js([]))
                    while var.get(u"this").callprop(u'match', Js(u']')).neg():
                        if var.get(u"this").callprop(u'match', Js(u',')):
                            var.get(u"this").callprop(u'nextToken')
                            var.get(u'elements').callprop(u'push', var.get(u"null"))
                        else:
                            if var.get(u"this").callprop(u'match', Js(u'...')):
                                var.get(u'elements').callprop(u'push', var.get(u"this").callprop(u'parseBindingRestElement', var.get(u'params'), var.get(u'kind')))
                                break
                            else:
                                var.get(u'elements').callprop(u'push', var.get(u"this").callprop(u'parsePatternWithDefault', var.get(u'params'), var.get(u'kind')))
                            if var.get(u"this").callprop(u'match', Js(u']')).neg():
                                var.get(u"this").callprop(u'expect', Js(u','))
                    var.get(u"this").callprop(u'expect', Js(u']'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ArrayPattern').create(var.get(u'elements')))
                PyJs_anonymous_297_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseArrayPattern', PyJs_anonymous_297_)
                @Js
                def PyJs_anonymous_298_(params, kind, this, arguments, var=var):
                    var = Scope({u'this':this, u'kind':kind, u'params':params, u'arguments':arguments}, var)
                    var.registers([u'node', u'kind', u'shorthand', u'computed', u'expr', u'value', u'init', u'keyToken', u'key', u'params', u'method'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'computed', Js(False))
                    var.put(u'shorthand', Js(False))
                    var.put(u'method', Js(False))
                    pass
                    pass
                    if PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'type'),Js(3.0)):
                        var.put(u'keyToken', var.get(u"this").get(u'lookahead'))
                        var.put(u'key', var.get(u"this").callprop(u'parseVariableIdentifier'))
                        var.put(u'init', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'Identifier').create(var.get(u'keyToken').get(u'value'))))
                        if var.get(u"this").callprop(u'match', Js(u'=')):
                            var.get(u'params').callprop(u'push', var.get(u'keyToken'))
                            var.put(u'shorthand', Js(True))
                            var.get(u"this").callprop(u'nextToken')
                            var.put(u'expr', var.get(u"this").callprop(u'parseAssignmentExpression'))
                            var.put(u'value', var.get(u"this").callprop(u'finalize', var.get(u"this").callprop(u'startNode', var.get(u'keyToken')), var.get(u'Node').get(u'AssignmentPattern').create(var.get(u'init'), var.get(u'expr'))))
                        else:
                            if var.get(u"this").callprop(u'match', Js(u':')).neg():
                                var.get(u'params').callprop(u'push', var.get(u'keyToken'))
                                var.put(u'shorthand', Js(True))
                                var.put(u'value', var.get(u'init'))
                            else:
                                var.get(u"this").callprop(u'expect', Js(u':'))
                                var.put(u'value', var.get(u"this").callprop(u'parsePatternWithDefault', var.get(u'params'), var.get(u'kind')))
                    else:
                        var.put(u'computed', var.get(u"this").callprop(u'match', Js(u'[')))
                        var.put(u'key', var.get(u"this").callprop(u'parseObjectPropertyKey'))
                        var.get(u"this").callprop(u'expect', Js(u':'))
                        var.put(u'value', var.get(u"this").callprop(u'parsePatternWithDefault', var.get(u'params'), var.get(u'kind')))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'Property').create(Js(u'init'), var.get(u'key'), var.get(u'computed'), var.get(u'value'), var.get(u'method'), var.get(u'shorthand')))
                PyJs_anonymous_298_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parsePropertyPattern', PyJs_anonymous_298_)
                @Js
                def PyJs_anonymous_299_(params, kind, this, arguments, var=var):
                    var = Scope({u'this':this, u'kind':kind, u'params':params, u'arguments':arguments}, var)
                    var.registers([u'node', u'kind', u'params', u'properties'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'properties', Js([]))
                    var.get(u"this").callprop(u'expect', Js(u'{'))
                    while var.get(u"this").callprop(u'match', Js(u'}')).neg():
                        var.get(u'properties').callprop(u'push', var.get(u"this").callprop(u'parsePropertyPattern', var.get(u'params'), var.get(u'kind')))
                        if var.get(u"this").callprop(u'match', Js(u'}')).neg():
                            var.get(u"this").callprop(u'expect', Js(u','))
                    var.get(u"this").callprop(u'expect', Js(u'}'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ObjectPattern').create(var.get(u'properties')))
                PyJs_anonymous_299_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseObjectPattern', PyJs_anonymous_299_)
                @Js
                def PyJs_anonymous_300_(params, kind, this, arguments, var=var):
                    var = Scope({u'this':this, u'kind':kind, u'params':params, u'arguments':arguments}, var)
                    var.registers([u'pattern', u'kind', u'params'])
                    pass
                    if var.get(u"this").callprop(u'match', Js(u'[')):
                        var.put(u'pattern', var.get(u"this").callprop(u'parseArrayPattern', var.get(u'params'), var.get(u'kind')))
                    else:
                        if var.get(u"this").callprop(u'match', Js(u'{')):
                            var.put(u'pattern', var.get(u"this").callprop(u'parseObjectPattern', var.get(u'params'), var.get(u'kind')))
                        else:
                            if (var.get(u"this").callprop(u'matchKeyword', Js(u'let')) and (PyJsStrictEq(var.get(u'kind'),Js(u'const')) or PyJsStrictEq(var.get(u'kind'),Js(u'let')))):
                                var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u"this").get(u'lookahead'), var.get(u'messages_1').get(u'Messages').get(u'LetInLexicalBinding'))
                            var.get(u'params').callprop(u'push', var.get(u"this").get(u'lookahead'))
                            var.put(u'pattern', var.get(u"this").callprop(u'parseVariableIdentifier', var.get(u'kind')))
                    return var.get(u'pattern')
                PyJs_anonymous_300_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parsePattern', PyJs_anonymous_300_)
                @Js
                def PyJs_anonymous_301_(params, kind, this, arguments, var=var):
                    var = Scope({u'this':this, u'kind':kind, u'params':params, u'arguments':arguments}, var)
                    var.registers([u'kind', u'right', u'startToken', u'params', u'previousAllowYield', u'pattern'])
                    var.put(u'startToken', var.get(u"this").get(u'lookahead'))
                    var.put(u'pattern', var.get(u"this").callprop(u'parsePattern', var.get(u'params'), var.get(u'kind')))
                    if var.get(u"this").callprop(u'match', Js(u'=')):
                        var.get(u"this").callprop(u'nextToken')
                        var.put(u'previousAllowYield', var.get(u"this").get(u'context').get(u'allowYield'))
                        var.get(u"this").get(u'context').put(u'allowYield', Js(True))
                        var.put(u'right', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseAssignmentExpression')))
                        var.get(u"this").get(u'context').put(u'allowYield', var.get(u'previousAllowYield'))
                        var.put(u'pattern', var.get(u"this").callprop(u'finalize', var.get(u"this").callprop(u'startNode', var.get(u'startToken')), var.get(u'Node').get(u'AssignmentPattern').create(var.get(u'pattern'), var.get(u'right'))))
                    return var.get(u'pattern')
                PyJs_anonymous_301_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parsePatternWithDefault', PyJs_anonymous_301_)
                @Js
                def PyJs_anonymous_302_(kind, this, arguments, var=var):
                    var = Scope({u'this':this, u'kind':kind, u'arguments':arguments}, var)
                    var.registers([u'node', u'token', u'kind'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'token', var.get(u"this").callprop(u'nextToken'))
                    if (PyJsStrictEq(var.get(u'token').get(u'type'),Js(4.0)) and PyJsStrictEq(var.get(u'token').get(u'value'),Js(u'yield'))):
                        if var.get(u"this").get(u'context').get(u'strict'):
                            var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'token'), var.get(u'messages_1').get(u'Messages').get(u'StrictReservedWord'))
                        else:
                            if var.get(u"this").get(u'context').get(u'allowYield').neg():
                                var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'token'))
                    else:
                        if PyJsStrictNeq(var.get(u'token').get(u'type'),Js(3.0)):
                            if ((var.get(u"this").get(u'context').get(u'strict') and PyJsStrictEq(var.get(u'token').get(u'type'),Js(4.0))) and var.get(u"this").get(u'scanner').callprop(u'isStrictModeReservedWord', var.get(u'token').get(u'value'))):
                                var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'token'), var.get(u'messages_1').get(u'Messages').get(u'StrictReservedWord'))
                            else:
                                if ((var.get(u"this").get(u'context').get(u'strict') or PyJsStrictNeq(var.get(u'token').get(u'value'),Js(u'let'))) or PyJsStrictNeq(var.get(u'kind'),Js(u'var'))):
                                    var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'token'))
                        else:
                            if (((var.get(u"this").get(u'context').get(u'isModule') or var.get(u"this").get(u'context').get(u'await')) and PyJsStrictEq(var.get(u'token').get(u'type'),Js(3.0))) and PyJsStrictEq(var.get(u'token').get(u'value'),Js(u'await'))):
                                var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'token'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'Identifier').create(var.get(u'token').get(u'value')))
                PyJs_anonymous_302_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseVariableIdentifier', PyJs_anonymous_302_)
                @Js
                def PyJs_anonymous_303_(options, this, arguments, var=var):
                    var = Scope({u'this':this, u'options':options, u'arguments':arguments}, var)
                    var.registers([u'node', u'init', u'params', u'id', u'options'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'params', Js([]))
                    var.put(u'id', var.get(u"this").callprop(u'parsePattern', var.get(u'params'), Js(u'var')))
                    if (var.get(u"this").get(u'context').get(u'strict') and PyJsStrictEq(var.get(u'id').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'Identifier'))):
                        if var.get(u"this").get(u'scanner').callprop(u'isRestrictedWord', var.get(u'id').get(u'name')):
                            var.get(u"this").callprop(u'tolerateError', var.get(u'messages_1').get(u'Messages').get(u'StrictVarName'))
                    var.put(u'init', var.get(u"null"))
                    if var.get(u"this").callprop(u'match', Js(u'=')):
                        var.get(u"this").callprop(u'nextToken')
                        var.put(u'init', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseAssignmentExpression')))
                    else:
                        if (PyJsStrictNeq(var.get(u'id').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'Identifier')) and var.get(u'options').get(u'inFor').neg()):
                            var.get(u"this").callprop(u'expect', Js(u'='))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'VariableDeclarator').create(var.get(u'id'), var.get(u'init')))
                PyJs_anonymous_303_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseVariableDeclaration', PyJs_anonymous_303_)
                @Js
                def PyJs_anonymous_304_(options, this, arguments, var=var):
                    var = Scope({u'this':this, u'options':options, u'arguments':arguments}, var)
                    var.registers([u'opt', u'list', u'options'])
                    PyJs_Object_305_ = Js({u'inFor':var.get(u'options').get(u'inFor')})
                    var.put(u'opt', PyJs_Object_305_)
                    var.put(u'list', Js([]))
                    var.get(u'list').callprop(u'push', var.get(u"this").callprop(u'parseVariableDeclaration', var.get(u'opt')))
                    while var.get(u"this").callprop(u'match', Js(u',')):
                        var.get(u"this").callprop(u'nextToken')
                        var.get(u'list').callprop(u'push', var.get(u"this").callprop(u'parseVariableDeclaration', var.get(u'opt')))
                    return var.get(u'list')
                PyJs_anonymous_304_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseVariableDeclarationList', PyJs_anonymous_304_)
                @Js
                def PyJs_anonymous_306_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'declarations'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expectKeyword', Js(u'var'))
                    PyJs_Object_307_ = Js({u'inFor':Js(False)})
                    var.put(u'declarations', var.get(u"this").callprop(u'parseVariableDeclarationList', PyJs_Object_307_))
                    var.get(u"this").callprop(u'consumeSemicolon')
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'VariableDeclaration').create(var.get(u'declarations'), Js(u'var')))
                PyJs_anonymous_306_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseVariableStatement', PyJs_anonymous_306_)
                @Js
                def PyJs_anonymous_308_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expect', Js(u';'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'EmptyStatement').create())
                PyJs_anonymous_308_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseEmptyStatement', PyJs_anonymous_308_)
                @Js
                def PyJs_anonymous_309_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'expr'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'expr', var.get(u"this").callprop(u'parseExpression'))
                    var.get(u"this").callprop(u'consumeSemicolon')
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ExpressionStatement').create(var.get(u'expr')))
                PyJs_anonymous_309_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseExpressionStatement', PyJs_anonymous_309_)
                @Js
                def PyJs_anonymous_310_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    if (var.get(u"this").get(u'context').get(u'strict') and var.get(u"this").callprop(u'matchKeyword', Js(u'function'))):
                        var.get(u"this").callprop(u'tolerateError', var.get(u'messages_1').get(u'Messages').get(u'StrictFunction'))
                    return var.get(u"this").callprop(u'parseStatement')
                PyJs_anonymous_310_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseIfClause', PyJs_anonymous_310_)
                @Js
                def PyJs_anonymous_311_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'test', u'alternate', u'consequent'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    pass
                    var.put(u'alternate', var.get(u"null"))
                    var.get(u"this").callprop(u'expectKeyword', Js(u'if'))
                    var.get(u"this").callprop(u'expect', Js(u'('))
                    var.put(u'test', var.get(u"this").callprop(u'parseExpression'))
                    if (var.get(u"this").callprop(u'match', Js(u')')).neg() and var.get(u"this").get(u'config').get(u'tolerant')):
                        var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u"this").callprop(u'nextToken'))
                        var.put(u'consequent', var.get(u"this").callprop(u'finalize', var.get(u"this").callprop(u'createNode'), var.get(u'Node').get(u'EmptyStatement').create()))
                    else:
                        var.get(u"this").callprop(u'expect', Js(u')'))
                        var.put(u'consequent', var.get(u"this").callprop(u'parseIfClause'))
                        if var.get(u"this").callprop(u'matchKeyword', Js(u'else')):
                            var.get(u"this").callprop(u'nextToken')
                            var.put(u'alternate', var.get(u"this").callprop(u'parseIfClause'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'IfStatement').create(var.get(u'test'), var.get(u'consequent'), var.get(u'alternate')))
                PyJs_anonymous_311_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseIfStatement', PyJs_anonymous_311_)
                @Js
                def PyJs_anonymous_312_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'body', u'test', u'previousInIteration'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expectKeyword', Js(u'do'))
                    var.put(u'previousInIteration', var.get(u"this").get(u'context').get(u'inIteration'))
                    var.get(u"this").get(u'context').put(u'inIteration', Js(True))
                    var.put(u'body', var.get(u"this").callprop(u'parseStatement'))
                    var.get(u"this").get(u'context').put(u'inIteration', var.get(u'previousInIteration'))
                    var.get(u"this").callprop(u'expectKeyword', Js(u'while'))
                    var.get(u"this").callprop(u'expect', Js(u'('))
                    var.put(u'test', var.get(u"this").callprop(u'parseExpression'))
                    if (var.get(u"this").callprop(u'match', Js(u')')).neg() and var.get(u"this").get(u'config').get(u'tolerant')):
                        var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u"this").callprop(u'nextToken'))
                    else:
                        var.get(u"this").callprop(u'expect', Js(u')'))
                        if var.get(u"this").callprop(u'match', Js(u';')):
                            var.get(u"this").callprop(u'nextToken')
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'DoWhileStatement').create(var.get(u'body'), var.get(u'test')))
                PyJs_anonymous_312_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseDoWhileStatement', PyJs_anonymous_312_)
                @Js
                def PyJs_anonymous_313_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'body', u'test', u'previousInIteration'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    pass
                    var.get(u"this").callprop(u'expectKeyword', Js(u'while'))
                    var.get(u"this").callprop(u'expect', Js(u'('))
                    var.put(u'test', var.get(u"this").callprop(u'parseExpression'))
                    if (var.get(u"this").callprop(u'match', Js(u')')).neg() and var.get(u"this").get(u'config').get(u'tolerant')):
                        var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u"this").callprop(u'nextToken'))
                        var.put(u'body', var.get(u"this").callprop(u'finalize', var.get(u"this").callprop(u'createNode'), var.get(u'Node').get(u'EmptyStatement').create()))
                    else:
                        var.get(u"this").callprop(u'expect', Js(u')'))
                        var.put(u'previousInIteration', var.get(u"this").get(u'context').get(u'inIteration'))
                        var.get(u"this").get(u'context').put(u'inIteration', Js(True))
                        var.put(u'body', var.get(u"this").callprop(u'parseStatement'))
                        var.get(u"this").get(u'context').put(u'inIteration', var.get(u'previousInIteration'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'WhileStatement').create(var.get(u'test'), var.get(u'body')))
                PyJs_anonymous_313_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseWhileStatement', PyJs_anonymous_313_)
                @Js
                def PyJs_anonymous_314_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'previousAllowIn', u'kind', u'right', u'previousInIteration', u'declarations', u'body', u'update', u'init', u'initSeq', u'decl', u'test', u'forIn', u'initStartToken', u'left'])
                    var.put(u'init', var.get(u"null"))
                    var.put(u'test', var.get(u"null"))
                    var.put(u'update', var.get(u"null"))
                    var.put(u'forIn', Js(True))
                    pass
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expectKeyword', Js(u'for'))
                    var.get(u"this").callprop(u'expect', Js(u'('))
                    if var.get(u"this").callprop(u'match', Js(u';')):
                        var.get(u"this").callprop(u'nextToken')
                    else:
                        if var.get(u"this").callprop(u'matchKeyword', Js(u'var')):
                            var.put(u'init', var.get(u"this").callprop(u'createNode'))
                            var.get(u"this").callprop(u'nextToken')
                            var.put(u'previousAllowIn', var.get(u"this").get(u'context').get(u'allowIn'))
                            var.get(u"this").get(u'context').put(u'allowIn', Js(False))
                            PyJs_Object_315_ = Js({u'inFor':Js(True)})
                            var.put(u'declarations', var.get(u"this").callprop(u'parseVariableDeclarationList', PyJs_Object_315_))
                            var.get(u"this").get(u'context').put(u'allowIn', var.get(u'previousAllowIn'))
                            if (PyJsStrictEq(var.get(u'declarations').get(u'length'),Js(1.0)) and var.get(u"this").callprop(u'matchKeyword', Js(u'in'))):
                                var.put(u'decl', var.get(u'declarations').get(u'0'))
                                if (var.get(u'decl').get(u'init') and ((PyJsStrictEq(var.get(u'decl').get(u'id').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'ArrayPattern')) or PyJsStrictEq(var.get(u'decl').get(u'id').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'ObjectPattern'))) or var.get(u"this").get(u'context').get(u'strict'))):
                                    var.get(u"this").callprop(u'tolerateError', var.get(u'messages_1').get(u'Messages').get(u'ForInOfLoopInitializer'), Js(u'for-in'))
                                var.put(u'init', var.get(u"this").callprop(u'finalize', var.get(u'init'), var.get(u'Node').get(u'VariableDeclaration').create(var.get(u'declarations'), Js(u'var'))))
                                var.get(u"this").callprop(u'nextToken')
                                var.put(u'left', var.get(u'init'))
                                var.put(u'right', var.get(u"this").callprop(u'parseExpression'))
                                var.put(u'init', var.get(u"null"))
                            else:
                                if ((PyJsStrictEq(var.get(u'declarations').get(u'length'),Js(1.0)) and PyJsStrictEq(var.get(u'declarations').get(u'0').get(u'init'),var.get(u"null"))) and var.get(u"this").callprop(u'matchContextualKeyword', Js(u'of'))):
                                    var.put(u'init', var.get(u"this").callprop(u'finalize', var.get(u'init'), var.get(u'Node').get(u'VariableDeclaration').create(var.get(u'declarations'), Js(u'var'))))
                                    var.get(u"this").callprop(u'nextToken')
                                    var.put(u'left', var.get(u'init'))
                                    var.put(u'right', var.get(u"this").callprop(u'parseAssignmentExpression'))
                                    var.put(u'init', var.get(u"null"))
                                    var.put(u'forIn', Js(False))
                                else:
                                    var.put(u'init', var.get(u"this").callprop(u'finalize', var.get(u'init'), var.get(u'Node').get(u'VariableDeclaration').create(var.get(u'declarations'), Js(u'var'))))
                                    var.get(u"this").callprop(u'expect', Js(u';'))
                        else:
                            if (var.get(u"this").callprop(u'matchKeyword', Js(u'const')) or var.get(u"this").callprop(u'matchKeyword', Js(u'let'))):
                                var.put(u'init', var.get(u"this").callprop(u'createNode'))
                                var.put(u'kind', var.get(u"this").callprop(u'nextToken').get(u'value'))
                                if (var.get(u"this").get(u'context').get(u'strict').neg() and PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'value'),Js(u'in'))):
                                    var.put(u'init', var.get(u"this").callprop(u'finalize', var.get(u'init'), var.get(u'Node').get(u'Identifier').create(var.get(u'kind'))))
                                    var.get(u"this").callprop(u'nextToken')
                                    var.put(u'left', var.get(u'init'))
                                    var.put(u'right', var.get(u"this").callprop(u'parseExpression'))
                                    var.put(u'init', var.get(u"null"))
                                else:
                                    var.put(u'previousAllowIn', var.get(u"this").get(u'context').get(u'allowIn'))
                                    var.get(u"this").get(u'context').put(u'allowIn', Js(False))
                                    PyJs_Object_316_ = Js({u'inFor':Js(True)})
                                    var.put(u'declarations', var.get(u"this").callprop(u'parseBindingList', var.get(u'kind'), PyJs_Object_316_))
                                    var.get(u"this").get(u'context').put(u'allowIn', var.get(u'previousAllowIn'))
                                    if ((PyJsStrictEq(var.get(u'declarations').get(u'length'),Js(1.0)) and PyJsStrictEq(var.get(u'declarations').get(u'0').get(u'init'),var.get(u"null"))) and var.get(u"this").callprop(u'matchKeyword', Js(u'in'))):
                                        var.put(u'init', var.get(u"this").callprop(u'finalize', var.get(u'init'), var.get(u'Node').get(u'VariableDeclaration').create(var.get(u'declarations'), var.get(u'kind'))))
                                        var.get(u"this").callprop(u'nextToken')
                                        var.put(u'left', var.get(u'init'))
                                        var.put(u'right', var.get(u"this").callprop(u'parseExpression'))
                                        var.put(u'init', var.get(u"null"))
                                    else:
                                        if ((PyJsStrictEq(var.get(u'declarations').get(u'length'),Js(1.0)) and PyJsStrictEq(var.get(u'declarations').get(u'0').get(u'init'),var.get(u"null"))) and var.get(u"this").callprop(u'matchContextualKeyword', Js(u'of'))):
                                            var.put(u'init', var.get(u"this").callprop(u'finalize', var.get(u'init'), var.get(u'Node').get(u'VariableDeclaration').create(var.get(u'declarations'), var.get(u'kind'))))
                                            var.get(u"this").callprop(u'nextToken')
                                            var.put(u'left', var.get(u'init'))
                                            var.put(u'right', var.get(u"this").callprop(u'parseAssignmentExpression'))
                                            var.put(u'init', var.get(u"null"))
                                            var.put(u'forIn', Js(False))
                                        else:
                                            var.get(u"this").callprop(u'consumeSemicolon')
                                            var.put(u'init', var.get(u"this").callprop(u'finalize', var.get(u'init'), var.get(u'Node').get(u'VariableDeclaration').create(var.get(u'declarations'), var.get(u'kind'))))
                            else:
                                var.put(u'initStartToken', var.get(u"this").get(u'lookahead'))
                                var.put(u'previousAllowIn', var.get(u"this").get(u'context').get(u'allowIn'))
                                var.get(u"this").get(u'context').put(u'allowIn', Js(False))
                                var.put(u'init', var.get(u"this").callprop(u'inheritCoverGrammar', var.get(u"this").get(u'parseAssignmentExpression')))
                                var.get(u"this").get(u'context').put(u'allowIn', var.get(u'previousAllowIn'))
                                if var.get(u"this").callprop(u'matchKeyword', Js(u'in')):
                                    if (var.get(u"this").get(u'context').get(u'isAssignmentTarget').neg() or PyJsStrictEq(var.get(u'init').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'AssignmentExpression'))):
                                        var.get(u"this").callprop(u'tolerateError', var.get(u'messages_1').get(u'Messages').get(u'InvalidLHSInForIn'))
                                    var.get(u"this").callprop(u'nextToken')
                                    var.get(u"this").callprop(u'reinterpretExpressionAsPattern', var.get(u'init'))
                                    var.put(u'left', var.get(u'init'))
                                    var.put(u'right', var.get(u"this").callprop(u'parseExpression'))
                                    var.put(u'init', var.get(u"null"))
                                else:
                                    if var.get(u"this").callprop(u'matchContextualKeyword', Js(u'of')):
                                        if (var.get(u"this").get(u'context').get(u'isAssignmentTarget').neg() or PyJsStrictEq(var.get(u'init').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'AssignmentExpression'))):
                                            var.get(u"this").callprop(u'tolerateError', var.get(u'messages_1').get(u'Messages').get(u'InvalidLHSInForLoop'))
                                        var.get(u"this").callprop(u'nextToken')
                                        var.get(u"this").callprop(u'reinterpretExpressionAsPattern', var.get(u'init'))
                                        var.put(u'left', var.get(u'init'))
                                        var.put(u'right', var.get(u"this").callprop(u'parseAssignmentExpression'))
                                        var.put(u'init', var.get(u"null"))
                                        var.put(u'forIn', Js(False))
                                    else:
                                        if var.get(u"this").callprop(u'match', Js(u',')):
                                            var.put(u'initSeq', Js([var.get(u'init')]))
                                            while var.get(u"this").callprop(u'match', Js(u',')):
                                                var.get(u"this").callprop(u'nextToken')
                                                var.get(u'initSeq').callprop(u'push', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseAssignmentExpression')))
                                            var.put(u'init', var.get(u"this").callprop(u'finalize', var.get(u"this").callprop(u'startNode', var.get(u'initStartToken')), var.get(u'Node').get(u'SequenceExpression').create(var.get(u'initSeq'))))
                                        var.get(u"this").callprop(u'expect', Js(u';'))
                    if PyJsStrictEq(var.get(u'left',throw=False).typeof(),Js(u'undefined')):
                        if var.get(u"this").callprop(u'match', Js(u';')).neg():
                            var.put(u'test', var.get(u"this").callprop(u'parseExpression'))
                        var.get(u"this").callprop(u'expect', Js(u';'))
                        if var.get(u"this").callprop(u'match', Js(u')')).neg():
                            var.put(u'update', var.get(u"this").callprop(u'parseExpression'))
                    pass
                    if (var.get(u"this").callprop(u'match', Js(u')')).neg() and var.get(u"this").get(u'config').get(u'tolerant')):
                        var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u"this").callprop(u'nextToken'))
                        var.put(u'body', var.get(u"this").callprop(u'finalize', var.get(u"this").callprop(u'createNode'), var.get(u'Node').get(u'EmptyStatement').create()))
                    else:
                        var.get(u"this").callprop(u'expect', Js(u')'))
                        var.put(u'previousInIteration', var.get(u"this").get(u'context').get(u'inIteration'))
                        var.get(u"this").get(u'context').put(u'inIteration', Js(True))
                        var.put(u'body', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseStatement')))
                        var.get(u"this").get(u'context').put(u'inIteration', var.get(u'previousInIteration'))
                    def PyJs_LONG_317_(var=var):
                        return (var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ForStatement').create(var.get(u'init'), var.get(u'test'), var.get(u'update'), var.get(u'body'))) if PyJsStrictEq(var.get(u'left',throw=False).typeof(),Js(u'undefined')) else (var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ForInStatement').create(var.get(u'left'), var.get(u'right'), var.get(u'body'))) if var.get(u'forIn') else var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ForOfStatement').create(var.get(u'left'), var.get(u'right'), var.get(u'body')))))
                    return PyJs_LONG_317_()
                PyJs_anonymous_314_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseForStatement', PyJs_anonymous_314_)
                @Js
                def PyJs_anonymous_318_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'id', u'key', u'label'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expectKeyword', Js(u'continue'))
                    var.put(u'label', var.get(u"null"))
                    if (PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'type'),Js(3.0)) and var.get(u"this").get(u'hasLineTerminator').neg()):
                        var.put(u'id', var.get(u"this").callprop(u'parseVariableIdentifier'))
                        var.put(u'label', var.get(u'id'))
                        var.put(u'key', (Js(u'$')+var.get(u'id').get(u'name')))
                        if var.get(u'Object').get(u'prototype').get(u'hasOwnProperty').callprop(u'call', var.get(u"this").get(u'context').get(u'labelSet'), var.get(u'key')).neg():
                            var.get(u"this").callprop(u'throwError', var.get(u'messages_1').get(u'Messages').get(u'UnknownLabel'), var.get(u'id').get(u'name'))
                    var.get(u"this").callprop(u'consumeSemicolon')
                    if (PyJsStrictEq(var.get(u'label'),var.get(u"null")) and var.get(u"this").get(u'context').get(u'inIteration').neg()):
                        var.get(u"this").callprop(u'throwError', var.get(u'messages_1').get(u'Messages').get(u'IllegalContinue'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ContinueStatement').create(var.get(u'label')))
                PyJs_anonymous_318_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseContinueStatement', PyJs_anonymous_318_)
                @Js
                def PyJs_anonymous_319_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'id', u'key', u'label'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expectKeyword', Js(u'break'))
                    var.put(u'label', var.get(u"null"))
                    if (PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'type'),Js(3.0)) and var.get(u"this").get(u'hasLineTerminator').neg()):
                        var.put(u'id', var.get(u"this").callprop(u'parseVariableIdentifier'))
                        var.put(u'key', (Js(u'$')+var.get(u'id').get(u'name')))
                        if var.get(u'Object').get(u'prototype').get(u'hasOwnProperty').callprop(u'call', var.get(u"this").get(u'context').get(u'labelSet'), var.get(u'key')).neg():
                            var.get(u"this").callprop(u'throwError', var.get(u'messages_1').get(u'Messages').get(u'UnknownLabel'), var.get(u'id').get(u'name'))
                        var.put(u'label', var.get(u'id'))
                    var.get(u"this").callprop(u'consumeSemicolon')
                    if ((PyJsStrictEq(var.get(u'label'),var.get(u"null")) and var.get(u"this").get(u'context').get(u'inIteration').neg()) and var.get(u"this").get(u'context').get(u'inSwitch').neg()):
                        var.get(u"this").callprop(u'throwError', var.get(u'messages_1').get(u'Messages').get(u'IllegalBreak'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'BreakStatement').create(var.get(u'label')))
                PyJs_anonymous_319_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseBreakStatement', PyJs_anonymous_319_)
                @Js
                def PyJs_anonymous_320_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'argument', u'hasArgument'])
                    if var.get(u"this").get(u'context').get(u'inFunctionBody').neg():
                        var.get(u"this").callprop(u'tolerateError', var.get(u'messages_1').get(u'Messages').get(u'IllegalReturn'))
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expectKeyword', Js(u'return'))
                    var.put(u'hasArgument', (((((var.get(u"this").callprop(u'match', Js(u';')).neg() and var.get(u"this").callprop(u'match', Js(u'}')).neg()) and var.get(u"this").get(u'hasLineTerminator').neg()) and PyJsStrictNeq(var.get(u"this").get(u'lookahead').get(u'type'),Js(2.0))) or PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'type'),Js(8.0))) or PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'type'),Js(10.0))))
                    var.put(u'argument', (var.get(u"this").callprop(u'parseExpression') if var.get(u'hasArgument') else var.get(u"null")))
                    var.get(u"this").callprop(u'consumeSemicolon')
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ReturnStatement').create(var.get(u'argument')))
                PyJs_anonymous_320_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseReturnStatement', PyJs_anonymous_320_)
                @Js
                def PyJs_anonymous_321_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'body', u'object'])
                    if var.get(u"this").get(u'context').get(u'strict'):
                        var.get(u"this").callprop(u'tolerateError', var.get(u'messages_1').get(u'Messages').get(u'StrictModeWith'))
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    pass
                    var.get(u"this").callprop(u'expectKeyword', Js(u'with'))
                    var.get(u"this").callprop(u'expect', Js(u'('))
                    var.put(u'object', var.get(u"this").callprop(u'parseExpression'))
                    if (var.get(u"this").callprop(u'match', Js(u')')).neg() and var.get(u"this").get(u'config').get(u'tolerant')):
                        var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u"this").callprop(u'nextToken'))
                        var.put(u'body', var.get(u"this").callprop(u'finalize', var.get(u"this").callprop(u'createNode'), var.get(u'Node').get(u'EmptyStatement').create()))
                    else:
                        var.get(u"this").callprop(u'expect', Js(u')'))
                        var.put(u'body', var.get(u"this").callprop(u'parseStatement'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'WithStatement').create(var.get(u'object'), var.get(u'body')))
                PyJs_anonymous_321_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseWithStatement', PyJs_anonymous_321_)
                @Js
                def PyJs_anonymous_322_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'test', u'consequent'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    pass
                    if var.get(u"this").callprop(u'matchKeyword', Js(u'default')):
                        var.get(u"this").callprop(u'nextToken')
                        var.put(u'test', var.get(u"null"))
                    else:
                        var.get(u"this").callprop(u'expectKeyword', Js(u'case'))
                        var.put(u'test', var.get(u"this").callprop(u'parseExpression'))
                    var.get(u"this").callprop(u'expect', Js(u':'))
                    var.put(u'consequent', Js([]))
                    while Js(True):
                        if ((var.get(u"this").callprop(u'match', Js(u'}')) or var.get(u"this").callprop(u'matchKeyword', Js(u'default'))) or var.get(u"this").callprop(u'matchKeyword', Js(u'case'))):
                            break
                        var.get(u'consequent').callprop(u'push', var.get(u"this").callprop(u'parseStatementListItem'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'SwitchCase').create(var.get(u'test'), var.get(u'consequent')))
                PyJs_anonymous_322_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseSwitchCase', PyJs_anonymous_322_)
                @Js
                def PyJs_anonymous_323_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'previousInSwitch', u'discriminant', u'clause', u'defaultFound', u'cases'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expectKeyword', Js(u'switch'))
                    var.get(u"this").callprop(u'expect', Js(u'('))
                    var.put(u'discriminant', var.get(u"this").callprop(u'parseExpression'))
                    var.get(u"this").callprop(u'expect', Js(u')'))
                    var.put(u'previousInSwitch', var.get(u"this").get(u'context').get(u'inSwitch'))
                    var.get(u"this").get(u'context').put(u'inSwitch', Js(True))
                    var.put(u'cases', Js([]))
                    var.put(u'defaultFound', Js(False))
                    var.get(u"this").callprop(u'expect', Js(u'{'))
                    while Js(True):
                        if var.get(u"this").callprop(u'match', Js(u'}')):
                            break
                        var.put(u'clause', var.get(u"this").callprop(u'parseSwitchCase'))
                        if PyJsStrictEq(var.get(u'clause').get(u'test'),var.get(u"null")):
                            if var.get(u'defaultFound'):
                                var.get(u"this").callprop(u'throwError', var.get(u'messages_1').get(u'Messages').get(u'MultipleDefaultsInSwitch'))
                            var.put(u'defaultFound', Js(True))
                        var.get(u'cases').callprop(u'push', var.get(u'clause'))
                    var.get(u"this").callprop(u'expect', Js(u'}'))
                    var.get(u"this").get(u'context').put(u'inSwitch', var.get(u'previousInSwitch'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'SwitchStatement').create(var.get(u'discriminant'), var.get(u'cases')))
                PyJs_anonymous_323_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseSwitchStatement', PyJs_anonymous_323_)
                @Js
                def PyJs_anonymous_324_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'body', u'key', u'expr', u'token', u'statement', u'declaration', u'id'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'expr', var.get(u"this").callprop(u'parseExpression'))
                    pass
                    if (PyJsStrictEq(var.get(u'expr').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'Identifier')) and var.get(u"this").callprop(u'match', Js(u':'))):
                        var.get(u"this").callprop(u'nextToken')
                        var.put(u'id', var.get(u'expr'))
                        var.put(u'key', (Js(u'$')+var.get(u'id').get(u'name')))
                        if var.get(u'Object').get(u'prototype').get(u'hasOwnProperty').callprop(u'call', var.get(u"this").get(u'context').get(u'labelSet'), var.get(u'key')):
                            var.get(u"this").callprop(u'throwError', var.get(u'messages_1').get(u'Messages').get(u'Redeclaration'), Js(u'Label'), var.get(u'id').get(u'name'))
                        var.get(u"this").get(u'context').get(u'labelSet').put(var.get(u'key'), Js(True))
                        var.put(u'body', PyJsComma(Js(0.0), Js(None)))
                        if var.get(u"this").callprop(u'matchKeyword', Js(u'class')):
                            var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u"this").get(u'lookahead'))
                            var.put(u'body', var.get(u"this").callprop(u'parseClassDeclaration'))
                        else:
                            if var.get(u"this").callprop(u'matchKeyword', Js(u'function')):
                                var.put(u'token', var.get(u"this").get(u'lookahead'))
                                var.put(u'declaration', var.get(u"this").callprop(u'parseFunctionDeclaration'))
                                if var.get(u"this").get(u'context').get(u'strict'):
                                    var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'token'), var.get(u'messages_1').get(u'Messages').get(u'StrictFunction'))
                                else:
                                    if var.get(u'declaration').get(u'generator'):
                                        var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'token'), var.get(u'messages_1').get(u'Messages').get(u'GeneratorInLegacyContext'))
                                var.put(u'body', var.get(u'declaration'))
                            else:
                                var.put(u'body', var.get(u"this").callprop(u'parseStatement'))
                        var.get(u"this").get(u'context').get(u'labelSet').delete(var.get(u'key'))
                        var.put(u'statement', var.get(u'Node').get(u'LabeledStatement').create(var.get(u'id'), var.get(u'body')))
                    else:
                        var.get(u"this").callprop(u'consumeSemicolon')
                        var.put(u'statement', var.get(u'Node').get(u'ExpressionStatement').create(var.get(u'expr')))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'statement'))
                PyJs_anonymous_324_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseLabelledStatement', PyJs_anonymous_324_)
                @Js
                def PyJs_anonymous_325_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'argument'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expectKeyword', Js(u'throw'))
                    if var.get(u"this").get(u'hasLineTerminator'):
                        var.get(u"this").callprop(u'throwError', var.get(u'messages_1').get(u'Messages').get(u'NewlineAfterThrow'))
                    var.put(u'argument', var.get(u"this").callprop(u'parseExpression'))
                    var.get(u"this").callprop(u'consumeSemicolon')
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ThrowStatement').create(var.get(u'argument')))
                PyJs_anonymous_325_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseThrowStatement', PyJs_anonymous_325_)
                @Js
                def PyJs_anonymous_326_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'body', u'i', u'param', u'params', u'key', u'paramMap'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expectKeyword', Js(u'catch'))
                    var.get(u"this").callprop(u'expect', Js(u'('))
                    if var.get(u"this").callprop(u'match', Js(u')')):
                        var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").get(u'lookahead'))
                    var.put(u'params', Js([]))
                    var.put(u'param', var.get(u"this").callprop(u'parsePattern', var.get(u'params')))
                    PyJs_Object_327_ = Js({})
                    var.put(u'paramMap', PyJs_Object_327_)
                    #for JS loop
                    var.put(u'i', Js(0.0))
                    while (var.get(u'i')<var.get(u'params').get(u'length')):
                        try:
                            var.put(u'key', (Js(u'$')+var.get(u'params').get(var.get(u'i')).get(u'value')))
                            if var.get(u'Object').get(u'prototype').get(u'hasOwnProperty').callprop(u'call', var.get(u'paramMap'), var.get(u'key')):
                                var.get(u"this").callprop(u'tolerateError', var.get(u'messages_1').get(u'Messages').get(u'DuplicateBinding'), var.get(u'params').get(var.get(u'i')).get(u'value'))
                            var.get(u'paramMap').put(var.get(u'key'), Js(True))
                        finally:
                                (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
                    if (var.get(u"this").get(u'context').get(u'strict') and PyJsStrictEq(var.get(u'param').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'Identifier'))):
                        if var.get(u"this").get(u'scanner').callprop(u'isRestrictedWord', var.get(u'param').get(u'name')):
                            var.get(u"this").callprop(u'tolerateError', var.get(u'messages_1').get(u'Messages').get(u'StrictCatchVariable'))
                    var.get(u"this").callprop(u'expect', Js(u')'))
                    var.put(u'body', var.get(u"this").callprop(u'parseBlock'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'CatchClause').create(var.get(u'param'), var.get(u'body')))
                PyJs_anonymous_326_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseCatchClause', PyJs_anonymous_326_)
                @Js
                def PyJs_anonymous_328_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").callprop(u'expectKeyword', Js(u'finally'))
                    return var.get(u"this").callprop(u'parseBlock')
                PyJs_anonymous_328_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseFinallyClause', PyJs_anonymous_328_)
                @Js
                def PyJs_anonymous_329_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'finalizer', u'handler', u'block'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expectKeyword', Js(u'try'))
                    var.put(u'block', var.get(u"this").callprop(u'parseBlock'))
                    var.put(u'handler', (var.get(u"this").callprop(u'parseCatchClause') if var.get(u"this").callprop(u'matchKeyword', Js(u'catch')) else var.get(u"null")))
                    var.put(u'finalizer', (var.get(u"this").callprop(u'parseFinallyClause') if var.get(u"this").callprop(u'matchKeyword', Js(u'finally')) else var.get(u"null")))
                    if (var.get(u'handler').neg() and var.get(u'finalizer').neg()):
                        var.get(u"this").callprop(u'throwError', var.get(u'messages_1').get(u'Messages').get(u'NoCatchOrFinally'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'TryStatement').create(var.get(u'block'), var.get(u'handler'), var.get(u'finalizer')))
                PyJs_anonymous_329_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseTryStatement', PyJs_anonymous_329_)
                @Js
                def PyJs_anonymous_330_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expectKeyword', Js(u'debugger'))
                    var.get(u"this").callprop(u'consumeSemicolon')
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'DebuggerStatement').create())
                PyJs_anonymous_330_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseDebuggerStatement', PyJs_anonymous_330_)
                @Js
                def PyJs_anonymous_331_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'value', u'statement'])
                    pass
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get(u"this").get(u'lookahead').get(u'type'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(5.0)):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(6.0)):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(8.0)):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(10.0)):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(9.0)):
                            SWITCHED = True
                            var.put(u'statement', var.get(u"this").callprop(u'parseExpressionStatement'))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(7.0)):
                            SWITCHED = True
                            var.put(u'value', var.get(u"this").get(u'lookahead').get(u'value'))
                            if PyJsStrictEq(var.get(u'value'),Js(u'{')):
                                var.put(u'statement', var.get(u"this").callprop(u'parseBlock'))
                            else:
                                if PyJsStrictEq(var.get(u'value'),Js(u'(')):
                                    var.put(u'statement', var.get(u"this").callprop(u'parseExpressionStatement'))
                                else:
                                    if PyJsStrictEq(var.get(u'value'),Js(u';')):
                                        var.put(u'statement', var.get(u"this").callprop(u'parseEmptyStatement'))
                                    else:
                                        var.put(u'statement', var.get(u"this").callprop(u'parseExpressionStatement'))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                            SWITCHED = True
                            var.put(u'statement', (var.get(u"this").callprop(u'parseFunctionDeclaration') if var.get(u"this").callprop(u'matchAsyncFunction') else var.get(u"this").callprop(u'parseLabelledStatement')))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                            SWITCHED = True
                            while 1:
                                SWITCHED = False
                                CONDITION = (var.get(u"this").get(u'lookahead').get(u'value'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'break')):
                                    SWITCHED = True
                                    var.put(u'statement', var.get(u"this").callprop(u'parseBreakStatement'))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'continue')):
                                    SWITCHED = True
                                    var.put(u'statement', var.get(u"this").callprop(u'parseContinueStatement'))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'debugger')):
                                    SWITCHED = True
                                    var.put(u'statement', var.get(u"this").callprop(u'parseDebuggerStatement'))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'do')):
                                    SWITCHED = True
                                    var.put(u'statement', var.get(u"this").callprop(u'parseDoWhileStatement'))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'for')):
                                    SWITCHED = True
                                    var.put(u'statement', var.get(u"this").callprop(u'parseForStatement'))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'function')):
                                    SWITCHED = True
                                    var.put(u'statement', var.get(u"this").callprop(u'parseFunctionDeclaration'))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'if')):
                                    SWITCHED = True
                                    var.put(u'statement', var.get(u"this").callprop(u'parseIfStatement'))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'return')):
                                    SWITCHED = True
                                    var.put(u'statement', var.get(u"this").callprop(u'parseReturnStatement'))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'switch')):
                                    SWITCHED = True
                                    var.put(u'statement', var.get(u"this").callprop(u'parseSwitchStatement'))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'throw')):
                                    SWITCHED = True
                                    var.put(u'statement', var.get(u"this").callprop(u'parseThrowStatement'))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'try')):
                                    SWITCHED = True
                                    var.put(u'statement', var.get(u"this").callprop(u'parseTryStatement'))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'var')):
                                    SWITCHED = True
                                    var.put(u'statement', var.get(u"this").callprop(u'parseVariableStatement'))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'while')):
                                    SWITCHED = True
                                    var.put(u'statement', var.get(u"this").callprop(u'parseWhileStatement'))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(u'with')):
                                    SWITCHED = True
                                    var.put(u'statement', var.get(u"this").callprop(u'parseWithStatement'))
                                    break
                                if True:
                                    SWITCHED = True
                                    var.put(u'statement', var.get(u"this").callprop(u'parseExpressionStatement'))
                                    break
                                SWITCHED = True
                                break
                            break
                        if True:
                            SWITCHED = True
                            var.put(u'statement', var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").get(u'lookahead')))
                        SWITCHED = True
                        break
                    return var.get(u'statement')
                PyJs_anonymous_331_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseStatement', PyJs_anonymous_331_)
                @Js
                def PyJs_anonymous_332_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'body', u'previousInSwitch', u'previousInIteration', u'previousInFunctionBody', u'previousLabelSet'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expect', Js(u'{'))
                    var.put(u'body', var.get(u"this").callprop(u'parseDirectivePrologues'))
                    var.put(u'previousLabelSet', var.get(u"this").get(u'context').get(u'labelSet'))
                    var.put(u'previousInIteration', var.get(u"this").get(u'context').get(u'inIteration'))
                    var.put(u'previousInSwitch', var.get(u"this").get(u'context').get(u'inSwitch'))
                    var.put(u'previousInFunctionBody', var.get(u"this").get(u'context').get(u'inFunctionBody'))
                    PyJs_Object_333_ = Js({})
                    var.get(u"this").get(u'context').put(u'labelSet', PyJs_Object_333_)
                    var.get(u"this").get(u'context').put(u'inIteration', Js(False))
                    var.get(u"this").get(u'context').put(u'inSwitch', Js(False))
                    var.get(u"this").get(u'context').put(u'inFunctionBody', Js(True))
                    while PyJsStrictNeq(var.get(u"this").get(u'lookahead').get(u'type'),Js(2.0)):
                        if var.get(u"this").callprop(u'match', Js(u'}')):
                            break
                        var.get(u'body').callprop(u'push', var.get(u"this").callprop(u'parseStatementListItem'))
                    var.get(u"this").callprop(u'expect', Js(u'}'))
                    var.get(u"this").get(u'context').put(u'labelSet', var.get(u'previousLabelSet'))
                    var.get(u"this").get(u'context').put(u'inIteration', var.get(u'previousInIteration'))
                    var.get(u"this").get(u'context').put(u'inSwitch', var.get(u'previousInSwitch'))
                    var.get(u"this").get(u'context').put(u'inFunctionBody', var.get(u'previousInFunctionBody'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'BlockStatement').create(var.get(u'body')))
                PyJs_anonymous_332_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseFunctionSourceElements', PyJs_anonymous_332_)
                @Js
                def PyJs_anonymous_334_(options, param, name, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'options':options, u'param':param, u'name':name}, var)
                    var.registers([u'param', u'options', u'key', u'name'])
                    var.put(u'key', (Js(u'$')+var.get(u'name')))
                    if var.get(u"this").get(u'context').get(u'strict'):
                        if var.get(u"this").get(u'scanner').callprop(u'isRestrictedWord', var.get(u'name')):
                            var.get(u'options').put(u'stricted', var.get(u'param'))
                            var.get(u'options').put(u'message', var.get(u'messages_1').get(u'Messages').get(u'StrictParamName'))
                        if var.get(u'Object').get(u'prototype').get(u'hasOwnProperty').callprop(u'call', var.get(u'options').get(u'paramSet'), var.get(u'key')):
                            var.get(u'options').put(u'stricted', var.get(u'param'))
                            var.get(u'options').put(u'message', var.get(u'messages_1').get(u'Messages').get(u'StrictParamDupe'))
                    else:
                        if var.get(u'options').get(u'firstRestricted').neg():
                            if var.get(u"this").get(u'scanner').callprop(u'isRestrictedWord', var.get(u'name')):
                                var.get(u'options').put(u'firstRestricted', var.get(u'param'))
                                var.get(u'options').put(u'message', var.get(u'messages_1').get(u'Messages').get(u'StrictParamName'))
                            else:
                                if var.get(u"this").get(u'scanner').callprop(u'isStrictModeReservedWord', var.get(u'name')):
                                    var.get(u'options').put(u'firstRestricted', var.get(u'param'))
                                    var.get(u'options').put(u'message', var.get(u'messages_1').get(u'Messages').get(u'StrictReservedWord'))
                                else:
                                    if var.get(u'Object').get(u'prototype').get(u'hasOwnProperty').callprop(u'call', var.get(u'options').get(u'paramSet'), var.get(u'key')):
                                        var.get(u'options').put(u'stricted', var.get(u'param'))
                                        var.get(u'options').put(u'message', var.get(u'messages_1').get(u'Messages').get(u'StrictParamDupe'))
                    if PyJsStrictEq(var.get(u'Object').get(u'defineProperty').typeof(),Js(u'function')):
                        PyJs_Object_335_ = Js({u'value':Js(True),u'enumerable':Js(True),u'writable':Js(True),u'configurable':Js(True)})
                        var.get(u'Object').callprop(u'defineProperty', var.get(u'options').get(u'paramSet'), var.get(u'key'), PyJs_Object_335_)
                    else:
                        var.get(u'options').get(u'paramSet').put(var.get(u'key'), Js(True))
                PyJs_anonymous_334_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'validateParam', PyJs_anonymous_334_)
                @Js
                def PyJs_anonymous_336_(params, this, arguments, var=var):
                    var = Scope({u'this':this, u'params':params, u'arguments':arguments}, var)
                    var.registers([u'node', u'params', u'arg'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expect', Js(u'...'))
                    var.put(u'arg', var.get(u"this").callprop(u'parsePattern', var.get(u'params')))
                    if var.get(u"this").callprop(u'match', Js(u'=')):
                        var.get(u"this").callprop(u'throwError', var.get(u'messages_1').get(u'Messages').get(u'DefaultRestParameter'))
                    if var.get(u"this").callprop(u'match', Js(u')')).neg():
                        var.get(u"this").callprop(u'throwError', var.get(u'messages_1').get(u'Messages').get(u'ParameterAfterRestParameter'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'RestElement').create(var.get(u'arg')))
                PyJs_anonymous_336_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseRestElement', PyJs_anonymous_336_)
                @Js
                def PyJs_anonymous_337_(options, this, arguments, var=var):
                    var = Scope({u'this':this, u'options':options, u'arguments':arguments}, var)
                    var.registers([u'i', u'params', u'options', u'param'])
                    var.put(u'params', Js([]))
                    var.put(u'param', (var.get(u"this").callprop(u'parseRestElement', var.get(u'params')) if var.get(u"this").callprop(u'match', Js(u'...')) else var.get(u"this").callprop(u'parsePatternWithDefault', var.get(u'params'))))
                    #for JS loop
                    var.put(u'i', Js(0.0))
                    while (var.get(u'i')<var.get(u'params').get(u'length')):
                        try:
                            var.get(u"this").callprop(u'validateParam', var.get(u'options'), var.get(u'params').get(var.get(u'i')), var.get(u'params').get(var.get(u'i')).get(u'value'))
                        finally:
                                (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
                    var.get(u'options').put(u'simple', (var.get(u'options').get(u'simple') and var.get(u'param').instanceof(var.get(u'Node').get(u'Identifier'))))
                    var.get(u'options').get(u'params').callprop(u'push', var.get(u'param'))
                PyJs_anonymous_337_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseFormalParameter', PyJs_anonymous_337_)
                @Js
                def PyJs_anonymous_338_(firstRestricted, this, arguments, var=var):
                    var = Scope({u'this':this, u'firstRestricted':firstRestricted, u'arguments':arguments}, var)
                    var.registers([u'firstRestricted', u'options'])
                    pass
                    PyJs_Object_339_ = Js({u'simple':Js(True),u'params':Js([]),u'firstRestricted':var.get(u'firstRestricted')})
                    var.put(u'options', PyJs_Object_339_)
                    var.get(u"this").callprop(u'expect', Js(u'('))
                    if var.get(u"this").callprop(u'match', Js(u')')).neg():
                        PyJs_Object_340_ = Js({})
                        var.get(u'options').put(u'paramSet', PyJs_Object_340_)
                        while PyJsStrictNeq(var.get(u"this").get(u'lookahead').get(u'type'),Js(2.0)):
                            var.get(u"this").callprop(u'parseFormalParameter', var.get(u'options'))
                            if var.get(u"this").callprop(u'match', Js(u')')):
                                break
                            var.get(u"this").callprop(u'expect', Js(u','))
                            if var.get(u"this").callprop(u'match', Js(u')')):
                                break
                    var.get(u"this").callprop(u'expect', Js(u')'))
                    PyJs_Object_341_ = Js({u'simple':var.get(u'options').get(u'simple'),u'params':var.get(u'options').get(u'params'),u'stricted':var.get(u'options').get(u'stricted'),u'firstRestricted':var.get(u'options').get(u'firstRestricted'),u'message':var.get(u'options').get(u'message')})
                    return PyJs_Object_341_
                PyJs_anonymous_338_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseFormalParameters', PyJs_anonymous_338_)
                @Js
                def PyJs_anonymous_342_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'state', u'match', u'next'])
                    var.put(u'match', var.get(u"this").callprop(u'matchContextualKeyword', Js(u'async')))
                    if var.get(u'match'):
                        var.put(u'state', var.get(u"this").get(u'scanner').callprop(u'saveState'))
                        var.get(u"this").get(u'scanner').callprop(u'scanComments')
                        var.put(u'next', var.get(u"this").get(u'scanner').callprop(u'lex'))
                        var.get(u"this").get(u'scanner').callprop(u'restoreState', var.get(u'state'))
                        var.put(u'match', ((PyJsStrictEq(var.get(u'state').get(u'lineNumber'),var.get(u'next').get(u'lineNumber')) and PyJsStrictEq(var.get(u'next').get(u'type'),Js(4.0))) and PyJsStrictEq(var.get(u'next').get(u'value'),Js(u'function'))))
                    return var.get(u'match')
                PyJs_anonymous_342_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'matchAsyncFunction', PyJs_anonymous_342_)
                @Js
                def PyJs_anonymous_343_(identifierIsOptional, this, arguments, var=var):
                    var = Scope({u'this':this, u'identifierIsOptional':identifierIsOptional, u'arguments':arguments}, var)
                    var.registers([u'node', u'body', u'previousStrict', u'identifierIsOptional', u'stricted', u'isGenerator', u'previousAllowAwait', u'id', u'formalParameters', u'token', u'isAsync', u'params', u'previousAllowYield', u'firstRestricted', u'previousAllowStrictDirective', u'message'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'isAsync', var.get(u"this").callprop(u'matchContextualKeyword', Js(u'async')))
                    if var.get(u'isAsync'):
                        var.get(u"this").callprop(u'nextToken')
                    var.get(u"this").callprop(u'expectKeyword', Js(u'function'))
                    var.put(u'isGenerator', (Js(False) if var.get(u'isAsync') else var.get(u"this").callprop(u'match', Js(u'*'))))
                    if var.get(u'isGenerator'):
                        var.get(u"this").callprop(u'nextToken')
                    pass
                    var.put(u'id', var.get(u"null"))
                    var.put(u'firstRestricted', var.get(u"null"))
                    if (var.get(u'identifierIsOptional').neg() or var.get(u"this").callprop(u'match', Js(u'(')).neg()):
                        var.put(u'token', var.get(u"this").get(u'lookahead'))
                        var.put(u'id', var.get(u"this").callprop(u'parseVariableIdentifier'))
                        if var.get(u"this").get(u'context').get(u'strict'):
                            if var.get(u"this").get(u'scanner').callprop(u'isRestrictedWord', var.get(u'token').get(u'value')):
                                var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'token'), var.get(u'messages_1').get(u'Messages').get(u'StrictFunctionName'))
                        else:
                            if var.get(u"this").get(u'scanner').callprop(u'isRestrictedWord', var.get(u'token').get(u'value')):
                                var.put(u'firstRestricted', var.get(u'token'))
                                var.put(u'message', var.get(u'messages_1').get(u'Messages').get(u'StrictFunctionName'))
                            else:
                                if var.get(u"this").get(u'scanner').callprop(u'isStrictModeReservedWord', var.get(u'token').get(u'value')):
                                    var.put(u'firstRestricted', var.get(u'token'))
                                    var.put(u'message', var.get(u'messages_1').get(u'Messages').get(u'StrictReservedWord'))
                    var.put(u'previousAllowAwait', var.get(u"this").get(u'context').get(u'await'))
                    var.put(u'previousAllowYield', var.get(u"this").get(u'context').get(u'allowYield'))
                    var.get(u"this").get(u'context').put(u'await', var.get(u'isAsync'))
                    var.get(u"this").get(u'context').put(u'allowYield', var.get(u'isGenerator').neg())
                    var.put(u'formalParameters', var.get(u"this").callprop(u'parseFormalParameters', var.get(u'firstRestricted')))
                    var.put(u'params', var.get(u'formalParameters').get(u'params'))
                    var.put(u'stricted', var.get(u'formalParameters').get(u'stricted'))
                    var.put(u'firstRestricted', var.get(u'formalParameters').get(u'firstRestricted'))
                    if var.get(u'formalParameters').get(u'message'):
                        var.put(u'message', var.get(u'formalParameters').get(u'message'))
                    var.put(u'previousStrict', var.get(u"this").get(u'context').get(u'strict'))
                    var.put(u'previousAllowStrictDirective', var.get(u"this").get(u'context').get(u'allowStrictDirective'))
                    var.get(u"this").get(u'context').put(u'allowStrictDirective', var.get(u'formalParameters').get(u'simple'))
                    var.put(u'body', var.get(u"this").callprop(u'parseFunctionSourceElements'))
                    if (var.get(u"this").get(u'context').get(u'strict') and var.get(u'firstRestricted')):
                        var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'firstRestricted'), var.get(u'message'))
                    if (var.get(u"this").get(u'context').get(u'strict') and var.get(u'stricted')):
                        var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'stricted'), var.get(u'message'))
                    var.get(u"this").get(u'context').put(u'strict', var.get(u'previousStrict'))
                    var.get(u"this").get(u'context').put(u'allowStrictDirective', var.get(u'previousAllowStrictDirective'))
                    var.get(u"this").get(u'context').put(u'await', var.get(u'previousAllowAwait'))
                    var.get(u"this").get(u'context').put(u'allowYield', var.get(u'previousAllowYield'))
                    return (var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'AsyncFunctionDeclaration').create(var.get(u'id'), var.get(u'params'), var.get(u'body'))) if var.get(u'isAsync') else var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'FunctionDeclaration').create(var.get(u'id'), var.get(u'params'), var.get(u'body'), var.get(u'isGenerator'))))
                PyJs_anonymous_343_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseFunctionDeclaration', PyJs_anonymous_343_)
                @Js
                def PyJs_anonymous_344_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'body', u'previousStrict', u'stricted', u'isGenerator', u'previousAllowAwait', u'id', u'formalParameters', u'token', u'isAsync', u'params', u'previousAllowYield', u'firstRestricted', u'previousAllowStrictDirective', u'message'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'isAsync', var.get(u"this").callprop(u'matchContextualKeyword', Js(u'async')))
                    if var.get(u'isAsync'):
                        var.get(u"this").callprop(u'nextToken')
                    var.get(u"this").callprop(u'expectKeyword', Js(u'function'))
                    var.put(u'isGenerator', (Js(False) if var.get(u'isAsync') else var.get(u"this").callprop(u'match', Js(u'*'))))
                    if var.get(u'isGenerator'):
                        var.get(u"this").callprop(u'nextToken')
                    pass
                    var.put(u'id', var.get(u"null"))
                    pass
                    var.put(u'previousAllowAwait', var.get(u"this").get(u'context').get(u'await'))
                    var.put(u'previousAllowYield', var.get(u"this").get(u'context').get(u'allowYield'))
                    var.get(u"this").get(u'context').put(u'await', var.get(u'isAsync'))
                    var.get(u"this").get(u'context').put(u'allowYield', var.get(u'isGenerator').neg())
                    if var.get(u"this").callprop(u'match', Js(u'(')).neg():
                        var.put(u'token', var.get(u"this").get(u'lookahead'))
                        var.put(u'id', (var.get(u"this").callprop(u'parseIdentifierName') if ((var.get(u"this").get(u'context').get(u'strict').neg() and var.get(u'isGenerator').neg()) and var.get(u"this").callprop(u'matchKeyword', Js(u'yield'))) else var.get(u"this").callprop(u'parseVariableIdentifier')))
                        if var.get(u"this").get(u'context').get(u'strict'):
                            if var.get(u"this").get(u'scanner').callprop(u'isRestrictedWord', var.get(u'token').get(u'value')):
                                var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'token'), var.get(u'messages_1').get(u'Messages').get(u'StrictFunctionName'))
                        else:
                            if var.get(u"this").get(u'scanner').callprop(u'isRestrictedWord', var.get(u'token').get(u'value')):
                                var.put(u'firstRestricted', var.get(u'token'))
                                var.put(u'message', var.get(u'messages_1').get(u'Messages').get(u'StrictFunctionName'))
                            else:
                                if var.get(u"this").get(u'scanner').callprop(u'isStrictModeReservedWord', var.get(u'token').get(u'value')):
                                    var.put(u'firstRestricted', var.get(u'token'))
                                    var.put(u'message', var.get(u'messages_1').get(u'Messages').get(u'StrictReservedWord'))
                    var.put(u'formalParameters', var.get(u"this").callprop(u'parseFormalParameters', var.get(u'firstRestricted')))
                    var.put(u'params', var.get(u'formalParameters').get(u'params'))
                    var.put(u'stricted', var.get(u'formalParameters').get(u'stricted'))
                    var.put(u'firstRestricted', var.get(u'formalParameters').get(u'firstRestricted'))
                    if var.get(u'formalParameters').get(u'message'):
                        var.put(u'message', var.get(u'formalParameters').get(u'message'))
                    var.put(u'previousStrict', var.get(u"this").get(u'context').get(u'strict'))
                    var.put(u'previousAllowStrictDirective', var.get(u"this").get(u'context').get(u'allowStrictDirective'))
                    var.get(u"this").get(u'context').put(u'allowStrictDirective', var.get(u'formalParameters').get(u'simple'))
                    var.put(u'body', var.get(u"this").callprop(u'parseFunctionSourceElements'))
                    if (var.get(u"this").get(u'context').get(u'strict') and var.get(u'firstRestricted')):
                        var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'firstRestricted'), var.get(u'message'))
                    if (var.get(u"this").get(u'context').get(u'strict') and var.get(u'stricted')):
                        var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'stricted'), var.get(u'message'))
                    var.get(u"this").get(u'context').put(u'strict', var.get(u'previousStrict'))
                    var.get(u"this").get(u'context').put(u'allowStrictDirective', var.get(u'previousAllowStrictDirective'))
                    var.get(u"this").get(u'context').put(u'await', var.get(u'previousAllowAwait'))
                    var.get(u"this").get(u'context').put(u'allowYield', var.get(u'previousAllowYield'))
                    return (var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'AsyncFunctionExpression').create(var.get(u'id'), var.get(u'params'), var.get(u'body'))) if var.get(u'isAsync') else var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'FunctionExpression').create(var.get(u'id'), var.get(u'params'), var.get(u'body'), var.get(u'isGenerator'))))
                PyJs_anonymous_344_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseFunctionExpression', PyJs_anonymous_344_)
                @Js
                def PyJs_anonymous_345_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'expr', u'token', u'directive'])
                    var.put(u'token', var.get(u"this").get(u'lookahead'))
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'expr', var.get(u"this").callprop(u'parseExpression'))
                    var.put(u'directive', (var.get(u"this").callprop(u'getTokenRaw', var.get(u'token')).callprop(u'slice', Js(1.0), (-Js(1.0))) if PyJsStrictEq(var.get(u'expr').get(u'type'),var.get(u'syntax_1').get(u'Syntax').get(u'Literal')) else var.get(u"null")))
                    var.get(u"this").callprop(u'consumeSemicolon')
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), (var.get(u'Node').get(u'Directive').create(var.get(u'expr'), var.get(u'directive')) if var.get(u'directive') else var.get(u'Node').get(u'ExpressionStatement').create(var.get(u'expr'))))
                PyJs_anonymous_345_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseDirective', PyJs_anonymous_345_)
                @Js
                def PyJs_anonymous_346_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'body', u'firstRestricted', u'token', u'statement', u'directive'])
                    var.put(u'firstRestricted', var.get(u"null"))
                    var.put(u'body', Js([]))
                    while Js(True):
                        var.put(u'token', var.get(u"this").get(u'lookahead'))
                        if PyJsStrictNeq(var.get(u'token').get(u'type'),Js(8.0)):
                            break
                        var.put(u'statement', var.get(u"this").callprop(u'parseDirective'))
                        var.get(u'body').callprop(u'push', var.get(u'statement'))
                        var.put(u'directive', var.get(u'statement').get(u'directive'))
                        if PyJsStrictNeq(var.get(u'directive',throw=False).typeof(),Js(u'string')):
                            break
                        if PyJsStrictEq(var.get(u'directive'),Js(u'use strict')):
                            var.get(u"this").get(u'context').put(u'strict', Js(True))
                            if var.get(u'firstRestricted'):
                                var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'firstRestricted'), var.get(u'messages_1').get(u'Messages').get(u'StrictOctalLiteral'))
                            if var.get(u"this").get(u'context').get(u'allowStrictDirective').neg():
                                var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'token'), var.get(u'messages_1').get(u'Messages').get(u'IllegalLanguageModeDirective'))
                        else:
                            if (var.get(u'firstRestricted').neg() and var.get(u'token').get(u'octal')):
                                var.put(u'firstRestricted', var.get(u'token'))
                    return var.get(u'body')
                PyJs_anonymous_346_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseDirectivePrologues', PyJs_anonymous_346_)
                @Js
                def PyJs_anonymous_347_(token, this, arguments, var=var):
                    var = Scope({u'this':this, u'token':token, u'arguments':arguments}, var)
                    var.registers([u'token'])
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get(u'token').get(u'type'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(8.0)):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(5.0)):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(6.0)):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                            SWITCHED = True
                            return Js(True)
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(7.0)):
                            SWITCHED = True
                            return PyJsStrictEq(var.get(u'token').get(u'value'),Js(u'['))
                        if True:
                            SWITCHED = True
                            break
                        SWITCHED = True
                        break
                    return Js(False)
                PyJs_anonymous_347_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'qualifiedPropertyName', PyJs_anonymous_347_)
                @Js
                def PyJs_anonymous_348_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'formalParameters', u'isGenerator', u'method', u'previousAllowYield'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'isGenerator', Js(False))
                    var.put(u'previousAllowYield', var.get(u"this").get(u'context').get(u'allowYield'))
                    var.get(u"this").get(u'context').put(u'allowYield', var.get(u'isGenerator').neg())
                    var.put(u'formalParameters', var.get(u"this").callprop(u'parseFormalParameters'))
                    if (var.get(u'formalParameters').get(u'params').get(u'length')>Js(0.0)):
                        var.get(u"this").callprop(u'tolerateError', var.get(u'messages_1').get(u'Messages').get(u'BadGetterArity'))
                    var.put(u'method', var.get(u"this").callprop(u'parsePropertyMethod', var.get(u'formalParameters')))
                    var.get(u"this").get(u'context').put(u'allowYield', var.get(u'previousAllowYield'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'FunctionExpression').create(var.get(u"null"), var.get(u'formalParameters').get(u'params'), var.get(u'method'), var.get(u'isGenerator')))
                PyJs_anonymous_348_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseGetterMethod', PyJs_anonymous_348_)
                @Js
                def PyJs_anonymous_349_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'formalParameters', u'isGenerator', u'method', u'previousAllowYield'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'isGenerator', Js(False))
                    var.put(u'previousAllowYield', var.get(u"this").get(u'context').get(u'allowYield'))
                    var.get(u"this").get(u'context').put(u'allowYield', var.get(u'isGenerator').neg())
                    var.put(u'formalParameters', var.get(u"this").callprop(u'parseFormalParameters'))
                    if PyJsStrictNeq(var.get(u'formalParameters').get(u'params').get(u'length'),Js(1.0)):
                        var.get(u"this").callprop(u'tolerateError', var.get(u'messages_1').get(u'Messages').get(u'BadSetterArity'))
                    else:
                        if var.get(u'formalParameters').get(u'params').get(u'0').instanceof(var.get(u'Node').get(u'RestElement')):
                            var.get(u"this").callprop(u'tolerateError', var.get(u'messages_1').get(u'Messages').get(u'BadSetterRestParameter'))
                    var.put(u'method', var.get(u"this").callprop(u'parsePropertyMethod', var.get(u'formalParameters')))
                    var.get(u"this").get(u'context').put(u'allowYield', var.get(u'previousAllowYield'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'FunctionExpression').create(var.get(u"null"), var.get(u'formalParameters').get(u'params'), var.get(u'method'), var.get(u'isGenerator')))
                PyJs_anonymous_349_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseSetterMethod', PyJs_anonymous_349_)
                @Js
                def PyJs_anonymous_350_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'params', u'isGenerator', u'method', u'previousAllowYield'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'isGenerator', Js(True))
                    var.put(u'previousAllowYield', var.get(u"this").get(u'context').get(u'allowYield'))
                    var.get(u"this").get(u'context').put(u'allowYield', Js(True))
                    var.put(u'params', var.get(u"this").callprop(u'parseFormalParameters'))
                    var.get(u"this").get(u'context').put(u'allowYield', Js(False))
                    var.put(u'method', var.get(u"this").callprop(u'parsePropertyMethod', var.get(u'params')))
                    var.get(u"this").get(u'context').put(u'allowYield', var.get(u'previousAllowYield'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'FunctionExpression').create(var.get(u"null"), var.get(u'params').get(u'params'), var.get(u'method'), var.get(u'isGenerator')))
                PyJs_anonymous_350_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseGeneratorMethod', PyJs_anonymous_350_)
                @Js
                def PyJs_anonymous_351_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'start', u'value'])
                    var.put(u'start', Js(True))
                    var.put(u'value', var.get(u"this").get(u'lookahead').get(u'value'))
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get(u"this").get(u'lookahead').get(u'type'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(7.0)):
                            SWITCHED = True
                            def PyJs_LONG_352_(var=var):
                                return ((((((((PyJsStrictEq(var.get(u'value'),Js(u'[')) or PyJsStrictEq(var.get(u'value'),Js(u'('))) or PyJsStrictEq(var.get(u'value'),Js(u'{'))) or PyJsStrictEq(var.get(u'value'),Js(u'+'))) or PyJsStrictEq(var.get(u'value'),Js(u'-'))) or PyJsStrictEq(var.get(u'value'),Js(u'!'))) or PyJsStrictEq(var.get(u'value'),Js(u'~'))) or PyJsStrictEq(var.get(u'value'),Js(u'++'))) or PyJsStrictEq(var.get(u'value'),Js(u'--')))
                            var.put(u'start', ((PyJs_LONG_352_() or PyJsStrictEq(var.get(u'value'),Js(u'/'))) or PyJsStrictEq(var.get(u'value'),Js(u'/='))))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                            SWITCHED = True
                            def PyJs_LONG_353_(var=var):
                                return ((((((((PyJsStrictEq(var.get(u'value'),Js(u'class')) or PyJsStrictEq(var.get(u'value'),Js(u'delete'))) or PyJsStrictEq(var.get(u'value'),Js(u'function'))) or PyJsStrictEq(var.get(u'value'),Js(u'let'))) or PyJsStrictEq(var.get(u'value'),Js(u'new'))) or PyJsStrictEq(var.get(u'value'),Js(u'super'))) or PyJsStrictEq(var.get(u'value'),Js(u'this'))) or PyJsStrictEq(var.get(u'value'),Js(u'typeof'))) or PyJsStrictEq(var.get(u'value'),Js(u'void')))
                            var.put(u'start', (PyJs_LONG_353_() or PyJsStrictEq(var.get(u'value'),Js(u'yield'))))
                            break
                        if True:
                            SWITCHED = True
                            break
                        SWITCHED = True
                        break
                    return var.get(u'start')
                PyJs_anonymous_351_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'isStartOfExpression', PyJs_anonymous_351_)
                @Js
                def PyJs_anonymous_354_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'previousAllowYield', u'argument', u'delegate'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expectKeyword', Js(u'yield'))
                    var.put(u'argument', var.get(u"null"))
                    var.put(u'delegate', Js(False))
                    if var.get(u"this").get(u'hasLineTerminator').neg():
                        var.put(u'previousAllowYield', var.get(u"this").get(u'context').get(u'allowYield'))
                        var.get(u"this").get(u'context').put(u'allowYield', Js(False))
                        var.put(u'delegate', var.get(u"this").callprop(u'match', Js(u'*')))
                        if var.get(u'delegate'):
                            var.get(u"this").callprop(u'nextToken')
                            var.put(u'argument', var.get(u"this").callprop(u'parseAssignmentExpression'))
                        else:
                            if var.get(u"this").callprop(u'isStartOfExpression'):
                                var.put(u'argument', var.get(u"this").callprop(u'parseAssignmentExpression'))
                        var.get(u"this").get(u'context').put(u'allowYield', var.get(u'previousAllowYield'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'YieldExpression').create(var.get(u'argument'), var.get(u'delegate')))
                PyJs_anonymous_354_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseYieldExpression', PyJs_anonymous_354_)
                @Js
                def PyJs_anonymous_355_(hasConstructor, this, arguments, var=var):
                    var = Scope({u'this':this, u'hasConstructor':hasConstructor, u'arguments':arguments}, var)
                    var.registers([u'node', u'kind', u'computed', u'isStatic', u'value', u'id', u'token', u'isAsync', u'lookaheadPropertyKey', u'key', u'hasConstructor', u'punctuator', u'method'])
                    var.put(u'token', var.get(u"this").get(u'lookahead'))
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'kind', Js(u''))
                    var.put(u'key', var.get(u"null"))
                    var.put(u'value', var.get(u"null"))
                    var.put(u'computed', Js(False))
                    var.put(u'method', Js(False))
                    var.put(u'isStatic', Js(False))
                    var.put(u'isAsync', Js(False))
                    if var.get(u"this").callprop(u'match', Js(u'*')):
                        var.get(u"this").callprop(u'nextToken')
                    else:
                        var.put(u'computed', var.get(u"this").callprop(u'match', Js(u'[')))
                        var.put(u'key', var.get(u"this").callprop(u'parseObjectPropertyKey'))
                        var.put(u'id', var.get(u'key'))
                        if (PyJsStrictEq(var.get(u'id').get(u'name'),Js(u'static')) and (var.get(u"this").callprop(u'qualifiedPropertyName', var.get(u"this").get(u'lookahead')) or var.get(u"this").callprop(u'match', Js(u'*')))):
                            var.put(u'token', var.get(u"this").get(u'lookahead'))
                            var.put(u'isStatic', Js(True))
                            var.put(u'computed', var.get(u"this").callprop(u'match', Js(u'[')))
                            if var.get(u"this").callprop(u'match', Js(u'*')):
                                var.get(u"this").callprop(u'nextToken')
                            else:
                                var.put(u'key', var.get(u"this").callprop(u'parseObjectPropertyKey'))
                        if ((PyJsStrictEq(var.get(u'token').get(u'type'),Js(3.0)) and var.get(u"this").get(u'hasLineTerminator').neg()) and PyJsStrictEq(var.get(u'token').get(u'value'),Js(u'async'))):
                            var.put(u'punctuator', var.get(u"this").get(u'lookahead').get(u'value'))
                            if ((PyJsStrictNeq(var.get(u'punctuator'),Js(u':')) and PyJsStrictNeq(var.get(u'punctuator'),Js(u'('))) and PyJsStrictNeq(var.get(u'punctuator'),Js(u'*'))):
                                var.put(u'isAsync', Js(True))
                                var.put(u'token', var.get(u"this").get(u'lookahead'))
                                var.put(u'key', var.get(u"this").callprop(u'parseObjectPropertyKey'))
                                if (PyJsStrictEq(var.get(u'token').get(u'type'),Js(3.0)) and PyJsStrictEq(var.get(u'token').get(u'value'),Js(u'constructor'))):
                                    var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'token'), var.get(u'messages_1').get(u'Messages').get(u'ConstructorIsAsync'))
                    var.put(u'lookaheadPropertyKey', var.get(u"this").callprop(u'qualifiedPropertyName', var.get(u"this").get(u'lookahead')))
                    if PyJsStrictEq(var.get(u'token').get(u'type'),Js(3.0)):
                        if (PyJsStrictEq(var.get(u'token').get(u'value'),Js(u'get')) and var.get(u'lookaheadPropertyKey')):
                            var.put(u'kind', Js(u'get'))
                            var.put(u'computed', var.get(u"this").callprop(u'match', Js(u'[')))
                            var.put(u'key', var.get(u"this").callprop(u'parseObjectPropertyKey'))
                            var.get(u"this").get(u'context').put(u'allowYield', Js(False))
                            var.put(u'value', var.get(u"this").callprop(u'parseGetterMethod'))
                        else:
                            if (PyJsStrictEq(var.get(u'token').get(u'value'),Js(u'set')) and var.get(u'lookaheadPropertyKey')):
                                var.put(u'kind', Js(u'set'))
                                var.put(u'computed', var.get(u"this").callprop(u'match', Js(u'[')))
                                var.put(u'key', var.get(u"this").callprop(u'parseObjectPropertyKey'))
                                var.put(u'value', var.get(u"this").callprop(u'parseSetterMethod'))
                    else:
                        if ((PyJsStrictEq(var.get(u'token').get(u'type'),Js(7.0)) and PyJsStrictEq(var.get(u'token').get(u'value'),Js(u'*'))) and var.get(u'lookaheadPropertyKey')):
                            var.put(u'kind', Js(u'init'))
                            var.put(u'computed', var.get(u"this").callprop(u'match', Js(u'[')))
                            var.put(u'key', var.get(u"this").callprop(u'parseObjectPropertyKey'))
                            var.put(u'value', var.get(u"this").callprop(u'parseGeneratorMethod'))
                            var.put(u'method', Js(True))
                    if ((var.get(u'kind').neg() and var.get(u'key')) and var.get(u"this").callprop(u'match', Js(u'('))):
                        var.put(u'kind', Js(u'init'))
                        var.put(u'value', (var.get(u"this").callprop(u'parsePropertyMethodAsyncFunction') if var.get(u'isAsync') else var.get(u"this").callprop(u'parsePropertyMethodFunction')))
                        var.put(u'method', Js(True))
                    if var.get(u'kind').neg():
                        var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").get(u'lookahead'))
                    if PyJsStrictEq(var.get(u'kind'),Js(u'init')):
                        var.put(u'kind', Js(u'method'))
                    if var.get(u'computed').neg():
                        if (var.get(u'isStatic') and var.get(u"this").callprop(u'isPropertyKey', var.get(u'key'), Js(u'prototype'))):
                            var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'token'), var.get(u'messages_1').get(u'Messages').get(u'StaticPrototype'))
                        if (var.get(u'isStatic').neg() and var.get(u"this").callprop(u'isPropertyKey', var.get(u'key'), Js(u'constructor'))):
                            if ((PyJsStrictNeq(var.get(u'kind'),Js(u'method')) or var.get(u'method').neg()) or (var.get(u'value') and var.get(u'value').get(u'generator'))):
                                var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'token'), var.get(u'messages_1').get(u'Messages').get(u'ConstructorSpecialMethod'))
                            if var.get(u'hasConstructor').get(u'value'):
                                var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'token'), var.get(u'messages_1').get(u'Messages').get(u'DuplicateConstructor'))
                            else:
                                var.get(u'hasConstructor').put(u'value', Js(True))
                            var.put(u'kind', Js(u'constructor'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'MethodDefinition').create(var.get(u'key'), var.get(u'computed'), var.get(u'value'), var.get(u'kind'), var.get(u'isStatic')))
                PyJs_anonymous_355_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseClassElement', PyJs_anonymous_355_)
                @Js
                def PyJs_anonymous_356_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'body', u'hasConstructor'])
                    var.put(u'body', Js([]))
                    PyJs_Object_357_ = Js({u'value':Js(False)})
                    var.put(u'hasConstructor', PyJs_Object_357_)
                    var.get(u"this").callprop(u'expect', Js(u'{'))
                    while var.get(u"this").callprop(u'match', Js(u'}')).neg():
                        if var.get(u"this").callprop(u'match', Js(u';')):
                            var.get(u"this").callprop(u'nextToken')
                        else:
                            var.get(u'body').callprop(u'push', var.get(u"this").callprop(u'parseClassElement', var.get(u'hasConstructor')))
                    var.get(u"this").callprop(u'expect', Js(u'}'))
                    return var.get(u'body')
                PyJs_anonymous_356_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseClassElementList', PyJs_anonymous_356_)
                @Js
                def PyJs_anonymous_358_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'elementList'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'elementList', var.get(u"this").callprop(u'parseClassElementList'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ClassBody').create(var.get(u'elementList')))
                PyJs_anonymous_358_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseClassBody', PyJs_anonymous_358_)
                @Js
                def PyJs_anonymous_359_(identifierIsOptional, this, arguments, var=var):
                    var = Scope({u'this':this, u'identifierIsOptional':identifierIsOptional, u'arguments':arguments}, var)
                    var.registers([u'node', u'identifierIsOptional', u'previousStrict', u'classBody', u'id', u'superClass'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'previousStrict', var.get(u"this").get(u'context').get(u'strict'))
                    var.get(u"this").get(u'context').put(u'strict', Js(True))
                    var.get(u"this").callprop(u'expectKeyword', Js(u'class'))
                    var.put(u'id', (var.get(u"null") if (var.get(u'identifierIsOptional') and PyJsStrictNeq(var.get(u"this").get(u'lookahead').get(u'type'),Js(3.0))) else var.get(u"this").callprop(u'parseVariableIdentifier')))
                    var.put(u'superClass', var.get(u"null"))
                    if var.get(u"this").callprop(u'matchKeyword', Js(u'extends')):
                        var.get(u"this").callprop(u'nextToken')
                        var.put(u'superClass', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseLeftHandSideExpressionAllowCall')))
                    var.put(u'classBody', var.get(u"this").callprop(u'parseClassBody'))
                    var.get(u"this").get(u'context').put(u'strict', var.get(u'previousStrict'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ClassDeclaration').create(var.get(u'id'), var.get(u'superClass'), var.get(u'classBody')))
                PyJs_anonymous_359_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseClassDeclaration', PyJs_anonymous_359_)
                @Js
                def PyJs_anonymous_360_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'previousStrict', u'classBody', u'id', u'superClass'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'previousStrict', var.get(u"this").get(u'context').get(u'strict'))
                    var.get(u"this").get(u'context').put(u'strict', Js(True))
                    var.get(u"this").callprop(u'expectKeyword', Js(u'class'))
                    var.put(u'id', (var.get(u"this").callprop(u'parseVariableIdentifier') if PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'type'),Js(3.0)) else var.get(u"null")))
                    var.put(u'superClass', var.get(u"null"))
                    if var.get(u"this").callprop(u'matchKeyword', Js(u'extends')):
                        var.get(u"this").callprop(u'nextToken')
                        var.put(u'superClass', var.get(u"this").callprop(u'isolateCoverGrammar', var.get(u"this").get(u'parseLeftHandSideExpressionAllowCall')))
                    var.put(u'classBody', var.get(u"this").callprop(u'parseClassBody'))
                    var.get(u"this").get(u'context').put(u'strict', var.get(u'previousStrict'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ClassExpression').create(var.get(u'id'), var.get(u'superClass'), var.get(u'classBody')))
                PyJs_anonymous_360_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseClassExpression', PyJs_anonymous_360_)
                @Js
                def PyJs_anonymous_361_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'body'])
                    var.get(u"this").get(u'context').put(u'strict', Js(True))
                    var.get(u"this").get(u'context').put(u'isModule', Js(True))
                    var.get(u"this").get(u'scanner').put(u'isModule', Js(True))
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'body', var.get(u"this").callprop(u'parseDirectivePrologues'))
                    while PyJsStrictNeq(var.get(u"this").get(u'lookahead').get(u'type'),Js(2.0)):
                        var.get(u'body').callprop(u'push', var.get(u"this").callprop(u'parseStatementListItem'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'Module').create(var.get(u'body')))
                PyJs_anonymous_361_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseModule', PyJs_anonymous_361_)
                @Js
                def PyJs_anonymous_362_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'body'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'body', var.get(u"this").callprop(u'parseDirectivePrologues'))
                    while PyJsStrictNeq(var.get(u"this").get(u'lookahead').get(u'type'),Js(2.0)):
                        var.get(u'body').callprop(u'push', var.get(u"this").callprop(u'parseStatementListItem'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'Script').create(var.get(u'body')))
                PyJs_anonymous_362_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseScript', PyJs_anonymous_362_)
                @Js
                def PyJs_anonymous_363_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'raw', u'token'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    if PyJsStrictNeq(var.get(u"this").get(u'lookahead').get(u'type'),Js(8.0)):
                        var.get(u"this").callprop(u'throwError', var.get(u'messages_1').get(u'Messages').get(u'InvalidModuleSpecifier'))
                    var.put(u'token', var.get(u"this").callprop(u'nextToken'))
                    var.put(u'raw', var.get(u"this").callprop(u'getTokenRaw', var.get(u'token')))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'Literal').create(var.get(u'token').get(u'value'), var.get(u'raw')))
                PyJs_anonymous_363_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseModuleSpecifier', PyJs_anonymous_363_)
                @Js
                def PyJs_anonymous_364_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'local', u'imported'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    pass
                    pass
                    if PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'type'),Js(3.0)):
                        var.put(u'imported', var.get(u"this").callprop(u'parseVariableIdentifier'))
                        var.put(u'local', var.get(u'imported'))
                        if var.get(u"this").callprop(u'matchContextualKeyword', Js(u'as')):
                            var.get(u"this").callprop(u'nextToken')
                            var.put(u'local', var.get(u"this").callprop(u'parseVariableIdentifier'))
                    else:
                        var.put(u'imported', var.get(u"this").callprop(u'parseIdentifierName'))
                        var.put(u'local', var.get(u'imported'))
                        if var.get(u"this").callprop(u'matchContextualKeyword', Js(u'as')):
                            var.get(u"this").callprop(u'nextToken')
                            var.put(u'local', var.get(u"this").callprop(u'parseVariableIdentifier'))
                        else:
                            var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").callprop(u'nextToken'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ImportSpecifier').create(var.get(u'local'), var.get(u'imported')))
                PyJs_anonymous_364_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseImportSpecifier', PyJs_anonymous_364_)
                @Js
                def PyJs_anonymous_365_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'specifiers'])
                    var.get(u"this").callprop(u'expect', Js(u'{'))
                    var.put(u'specifiers', Js([]))
                    while var.get(u"this").callprop(u'match', Js(u'}')).neg():
                        var.get(u'specifiers').callprop(u'push', var.get(u"this").callprop(u'parseImportSpecifier'))
                        if var.get(u"this").callprop(u'match', Js(u'}')).neg():
                            var.get(u"this").callprop(u'expect', Js(u','))
                    var.get(u"this").callprop(u'expect', Js(u'}'))
                    return var.get(u'specifiers')
                PyJs_anonymous_365_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseNamedImports', PyJs_anonymous_365_)
                @Js
                def PyJs_anonymous_366_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'local'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'local', var.get(u"this").callprop(u'parseIdentifierName'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ImportDefaultSpecifier').create(var.get(u'local')))
                PyJs_anonymous_366_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseImportDefaultSpecifier', PyJs_anonymous_366_)
                @Js
                def PyJs_anonymous_367_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'local'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expect', Js(u'*'))
                    if var.get(u"this").callprop(u'matchContextualKeyword', Js(u'as')).neg():
                        var.get(u"this").callprop(u'throwError', var.get(u'messages_1').get(u'Messages').get(u'NoAsAfterImportNamespace'))
                    var.get(u"this").callprop(u'nextToken')
                    var.put(u'local', var.get(u"this").callprop(u'parseIdentifierName'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ImportNamespaceSpecifier').create(var.get(u'local')))
                PyJs_anonymous_367_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseImportNamespaceSpecifier', PyJs_anonymous_367_)
                @Js
                def PyJs_anonymous_368_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'src', u'message', u'specifiers'])
                    if var.get(u"this").get(u'context').get(u'inFunctionBody'):
                        var.get(u"this").callprop(u'throwError', var.get(u'messages_1').get(u'Messages').get(u'IllegalImportDeclaration'))
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expectKeyword', Js(u'import'))
                    pass
                    var.put(u'specifiers', Js([]))
                    if PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'type'),Js(8.0)):
                        var.put(u'src', var.get(u"this").callprop(u'parseModuleSpecifier'))
                    else:
                        if var.get(u"this").callprop(u'match', Js(u'{')):
                            var.put(u'specifiers', var.get(u'specifiers').callprop(u'concat', var.get(u"this").callprop(u'parseNamedImports')))
                        else:
                            if var.get(u"this").callprop(u'match', Js(u'*')):
                                var.get(u'specifiers').callprop(u'push', var.get(u"this").callprop(u'parseImportNamespaceSpecifier'))
                            else:
                                if (var.get(u"this").callprop(u'isIdentifierName', var.get(u"this").get(u'lookahead')) and var.get(u"this").callprop(u'matchKeyword', Js(u'default')).neg()):
                                    var.get(u'specifiers').callprop(u'push', var.get(u"this").callprop(u'parseImportDefaultSpecifier'))
                                    if var.get(u"this").callprop(u'match', Js(u',')):
                                        var.get(u"this").callprop(u'nextToken')
                                        if var.get(u"this").callprop(u'match', Js(u'*')):
                                            var.get(u'specifiers').callprop(u'push', var.get(u"this").callprop(u'parseImportNamespaceSpecifier'))
                                        else:
                                            if var.get(u"this").callprop(u'match', Js(u'{')):
                                                var.put(u'specifiers', var.get(u'specifiers').callprop(u'concat', var.get(u"this").callprop(u'parseNamedImports')))
                                            else:
                                                var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").get(u'lookahead'))
                                else:
                                    var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").callprop(u'nextToken'))
                        if var.get(u"this").callprop(u'matchContextualKeyword', Js(u'from')).neg():
                            var.put(u'message', (var.get(u'messages_1').get(u'Messages').get(u'UnexpectedToken') if var.get(u"this").get(u'lookahead').get(u'value') else var.get(u'messages_1').get(u'Messages').get(u'MissingFromClause')))
                            var.get(u"this").callprop(u'throwError', var.get(u'message'), var.get(u"this").get(u'lookahead').get(u'value'))
                        var.get(u"this").callprop(u'nextToken')
                        var.put(u'src', var.get(u"this").callprop(u'parseModuleSpecifier'))
                    var.get(u"this").callprop(u'consumeSemicolon')
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ImportDeclaration').create(var.get(u'specifiers'), var.get(u'src')))
                PyJs_anonymous_368_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseImportDeclaration', PyJs_anonymous_368_)
                @Js
                def PyJs_anonymous_369_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'local', u'exported'])
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.put(u'local', var.get(u"this").callprop(u'parseIdentifierName'))
                    var.put(u'exported', var.get(u'local'))
                    if var.get(u"this").callprop(u'matchContextualKeyword', Js(u'as')):
                        var.get(u"this").callprop(u'nextToken')
                        var.put(u'exported', var.get(u"this").callprop(u'parseIdentifierName'))
                    return var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ExportSpecifier').create(var.get(u'local'), var.get(u'exported')))
                PyJs_anonymous_369_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseExportSpecifier', PyJs_anonymous_369_)
                @Js
                def PyJs_anonymous_370_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'node', u'src', u'isExportFromIdentifier', u'specifiers', u'exportDeclaration', u'source', u'declaration', u'message'])
                    if var.get(u"this").get(u'context').get(u'inFunctionBody'):
                        var.get(u"this").callprop(u'throwError', var.get(u'messages_1').get(u'Messages').get(u'IllegalExportDeclaration'))
                    var.put(u'node', var.get(u"this").callprop(u'createNode'))
                    var.get(u"this").callprop(u'expectKeyword', Js(u'export'))
                    pass
                    if var.get(u"this").callprop(u'matchKeyword', Js(u'default')):
                        var.get(u"this").callprop(u'nextToken')
                        if var.get(u"this").callprop(u'matchKeyword', Js(u'function')):
                            var.put(u'declaration', var.get(u"this").callprop(u'parseFunctionDeclaration', Js(True)))
                            var.put(u'exportDeclaration', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ExportDefaultDeclaration').create(var.get(u'declaration'))))
                        else:
                            if var.get(u"this").callprop(u'matchKeyword', Js(u'class')):
                                var.put(u'declaration', var.get(u"this").callprop(u'parseClassDeclaration', Js(True)))
                                var.put(u'exportDeclaration', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ExportDefaultDeclaration').create(var.get(u'declaration'))))
                            else:
                                if var.get(u"this").callprop(u'matchContextualKeyword', Js(u'async')):
                                    var.put(u'declaration', (var.get(u"this").callprop(u'parseFunctionDeclaration', Js(True)) if var.get(u"this").callprop(u'matchAsyncFunction') else var.get(u"this").callprop(u'parseAssignmentExpression')))
                                    var.put(u'exportDeclaration', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ExportDefaultDeclaration').create(var.get(u'declaration'))))
                                else:
                                    if var.get(u"this").callprop(u'matchContextualKeyword', Js(u'from')):
                                        var.get(u"this").callprop(u'throwError', var.get(u'messages_1').get(u'Messages').get(u'UnexpectedToken'), var.get(u"this").get(u'lookahead').get(u'value'))
                                    var.put(u'declaration', (var.get(u"this").callprop(u'parseObjectInitializer') if var.get(u"this").callprop(u'match', Js(u'{')) else (var.get(u"this").callprop(u'parseArrayInitializer') if var.get(u"this").callprop(u'match', Js(u'[')) else var.get(u"this").callprop(u'parseAssignmentExpression'))))
                                    var.get(u"this").callprop(u'consumeSemicolon')
                                    var.put(u'exportDeclaration', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ExportDefaultDeclaration').create(var.get(u'declaration'))))
                    else:
                        if var.get(u"this").callprop(u'match', Js(u'*')):
                            var.get(u"this").callprop(u'nextToken')
                            if var.get(u"this").callprop(u'matchContextualKeyword', Js(u'from')).neg():
                                var.put(u'message', (var.get(u'messages_1').get(u'Messages').get(u'UnexpectedToken') if var.get(u"this").get(u'lookahead').get(u'value') else var.get(u'messages_1').get(u'Messages').get(u'MissingFromClause')))
                                var.get(u"this").callprop(u'throwError', var.get(u'message'), var.get(u"this").get(u'lookahead').get(u'value'))
                            var.get(u"this").callprop(u'nextToken')
                            var.put(u'src', var.get(u"this").callprop(u'parseModuleSpecifier'))
                            var.get(u"this").callprop(u'consumeSemicolon')
                            var.put(u'exportDeclaration', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ExportAllDeclaration').create(var.get(u'src'))))
                        else:
                            if PyJsStrictEq(var.get(u"this").get(u'lookahead').get(u'type'),Js(4.0)):
                                var.put(u'declaration', PyJsComma(Js(0.0), Js(None)))
                                while 1:
                                    SWITCHED = False
                                    CONDITION = (var.get(u"this").get(u'lookahead').get(u'value'))
                                    if SWITCHED or PyJsStrictEq(CONDITION, Js(u'let')):
                                        SWITCHED = True
                                        pass
                                    if SWITCHED or PyJsStrictEq(CONDITION, Js(u'const')):
                                        SWITCHED = True
                                        PyJs_Object_371_ = Js({u'inFor':Js(False)})
                                        var.put(u'declaration', var.get(u"this").callprop(u'parseLexicalDeclaration', PyJs_Object_371_))
                                        break
                                    if SWITCHED or PyJsStrictEq(CONDITION, Js(u'var')):
                                        SWITCHED = True
                                        pass
                                    if SWITCHED or PyJsStrictEq(CONDITION, Js(u'class')):
                                        SWITCHED = True
                                        pass
                                    if SWITCHED or PyJsStrictEq(CONDITION, Js(u'function')):
                                        SWITCHED = True
                                        var.put(u'declaration', var.get(u"this").callprop(u'parseStatementListItem'))
                                        break
                                    if True:
                                        SWITCHED = True
                                        var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u"this").get(u'lookahead'))
                                    SWITCHED = True
                                    break
                                var.put(u'exportDeclaration', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ExportNamedDeclaration').create(var.get(u'declaration'), Js([]), var.get(u"null"))))
                            else:
                                if var.get(u"this").callprop(u'matchAsyncFunction'):
                                    var.put(u'declaration', var.get(u"this").callprop(u'parseFunctionDeclaration'))
                                    var.put(u'exportDeclaration', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ExportNamedDeclaration').create(var.get(u'declaration'), Js([]), var.get(u"null"))))
                                else:
                                    var.put(u'specifiers', Js([]))
                                    var.put(u'source', var.get(u"null"))
                                    var.put(u'isExportFromIdentifier', Js(False))
                                    var.get(u"this").callprop(u'expect', Js(u'{'))
                                    while var.get(u"this").callprop(u'match', Js(u'}')).neg():
                                        var.put(u'isExportFromIdentifier', (var.get(u'isExportFromIdentifier') or var.get(u"this").callprop(u'matchKeyword', Js(u'default'))))
                                        var.get(u'specifiers').callprop(u'push', var.get(u"this").callprop(u'parseExportSpecifier'))
                                        if var.get(u"this").callprop(u'match', Js(u'}')).neg():
                                            var.get(u"this").callprop(u'expect', Js(u','))
                                    var.get(u"this").callprop(u'expect', Js(u'}'))
                                    if var.get(u"this").callprop(u'matchContextualKeyword', Js(u'from')):
                                        var.get(u"this").callprop(u'nextToken')
                                        var.put(u'source', var.get(u"this").callprop(u'parseModuleSpecifier'))
                                        var.get(u"this").callprop(u'consumeSemicolon')
                                    else:
                                        if var.get(u'isExportFromIdentifier'):
                                            var.put(u'message', (var.get(u'messages_1').get(u'Messages').get(u'UnexpectedToken') if var.get(u"this").get(u'lookahead').get(u'value') else var.get(u'messages_1').get(u'Messages').get(u'MissingFromClause')))
                                            var.get(u"this").callprop(u'throwError', var.get(u'message'), var.get(u"this").get(u'lookahead').get(u'value'))
                                        else:
                                            var.get(u"this").callprop(u'consumeSemicolon')
                                    var.put(u'exportDeclaration', var.get(u"this").callprop(u'finalize', var.get(u'node'), var.get(u'Node').get(u'ExportNamedDeclaration').create(var.get(u"null"), var.get(u'specifiers'), var.get(u'source'))))
                    return var.get(u'exportDeclaration')
                PyJs_anonymous_370_._set_name(u'anonymous')
                var.get(u'Parser').get(u'prototype').put(u'parseExportDeclaration', PyJs_anonymous_370_)
                return var.get(u'Parser')
            PyJs_anonymous_183_._set_name(u'anonymous')
            var.put(u'Parser', PyJs_anonymous_183_())
            var.get(u'exports').put(u'Parser', var.get(u'Parser'))
        PyJs_anonymous_181_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_372_(module, exports, this, arguments, var=var):
            var = Scope({u'this':this, u'exports':exports, u'arguments':arguments, u'module':module}, var)
            var.registers([u'assert', u'exports', u'module'])
            @Js
            def PyJsHoisted_assert_(condition, message, this, arguments, var=var):
                var = Scope({u'this':this, u'message':message, u'arguments':arguments, u'condition':condition}, var)
                var.registers([u'message', u'condition'])
                if var.get(u'condition').neg():
                    PyJsTempException = JsToPyException(var.get(u'Error').create((Js(u'ASSERT: ')+var.get(u'message'))))
                    raise PyJsTempException
            PyJsHoisted_assert_.func_name = u'assert'
            var.put(u'assert', PyJsHoisted_assert_)
            Js(u'use strict')
            PyJs_Object_373_ = Js({u'value':Js(True)})
            var.get(u'Object').callprop(u'defineProperty', var.get(u'exports'), Js(u'__esModule'), PyJs_Object_373_)
            pass
            var.get(u'exports').put(u'assert', var.get(u'assert'))
        PyJs_anonymous_372_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_374_(module, exports, this, arguments, var=var):
            var = Scope({u'this':this, u'exports':exports, u'arguments':arguments, u'module':module}, var)
            var.registers([u'exports', u'module', u'ErrorHandler'])
            Js(u'use strict')
            PyJs_Object_375_ = Js({u'value':Js(True)})
            var.get(u'Object').callprop(u'defineProperty', var.get(u'exports'), Js(u'__esModule'), PyJs_Object_375_)
            @Js
            def PyJs_anonymous_376_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'ErrorHandler'])
                @Js
                def PyJsHoisted_ErrorHandler_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").put(u'errors', Js([]))
                    var.get(u"this").put(u'tolerant', Js(False))
                PyJsHoisted_ErrorHandler_.func_name = u'ErrorHandler'
                var.put(u'ErrorHandler', PyJsHoisted_ErrorHandler_)
                pass
                @Js
                def PyJs_anonymous_377_(error, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'error':error}, var)
                    var.registers([u'error'])
                    var.get(u"this").get(u'errors').callprop(u'push', var.get(u'error'))
                PyJs_anonymous_377_._set_name(u'anonymous')
                var.get(u'ErrorHandler').get(u'prototype').put(u'recordError', PyJs_anonymous_377_)
                @Js
                def PyJs_anonymous_378_(error, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'error':error}, var)
                    var.registers([u'error'])
                    if var.get(u"this").get(u'tolerant'):
                        var.get(u"this").callprop(u'recordError', var.get(u'error'))
                    else:
                        PyJsTempException = JsToPyException(var.get(u'error'))
                        raise PyJsTempException
                PyJs_anonymous_378_._set_name(u'anonymous')
                var.get(u'ErrorHandler').get(u'prototype').put(u'tolerate', PyJs_anonymous_378_)
                @Js
                def PyJs_anonymous_379_(msg, column, this, arguments, var=var):
                    var = Scope({u'msg':msg, u'column':column, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'msg', u'column', u'error'])
                    var.put(u'error', var.get(u'Error').create(var.get(u'msg')))
                    try:
                        PyJsTempException = JsToPyException(var.get(u'error'))
                        raise PyJsTempException
                    except PyJsException as PyJsTempException:
                        PyJsHolder_62617365_97297718 = var.own.get(u'base')
                        var.force_own_put(u'base', PyExceptionToJs(PyJsTempException))
                        try:
                            if (var.get(u'Object').get(u'create') and var.get(u'Object').get(u'defineProperty')):
                                var.put(u'error', var.get(u'Object').callprop(u'create', var.get(u'base')))
                                PyJs_Object_380_ = Js({u'value':var.get(u'column')})
                                var.get(u'Object').callprop(u'defineProperty', var.get(u'error'), Js(u'column'), PyJs_Object_380_)
                        finally:
                            if PyJsHolder_62617365_97297718 is not None:
                                var.own[u'base'] = PyJsHolder_62617365_97297718
                            else:
                                del var.own[u'base']
                            del PyJsHolder_62617365_97297718
                    return var.get(u'error')
                PyJs_anonymous_379_._set_name(u'anonymous')
                var.get(u'ErrorHandler').get(u'prototype').put(u'constructError', PyJs_anonymous_379_)
                @Js
                def PyJs_anonymous_381_(index, line, col, description, this, arguments, var=var):
                    var = Scope({u'index':index, u'description':description, u'this':this, u'line':line, u'col':col, u'arguments':arguments}, var)
                    var.registers([u'index', u'description', u'error', u'msg', u'line', u'col'])
                    var.put(u'msg', (((Js(u'Line ')+var.get(u'line'))+Js(u': '))+var.get(u'description')))
                    var.put(u'error', var.get(u"this").callprop(u'constructError', var.get(u'msg'), var.get(u'col')))
                    var.get(u'error').put(u'index', var.get(u'index'))
                    var.get(u'error').put(u'lineNumber', var.get(u'line'))
                    var.get(u'error').put(u'description', var.get(u'description'))
                    return var.get(u'error')
                PyJs_anonymous_381_._set_name(u'anonymous')
                var.get(u'ErrorHandler').get(u'prototype').put(u'createError', PyJs_anonymous_381_)
                @Js
                def PyJs_anonymous_382_(index, line, col, description, this, arguments, var=var):
                    var = Scope({u'index':index, u'description':description, u'this':this, u'line':line, u'col':col, u'arguments':arguments}, var)
                    var.registers([u'index', u'line', u'col', u'description'])
                    PyJsTempException = JsToPyException(var.get(u"this").callprop(u'createError', var.get(u'index'), var.get(u'line'), var.get(u'col'), var.get(u'description')))
                    raise PyJsTempException
                PyJs_anonymous_382_._set_name(u'anonymous')
                var.get(u'ErrorHandler').get(u'prototype').put(u'throwError', PyJs_anonymous_382_)
                @Js
                def PyJs_anonymous_383_(index, line, col, description, this, arguments, var=var):
                    var = Scope({u'index':index, u'description':description, u'this':this, u'line':line, u'col':col, u'arguments':arguments}, var)
                    var.registers([u'index', u'line', u'description', u'col', u'error'])
                    var.put(u'error', var.get(u"this").callprop(u'createError', var.get(u'index'), var.get(u'line'), var.get(u'col'), var.get(u'description')))
                    if var.get(u"this").get(u'tolerant'):
                        var.get(u"this").callprop(u'recordError', var.get(u'error'))
                    else:
                        PyJsTempException = JsToPyException(var.get(u'error'))
                        raise PyJsTempException
                PyJs_anonymous_383_._set_name(u'anonymous')
                var.get(u'ErrorHandler').get(u'prototype').put(u'tolerateError', PyJs_anonymous_383_)
                return var.get(u'ErrorHandler')
            PyJs_anonymous_376_._set_name(u'anonymous')
            var.put(u'ErrorHandler', PyJs_anonymous_376_())
            var.get(u'exports').put(u'ErrorHandler', var.get(u'ErrorHandler'))
        PyJs_anonymous_374_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_384_(module, exports, this, arguments, var=var):
            var = Scope({u'this':this, u'exports':exports, u'arguments':arguments, u'module':module}, var)
            var.registers([u'exports', u'module'])
            Js(u'use strict')
            PyJs_Object_385_ = Js({u'value':Js(True)})
            var.get(u'Object').callprop(u'defineProperty', var.get(u'exports'), Js(u'__esModule'), PyJs_Object_385_)
            PyJs_Object_386_ = Js({u'BadGetterArity':Js(u'Getter must not have any formal parameters'),u'BadSetterArity':Js(u'Setter must have exactly one formal parameter'),u'BadSetterRestParameter':Js(u'Setter function argument must not be a rest parameter'),u'ConstructorIsAsync':Js(u'Class constructor may not be an async method'),u'ConstructorSpecialMethod':Js(u'Class constructor may not be an accessor'),u'DeclarationMissingInitializer':Js(u'Missing initializer in %0 declaration'),u'DefaultRestParameter':Js(u'Unexpected token ='),u'DuplicateBinding':Js(u'Duplicate binding %0'),u'DuplicateConstructor':Js(u'A class may only have one constructor'),u'DuplicateProtoProperty':Js(u'Duplicate __proto__ fields are not allowed in object literals'),u'ForInOfLoopInitializer':Js(u'%0 loop variable declaration may not have an initializer'),u'GeneratorInLegacyContext':Js(u'Generator declarations are not allowed in legacy contexts'),u'IllegalBreak':Js(u'Illegal break statement'),u'IllegalContinue':Js(u'Illegal continue statement'),u'IllegalExportDeclaration':Js(u'Unexpected token'),u'IllegalImportDeclaration':Js(u'Unexpected token'),u'IllegalLanguageModeDirective':Js(u"Illegal 'use strict' directive in function with non-simple parameter list"),u'IllegalReturn':Js(u'Illegal return statement'),u'InvalidEscapedReservedWord':Js(u'Keyword must not contain escaped characters'),u'InvalidHexEscapeSequence':Js(u'Invalid hexadecimal escape sequence'),u'InvalidLHSInAssignment':Js(u'Invalid left-hand side in assignment'),u'InvalidLHSInForIn':Js(u'Invalid left-hand side in for-in'),u'InvalidLHSInForLoop':Js(u'Invalid left-hand side in for-loop'),u'InvalidModuleSpecifier':Js(u'Unexpected token'),u'InvalidRegExp':Js(u'Invalid regular expression'),u'LetInLexicalBinding':Js(u'let is disallowed as a lexically bound name'),u'MissingFromClause':Js(u'Unexpected token'),u'MultipleDefaultsInSwitch':Js(u'More than one default clause in switch statement'),u'NewlineAfterThrow':Js(u'Illegal newline after throw'),u'NoAsAfterImportNamespace':Js(u'Unexpected token'),u'NoCatchOrFinally':Js(u'Missing catch or finally after try'),u'ParameterAfterRestParameter':Js(u'Rest parameter must be last formal parameter'),u'Redeclaration':Js(u"%0 '%1' has already been declared"),u'StaticPrototype':Js(u'Classes may not have static property named prototype'),u'StrictCatchVariable':Js(u'Catch variable may not be eval or arguments in strict mode'),u'StrictDelete':Js(u'Delete of an unqualified identifier in strict mode.'),u'StrictFunction':Js(u'In strict mode code, functions can only be declared at top level or inside a block'),u'StrictFunctionName':Js(u'Function name may not be eval or arguments in strict mode'),u'StrictLHSAssignment':Js(u'Assignment to eval or arguments is not allowed in strict mode'),u'StrictLHSPostfix':Js(u'Postfix increment/decrement may not have eval or arguments operand in strict mode'),u'StrictLHSPrefix':Js(u'Prefix increment/decrement may not have eval or arguments operand in strict mode'),u'StrictModeWith':Js(u'Strict mode code may not include a with statement'),u'StrictOctalLiteral':Js(u'Octal literals are not allowed in strict mode.'),u'StrictParamDupe':Js(u'Strict mode function may not have duplicate parameter names'),u'StrictParamName':Js(u'Parameter name eval or arguments is not allowed in strict mode'),u'StrictReservedWord':Js(u'Use of future reserved word in strict mode'),u'StrictVarName':Js(u'Variable name may not be eval or arguments in strict mode'),u'TemplateOctalLiteral':Js(u'Octal literals are not allowed in template strings.'),u'UnexpectedEOS':Js(u'Unexpected end of input'),u'UnexpectedIdentifier':Js(u'Unexpected identifier'),u'UnexpectedNumber':Js(u'Unexpected number'),u'UnexpectedReserved':Js(u'Unexpected reserved word'),u'UnexpectedString':Js(u'Unexpected string'),u'UnexpectedTemplate':Js(u'Unexpected quasi %0'),u'UnexpectedToken':Js(u'Unexpected token %0'),u'UnexpectedTokenIllegal':Js(u'Unexpected token ILLEGAL'),u'UnknownLabel':Js(u"Undefined label '%0'"),u'UnterminatedRegExp':Js(u'Invalid regular expression: missing /')})
            var.get(u'exports').put(u'Messages', PyJs_Object_386_)
        PyJs_anonymous_384_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_387_(module, exports, __webpack_require__, this, arguments, var=var):
            var = Scope({u'this':this, u'exports':exports, u'__webpack_require__':__webpack_require__, u'module':module, u'arguments':arguments}, var)
            var.registers([u'assert_1', u'messages_1', u'Scanner', u'module', u'character_1', u'exports', u'hexValue', u'__webpack_require__', u'octalValue'])
            @Js
            def PyJsHoisted_octalValue_(ch, this, arguments, var=var):
                var = Scope({u'this':this, u'ch':ch, u'arguments':arguments}, var)
                var.registers([u'ch'])
                return Js(u'01234567').callprop(u'indexOf', var.get(u'ch'))
            PyJsHoisted_octalValue_.func_name = u'octalValue'
            var.put(u'octalValue', PyJsHoisted_octalValue_)
            @Js
            def PyJsHoisted_hexValue_(ch, this, arguments, var=var):
                var = Scope({u'this':this, u'ch':ch, u'arguments':arguments}, var)
                var.registers([u'ch'])
                return Js(u'0123456789abcdef').callprop(u'indexOf', var.get(u'ch').callprop(u'toLowerCase'))
            PyJsHoisted_hexValue_.func_name = u'hexValue'
            var.put(u'hexValue', PyJsHoisted_hexValue_)
            Js(u'use strict')
            PyJs_Object_388_ = Js({u'value':Js(True)})
            var.get(u'Object').callprop(u'defineProperty', var.get(u'exports'), Js(u'__esModule'), PyJs_Object_388_)
            var.put(u'assert_1', var.get(u'__webpack_require__')(Js(9.0)))
            var.put(u'character_1', var.get(u'__webpack_require__')(Js(4.0)))
            var.put(u'messages_1', var.get(u'__webpack_require__')(Js(11.0)))
            pass
            pass
            @Js
            def PyJs_anonymous_389_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'Scanner'])
                @Js
                def PyJsHoisted_Scanner_(code, handler, this, arguments, var=var):
                    var = Scope({u'this':this, u'handler':handler, u'code':code, u'arguments':arguments}, var)
                    var.registers([u'handler', u'code'])
                    var.get(u"this").put(u'source', var.get(u'code'))
                    var.get(u"this").put(u'errorHandler', var.get(u'handler'))
                    var.get(u"this").put(u'trackComment', Js(False))
                    var.get(u"this").put(u'isModule', Js(False))
                    var.get(u"this").put(u'length', var.get(u'code').get(u'length'))
                    var.get(u"this").put(u'index', Js(0.0))
                    var.get(u"this").put(u'lineNumber', (Js(1.0) if (var.get(u'code').get(u'length')>Js(0.0)) else Js(0.0)))
                    var.get(u"this").put(u'lineStart', Js(0.0))
                    var.get(u"this").put(u'curlyStack', Js([]))
                PyJsHoisted_Scanner_.func_name = u'Scanner'
                var.put(u'Scanner', PyJsHoisted_Scanner_)
                pass
                @Js
                def PyJs_anonymous_390_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    PyJs_Object_391_ = Js({u'index':var.get(u"this").get(u'index'),u'lineNumber':var.get(u"this").get(u'lineNumber'),u'lineStart':var.get(u"this").get(u'lineStart')})
                    return PyJs_Object_391_
                PyJs_anonymous_390_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'saveState', PyJs_anonymous_390_)
                @Js
                def PyJs_anonymous_392_(state, this, arguments, var=var):
                    var = Scope({u'this':this, u'state':state, u'arguments':arguments}, var)
                    var.registers([u'state'])
                    var.get(u"this").put(u'index', var.get(u'state').get(u'index'))
                    var.get(u"this").put(u'lineNumber', var.get(u'state').get(u'lineNumber'))
                    var.get(u"this").put(u'lineStart', var.get(u'state').get(u'lineStart'))
                PyJs_anonymous_392_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'restoreState', PyJs_anonymous_392_)
                @Js
                def PyJs_anonymous_393_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    return (var.get(u"this").get(u'index')>=var.get(u"this").get(u'length'))
                PyJs_anonymous_393_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'eof', PyJs_anonymous_393_)
                @Js
                def PyJs_anonymous_394_(message, this, arguments, var=var):
                    var = Scope({u'this':this, u'message':message, u'arguments':arguments}, var)
                    var.registers([u'message'])
                    if PyJsStrictEq(var.get(u'message'),PyJsComma(Js(0.0), Js(None))):
                        var.put(u'message', var.get(u'messages_1').get(u'Messages').get(u'UnexpectedTokenIllegal'))
                    return var.get(u"this").get(u'errorHandler').callprop(u'throwError', var.get(u"this").get(u'index'), var.get(u"this").get(u'lineNumber'), ((var.get(u"this").get(u'index')-var.get(u"this").get(u'lineStart'))+Js(1.0)), var.get(u'message'))
                PyJs_anonymous_394_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'throwUnexpectedToken', PyJs_anonymous_394_)
                @Js
                def PyJs_anonymous_395_(message, this, arguments, var=var):
                    var = Scope({u'this':this, u'message':message, u'arguments':arguments}, var)
                    var.registers([u'message'])
                    if PyJsStrictEq(var.get(u'message'),PyJsComma(Js(0.0), Js(None))):
                        var.put(u'message', var.get(u'messages_1').get(u'Messages').get(u'UnexpectedTokenIllegal'))
                    var.get(u"this").get(u'errorHandler').callprop(u'tolerateError', var.get(u"this").get(u'index'), var.get(u"this").get(u'lineNumber'), ((var.get(u"this").get(u'index')-var.get(u"this").get(u'lineStart'))+Js(1.0)), var.get(u'message'))
                PyJs_anonymous_395_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'tolerateUnexpectedToken', PyJs_anonymous_395_)
                @Js
                def PyJs_anonymous_396_(offset, this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments, u'offset':offset}, var)
                    var.registers([u'loc', u'ch', u'comments', u'start', u'offset', u'entry'])
                    var.put(u'comments', Js([]))
                    pass
                    if var.get(u"this").get(u'trackComment'):
                        var.put(u'comments', Js([]))
                        var.put(u'start', (var.get(u"this").get(u'index')-var.get(u'offset')))
                        PyJs_Object_398_ = Js({u'line':var.get(u"this").get(u'lineNumber'),u'column':((var.get(u"this").get(u'index')-var.get(u"this").get(u'lineStart'))-var.get(u'offset'))})
                        PyJs_Object_399_ = Js({})
                        PyJs_Object_397_ = Js({u'start':PyJs_Object_398_,u'end':PyJs_Object_399_})
                        var.put(u'loc', PyJs_Object_397_)
                    while var.get(u"this").callprop(u'eof').neg():
                        var.put(u'ch', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index')))
                        var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                        if var.get(u'character_1').get(u'Character').callprop(u'isLineTerminator', var.get(u'ch')):
                            if var.get(u"this").get(u'trackComment'):
                                PyJs_Object_400_ = Js({u'line':var.get(u"this").get(u'lineNumber'),u'column':((var.get(u"this").get(u'index')-var.get(u"this").get(u'lineStart'))-Js(1.0))})
                                var.get(u'loc').put(u'end', PyJs_Object_400_)
                                PyJs_Object_401_ = Js({u'multiLine':Js(False),u'slice':Js([(var.get(u'start')+var.get(u'offset')), (var.get(u"this").get(u'index')-Js(1.0))]),u'range':Js([var.get(u'start'), (var.get(u"this").get(u'index')-Js(1.0))]),u'loc':var.get(u'loc')})
                                var.put(u'entry', PyJs_Object_401_)
                                var.get(u'comments').callprop(u'push', var.get(u'entry'))
                            if (PyJsStrictEq(var.get(u'ch'),Js(13.0)) and PyJsStrictEq(var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index')),Js(10.0))):
                                var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                            var.get(u"this").put(u'lineNumber',Js(var.get(u"this").get(u'lineNumber').to_number())+Js(1))
                            var.get(u"this").put(u'lineStart', var.get(u"this").get(u'index'))
                            return var.get(u'comments')
                    if var.get(u"this").get(u'trackComment'):
                        PyJs_Object_402_ = Js({u'line':var.get(u"this").get(u'lineNumber'),u'column':(var.get(u"this").get(u'index')-var.get(u"this").get(u'lineStart'))})
                        var.get(u'loc').put(u'end', PyJs_Object_402_)
                        PyJs_Object_403_ = Js({u'multiLine':Js(False),u'slice':Js([(var.get(u'start')+var.get(u'offset')), var.get(u"this").get(u'index')]),u'range':Js([var.get(u'start'), var.get(u"this").get(u'index')]),u'loc':var.get(u'loc')})
                        var.put(u'entry', PyJs_Object_403_)
                        var.get(u'comments').callprop(u'push', var.get(u'entry'))
                    return var.get(u'comments')
                PyJs_anonymous_396_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'skipSingleLineComment', PyJs_anonymous_396_)
                @Js
                def PyJs_anonymous_404_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'start', u'ch', u'entry', u'comments', u'loc'])
                    var.put(u'comments', Js([]))
                    pass
                    if var.get(u"this").get(u'trackComment'):
                        var.put(u'comments', Js([]))
                        var.put(u'start', (var.get(u"this").get(u'index')-Js(2.0)))
                        PyJs_Object_406_ = Js({u'line':var.get(u"this").get(u'lineNumber'),u'column':((var.get(u"this").get(u'index')-var.get(u"this").get(u'lineStart'))-Js(2.0))})
                        PyJs_Object_407_ = Js({})
                        PyJs_Object_405_ = Js({u'start':PyJs_Object_406_,u'end':PyJs_Object_407_})
                        var.put(u'loc', PyJs_Object_405_)
                    while var.get(u"this").callprop(u'eof').neg():
                        var.put(u'ch', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index')))
                        if var.get(u'character_1').get(u'Character').callprop(u'isLineTerminator', var.get(u'ch')):
                            if (PyJsStrictEq(var.get(u'ch'),Js(13)) and PyJsStrictEq(var.get(u"this").get(u'source').callprop(u'charCodeAt', (var.get(u"this").get(u'index')+Js(1.0))),Js(10))):
                                var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                            var.get(u"this").put(u'lineNumber',Js(var.get(u"this").get(u'lineNumber').to_number())+Js(1))
                            var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                            var.get(u"this").put(u'lineStart', var.get(u"this").get(u'index'))
                        else:
                            if PyJsStrictEq(var.get(u'ch'),Js(42)):
                                if PyJsStrictEq(var.get(u"this").get(u'source').callprop(u'charCodeAt', (var.get(u"this").get(u'index')+Js(1.0))),Js(47)):
                                    var.get(u"this").put(u'index', Js(2.0), u'+')
                                    if var.get(u"this").get(u'trackComment'):
                                        PyJs_Object_408_ = Js({u'line':var.get(u"this").get(u'lineNumber'),u'column':(var.get(u"this").get(u'index')-var.get(u"this").get(u'lineStart'))})
                                        var.get(u'loc').put(u'end', PyJs_Object_408_)
                                        PyJs_Object_409_ = Js({u'multiLine':Js(True),u'slice':Js([(var.get(u'start')+Js(2.0)), (var.get(u"this").get(u'index')-Js(2.0))]),u'range':Js([var.get(u'start'), var.get(u"this").get(u'index')]),u'loc':var.get(u'loc')})
                                        var.put(u'entry', PyJs_Object_409_)
                                        var.get(u'comments').callprop(u'push', var.get(u'entry'))
                                    return var.get(u'comments')
                                var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                            else:
                                var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                    if var.get(u"this").get(u'trackComment'):
                        PyJs_Object_410_ = Js({u'line':var.get(u"this").get(u'lineNumber'),u'column':(var.get(u"this").get(u'index')-var.get(u"this").get(u'lineStart'))})
                        var.get(u'loc').put(u'end', PyJs_Object_410_)
                        PyJs_Object_411_ = Js({u'multiLine':Js(True),u'slice':Js([(var.get(u'start')+Js(2.0)), var.get(u"this").get(u'index')]),u'range':Js([var.get(u'start'), var.get(u"this").get(u'index')]),u'loc':var.get(u'loc')})
                        var.put(u'entry', PyJs_Object_411_)
                        var.get(u'comments').callprop(u'push', var.get(u'entry'))
                    var.get(u"this").callprop(u'tolerateUnexpectedToken')
                    return var.get(u'comments')
                PyJs_anonymous_404_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'skipMultiLineComment', PyJs_anonymous_404_)
                @Js
                def PyJs_anonymous_412_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'comment', u'start', u'ch', u'comments'])
                    pass
                    if var.get(u"this").get(u'trackComment'):
                        var.put(u'comments', Js([]))
                    var.put(u'start', PyJsStrictEq(var.get(u"this").get(u'index'),Js(0.0)))
                    while var.get(u"this").callprop(u'eof').neg():
                        var.put(u'ch', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index')))
                        if var.get(u'character_1').get(u'Character').callprop(u'isWhiteSpace', var.get(u'ch')):
                            var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                        else:
                            if var.get(u'character_1').get(u'Character').callprop(u'isLineTerminator', var.get(u'ch')):
                                var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                                if (PyJsStrictEq(var.get(u'ch'),Js(13)) and PyJsStrictEq(var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index')),Js(10))):
                                    var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                                var.get(u"this").put(u'lineNumber',Js(var.get(u"this").get(u'lineNumber').to_number())+Js(1))
                                var.get(u"this").put(u'lineStart', var.get(u"this").get(u'index'))
                                var.put(u'start', Js(True))
                            else:
                                if PyJsStrictEq(var.get(u'ch'),Js(47)):
                                    var.put(u'ch', var.get(u"this").get(u'source').callprop(u'charCodeAt', (var.get(u"this").get(u'index')+Js(1.0))))
                                    if PyJsStrictEq(var.get(u'ch'),Js(47)):
                                        var.get(u"this").put(u'index', Js(2.0), u'+')
                                        var.put(u'comment', var.get(u"this").callprop(u'skipSingleLineComment', Js(2.0)))
                                        if var.get(u"this").get(u'trackComment'):
                                            var.put(u'comments', var.get(u'comments').callprop(u'concat', var.get(u'comment')))
                                        var.put(u'start', Js(True))
                                    else:
                                        if PyJsStrictEq(var.get(u'ch'),Js(42)):
                                            var.get(u"this").put(u'index', Js(2.0), u'+')
                                            var.put(u'comment', var.get(u"this").callprop(u'skipMultiLineComment'))
                                            if var.get(u"this").get(u'trackComment'):
                                                var.put(u'comments', var.get(u'comments').callprop(u'concat', var.get(u'comment')))
                                        else:
                                            break
                                else:
                                    if (var.get(u'start') and PyJsStrictEq(var.get(u'ch'),Js(45))):
                                        if (PyJsStrictEq(var.get(u"this").get(u'source').callprop(u'charCodeAt', (var.get(u"this").get(u'index')+Js(1.0))),Js(45)) and PyJsStrictEq(var.get(u"this").get(u'source').callprop(u'charCodeAt', (var.get(u"this").get(u'index')+Js(2.0))),Js(62))):
                                            var.get(u"this").put(u'index', Js(3.0), u'+')
                                            var.put(u'comment', var.get(u"this").callprop(u'skipSingleLineComment', Js(3.0)))
                                            if var.get(u"this").get(u'trackComment'):
                                                var.put(u'comments', var.get(u'comments').callprop(u'concat', var.get(u'comment')))
                                        else:
                                            break
                                    else:
                                        if (PyJsStrictEq(var.get(u'ch'),Js(60)) and var.get(u"this").get(u'isModule').neg()):
                                            if PyJsStrictEq(var.get(u"this").get(u'source').callprop(u'slice', (var.get(u"this").get(u'index')+Js(1.0)), (var.get(u"this").get(u'index')+Js(4.0))),Js(u'!--')):
                                                var.get(u"this").put(u'index', Js(4.0), u'+')
                                                var.put(u'comment', var.get(u"this").callprop(u'skipSingleLineComment', Js(4.0)))
                                                if var.get(u"this").get(u'trackComment'):
                                                    var.put(u'comments', var.get(u'comments').callprop(u'concat', var.get(u'comment')))
                                            else:
                                                break
                                        else:
                                            break
                    return var.get(u'comments')
                PyJs_anonymous_412_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'scanComments', PyJs_anonymous_412_)
                @Js
                def PyJs_anonymous_413_(id, this, arguments, var=var):
                    var = Scope({u'this':this, u'id':id, u'arguments':arguments}, var)
                    var.registers([u'id'])
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get(u'id'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'enum')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'export')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'import')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'super')):
                            SWITCHED = True
                            return Js(True)
                        if True:
                            SWITCHED = True
                            return Js(False)
                        SWITCHED = True
                        break
                PyJs_anonymous_413_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'isFutureReservedWord', PyJs_anonymous_413_)
                @Js
                def PyJs_anonymous_414_(id, this, arguments, var=var):
                    var = Scope({u'this':this, u'id':id, u'arguments':arguments}, var)
                    var.registers([u'id'])
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get(u'id'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'implements')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'interface')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'package')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'private')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'protected')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'public')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'static')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'yield')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'let')):
                            SWITCHED = True
                            return Js(True)
                        if True:
                            SWITCHED = True
                            return Js(False)
                        SWITCHED = True
                        break
                PyJs_anonymous_414_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'isStrictModeReservedWord', PyJs_anonymous_414_)
                @Js
                def PyJs_anonymous_415_(id, this, arguments, var=var):
                    var = Scope({u'this':this, u'id':id, u'arguments':arguments}, var)
                    var.registers([u'id'])
                    return (PyJsStrictEq(var.get(u'id'),Js(u'eval')) or PyJsStrictEq(var.get(u'id'),Js(u'arguments')))
                PyJs_anonymous_415_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'isRestrictedWord', PyJs_anonymous_415_)
                @Js
                def PyJs_anonymous_416_(id, this, arguments, var=var):
                    var = Scope({u'this':this, u'id':id, u'arguments':arguments}, var)
                    var.registers([u'id'])
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get(u'id').get(u'length'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                            SWITCHED = True
                            return ((PyJsStrictEq(var.get(u'id'),Js(u'if')) or PyJsStrictEq(var.get(u'id'),Js(u'in'))) or PyJsStrictEq(var.get(u'id'),Js(u'do')))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                            SWITCHED = True
                            return ((((PyJsStrictEq(var.get(u'id'),Js(u'var')) or PyJsStrictEq(var.get(u'id'),Js(u'for'))) or PyJsStrictEq(var.get(u'id'),Js(u'new'))) or PyJsStrictEq(var.get(u'id'),Js(u'try'))) or PyJsStrictEq(var.get(u'id'),Js(u'let')))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                            SWITCHED = True
                            return (((((PyJsStrictEq(var.get(u'id'),Js(u'this')) or PyJsStrictEq(var.get(u'id'),Js(u'else'))) or PyJsStrictEq(var.get(u'id'),Js(u'case'))) or PyJsStrictEq(var.get(u'id'),Js(u'void'))) or PyJsStrictEq(var.get(u'id'),Js(u'with'))) or PyJsStrictEq(var.get(u'id'),Js(u'enum')))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(5.0)):
                            SWITCHED = True
                            return (((((((PyJsStrictEq(var.get(u'id'),Js(u'while')) or PyJsStrictEq(var.get(u'id'),Js(u'break'))) or PyJsStrictEq(var.get(u'id'),Js(u'catch'))) or PyJsStrictEq(var.get(u'id'),Js(u'throw'))) or PyJsStrictEq(var.get(u'id'),Js(u'const'))) or PyJsStrictEq(var.get(u'id'),Js(u'yield'))) or PyJsStrictEq(var.get(u'id'),Js(u'class'))) or PyJsStrictEq(var.get(u'id'),Js(u'super')))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(6.0)):
                            SWITCHED = True
                            return (((((PyJsStrictEq(var.get(u'id'),Js(u'return')) or PyJsStrictEq(var.get(u'id'),Js(u'typeof'))) or PyJsStrictEq(var.get(u'id'),Js(u'delete'))) or PyJsStrictEq(var.get(u'id'),Js(u'switch'))) or PyJsStrictEq(var.get(u'id'),Js(u'export'))) or PyJsStrictEq(var.get(u'id'),Js(u'import')))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(7.0)):
                            SWITCHED = True
                            return ((PyJsStrictEq(var.get(u'id'),Js(u'default')) or PyJsStrictEq(var.get(u'id'),Js(u'finally'))) or PyJsStrictEq(var.get(u'id'),Js(u'extends')))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(8.0)):
                            SWITCHED = True
                            return ((PyJsStrictEq(var.get(u'id'),Js(u'function')) or PyJsStrictEq(var.get(u'id'),Js(u'continue'))) or PyJsStrictEq(var.get(u'id'),Js(u'debugger')))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(10.0)):
                            SWITCHED = True
                            return PyJsStrictEq(var.get(u'id'),Js(u'instanceof'))
                        if True:
                            SWITCHED = True
                            return Js(False)
                        SWITCHED = True
                        break
                PyJs_anonymous_416_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'isKeyword', PyJs_anonymous_416_)
                @Js
                def PyJs_anonymous_417_(i, this, arguments, var=var):
                    var = Scope({u'i':i, u'this':this, u'arguments':arguments}, var)
                    var.registers([u'i', u'second', u'cp', u'first'])
                    var.put(u'cp', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u'i')))
                    if ((var.get(u'cp')>=Js(55296)) and (var.get(u'cp')<=Js(56319))):
                        var.put(u'second', var.get(u"this").get(u'source').callprop(u'charCodeAt', (var.get(u'i')+Js(1.0))))
                        if ((var.get(u'second')>=Js(56320)) and (var.get(u'second')<=Js(57343))):
                            var.put(u'first', var.get(u'cp'))
                            var.put(u'cp', (((((var.get(u'first')-Js(55296))*Js(1024))+var.get(u'second'))-Js(56320))+Js(65536)))
                    return var.get(u'cp')
                PyJs_anonymous_417_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'codePointAt', PyJs_anonymous_417_)
                @Js
                def PyJs_anonymous_418_(prefix, this, arguments, var=var):
                    var = Scope({u'this':this, u'prefix':prefix, u'arguments':arguments}, var)
                    var.registers([u'i', u'prefix', u'code', u'len'])
                    var.put(u'len', (Js(4.0) if PyJsStrictEq(var.get(u'prefix'),Js(u'u')) else Js(2.0)))
                    var.put(u'code', Js(0.0))
                    #for JS loop
                    var.put(u'i', Js(0.0))
                    while (var.get(u'i')<var.get(u'len')):
                        try:
                            if (var.get(u"this").callprop(u'eof').neg() and var.get(u'character_1').get(u'Character').callprop(u'isHexDigit', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index')))):
                                var.put(u'code', ((var.get(u'code')*Js(16.0))+var.get(u'hexValue')(var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))))))
                            else:
                                return var.get(u"null")
                        finally:
                                var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                    return var.get(u'String').callprop(u'fromCharCode', var.get(u'code'))
                PyJs_anonymous_418_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'scanHexEscape', PyJs_anonymous_418_)
                @Js
                def PyJs_anonymous_419_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'code', u'ch'])
                    var.put(u'ch', var.get(u"this").get(u'source').get(var.get(u"this").get(u'index')))
                    var.put(u'code', Js(0.0))
                    if PyJsStrictEq(var.get(u'ch'),Js(u'}')):
                        var.get(u"this").callprop(u'throwUnexpectedToken')
                    while var.get(u"this").callprop(u'eof').neg():
                        var.put(u'ch', var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))))
                        if var.get(u'character_1').get(u'Character').callprop(u'isHexDigit', var.get(u'ch').callprop(u'charCodeAt', Js(0.0))).neg():
                            break
                        var.put(u'code', ((var.get(u'code')*Js(16.0))+var.get(u'hexValue')(var.get(u'ch'))))
                    if ((var.get(u'code')>Js(1114111)) or PyJsStrictNeq(var.get(u'ch'),Js(u'}'))):
                        var.get(u"this").callprop(u'throwUnexpectedToken')
                    return var.get(u'character_1').get(u'Character').callprop(u'fromCodePoint', var.get(u'code'))
                PyJs_anonymous_419_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'scanUnicodeCodePointEscape', PyJs_anonymous_419_)
                @Js
                def PyJs_anonymous_420_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'start', u'ch'])
                    var.put(u'start', (var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1)))
                    while var.get(u"this").callprop(u'eof').neg():
                        var.put(u'ch', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index')))
                        if PyJsStrictEq(var.get(u'ch'),Js(92)):
                            var.get(u"this").put(u'index', var.get(u'start'))
                            return var.get(u"this").callprop(u'getComplexIdentifier')
                        else:
                            if ((var.get(u'ch')>=Js(55296)) and (var.get(u'ch')<Js(57343))):
                                var.get(u"this").put(u'index', var.get(u'start'))
                                return var.get(u"this").callprop(u'getComplexIdentifier')
                        if var.get(u'character_1').get(u'Character').callprop(u'isIdentifierPart', var.get(u'ch')):
                            var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                        else:
                            break
                    return var.get(u"this").get(u'source').callprop(u'slice', var.get(u'start'), var.get(u"this").get(u'index'))
                PyJs_anonymous_420_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'getIdentifier', PyJs_anonymous_420_)
                @Js
                def PyJs_anonymous_421_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'ch', u'cp', u'id'])
                    var.put(u'cp', var.get(u"this").callprop(u'codePointAt', var.get(u"this").get(u'index')))
                    var.put(u'id', var.get(u'character_1').get(u'Character').callprop(u'fromCodePoint', var.get(u'cp')))
                    var.get(u"this").put(u'index', var.get(u'id').get(u'length'), u'+')
                    pass
                    if PyJsStrictEq(var.get(u'cp'),Js(92)):
                        if PyJsStrictNeq(var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index')),Js(117)):
                            var.get(u"this").callprop(u'throwUnexpectedToken')
                        var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                        if PyJsStrictEq(var.get(u"this").get(u'source').get(var.get(u"this").get(u'index')),Js(u'{')):
                            var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                            var.put(u'ch', var.get(u"this").callprop(u'scanUnicodeCodePointEscape'))
                        else:
                            var.put(u'ch', var.get(u"this").callprop(u'scanHexEscape', Js(u'u')))
                            if ((PyJsStrictEq(var.get(u'ch'),var.get(u"null")) or PyJsStrictEq(var.get(u'ch'),Js(u'\\'))) or var.get(u'character_1').get(u'Character').callprop(u'isIdentifierStart', var.get(u'ch').callprop(u'charCodeAt', Js(0.0))).neg()):
                                var.get(u"this").callprop(u'throwUnexpectedToken')
                        var.put(u'id', var.get(u'ch'))
                    while var.get(u"this").callprop(u'eof').neg():
                        var.put(u'cp', var.get(u"this").callprop(u'codePointAt', var.get(u"this").get(u'index')))
                        if var.get(u'character_1').get(u'Character').callprop(u'isIdentifierPart', var.get(u'cp')).neg():
                            break
                        var.put(u'ch', var.get(u'character_1').get(u'Character').callprop(u'fromCodePoint', var.get(u'cp')))
                        var.put(u'id', var.get(u'ch'), u'+')
                        var.get(u"this").put(u'index', var.get(u'ch').get(u'length'), u'+')
                        if PyJsStrictEq(var.get(u'cp'),Js(92)):
                            var.put(u'id', var.get(u'id').callprop(u'substr', Js(0.0), (var.get(u'id').get(u'length')-Js(1.0))))
                            if PyJsStrictNeq(var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index')),Js(117)):
                                var.get(u"this").callprop(u'throwUnexpectedToken')
                            var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                            if PyJsStrictEq(var.get(u"this").get(u'source').get(var.get(u"this").get(u'index')),Js(u'{')):
                                var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                                var.put(u'ch', var.get(u"this").callprop(u'scanUnicodeCodePointEscape'))
                            else:
                                var.put(u'ch', var.get(u"this").callprop(u'scanHexEscape', Js(u'u')))
                                if ((PyJsStrictEq(var.get(u'ch'),var.get(u"null")) or PyJsStrictEq(var.get(u'ch'),Js(u'\\'))) or var.get(u'character_1').get(u'Character').callprop(u'isIdentifierPart', var.get(u'ch').callprop(u'charCodeAt', Js(0.0))).neg()):
                                    var.get(u"this").callprop(u'throwUnexpectedToken')
                            var.put(u'id', var.get(u'ch'), u'+')
                    return var.get(u'id')
                PyJs_anonymous_421_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'getComplexIdentifier', PyJs_anonymous_421_)
                @Js
                def PyJs_anonymous_422_(ch, this, arguments, var=var):
                    var = Scope({u'this':this, u'ch':ch, u'arguments':arguments}, var)
                    var.registers([u'octal', u'ch', u'code'])
                    var.put(u'octal', PyJsStrictNeq(var.get(u'ch'),Js(u'0')))
                    var.put(u'code', var.get(u'octalValue')(var.get(u'ch')))
                    if (var.get(u"this").callprop(u'eof').neg() and var.get(u'character_1').get(u'Character').callprop(u'isOctalDigit', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index')))):
                        var.put(u'octal', Js(True))
                        var.put(u'code', ((var.get(u'code')*Js(8.0))+var.get(u'octalValue')(var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))))))
                        if (((Js(u'0123').callprop(u'indexOf', var.get(u'ch'))>=Js(0.0)) and var.get(u"this").callprop(u'eof').neg()) and var.get(u'character_1').get(u'Character').callprop(u'isOctalDigit', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index')))):
                            var.put(u'code', ((var.get(u'code')*Js(8.0))+var.get(u'octalValue')(var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))))))
                    PyJs_Object_423_ = Js({u'code':var.get(u'code'),u'octal':var.get(u'octal')})
                    return PyJs_Object_423_
                PyJs_anonymous_422_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'octalToDecimal', PyJs_anonymous_422_)
                @Js
                def PyJs_anonymous_424_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'start', u'type', u'id', u'restore'])
                    pass
                    var.put(u'start', var.get(u"this").get(u'index'))
                    var.put(u'id', (var.get(u"this").callprop(u'getComplexIdentifier') if PyJsStrictEq(var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u'start')),Js(92)) else var.get(u"this").callprop(u'getIdentifier')))
                    if PyJsStrictEq(var.get(u'id').get(u'length'),Js(1.0)):
                        var.put(u'type', Js(3.0))
                    else:
                        if var.get(u"this").callprop(u'isKeyword', var.get(u'id')):
                            var.put(u'type', Js(4.0))
                        else:
                            if PyJsStrictEq(var.get(u'id'),Js(u'null')):
                                var.put(u'type', Js(5.0))
                            else:
                                if (PyJsStrictEq(var.get(u'id'),Js(u'true')) or PyJsStrictEq(var.get(u'id'),Js(u'false'))):
                                    var.put(u'type', Js(1.0))
                                else:
                                    var.put(u'type', Js(3.0))
                    if (PyJsStrictNeq(var.get(u'type'),Js(3.0)) and PyJsStrictNeq((var.get(u'start')+var.get(u'id').get(u'length')),var.get(u"this").get(u'index'))):
                        var.put(u'restore', var.get(u"this").get(u'index'))
                        var.get(u"this").put(u'index', var.get(u'start'))
                        var.get(u"this").callprop(u'tolerateUnexpectedToken', var.get(u'messages_1').get(u'Messages').get(u'InvalidEscapedReservedWord'))
                        var.get(u"this").put(u'index', var.get(u'restore'))
                    PyJs_Object_425_ = Js({u'type':var.get(u'type'),u'value':var.get(u'id'),u'lineNumber':var.get(u"this").get(u'lineNumber'),u'lineStart':var.get(u"this").get(u'lineStart'),u'start':var.get(u'start'),u'end':var.get(u"this").get(u'index')})
                    return PyJs_Object_425_
                PyJs_anonymous_424_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'scanIdentifier', PyJs_anonymous_424_)
                @Js
                def PyJs_anonymous_426_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'start', u'str'])
                    var.put(u'start', var.get(u"this").get(u'index'))
                    var.put(u'str', var.get(u"this").get(u'source').get(var.get(u"this").get(u'index')))
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get(u'str'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'(')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'{')):
                            SWITCHED = True
                            if PyJsStrictEq(var.get(u'str'),Js(u'{')):
                                var.get(u"this").get(u'curlyStack').callprop(u'push', Js(u'{'))
                            var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'.')):
                            SWITCHED = True
                            var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                            if (PyJsStrictEq(var.get(u"this").get(u'source').get(var.get(u"this").get(u'index')),Js(u'.')) and PyJsStrictEq(var.get(u"this").get(u'source').get((var.get(u"this").get(u'index')+Js(1.0))),Js(u'.'))):
                                var.get(u"this").put(u'index', Js(2.0), u'+')
                                var.put(u'str', Js(u'...'))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'}')):
                            SWITCHED = True
                            var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                            var.get(u"this").get(u'curlyStack').callprop(u'pop')
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u')')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u';')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u',')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'[')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u']')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u':')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'?')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'~')):
                            SWITCHED = True
                            var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                            break
                        if True:
                            SWITCHED = True
                            var.put(u'str', var.get(u"this").get(u'source').callprop(u'substr', var.get(u"this").get(u'index'), Js(4.0)))
                            if PyJsStrictEq(var.get(u'str'),Js(u'>>>=')):
                                var.get(u"this").put(u'index', Js(4.0), u'+')
                            else:
                                var.put(u'str', var.get(u'str').callprop(u'substr', Js(0.0), Js(3.0)))
                                if (((((PyJsStrictEq(var.get(u'str'),Js(u'===')) or PyJsStrictEq(var.get(u'str'),Js(u'!=='))) or PyJsStrictEq(var.get(u'str'),Js(u'>>>'))) or PyJsStrictEq(var.get(u'str'),Js(u'<<='))) or PyJsStrictEq(var.get(u'str'),Js(u'>>='))) or PyJsStrictEq(var.get(u'str'),Js(u'**='))):
                                    var.get(u"this").put(u'index', Js(3.0), u'+')
                                else:
                                    var.put(u'str', var.get(u'str').callprop(u'substr', Js(0.0), Js(2.0)))
                                    def PyJs_LONG_428_(var=var):
                                        def PyJs_LONG_427_(var=var):
                                            return (((((((((PyJsStrictEq(var.get(u'str'),Js(u'&&')) or PyJsStrictEq(var.get(u'str'),Js(u'||'))) or PyJsStrictEq(var.get(u'str'),Js(u'=='))) or PyJsStrictEq(var.get(u'str'),Js(u'!='))) or PyJsStrictEq(var.get(u'str'),Js(u'+='))) or PyJsStrictEq(var.get(u'str'),Js(u'-='))) or PyJsStrictEq(var.get(u'str'),Js(u'*='))) or PyJsStrictEq(var.get(u'str'),Js(u'/='))) or PyJsStrictEq(var.get(u'str'),Js(u'++'))) or PyJsStrictEq(var.get(u'str'),Js(u'--')))
                                        return (((((((((PyJs_LONG_427_() or PyJsStrictEq(var.get(u'str'),Js(u'<<'))) or PyJsStrictEq(var.get(u'str'),Js(u'>>'))) or PyJsStrictEq(var.get(u'str'),Js(u'&='))) or PyJsStrictEq(var.get(u'str'),Js(u'|='))) or PyJsStrictEq(var.get(u'str'),Js(u'^='))) or PyJsStrictEq(var.get(u'str'),Js(u'%='))) or PyJsStrictEq(var.get(u'str'),Js(u'<='))) or PyJsStrictEq(var.get(u'str'),Js(u'>='))) or PyJsStrictEq(var.get(u'str'),Js(u'=>')))
                                    if (PyJs_LONG_428_() or PyJsStrictEq(var.get(u'str'),Js(u'**'))):
                                        var.get(u"this").put(u'index', Js(2.0), u'+')
                                    else:
                                        var.put(u'str', var.get(u"this").get(u'source').get(var.get(u"this").get(u'index')))
                                        if (Js(u'<>=!+-*%&|^/').callprop(u'indexOf', var.get(u'str'))>=Js(0.0)):
                                            var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                        SWITCHED = True
                        break
                    if PyJsStrictEq(var.get(u"this").get(u'index'),var.get(u'start')):
                        var.get(u"this").callprop(u'throwUnexpectedToken')
                    PyJs_Object_429_ = Js({u'type':Js(7.0),u'value':var.get(u'str'),u'lineNumber':var.get(u"this").get(u'lineNumber'),u'lineStart':var.get(u"this").get(u'lineStart'),u'start':var.get(u'start'),u'end':var.get(u"this").get(u'index')})
                    return PyJs_Object_429_
                PyJs_anonymous_426_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'scanPunctuator', PyJs_anonymous_426_)
                @Js
                def PyJs_anonymous_430_(start, this, arguments, var=var):
                    var = Scope({u'this':this, u'start':start, u'arguments':arguments}, var)
                    var.registers([u'start', u'num'])
                    var.put(u'num', Js(u''))
                    while var.get(u"this").callprop(u'eof').neg():
                        if var.get(u'character_1').get(u'Character').callprop(u'isHexDigit', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index'))).neg():
                            break
                        var.put(u'num', var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))), u'+')
                    if PyJsStrictEq(var.get(u'num').get(u'length'),Js(0.0)):
                        var.get(u"this").callprop(u'throwUnexpectedToken')
                    if var.get(u'character_1').get(u'Character').callprop(u'isIdentifierStart', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index'))):
                        var.get(u"this").callprop(u'throwUnexpectedToken')
                    PyJs_Object_431_ = Js({u'type':Js(6.0),u'value':var.get(u'parseInt')((Js(u'0x')+var.get(u'num')), Js(16.0)),u'lineNumber':var.get(u"this").get(u'lineNumber'),u'lineStart':var.get(u"this").get(u'lineStart'),u'start':var.get(u'start'),u'end':var.get(u"this").get(u'index')})
                    return PyJs_Object_431_
                PyJs_anonymous_430_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'scanHexLiteral', PyJs_anonymous_430_)
                @Js
                def PyJs_anonymous_432_(start, this, arguments, var=var):
                    var = Scope({u'this':this, u'start':start, u'arguments':arguments}, var)
                    var.registers([u'ch', u'start', u'num'])
                    var.put(u'num', Js(u''))
                    pass
                    while var.get(u"this").callprop(u'eof').neg():
                        var.put(u'ch', var.get(u"this").get(u'source').get(var.get(u"this").get(u'index')))
                        if (PyJsStrictNeq(var.get(u'ch'),Js(u'0')) and PyJsStrictNeq(var.get(u'ch'),Js(u'1'))):
                            break
                        var.put(u'num', var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))), u'+')
                    if PyJsStrictEq(var.get(u'num').get(u'length'),Js(0.0)):
                        var.get(u"this").callprop(u'throwUnexpectedToken')
                    if var.get(u"this").callprop(u'eof').neg():
                        var.put(u'ch', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index')))
                        if (var.get(u'character_1').get(u'Character').callprop(u'isIdentifierStart', var.get(u'ch')) or var.get(u'character_1').get(u'Character').callprop(u'isDecimalDigit', var.get(u'ch'))):
                            var.get(u"this").callprop(u'throwUnexpectedToken')
                    PyJs_Object_433_ = Js({u'type':Js(6.0),u'value':var.get(u'parseInt')(var.get(u'num'), Js(2.0)),u'lineNumber':var.get(u"this").get(u'lineNumber'),u'lineStart':var.get(u"this").get(u'lineStart'),u'start':var.get(u'start'),u'end':var.get(u"this").get(u'index')})
                    return PyJs_Object_433_
                PyJs_anonymous_432_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'scanBinaryLiteral', PyJs_anonymous_432_)
                @Js
                def PyJs_anonymous_434_(prefix, start, this, arguments, var=var):
                    var = Scope({u'this':this, u'start':start, u'prefix':prefix, u'arguments':arguments}, var)
                    var.registers([u'octal', u'start', u'prefix', u'num'])
                    var.put(u'num', Js(u''))
                    var.put(u'octal', Js(False))
                    if var.get(u'character_1').get(u'Character').callprop(u'isOctalDigit', var.get(u'prefix').callprop(u'charCodeAt', Js(0.0))):
                        var.put(u'octal', Js(True))
                        var.put(u'num', (Js(u'0')+var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1)))))
                    else:
                        var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                    while var.get(u"this").callprop(u'eof').neg():
                        if var.get(u'character_1').get(u'Character').callprop(u'isOctalDigit', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index'))).neg():
                            break
                        var.put(u'num', var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))), u'+')
                    if (var.get(u'octal').neg() and PyJsStrictEq(var.get(u'num').get(u'length'),Js(0.0))):
                        var.get(u"this").callprop(u'throwUnexpectedToken')
                    if (var.get(u'character_1').get(u'Character').callprop(u'isIdentifierStart', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index'))) or var.get(u'character_1').get(u'Character').callprop(u'isDecimalDigit', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index')))):
                        var.get(u"this").callprop(u'throwUnexpectedToken')
                    PyJs_Object_435_ = Js({u'type':Js(6.0),u'value':var.get(u'parseInt')(var.get(u'num'), Js(8.0)),u'octal':var.get(u'octal'),u'lineNumber':var.get(u"this").get(u'lineNumber'),u'lineStart':var.get(u"this").get(u'lineStart'),u'start':var.get(u'start'),u'end':var.get(u"this").get(u'index')})
                    return PyJs_Object_435_
                PyJs_anonymous_434_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'scanOctalLiteral', PyJs_anonymous_434_)
                @Js
                def PyJs_anonymous_436_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'i', u'ch'])
                    #for JS loop
                    var.put(u'i', (var.get(u"this").get(u'index')+Js(1.0)))
                    while (var.get(u'i')<var.get(u"this").get(u'length')):
                        try:
                            var.put(u'ch', var.get(u"this").get(u'source').get(var.get(u'i')))
                            if (PyJsStrictEq(var.get(u'ch'),Js(u'8')) or PyJsStrictEq(var.get(u'ch'),Js(u'9'))):
                                return Js(False)
                            if var.get(u'character_1').get(u'Character').callprop(u'isOctalDigit', var.get(u'ch').callprop(u'charCodeAt', Js(0.0))).neg():
                                return Js(True)
                        finally:
                                var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                    return Js(True)
                PyJs_anonymous_436_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'isImplicitOctalLiteral', PyJs_anonymous_436_)
                @Js
                def PyJs_anonymous_437_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'start', u'ch', u'num'])
                    var.put(u'start', var.get(u"this").get(u'index'))
                    var.put(u'ch', var.get(u"this").get(u'source').get(var.get(u'start')))
                    var.get(u'assert_1').callprop(u'assert', (var.get(u'character_1').get(u'Character').callprop(u'isDecimalDigit', var.get(u'ch').callprop(u'charCodeAt', Js(0.0))) or PyJsStrictEq(var.get(u'ch'),Js(u'.'))), Js(u'Numeric literal must start with a decimal digit or a decimal point'))
                    var.put(u'num', Js(u''))
                    if PyJsStrictNeq(var.get(u'ch'),Js(u'.')):
                        var.put(u'num', var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))))
                        var.put(u'ch', var.get(u"this").get(u'source').get(var.get(u"this").get(u'index')))
                        if PyJsStrictEq(var.get(u'num'),Js(u'0')):
                            if (PyJsStrictEq(var.get(u'ch'),Js(u'x')) or PyJsStrictEq(var.get(u'ch'),Js(u'X'))):
                                var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                                return var.get(u"this").callprop(u'scanHexLiteral', var.get(u'start'))
                            if (PyJsStrictEq(var.get(u'ch'),Js(u'b')) or PyJsStrictEq(var.get(u'ch'),Js(u'B'))):
                                var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                                return var.get(u"this").callprop(u'scanBinaryLiteral', var.get(u'start'))
                            if (PyJsStrictEq(var.get(u'ch'),Js(u'o')) or PyJsStrictEq(var.get(u'ch'),Js(u'O'))):
                                return var.get(u"this").callprop(u'scanOctalLiteral', var.get(u'ch'), var.get(u'start'))
                            if (var.get(u'ch') and var.get(u'character_1').get(u'Character').callprop(u'isOctalDigit', var.get(u'ch').callprop(u'charCodeAt', Js(0.0)))):
                                if var.get(u"this").callprop(u'isImplicitOctalLiteral'):
                                    return var.get(u"this").callprop(u'scanOctalLiteral', var.get(u'ch'), var.get(u'start'))
                        while var.get(u'character_1').get(u'Character').callprop(u'isDecimalDigit', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index'))):
                            var.put(u'num', var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))), u'+')
                        var.put(u'ch', var.get(u"this").get(u'source').get(var.get(u"this").get(u'index')))
                    if PyJsStrictEq(var.get(u'ch'),Js(u'.')):
                        var.put(u'num', var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))), u'+')
                        while var.get(u'character_1').get(u'Character').callprop(u'isDecimalDigit', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index'))):
                            var.put(u'num', var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))), u'+')
                        var.put(u'ch', var.get(u"this").get(u'source').get(var.get(u"this").get(u'index')))
                    if (PyJsStrictEq(var.get(u'ch'),Js(u'e')) or PyJsStrictEq(var.get(u'ch'),Js(u'E'))):
                        var.put(u'num', var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))), u'+')
                        var.put(u'ch', var.get(u"this").get(u'source').get(var.get(u"this").get(u'index')))
                        if (PyJsStrictEq(var.get(u'ch'),Js(u'+')) or PyJsStrictEq(var.get(u'ch'),Js(u'-'))):
                            var.put(u'num', var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))), u'+')
                        if var.get(u'character_1').get(u'Character').callprop(u'isDecimalDigit', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index'))):
                            while var.get(u'character_1').get(u'Character').callprop(u'isDecimalDigit', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index'))):
                                var.put(u'num', var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))), u'+')
                        else:
                            var.get(u"this").callprop(u'throwUnexpectedToken')
                    if var.get(u'character_1').get(u'Character').callprop(u'isIdentifierStart', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index'))):
                        var.get(u"this").callprop(u'throwUnexpectedToken')
                    PyJs_Object_438_ = Js({u'type':Js(6.0),u'value':var.get(u'parseFloat')(var.get(u'num')),u'lineNumber':var.get(u"this").get(u'lineNumber'),u'lineStart':var.get(u"this").get(u'lineStart'),u'start':var.get(u'start'),u'end':var.get(u"this").get(u'index')})
                    return PyJs_Object_438_
                PyJs_anonymous_437_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'scanNumericLiteral', PyJs_anonymous_437_)
                @Js
                def PyJs_anonymous_439_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'ch', u'unescaped_1', u'quote', u'octToDec', u'start', u'str', u'unescaped', u'octal'])
                    var.put(u'start', var.get(u"this").get(u'index'))
                    var.put(u'quote', var.get(u"this").get(u'source').get(var.get(u'start')))
                    var.get(u'assert_1').callprop(u'assert', (PyJsStrictEq(var.get(u'quote'),Js(u"'")) or PyJsStrictEq(var.get(u'quote'),Js(u'"'))), Js(u'String literal must starts with a quote'))
                    var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                    var.put(u'octal', Js(False))
                    var.put(u'str', Js(u''))
                    while var.get(u"this").callprop(u'eof').neg():
                        var.put(u'ch', var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))))
                        if PyJsStrictEq(var.get(u'ch'),var.get(u'quote')):
                            var.put(u'quote', Js(u''))
                            break
                        else:
                            if PyJsStrictEq(var.get(u'ch'),Js(u'\\')):
                                var.put(u'ch', var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))))
                                if (var.get(u'ch').neg() or var.get(u'character_1').get(u'Character').callprop(u'isLineTerminator', var.get(u'ch').callprop(u'charCodeAt', Js(0.0))).neg()):
                                    while 1:
                                        SWITCHED = False
                                        CONDITION = (var.get(u'ch'))
                                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'u')):
                                            SWITCHED = True
                                            if PyJsStrictEq(var.get(u"this").get(u'source').get(var.get(u"this").get(u'index')),Js(u'{')):
                                                var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                                                var.put(u'str', var.get(u"this").callprop(u'scanUnicodeCodePointEscape'), u'+')
                                            else:
                                                var.put(u'unescaped_1', var.get(u"this").callprop(u'scanHexEscape', var.get(u'ch')))
                                                if PyJsStrictEq(var.get(u'unescaped_1'),var.get(u"null")):
                                                    var.get(u"this").callprop(u'throwUnexpectedToken')
                                                var.put(u'str', var.get(u'unescaped_1'), u'+')
                                            break
                                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'x')):
                                            SWITCHED = True
                                            var.put(u'unescaped', var.get(u"this").callprop(u'scanHexEscape', var.get(u'ch')))
                                            if PyJsStrictEq(var.get(u'unescaped'),var.get(u"null")):
                                                var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'messages_1').get(u'Messages').get(u'InvalidHexEscapeSequence'))
                                            var.put(u'str', var.get(u'unescaped'), u'+')
                                            break
                                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'n')):
                                            SWITCHED = True
                                            var.put(u'str', Js(u'\n'), u'+')
                                            break
                                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'r')):
                                            SWITCHED = True
                                            var.put(u'str', Js(u'\r'), u'+')
                                            break
                                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u't')):
                                            SWITCHED = True
                                            var.put(u'str', Js(u'\t'), u'+')
                                            break
                                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'b')):
                                            SWITCHED = True
                                            var.put(u'str', Js(u'\x08'), u'+')
                                            break
                                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'f')):
                                            SWITCHED = True
                                            var.put(u'str', Js(u'\x0c'), u'+')
                                            break
                                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'v')):
                                            SWITCHED = True
                                            var.put(u'str', Js(u'\x0b'), u'+')
                                            break
                                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'8')):
                                            SWITCHED = True
                                            pass
                                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'9')):
                                            SWITCHED = True
                                            var.put(u'str', var.get(u'ch'), u'+')
                                            var.get(u"this").callprop(u'tolerateUnexpectedToken')
                                            break
                                        if True:
                                            SWITCHED = True
                                            if (var.get(u'ch') and var.get(u'character_1').get(u'Character').callprop(u'isOctalDigit', var.get(u'ch').callprop(u'charCodeAt', Js(0.0)))):
                                                var.put(u'octToDec', var.get(u"this").callprop(u'octalToDecimal', var.get(u'ch')))
                                                var.put(u'octal', (var.get(u'octToDec').get(u'octal') or var.get(u'octal')))
                                                var.put(u'str', var.get(u'String').callprop(u'fromCharCode', var.get(u'octToDec').get(u'code')), u'+')
                                            else:
                                                var.put(u'str', var.get(u'ch'), u'+')
                                            break
                                        SWITCHED = True
                                        break
                                else:
                                    var.get(u"this").put(u'lineNumber',Js(var.get(u"this").get(u'lineNumber').to_number())+Js(1))
                                    if (PyJsStrictEq(var.get(u'ch'),Js(u'\r')) and PyJsStrictEq(var.get(u"this").get(u'source').get(var.get(u"this").get(u'index')),Js(u'\n'))):
                                        var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                                    var.get(u"this").put(u'lineStart', var.get(u"this").get(u'index'))
                            else:
                                if var.get(u'character_1').get(u'Character').callprop(u'isLineTerminator', var.get(u'ch').callprop(u'charCodeAt', Js(0.0))):
                                    break
                                else:
                                    var.put(u'str', var.get(u'ch'), u'+')
                    if PyJsStrictNeq(var.get(u'quote'),Js(u'')):
                        var.get(u"this").put(u'index', var.get(u'start'))
                        var.get(u"this").callprop(u'throwUnexpectedToken')
                    PyJs_Object_440_ = Js({u'type':Js(8.0),u'value':var.get(u'str'),u'octal':var.get(u'octal'),u'lineNumber':var.get(u"this").get(u'lineNumber'),u'lineStart':var.get(u"this").get(u'lineStart'),u'start':var.get(u'start'),u'end':var.get(u"this").get(u'index')})
                    return PyJs_Object_440_
                PyJs_anonymous_439_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'scanStringLiteral', PyJs_anonymous_439_)
                @Js
                def PyJs_anonymous_441_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'terminated', u'head', u'ch', u'unescaped_2', u'start', u'unescaped', u'rawOffset', u'cooked', u'tail', u'restore'])
                    var.put(u'cooked', Js(u''))
                    var.put(u'terminated', Js(False))
                    var.put(u'start', var.get(u"this").get(u'index'))
                    var.put(u'head', PyJsStrictEq(var.get(u"this").get(u'source').get(var.get(u'start')),Js(u'`')))
                    var.put(u'tail', Js(False))
                    var.put(u'rawOffset', Js(2.0))
                    var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                    while var.get(u"this").callprop(u'eof').neg():
                        var.put(u'ch', var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))))
                        if PyJsStrictEq(var.get(u'ch'),Js(u'`')):
                            var.put(u'rawOffset', Js(1.0))
                            var.put(u'tail', Js(True))
                            var.put(u'terminated', Js(True))
                            break
                        else:
                            if PyJsStrictEq(var.get(u'ch'),Js(u'$')):
                                if PyJsStrictEq(var.get(u"this").get(u'source').get(var.get(u"this").get(u'index')),Js(u'{')):
                                    var.get(u"this").get(u'curlyStack').callprop(u'push', Js(u'${'))
                                    var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                                    var.put(u'terminated', Js(True))
                                    break
                                var.put(u'cooked', var.get(u'ch'), u'+')
                            else:
                                if PyJsStrictEq(var.get(u'ch'),Js(u'\\')):
                                    var.put(u'ch', var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))))
                                    if var.get(u'character_1').get(u'Character').callprop(u'isLineTerminator', var.get(u'ch').callprop(u'charCodeAt', Js(0.0))).neg():
                                        while 1:
                                            SWITCHED = False
                                            CONDITION = (var.get(u'ch'))
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(u'n')):
                                                SWITCHED = True
                                                var.put(u'cooked', Js(u'\n'), u'+')
                                                break
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(u'r')):
                                                SWITCHED = True
                                                var.put(u'cooked', Js(u'\r'), u'+')
                                                break
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(u't')):
                                                SWITCHED = True
                                                var.put(u'cooked', Js(u'\t'), u'+')
                                                break
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(u'u')):
                                                SWITCHED = True
                                                if PyJsStrictEq(var.get(u"this").get(u'source').get(var.get(u"this").get(u'index')),Js(u'{')):
                                                    var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                                                    var.put(u'cooked', var.get(u"this").callprop(u'scanUnicodeCodePointEscape'), u'+')
                                                else:
                                                    var.put(u'restore', var.get(u"this").get(u'index'))
                                                    var.put(u'unescaped_2', var.get(u"this").callprop(u'scanHexEscape', var.get(u'ch')))
                                                    if PyJsStrictNeq(var.get(u'unescaped_2'),var.get(u"null")):
                                                        var.put(u'cooked', var.get(u'unescaped_2'), u'+')
                                                    else:
                                                        var.get(u"this").put(u'index', var.get(u'restore'))
                                                        var.put(u'cooked', var.get(u'ch'), u'+')
                                                break
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(u'x')):
                                                SWITCHED = True
                                                var.put(u'unescaped', var.get(u"this").callprop(u'scanHexEscape', var.get(u'ch')))
                                                if PyJsStrictEq(var.get(u'unescaped'),var.get(u"null")):
                                                    var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'messages_1').get(u'Messages').get(u'InvalidHexEscapeSequence'))
                                                var.put(u'cooked', var.get(u'unescaped'), u'+')
                                                break
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(u'b')):
                                                SWITCHED = True
                                                var.put(u'cooked', Js(u'\x08'), u'+')
                                                break
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(u'f')):
                                                SWITCHED = True
                                                var.put(u'cooked', Js(u'\x0c'), u'+')
                                                break
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(u'v')):
                                                SWITCHED = True
                                                var.put(u'cooked', Js(u'\x0b'), u'+')
                                                break
                                            if True:
                                                SWITCHED = True
                                                if PyJsStrictEq(var.get(u'ch'),Js(u'0')):
                                                    if var.get(u'character_1').get(u'Character').callprop(u'isDecimalDigit', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index'))):
                                                        var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'messages_1').get(u'Messages').get(u'TemplateOctalLiteral'))
                                                    var.put(u'cooked', Js(u'\x00'), u'+')
                                                else:
                                                    if var.get(u'character_1').get(u'Character').callprop(u'isOctalDigit', var.get(u'ch').callprop(u'charCodeAt', Js(0.0))):
                                                        var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'messages_1').get(u'Messages').get(u'TemplateOctalLiteral'))
                                                    else:
                                                        var.put(u'cooked', var.get(u'ch'), u'+')
                                                break
                                            SWITCHED = True
                                            break
                                    else:
                                        var.get(u"this").put(u'lineNumber',Js(var.get(u"this").get(u'lineNumber').to_number())+Js(1))
                                        if (PyJsStrictEq(var.get(u'ch'),Js(u'\r')) and PyJsStrictEq(var.get(u"this").get(u'source').get(var.get(u"this").get(u'index')),Js(u'\n'))):
                                            var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                                        var.get(u"this").put(u'lineStart', var.get(u"this").get(u'index'))
                                else:
                                    if var.get(u'character_1').get(u'Character').callprop(u'isLineTerminator', var.get(u'ch').callprop(u'charCodeAt', Js(0.0))):
                                        var.get(u"this").put(u'lineNumber',Js(var.get(u"this").get(u'lineNumber').to_number())+Js(1))
                                        if (PyJsStrictEq(var.get(u'ch'),Js(u'\r')) and PyJsStrictEq(var.get(u"this").get(u'source').get(var.get(u"this").get(u'index')),Js(u'\n'))):
                                            var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                                        var.get(u"this").put(u'lineStart', var.get(u"this").get(u'index'))
                                        var.put(u'cooked', Js(u'\n'), u'+')
                                    else:
                                        var.put(u'cooked', var.get(u'ch'), u'+')
                    if var.get(u'terminated').neg():
                        var.get(u"this").callprop(u'throwUnexpectedToken')
                    if var.get(u'head').neg():
                        var.get(u"this").get(u'curlyStack').callprop(u'pop')
                    PyJs_Object_442_ = Js({u'type':Js(10.0),u'value':var.get(u"this").get(u'source').callprop(u'slice', (var.get(u'start')+Js(1.0)), (var.get(u"this").get(u'index')-var.get(u'rawOffset'))),u'cooked':var.get(u'cooked'),u'head':var.get(u'head'),u'tail':var.get(u'tail'),u'lineNumber':var.get(u"this").get(u'lineNumber'),u'lineStart':var.get(u"this").get(u'lineStart'),u'start':var.get(u'start'),u'end':var.get(u"this").get(u'index')})
                    return PyJs_Object_442_
                PyJs_anonymous_441_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'scanTemplate', PyJs_anonymous_441_)
                @Js
                def PyJs_anonymous_443_(pattern, flags, this, arguments, var=var):
                    var = Scope({u'this':this, u'pattern':pattern, u'flags':flags, u'arguments':arguments}, var)
                    var.registers([u'tmp', u'pattern', u'self', u'flags', u'astralSubstitute'])
                    var.put(u'astralSubstitute', Js(u'\uffff'))
                    var.put(u'tmp', var.get(u'pattern'))
                    var.put(u'self', var.get(u"this"))
                    if (var.get(u'flags').callprop(u'indexOf', Js(u'u'))>=Js(0.0)):
                        @Js
                        def PyJs_anonymous_444_(PyJsArg_2430_, PyJsArg_2431_, PyJsArg_2432_, this, arguments, var=var):
                            var = Scope({u'this':this, u'$2':PyJsArg_2432_, u'arguments':arguments, u'$0':PyJsArg_2430_, u'$1':PyJsArg_2431_}, var)
                            var.registers([u'codePoint', u'$2', u'$0', u'$1'])
                            var.put(u'codePoint', var.get(u'parseInt')((var.get(u'$1') or var.get(u'$2')), Js(16.0)))
                            if (var.get(u'codePoint')>Js(1114111)):
                                var.get(u'self').callprop(u'throwUnexpectedToken', var.get(u'messages_1').get(u'Messages').get(u'InvalidRegExp'))
                            if (var.get(u'codePoint')<=Js(65535)):
                                return var.get(u'String').callprop(u'fromCharCode', var.get(u'codePoint'))
                            return var.get(u'astralSubstitute')
                        PyJs_anonymous_444_._set_name(u'anonymous')
                        var.put(u'tmp', var.get(u'tmp').callprop(u'replace', JsRegExp(u'/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g'), PyJs_anonymous_444_).callprop(u'replace', JsRegExp(u'/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g'), var.get(u'astralSubstitute')))
                    try:
                        var.get(u'RegExp')(var.get(u'tmp'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_21880026 = var.own.get(u'e')
                        var.force_own_put(u'e', PyExceptionToJs(PyJsTempException))
                        try:
                            var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'messages_1').get(u'Messages').get(u'InvalidRegExp'))
                        finally:
                            if PyJsHolder_65_21880026 is not None:
                                var.own[u'e'] = PyJsHolder_65_21880026
                            else:
                                del var.own[u'e']
                            del PyJsHolder_65_21880026
                    try:
                        return var.get(u'RegExp').create(var.get(u'pattern'), var.get(u'flags'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_657863657074696f6e_77050278 = var.own.get(u'exception')
                        var.force_own_put(u'exception', PyExceptionToJs(PyJsTempException))
                        try:
                            return var.get(u"null")
                        finally:
                            if PyJsHolder_657863657074696f6e_77050278 is not None:
                                var.own[u'exception'] = PyJsHolder_657863657074696f6e_77050278
                            else:
                                del var.own[u'exception']
                            del PyJsHolder_657863657074696f6e_77050278
                PyJs_anonymous_443_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'testRegExp', PyJs_anonymous_443_)
                @Js
                def PyJs_anonymous_445_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'terminated', u'ch', u'classMarker', u'str'])
                    var.put(u'ch', var.get(u"this").get(u'source').get(var.get(u"this").get(u'index')))
                    var.get(u'assert_1').callprop(u'assert', PyJsStrictEq(var.get(u'ch'),Js(u'/')), Js(u'Regular expression literal must start with a slash'))
                    var.put(u'str', var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))))
                    var.put(u'classMarker', Js(False))
                    var.put(u'terminated', Js(False))
                    while var.get(u"this").callprop(u'eof').neg():
                        var.put(u'ch', var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))))
                        var.put(u'str', var.get(u'ch'), u'+')
                        if PyJsStrictEq(var.get(u'ch'),Js(u'\\')):
                            var.put(u'ch', var.get(u"this").get(u'source').get((var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))-Js(1))))
                            if var.get(u'character_1').get(u'Character').callprop(u'isLineTerminator', var.get(u'ch').callprop(u'charCodeAt', Js(0.0))):
                                var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'messages_1').get(u'Messages').get(u'UnterminatedRegExp'))
                            var.put(u'str', var.get(u'ch'), u'+')
                        else:
                            if var.get(u'character_1').get(u'Character').callprop(u'isLineTerminator', var.get(u'ch').callprop(u'charCodeAt', Js(0.0))):
                                var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'messages_1').get(u'Messages').get(u'UnterminatedRegExp'))
                            else:
                                if var.get(u'classMarker'):
                                    if PyJsStrictEq(var.get(u'ch'),Js(u']')):
                                        var.put(u'classMarker', Js(False))
                                else:
                                    if PyJsStrictEq(var.get(u'ch'),Js(u'/')):
                                        var.put(u'terminated', Js(True))
                                        break
                                    else:
                                        if PyJsStrictEq(var.get(u'ch'),Js(u'[')):
                                            var.put(u'classMarker', Js(True))
                    if var.get(u'terminated').neg():
                        var.get(u"this").callprop(u'throwUnexpectedToken', var.get(u'messages_1').get(u'Messages').get(u'UnterminatedRegExp'))
                    return var.get(u'str').callprop(u'substr', Js(1.0), (var.get(u'str').get(u'length')-Js(2.0)))
                PyJs_anonymous_445_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'scanRegExpBody', PyJs_anonymous_445_)
                @Js
                def PyJs_anonymous_446_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'char', u'restore', u'ch', u'flags', u'str'])
                    var.put(u'str', Js(u''))
                    var.put(u'flags', Js(u''))
                    while var.get(u"this").callprop(u'eof').neg():
                        var.put(u'ch', var.get(u"this").get(u'source').get(var.get(u"this").get(u'index')))
                        if var.get(u'character_1').get(u'Character').callprop(u'isIdentifierPart', var.get(u'ch').callprop(u'charCodeAt', Js(0.0))).neg():
                            break
                        var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                        if (PyJsStrictEq(var.get(u'ch'),Js(u'\\')) and var.get(u"this").callprop(u'eof').neg()):
                            var.put(u'ch', var.get(u"this").get(u'source').get(var.get(u"this").get(u'index')))
                            if PyJsStrictEq(var.get(u'ch'),Js(u'u')):
                                var.get(u"this").put(u'index',Js(var.get(u"this").get(u'index').to_number())+Js(1))
                                var.put(u'restore', var.get(u"this").get(u'index'))
                                var.put(u'char', var.get(u"this").callprop(u'scanHexEscape', Js(u'u')))
                                if PyJsStrictNeq(var.get(u'char'),var.get(u"null")):
                                    var.put(u'flags', var.get(u'char'), u'+')
                                    #for JS loop
                                    var.put(u'str', Js(u'\\u'), u'+')
                                    while (var.get(u'restore')<var.get(u"this").get(u'index')):
                                        try:
                                            var.put(u'str', var.get(u"this").get(u'source').get(var.get(u'restore')), u'+')
                                        finally:
                                                var.put(u'restore',Js(var.get(u'restore').to_number())+Js(1))
                                else:
                                    var.get(u"this").put(u'index', var.get(u'restore'))
                                    var.put(u'flags', Js(u'u'), u'+')
                                    var.put(u'str', Js(u'\\u'), u'+')
                                var.get(u"this").callprop(u'tolerateUnexpectedToken')
                            else:
                                var.put(u'str', Js(u'\\'), u'+')
                                var.get(u"this").callprop(u'tolerateUnexpectedToken')
                        else:
                            var.put(u'flags', var.get(u'ch'), u'+')
                            var.put(u'str', var.get(u'ch'), u'+')
                    return var.get(u'flags')
                PyJs_anonymous_446_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'scanRegExpFlags', PyJs_anonymous_446_)
                @Js
                def PyJs_anonymous_447_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'start', u'flags', u'value', u'pattern'])
                    var.put(u'start', var.get(u"this").get(u'index'))
                    var.put(u'pattern', var.get(u"this").callprop(u'scanRegExpBody'))
                    var.put(u'flags', var.get(u"this").callprop(u'scanRegExpFlags'))
                    var.put(u'value', var.get(u"this").callprop(u'testRegExp', var.get(u'pattern'), var.get(u'flags')))
                    PyJs_Object_448_ = Js({u'type':Js(9.0),u'value':Js(u''),u'pattern':var.get(u'pattern'),u'flags':var.get(u'flags'),u'regex':var.get(u'value'),u'lineNumber':var.get(u"this").get(u'lineNumber'),u'lineStart':var.get(u"this").get(u'lineStart'),u'start':var.get(u'start'),u'end':var.get(u"this").get(u'index')})
                    return PyJs_Object_448_
                PyJs_anonymous_447_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'scanRegExp', PyJs_anonymous_447_)
                @Js
                def PyJs_anonymous_449_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'cp'])
                    if var.get(u"this").callprop(u'eof'):
                        PyJs_Object_450_ = Js({u'type':Js(2.0),u'value':Js(u''),u'lineNumber':var.get(u"this").get(u'lineNumber'),u'lineStart':var.get(u"this").get(u'lineStart'),u'start':var.get(u"this").get(u'index'),u'end':var.get(u"this").get(u'index')})
                        return PyJs_Object_450_
                    var.put(u'cp', var.get(u"this").get(u'source').callprop(u'charCodeAt', var.get(u"this").get(u'index')))
                    if var.get(u'character_1').get(u'Character').callprop(u'isIdentifierStart', var.get(u'cp')):
                        return var.get(u"this").callprop(u'scanIdentifier')
                    if ((PyJsStrictEq(var.get(u'cp'),Js(40)) or PyJsStrictEq(var.get(u'cp'),Js(41))) or PyJsStrictEq(var.get(u'cp'),Js(59))):
                        return var.get(u"this").callprop(u'scanPunctuator')
                    if (PyJsStrictEq(var.get(u'cp'),Js(39)) or PyJsStrictEq(var.get(u'cp'),Js(34))):
                        return var.get(u"this").callprop(u'scanStringLiteral')
                    if PyJsStrictEq(var.get(u'cp'),Js(46)):
                        if var.get(u'character_1').get(u'Character').callprop(u'isDecimalDigit', var.get(u"this").get(u'source').callprop(u'charCodeAt', (var.get(u"this").get(u'index')+Js(1.0)))):
                            return var.get(u"this").callprop(u'scanNumericLiteral')
                        return var.get(u"this").callprop(u'scanPunctuator')
                    if var.get(u'character_1').get(u'Character').callprop(u'isDecimalDigit', var.get(u'cp')):
                        return var.get(u"this").callprop(u'scanNumericLiteral')
                    if (PyJsStrictEq(var.get(u'cp'),Js(96)) or (PyJsStrictEq(var.get(u'cp'),Js(125)) and PyJsStrictEq(var.get(u"this").get(u'curlyStack').get((var.get(u"this").get(u'curlyStack').get(u'length')-Js(1.0))),Js(u'${')))):
                        return var.get(u"this").callprop(u'scanTemplate')
                    if ((var.get(u'cp')>=Js(55296)) and (var.get(u'cp')<Js(57343))):
                        if var.get(u'character_1').get(u'Character').callprop(u'isIdentifierStart', var.get(u"this").callprop(u'codePointAt', var.get(u"this").get(u'index'))):
                            return var.get(u"this").callprop(u'scanIdentifier')
                    return var.get(u"this").callprop(u'scanPunctuator')
                PyJs_anonymous_449_._set_name(u'anonymous')
                var.get(u'Scanner').get(u'prototype').put(u'lex', PyJs_anonymous_449_)
                return var.get(u'Scanner')
            PyJs_anonymous_389_._set_name(u'anonymous')
            var.put(u'Scanner', PyJs_anonymous_389_())
            var.get(u'exports').put(u'Scanner', var.get(u'Scanner'))
        PyJs_anonymous_387_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_451_(module, exports, this, arguments, var=var):
            var = Scope({u'this':this, u'exports':exports, u'arguments':arguments, u'module':module}, var)
            var.registers([u'exports', u'module'])
            Js(u'use strict')
            PyJs_Object_452_ = Js({u'value':Js(True)})
            var.get(u'Object').callprop(u'defineProperty', var.get(u'exports'), Js(u'__esModule'), PyJs_Object_452_)
            PyJs_Object_453_ = Js({})
            var.get(u'exports').put(u'TokenName', PyJs_Object_453_)
            var.get(u'exports').get(u'TokenName').put(u'1', Js(u'Boolean'))
            var.get(u'exports').get(u'TokenName').put(u'2', Js(u'<end>'))
            var.get(u'exports').get(u'TokenName').put(u'3', Js(u'Identifier'))
            var.get(u'exports').get(u'TokenName').put(u'4', Js(u'Keyword'))
            var.get(u'exports').get(u'TokenName').put(u'5', Js(u'Null'))
            var.get(u'exports').get(u'TokenName').put(u'6', Js(u'Numeric'))
            var.get(u'exports').get(u'TokenName').put(u'7', Js(u'Punctuator'))
            var.get(u'exports').get(u'TokenName').put(u'8', Js(u'String'))
            var.get(u'exports').get(u'TokenName').put(u'9', Js(u'RegularExpression'))
            var.get(u'exports').get(u'TokenName').put(u'10', Js(u'Template'))
        PyJs_anonymous_451_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_454_(module, exports, this, arguments, var=var):
            var = Scope({u'this':this, u'exports':exports, u'arguments':arguments, u'module':module}, var)
            var.registers([u'exports', u'module'])
            Js(u'use strict')
            PyJs_Object_455_ = Js({u'value':Js(True)})
            var.get(u'Object').callprop(u'defineProperty', var.get(u'exports'), Js(u'__esModule'), PyJs_Object_455_)
            PyJs_Object_456_ = Js({u'quot':Js(u'"'),u'amp':Js(u'&'),u'apos':Js(u"'"),u'gt':Js(u'>'),u'nbsp':Js(u'\xa0'),u'iexcl':Js(u'\xa1'),u'cent':Js(u'\xa2'),u'pound':Js(u'\xa3'),u'curren':Js(u'\xa4'),u'yen':Js(u'\xa5'),u'brvbar':Js(u'\xa6'),u'sect':Js(u'\xa7'),u'uml':Js(u'\xa8'),u'copy':Js(u'\xa9'),u'ordf':Js(u'\xaa'),u'laquo':Js(u'\xab'),u'not':Js(u'\xac'),u'shy':Js(u'\xad'),u'reg':Js(u'\xae'),u'macr':Js(u'\xaf'),u'deg':Js(u'\xb0'),u'plusmn':Js(u'\xb1'),u'sup2':Js(u'\xb2'),u'sup3':Js(u'\xb3'),u'acute':Js(u'\xb4'),u'micro':Js(u'\xb5'),u'para':Js(u'\xb6'),u'middot':Js(u'\xb7'),u'cedil':Js(u'\xb8'),u'sup1':Js(u'\xb9'),u'ordm':Js(u'\xba'),u'raquo':Js(u'\xbb'),u'frac14':Js(u'\xbc'),u'frac12':Js(u'\xbd'),u'frac34':Js(u'\xbe'),u'iquest':Js(u'\xbf'),u'Agrave':Js(u'\xc0'),u'Aacute':Js(u'\xc1'),u'Acirc':Js(u'\xc2'),u'Atilde':Js(u'\xc3'),u'Auml':Js(u'\xc4'),u'Aring':Js(u'\xc5'),u'AElig':Js(u'\xc6'),u'Ccedil':Js(u'\xc7'),u'Egrave':Js(u'\xc8'),u'Eacute':Js(u'\xc9'),u'Ecirc':Js(u'\xca'),u'Euml':Js(u'\xcb'),u'Igrave':Js(u'\xcc'),u'Iacute':Js(u'\xcd'),u'Icirc':Js(u'\xce'),u'Iuml':Js(u'\xcf'),u'ETH':Js(u'\xd0'),u'Ntilde':Js(u'\xd1'),u'Ograve':Js(u'\xd2'),u'Oacute':Js(u'\xd3'),u'Ocirc':Js(u'\xd4'),u'Otilde':Js(u'\xd5'),u'Ouml':Js(u'\xd6'),u'times':Js(u'\xd7'),u'Oslash':Js(u'\xd8'),u'Ugrave':Js(u'\xd9'),u'Uacute':Js(u'\xda'),u'Ucirc':Js(u'\xdb'),u'Uuml':Js(u'\xdc'),u'Yacute':Js(u'\xdd'),u'THORN':Js(u'\xde'),u'szlig':Js(u'\xdf'),u'agrave':Js(u'\xe0'),u'aacute':Js(u'\xe1'),u'acirc':Js(u'\xe2'),u'atilde':Js(u'\xe3'),u'auml':Js(u'\xe4'),u'aring':Js(u'\xe5'),u'aelig':Js(u'\xe6'),u'ccedil':Js(u'\xe7'),u'egrave':Js(u'\xe8'),u'eacute':Js(u'\xe9'),u'ecirc':Js(u'\xea'),u'euml':Js(u'\xeb'),u'igrave':Js(u'\xec'),u'iacute':Js(u'\xed'),u'icirc':Js(u'\xee'),u'iuml':Js(u'\xef'),u'eth':Js(u'\xf0'),u'ntilde':Js(u'\xf1'),u'ograve':Js(u'\xf2'),u'oacute':Js(u'\xf3'),u'ocirc':Js(u'\xf4'),u'otilde':Js(u'\xf5'),u'ouml':Js(u'\xf6'),u'divide':Js(u'\xf7'),u'oslash':Js(u'\xf8'),u'ugrave':Js(u'\xf9'),u'uacute':Js(u'\xfa'),u'ucirc':Js(u'\xfb'),u'uuml':Js(u'\xfc'),u'yacute':Js(u'\xfd'),u'thorn':Js(u'\xfe'),u'yuml':Js(u'\xff'),u'OElig':Js(u'\u0152'),u'oelig':Js(u'\u0153'),u'Scaron':Js(u'\u0160'),u'scaron':Js(u'\u0161'),u'Yuml':Js(u'\u0178'),u'fnof':Js(u'\u0192'),u'circ':Js(u'\u02c6'),u'tilde':Js(u'\u02dc'),u'Alpha':Js(u'\u0391'),u'Beta':Js(u'\u0392'),u'Gamma':Js(u'\u0393'),u'Delta':Js(u'\u0394'),u'Epsilon':Js(u'\u0395'),u'Zeta':Js(u'\u0396'),u'Eta':Js(u'\u0397'),u'Theta':Js(u'\u0398'),u'Iota':Js(u'\u0399'),u'Kappa':Js(u'\u039a'),u'Lambda':Js(u'\u039b'),u'Mu':Js(u'\u039c'),u'Nu':Js(u'\u039d'),u'Xi':Js(u'\u039e'),u'Omicron':Js(u'\u039f'),u'Pi':Js(u'\u03a0'),u'Rho':Js(u'\u03a1'),u'Sigma':Js(u'\u03a3'),u'Tau':Js(u'\u03a4'),u'Upsilon':Js(u'\u03a5'),u'Phi':Js(u'\u03a6'),u'Chi':Js(u'\u03a7'),u'Psi':Js(u'\u03a8'),u'Omega':Js(u'\u03a9'),u'alpha':Js(u'\u03b1'),u'beta':Js(u'\u03b2'),u'gamma':Js(u'\u03b3'),u'delta':Js(u'\u03b4'),u'epsilon':Js(u'\u03b5'),u'zeta':Js(u'\u03b6'),u'eta':Js(u'\u03b7'),u'theta':Js(u'\u03b8'),u'iota':Js(u'\u03b9'),u'kappa':Js(u'\u03ba'),u'lambda':Js(u'\u03bb'),u'mu':Js(u'\u03bc'),u'nu':Js(u'\u03bd'),u'xi':Js(u'\u03be'),u'omicron':Js(u'\u03bf'),u'pi':Js(u'\u03c0'),u'rho':Js(u'\u03c1'),u'sigmaf':Js(u'\u03c2'),u'sigma':Js(u'\u03c3'),u'tau':Js(u'\u03c4'),u'upsilon':Js(u'\u03c5'),u'phi':Js(u'\u03c6'),u'chi':Js(u'\u03c7'),u'psi':Js(u'\u03c8'),u'omega':Js(u'\u03c9'),u'thetasym':Js(u'\u03d1'),u'upsih':Js(u'\u03d2'),u'piv':Js(u'\u03d6'),u'ensp':Js(u'\u2002'),u'emsp':Js(u'\u2003'),u'thinsp':Js(u'\u2009'),u'zwnj':Js(u'\u200c'),u'zwj':Js(u'\u200d'),u'lrm':Js(u'\u200e'),u'rlm':Js(u'\u200f'),u'ndash':Js(u'\u2013'),u'mdash':Js(u'\u2014'),u'lsquo':Js(u'\u2018'),u'rsquo':Js(u'\u2019'),u'sbquo':Js(u'\u201a'),u'ldquo':Js(u'\u201c'),u'rdquo':Js(u'\u201d'),u'bdquo':Js(u'\u201e'),u'dagger':Js(u'\u2020'),u'Dagger':Js(u'\u2021'),u'bull':Js(u'\u2022'),u'hellip':Js(u'\u2026'),u'permil':Js(u'\u2030'),u'prime':Js(u'\u2032'),u'Prime':Js(u'\u2033'),u'lsaquo':Js(u'\u2039'),u'rsaquo':Js(u'\u203a'),u'oline':Js(u'\u203e'),u'frasl':Js(u'\u2044'),u'euro':Js(u'\u20ac'),u'image':Js(u'\u2111'),u'weierp':Js(u'\u2118'),u'real':Js(u'\u211c'),u'trade':Js(u'\u2122'),u'alefsym':Js(u'\u2135'),u'larr':Js(u'\u2190'),u'uarr':Js(u'\u2191'),u'rarr':Js(u'\u2192'),u'darr':Js(u'\u2193'),u'harr':Js(u'\u2194'),u'crarr':Js(u'\u21b5'),u'lArr':Js(u'\u21d0'),u'uArr':Js(u'\u21d1'),u'rArr':Js(u'\u21d2'),u'dArr':Js(u'\u21d3'),u'hArr':Js(u'\u21d4'),u'forall':Js(u'\u2200'),u'part':Js(u'\u2202'),u'exist':Js(u'\u2203'),u'empty':Js(u'\u2205'),u'nabla':Js(u'\u2207'),u'isin':Js(u'\u2208'),u'notin':Js(u'\u2209'),u'ni':Js(u'\u220b'),u'prod':Js(u'\u220f'),u'sum':Js(u'\u2211'),u'minus':Js(u'\u2212'),u'lowast':Js(u'\u2217'),u'radic':Js(u'\u221a'),u'prop':Js(u'\u221d'),u'infin':Js(u'\u221e'),u'ang':Js(u'\u2220'),u'and':Js(u'\u2227'),u'or':Js(u'\u2228'),u'cap':Js(u'\u2229'),u'cup':Js(u'\u222a'),u'int':Js(u'\u222b'),u'there4':Js(u'\u2234'),u'sim':Js(u'\u223c'),u'cong':Js(u'\u2245'),u'asymp':Js(u'\u2248'),u'ne':Js(u'\u2260'),u'equiv':Js(u'\u2261'),u'le':Js(u'\u2264'),u'ge':Js(u'\u2265'),u'sub':Js(u'\u2282'),u'sup':Js(u'\u2283'),u'nsub':Js(u'\u2284'),u'sube':Js(u'\u2286'),u'supe':Js(u'\u2287'),u'oplus':Js(u'\u2295'),u'otimes':Js(u'\u2297'),u'perp':Js(u'\u22a5'),u'sdot':Js(u'\u22c5'),u'lceil':Js(u'\u2308'),u'rceil':Js(u'\u2309'),u'lfloor':Js(u'\u230a'),u'rfloor':Js(u'\u230b'),u'loz':Js(u'\u25ca'),u'spades':Js(u'\u2660'),u'clubs':Js(u'\u2663'),u'hearts':Js(u'\u2665'),u'diams':Js(u'\u2666'),u'lang':Js(u'\u27e8'),u'rang':Js(u'\u27e9')})
            var.get(u'exports').put(u'XHTMLEntities', PyJs_Object_456_)
        PyJs_anonymous_454_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_457_(module, exports, __webpack_require__, this, arguments, var=var):
            var = Scope({u'this':this, u'exports':exports, u'__webpack_require__':__webpack_require__, u'module':module, u'arguments':arguments}, var)
            var.registers([u'exports', u'Tokenizer', u'module', u'token_1', u'__webpack_require__', u'scanner_1', u'Reader', u'error_handler_1'])
            Js(u'use strict')
            PyJs_Object_458_ = Js({u'value':Js(True)})
            var.get(u'Object').callprop(u'defineProperty', var.get(u'exports'), Js(u'__esModule'), PyJs_Object_458_)
            var.put(u'error_handler_1', var.get(u'__webpack_require__')(Js(10.0)))
            var.put(u'scanner_1', var.get(u'__webpack_require__')(Js(12.0)))
            var.put(u'token_1', var.get(u'__webpack_require__')(Js(13.0)))
            @Js
            def PyJs_anonymous_459_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'Reader'])
                @Js
                def PyJsHoisted_Reader_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    var.get(u"this").put(u'values', Js([]))
                    var.get(u"this").put(u'curly', var.get(u"this").put(u'paren', (-Js(1.0))))
                PyJsHoisted_Reader_.func_name = u'Reader'
                var.put(u'Reader', PyJsHoisted_Reader_)
                pass
                @Js
                def PyJs_anonymous_460_(t, this, arguments, var=var):
                    var = Scope({u'this':this, u't':t, u'arguments':arguments}, var)
                    var.registers([u't'])
                    def PyJs_LONG_461_(var=var):
                        return Js([Js(u'('), Js(u'{'), Js(u'['), Js(u'in'), Js(u'typeof'), Js(u'instanceof'), Js(u'new'), Js(u'return'), Js(u'case'), Js(u'delete'), Js(u'throw'), Js(u'void'), Js(u'='), Js(u'+='), Js(u'-='), Js(u'*='), Js(u'**='), Js(u'/='), Js(u'%='), Js(u'<<='), Js(u'>>='), Js(u'>>>='), Js(u'&='), Js(u'|='), Js(u'^='), Js(u','), Js(u'+'), Js(u'-'), Js(u'*'), Js(u'**'), Js(u'/'), Js(u'%'), Js(u'++'), Js(u'--'), Js(u'<<'), Js(u'>>'), Js(u'>>>'), Js(u'&'), Js(u'|'), Js(u'^'), Js(u'!'), Js(u'~'), Js(u'&&'), Js(u'||'), Js(u'?'), Js(u':'), Js(u'==='), Js(u'=='), Js(u'>='), Js(u'<='), Js(u'<'), Js(u'>'), Js(u'!='), Js(u'!==')]).callprop(u'indexOf', var.get(u't'))
                    return (PyJs_LONG_461_()>=Js(0.0))
                PyJs_anonymous_460_._set_name(u'anonymous')
                var.get(u'Reader').get(u'prototype').put(u'beforeFunctionExpression', PyJs_anonymous_460_)
                @Js
                def PyJs_anonymous_462_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'regex', u'check', u'keyword', u'previous'])
                    var.put(u'previous', var.get(u"this").get(u'values').get((var.get(u"this").get(u'values').get(u'length')-Js(1.0))))
                    var.put(u'regex', PyJsStrictNeq(var.get(u'previous'),var.get(u"null")))
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get(u'previous'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'this')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u']')):
                            SWITCHED = True
                            var.put(u'regex', Js(False))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u')')):
                            SWITCHED = True
                            var.put(u'keyword', var.get(u"this").get(u'values').get((var.get(u"this").get(u'paren')-Js(1.0))))
                            var.put(u'regex', (((PyJsStrictEq(var.get(u'keyword'),Js(u'if')) or PyJsStrictEq(var.get(u'keyword'),Js(u'while'))) or PyJsStrictEq(var.get(u'keyword'),Js(u'for'))) or PyJsStrictEq(var.get(u'keyword'),Js(u'with'))))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(u'}')):
                            SWITCHED = True
                            var.put(u'regex', Js(False))
                            if PyJsStrictEq(var.get(u"this").get(u'values').get((var.get(u"this").get(u'curly')-Js(3.0))),Js(u'function')):
                                var.put(u'check', var.get(u"this").get(u'values').get((var.get(u"this").get(u'curly')-Js(4.0))))
                                var.put(u'regex', (var.get(u"this").callprop(u'beforeFunctionExpression', var.get(u'check')).neg() if var.get(u'check') else Js(False)))
                            else:
                                if PyJsStrictEq(var.get(u"this").get(u'values').get((var.get(u"this").get(u'curly')-Js(4.0))),Js(u'function')):
                                    var.put(u'check', var.get(u"this").get(u'values').get((var.get(u"this").get(u'curly')-Js(5.0))))
                                    var.put(u'regex', (var.get(u"this").callprop(u'beforeFunctionExpression', var.get(u'check')).neg() if var.get(u'check') else Js(True)))
                            break
                        if True:
                            SWITCHED = True
                            break
                        SWITCHED = True
                        break
                    return var.get(u'regex')
                PyJs_anonymous_462_._set_name(u'anonymous')
                var.get(u'Reader').get(u'prototype').put(u'isRegexStart', PyJs_anonymous_462_)
                @Js
                def PyJs_anonymous_463_(token, this, arguments, var=var):
                    var = Scope({u'this':this, u'token':token, u'arguments':arguments}, var)
                    var.registers([u'token'])
                    if (PyJsStrictEq(var.get(u'token').get(u'type'),Js(7.0)) or PyJsStrictEq(var.get(u'token').get(u'type'),Js(4.0))):
                        if PyJsStrictEq(var.get(u'token').get(u'value'),Js(u'{')):
                            var.get(u"this").put(u'curly', var.get(u"this").get(u'values').get(u'length'))
                        else:
                            if PyJsStrictEq(var.get(u'token').get(u'value'),Js(u'(')):
                                var.get(u"this").put(u'paren', var.get(u"this").get(u'values').get(u'length'))
                        var.get(u"this").get(u'values').callprop(u'push', var.get(u'token').get(u'value'))
                    else:
                        var.get(u"this").get(u'values').callprop(u'push', var.get(u"null"))
                PyJs_anonymous_463_._set_name(u'anonymous')
                var.get(u'Reader').get(u'prototype').put(u'push', PyJs_anonymous_463_)
                return var.get(u'Reader')
            PyJs_anonymous_459_._set_name(u'anonymous')
            var.put(u'Reader', PyJs_anonymous_459_())
            @Js
            def PyJs_anonymous_464_(this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments}, var)
                var.registers([u'Tokenizer'])
                @Js
                def PyJsHoisted_Tokenizer_(code, config, this, arguments, var=var):
                    var = Scope({u'this':this, u'code':code, u'config':config, u'arguments':arguments}, var)
                    var.registers([u'code', u'config'])
                    var.get(u"this").put(u'errorHandler', var.get(u'error_handler_1').get(u'ErrorHandler').create())
                    var.get(u"this").get(u'errorHandler').put(u'tolerant', ((PyJsStrictEq(var.get(u'config').get(u'tolerant').typeof(),Js(u'boolean')) and var.get(u'config').get(u'tolerant')) if var.get(u'config') else Js(False)))
                    var.get(u"this").put(u'scanner', var.get(u'scanner_1').get(u'Scanner').create(var.get(u'code'), var.get(u"this").get(u'errorHandler')))
                    var.get(u"this").get(u'scanner').put(u'trackComment', ((PyJsStrictEq(var.get(u'config').get(u'comment').typeof(),Js(u'boolean')) and var.get(u'config').get(u'comment')) if var.get(u'config') else Js(False)))
                    var.get(u"this").put(u'trackRange', ((PyJsStrictEq(var.get(u'config').get(u'range').typeof(),Js(u'boolean')) and var.get(u'config').get(u'range')) if var.get(u'config') else Js(False)))
                    var.get(u"this").put(u'trackLoc', ((PyJsStrictEq(var.get(u'config').get(u'loc').typeof(),Js(u'boolean')) and var.get(u'config').get(u'loc')) if var.get(u'config') else Js(False)))
                    var.get(u"this").put(u'buffer', Js([]))
                    var.get(u"this").put(u'reader', var.get(u'Reader').create())
                PyJsHoisted_Tokenizer_.func_name = u'Tokenizer'
                var.put(u'Tokenizer', PyJsHoisted_Tokenizer_)
                pass
                @Js
                def PyJs_anonymous_465_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([])
                    return var.get(u"this").get(u'errorHandler').get(u'errors')
                PyJs_anonymous_465_._set_name(u'anonymous')
                var.get(u'Tokenizer').get(u'prototype').put(u'errors', PyJs_anonymous_465_)
                @Js
                def PyJs_anonymous_466_(this, arguments, var=var):
                    var = Scope({u'this':this, u'arguments':arguments}, var)
                    var.registers([u'comment', u'loc', u'startRegex', u'e', u'i', u'pattern', u'value', u'token', u'flags', u'comments', u'entry'])
                    if PyJsStrictEq(var.get(u"this").get(u'buffer').get(u'length'),Js(0.0)):
                        var.put(u'comments', var.get(u"this").get(u'scanner').callprop(u'scanComments'))
                        if var.get(u"this").get(u'scanner').get(u'trackComment'):
                            #for JS loop
                            var.put(u'i', Js(0.0))
                            while (var.get(u'i')<var.get(u'comments').get(u'length')):
                                try:
                                    var.put(u'e', var.get(u'comments').get(var.get(u'i')))
                                    var.put(u'value', var.get(u"this").get(u'scanner').get(u'source').callprop(u'slice', var.get(u'e').get(u'slice').get(u'0'), var.get(u'e').get(u'slice').get(u'1')))
                                    PyJs_Object_467_ = Js({u'type':(Js(u'BlockComment') if var.get(u'e').get(u'multiLine') else Js(u'LineComment')),u'value':var.get(u'value')})
                                    var.put(u'comment', PyJs_Object_467_)
                                    if var.get(u"this").get(u'trackRange'):
                                        var.get(u'comment').put(u'range', var.get(u'e').get(u'range'))
                                    if var.get(u"this").get(u'trackLoc'):
                                        var.get(u'comment').put(u'loc', var.get(u'e').get(u'loc'))
                                    var.get(u"this").get(u'buffer').callprop(u'push', var.get(u'comment'))
                                finally:
                                        var.put(u'i',Js(var.get(u'i').to_number())+Js(1))
                        if var.get(u"this").get(u'scanner').callprop(u'eof').neg():
                            var.put(u'loc', PyJsComma(Js(0.0), Js(None)))
                            if var.get(u"this").get(u'trackLoc'):
                                PyJs_Object_469_ = Js({u'line':var.get(u"this").get(u'scanner').get(u'lineNumber'),u'column':(var.get(u"this").get(u'scanner').get(u'index')-var.get(u"this").get(u'scanner').get(u'lineStart'))})
                                PyJs_Object_470_ = Js({})
                                PyJs_Object_468_ = Js({u'start':PyJs_Object_469_,u'end':PyJs_Object_470_})
                                var.put(u'loc', PyJs_Object_468_)
                            var.put(u'startRegex', (PyJsStrictEq(var.get(u"this").get(u'scanner').get(u'source').get(var.get(u"this").get(u'scanner').get(u'index')),Js(u'/')) and var.get(u"this").get(u'reader').callprop(u'isRegexStart')))
                            var.put(u'token', (var.get(u"this").get(u'scanner').callprop(u'scanRegExp') if var.get(u'startRegex') else var.get(u"this").get(u'scanner').callprop(u'lex')))
                            var.get(u"this").get(u'reader').callprop(u'push', var.get(u'token'))
                            PyJs_Object_471_ = Js({u'type':var.get(u'token_1').get(u'TokenName').get(var.get(u'token').get(u'type')),u'value':var.get(u"this").get(u'scanner').get(u'source').callprop(u'slice', var.get(u'token').get(u'start'), var.get(u'token').get(u'end'))})
                            var.put(u'entry', PyJs_Object_471_)
                            if var.get(u"this").get(u'trackRange'):
                                var.get(u'entry').put(u'range', Js([var.get(u'token').get(u'start'), var.get(u'token').get(u'end')]))
                            if var.get(u"this").get(u'trackLoc'):
                                PyJs_Object_472_ = Js({u'line':var.get(u"this").get(u'scanner').get(u'lineNumber'),u'column':(var.get(u"this").get(u'scanner').get(u'index')-var.get(u"this").get(u'scanner').get(u'lineStart'))})
                                var.get(u'loc').put(u'end', PyJs_Object_472_)
                                var.get(u'entry').put(u'loc', var.get(u'loc'))
                            if PyJsStrictEq(var.get(u'token').get(u'type'),Js(9.0)):
                                var.put(u'pattern', var.get(u'token').get(u'pattern'))
                                var.put(u'flags', var.get(u'token').get(u'flags'))
                                PyJs_Object_473_ = Js({u'pattern':var.get(u'pattern'),u'flags':var.get(u'flags')})
                                var.get(u'entry').put(u'regex', PyJs_Object_473_)
                            var.get(u"this").get(u'buffer').callprop(u'push', var.get(u'entry'))
                    return var.get(u"this").get(u'buffer').callprop(u'shift')
                PyJs_anonymous_466_._set_name(u'anonymous')
                var.get(u'Tokenizer').get(u'prototype').put(u'getNextToken', PyJs_anonymous_466_)
                return var.get(u'Tokenizer')
            PyJs_anonymous_464_._set_name(u'anonymous')
            var.put(u'Tokenizer', PyJs_anonymous_464_())
            var.get(u'exports').put(u'Tokenizer', var.get(u'Tokenizer'))
        PyJs_anonymous_457_._set_name(u'anonymous')
        @Js
        def PyJs_anonymous_474_(modules, this, arguments, var=var):
            var = Scope({u'this':this, u'modules':modules, u'arguments':arguments}, var)
            var.registers([u'__webpack_require__', u'modules', u'installedModules'])
            @Js
            def PyJsHoisted___webpack_require___(moduleId, this, arguments, var=var):
                var = Scope({u'this':this, u'arguments':arguments, u'moduleId':moduleId}, var)
                var.registers([u'module', u'moduleId'])
                if var.get(u'installedModules').get(var.get(u'moduleId')):
                    return var.get(u'installedModules').get(var.get(u'moduleId')).get(u'exports')
                PyJs_Object_477_ = Js({})
                PyJs_Object_476_ = Js({u'exports':PyJs_Object_477_,u'id':var.get(u'moduleId'),u'loaded':Js(False)})
                var.put(u'module', var.get(u'installedModules').put(var.get(u'moduleId'), PyJs_Object_476_))
                var.get(u'modules').get(var.get(u'moduleId')).callprop(u'call', var.get(u'module').get(u'exports'), var.get(u'module'), var.get(u'module').get(u'exports'), var.get(u'__webpack_require__'))
                var.get(u'module').put(u'loaded', Js(True))
                return var.get(u'module').get(u'exports')
            PyJsHoisted___webpack_require___.func_name = u'__webpack_require__'
            var.put(u'__webpack_require__', PyJsHoisted___webpack_require___)
            PyJs_Object_475_ = Js({})
            var.put(u'installedModules', PyJs_Object_475_)
            pass
            var.get(u'__webpack_require__').put(u'm', var.get(u'modules'))
            var.get(u'__webpack_require__').put(u'c', var.get(u'installedModules'))
            var.get(u'__webpack_require__').put(u'p', Js(u''))
            return var.get(u'__webpack_require__')(Js(0.0))
        PyJs_anonymous_474_._set_name(u'anonymous')
        return PyJs_anonymous_474_(Js([PyJs_anonymous_5_, PyJs_anonymous_10_, PyJs_anonymous_23_, PyJs_anonymous_26_, PyJs_anonymous_75_, PyJs_anonymous_90_, PyJs_anonymous_103_, PyJs_anonymous_106_, PyJs_anonymous_181_, PyJs_anonymous_372_, PyJs_anonymous_374_, PyJs_anonymous_384_, PyJs_anonymous_387_, PyJs_anonymous_451_, PyJs_anonymous_454_, PyJs_anonymous_457_]))
    PyJs_anonymous_4_._set_name(u'anonymous')
    @Js
    def PyJs_webpackUniversalModuleDefinition_478_(root, factory, this, arguments, var=var):
        var = Scope({u'this':this, u'webpackUniversalModuleDefinition':PyJs_webpackUniversalModuleDefinition_478_, u'root':root, u'factory':factory, u'arguments':arguments}, var)
        var.registers([u'root', u'factory'])
        if (PyJsStrictEq((Js(u'undefined') if PyJsStrictEq(var.get(u'exports',throw=False).typeof(),Js(u'undefined')) else var.get(u'_typeof')(var.get(u'exports'))),Js(u'object')) and PyJsStrictEq((Js(u'undefined') if PyJsStrictEq(var.get(u'module',throw=False).typeof(),Js(u'undefined')) else var.get(u'_typeof')(var.get(u'module'))),Js(u'object'))):
            var.get(u'module').put(u'exports', var.get(u'factory')())
        else:
            if (PyJsStrictEq(var.get(u'define',throw=False).typeof(),Js(u'function')) and var.get(u'define').get(u'amd')):
                var.get(u'define')(Js([]), var.get(u'factory'))
            else:
                if PyJsStrictEq((Js(u'undefined') if PyJsStrictEq(var.get(u'exports',throw=False).typeof(),Js(u'undefined')) else var.get(u'_typeof')(var.get(u'exports'))),Js(u'object')):
                    var.get(u'exports').put(u'esprima', var.get(u'factory')())
                else:
                    var.get(u'root').put(u'esprima', var.get(u'factory')())
    PyJs_webpackUniversalModuleDefinition_478_._set_name(u'webpackUniversalModuleDefinition')
    PyJs_webpackUniversalModuleDefinition_478_(var.get(u"this"), PyJs_anonymous_4_)
    pass
PyJs_anonymous_3_._set_name(u'anonymous')
PyJs_Object_479_ = Js({})
@Js
def PyJs_anonymous_480_(require, module, exports, this, arguments, var=var):
    var = Scope({u'this':this, u'require':require, u'exports':exports, u'module':module, u'arguments':arguments}, var)
    var.registers([u'module', u'module_temp_love_python', u'exports', u'require', u'addToGlobals'])
    @Js
    def PyJsHoisted_addToGlobals_(name, obj, this, arguments, var=var):
        var = Scope({u'this':this, u'obj':obj, u'name':name, u'arguments':arguments}, var)
        var.registers([u'obj', u'name'])
        if var.get(u'Object').get(u'prototype').callprop(u'hasOwnProperty', Js(u'_fake_exports')).neg():
            PyJs_Object_481_ = Js({})
            var.get(u'Object').get(u'prototype').put(u'_fake_exports', PyJs_Object_481_)
        var.get(u'Object').get(u'prototype').get(u'_fake_exports').put(var.get(u'name'), var.get(u'obj'))
    PyJsHoisted_addToGlobals_.func_name = u'addToGlobals'
    var.put(u'addToGlobals', PyJsHoisted_addToGlobals_)
    pass
    pass
    pass
    var.put(u'module_temp_love_python', var.get(u'require')(Js(u'esprima')))
    var.get(u'addToGlobals')(Js(u'esprima'), var.get(u'module_temp_love_python'))
PyJs_anonymous_480_._set_name(u'anonymous')
PyJs_Object_482_ = Js({u'esprima':Js(1.0)})
PyJs_Object_2_ = Js({u'1':Js([PyJs_anonymous_3_, PyJs_Object_479_]),u'2':Js([PyJs_anonymous_480_, PyJs_Object_482_])})
PyJs_Object_483_ = Js({})
@Js
def PyJs_anonymous_484_(this, arguments, var=var):
    var = Scope({u'this':this, u'arguments':arguments}, var)
    var.registers([u'r'])
    @Js
    def PyJsHoisted_r_(e, n, t, this, arguments, var=var):
        var = Scope({u'this':this, u'arguments':arguments, u'e':e, u't':t, u'n':n}, var)
        var.registers([u'e', u'i', u'o', u'n', u'u', u't'])
        @Js
        def PyJsHoisted_o_(i, f, this, arguments, var=var):
            var = Scope({u'i':i, u'this':this, u'arguments':arguments, u'f':f}, var)
            var.registers([u'a', u'p', u'c', u'i', u'f'])
            if var.get(u'n').get(var.get(u'i')).neg():
                if var.get(u'e').get(var.get(u'i')).neg():
                    var.put(u'c', ((Js(u'function')==var.get(u'require',throw=False).typeof()) and var.get(u'require')))
                    if (var.get(u'f').neg() and var.get(u'c')):
                        return var.get(u'c')(var.get(u'i'), Js(0.0).neg())
                    if var.get(u'u'):
                        return var.get(u'u')(var.get(u'i'), Js(0.0).neg())
                    var.put(u'a', var.get(u'Error').create(((Js(u"Cannot find module '")+var.get(u'i'))+Js(u"'"))))
                    PyJsTempException = JsToPyException(PyJsComma(var.get(u'a').put(u'code', Js(u'MODULE_NOT_FOUND')),var.get(u'a')))
                    raise PyJsTempException
                PyJs_Object_486_ = Js({})
                PyJs_Object_485_ = Js({u'exports':PyJs_Object_486_})
                var.put(u'p', var.get(u'n').put(var.get(u'i'), PyJs_Object_485_))
                @Js
                def PyJs_anonymous_487_(r, this, arguments, var=var):
                    var = Scope({u'this':this, u'r':r, u'arguments':arguments}, var)
                    var.registers([u'r', u'n'])
                    var.put(u'n', var.get(u'e').get(var.get(u'i')).get(u'1').get(var.get(u'r')))
                    return var.get(u'o')((var.get(u'n') or var.get(u'r')))
                PyJs_anonymous_487_._set_name(u'anonymous')
                var.get(u'e').get(var.get(u'i')).get(u'0').callprop(u'call', var.get(u'p').get(u'exports'), PyJs_anonymous_487_, var.get(u'p'), var.get(u'p').get(u'exports'), var.get(u'r'), var.get(u'e'), var.get(u'n'), var.get(u't'))
            return var.get(u'n').get(var.get(u'i')).get(u'exports')
        PyJsHoisted_o_.func_name = u'o'
        var.put(u'o', PyJsHoisted_o_)
        pass
        #for JS loop
        var.put(u'u', ((Js(u'function')==var.get(u'require',throw=False).typeof()) and var.get(u'require')))
        var.put(u'i', Js(0.0))
        while (var.get(u'i')<var.get(u't').get(u'length')):
            try:
                var.get(u'o')(var.get(u't').get(var.get(u'i')))
            finally:
                    (var.put(u'i',Js(var.get(u'i').to_number())+Js(1))-Js(1))
        return var.get(u'o')
    PyJsHoisted_r_.func_name = u'r'
    var.put(u'r', PyJsHoisted_r_)
    pass
    return var.get(u'r')
PyJs_anonymous_484_._set_name(u'anonymous')
PyJs_anonymous_484_()(PyJs_Object_2_, PyJs_Object_483_, Js([Js(2.0)]))
pass
pass
pass
pass
var.put(u'esprima', var.get(u'getFromGlobals')(Js(u'esprima')))
var.get(u'esprima')
