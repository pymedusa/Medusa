from js2py.pyjs import *
# setting scope
var = Scope( JS_BUILTINS )
set_global_object(var)

# Code follows:
var.registers(['getFromGlobals', 'numjs', '_typeof'])
@Js
def PyJsHoisted_getFromGlobals_(name, this, arguments, var=var):
    var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
    var.registers(['name'])
    if var.get('Object').get('prototype').callprop('hasOwnProperty', Js('_fake_exports')).neg():
        PyJsTempException = JsToPyException(var.get('Error')((Js('Could not find any value named ')+var.get('name'))))
        raise PyJsTempException
    if var.get('Object').get('prototype').get('_fake_exports').callprop('hasOwnProperty', var.get('name')):
        return var.get('Object').get('prototype').get('_fake_exports').get(var.get('name'))
    else:
        PyJsTempException = JsToPyException(var.get('Error')((Js('Could not find any value named ')+var.get('name'))))
        raise PyJsTempException
PyJsHoisted_getFromGlobals_.func_name = 'getFromGlobals'
var.put('getFromGlobals', PyJsHoisted_getFromGlobals_)
Js('use strict')
@Js
def PyJs_anonymous_0_(obj, this, arguments, var=var):
    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
    var.registers(['obj'])
    return var.get('obj',throw=False).typeof()
PyJs_anonymous_0_._set_name('anonymous')
@Js
def PyJs_anonymous_1_(obj, this, arguments, var=var):
    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
    var.registers(['obj'])
    return (Js('symbol') if (((var.get('obj') and PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function'))) and PyJsStrictEq(var.get('obj').get('constructor'),var.get('Symbol'))) and PyJsStrictNeq(var.get('obj'),var.get('Symbol').get('prototype'))) else var.get('obj',throw=False).typeof())
PyJs_anonymous_1_._set_name('anonymous')
var.put('_typeof', (PyJs_anonymous_0_ if (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and PyJsStrictEq(var.get('Symbol').get('iterator').typeof(),Js('symbol'))) else PyJs_anonymous_1_))
def PyJs_LONG_523_(var=var):
    @Js
    def PyJs_anonymous_2_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'addToGlobals', 'module_temp_love_python', 'require'])
        @Js
        def PyJsHoisted_addToGlobals_(name, obj, this, arguments, var=var):
            var = Scope({'name':name, 'obj':obj, 'this':this, 'arguments':arguments}, var)
            var.registers(['name', 'obj'])
            if var.get('Object').get('prototype').callprop('hasOwnProperty', Js('_fake_exports')).neg():
                var.get('Object').get('prototype').put('_fake_exports', Js({}))
            var.get('Object').get('prototype').get('_fake_exports').put(var.get('name'), var.get('obj'))
        PyJsHoisted_addToGlobals_.func_name = 'addToGlobals'
        var.put('addToGlobals', PyJsHoisted_addToGlobals_)
        pass
        pass
        pass
        var.put('module_temp_love_python', var.get('require')(Js('numjs')))
        var.get('addToGlobals')(Js('numjs'), var.get('module_temp_love_python'))
    PyJs_anonymous_2_._set_name('anonymous')
    @Js
    def PyJs_anonymous_3_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['len', 'byteLength', 'revLookup', 'getLens', 'i', 'encodeChunk', 'fromByteArray', 'module', 'exports', 'toByteArray', '_byteLength', 'require', 'lookup', 'code', 'Arr', 'tripletToBase64'])
        @Js
        def PyJsHoisted_getLens_(b64, this, arguments, var=var):
            var = Scope({'b64':b64, 'this':this, 'arguments':arguments}, var)
            var.registers(['b64', 'validLen', 'len', 'placeHoldersLen'])
            var.put('len', var.get('b64').get('length'))
            if ((var.get('len')%Js(4.0))>Js(0.0)):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('Invalid string. Length must be a multiple of 4')))
                raise PyJsTempException
            var.put('validLen', var.get('b64').callprop('indexOf', Js('=')))
            if PyJsStrictEq(var.get('validLen'),(-Js(1.0))):
                var.put('validLen', var.get('len'))
            var.put('placeHoldersLen', (Js(0.0) if PyJsStrictEq(var.get('validLen'),var.get('len')) else (Js(4.0)-(var.get('validLen')%Js(4.0)))))
            return Js([var.get('validLen'), var.get('placeHoldersLen')])
        PyJsHoisted_getLens_.func_name = 'getLens'
        var.put('getLens', PyJsHoisted_getLens_)
        @Js
        def PyJsHoisted_byteLength_(b64, this, arguments, var=var):
            var = Scope({'b64':b64, 'this':this, 'arguments':arguments}, var)
            var.registers(['validLen', 'lens', 'b64', 'placeHoldersLen'])
            var.put('lens', var.get('getLens')(var.get('b64')))
            var.put('validLen', var.get('lens').get('0'))
            var.put('placeHoldersLen', var.get('lens').get('1'))
            return ((((var.get('validLen')+var.get('placeHoldersLen'))*Js(3.0))/Js(4.0))-var.get('placeHoldersLen'))
        PyJsHoisted_byteLength_.func_name = 'byteLength'
        var.put('byteLength', PyJsHoisted_byteLength_)
        @Js
        def PyJsHoisted__byteLength_(b64, validLen, placeHoldersLen, this, arguments, var=var):
            var = Scope({'b64':b64, 'validLen':validLen, 'placeHoldersLen':placeHoldersLen, 'this':this, 'arguments':arguments}, var)
            var.registers(['validLen', 'b64', 'placeHoldersLen'])
            return ((((var.get('validLen')+var.get('placeHoldersLen'))*Js(3.0))/Js(4.0))-var.get('placeHoldersLen'))
        PyJsHoisted__byteLength_.func_name = '_byteLength'
        var.put('_byteLength', PyJsHoisted__byteLength_)
        @Js
        def PyJsHoisted_toByteArray_(b64, this, arguments, var=var):
            var = Scope({'b64':b64, 'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'i', 'placeHoldersLen', 'lens', 'b64', 'curByte', 'arr', 'tmp', 'validLen'])
            pass
            var.put('lens', var.get('getLens')(var.get('b64')))
            var.put('validLen', var.get('lens').get('0'))
            var.put('placeHoldersLen', var.get('lens').get('1'))
            var.put('arr', var.get('Arr').create(var.get('_byteLength')(var.get('b64'), var.get('validLen'), var.get('placeHoldersLen'))))
            var.put('curByte', Js(0.0))
            var.put('len', ((var.get('validLen')-Js(4.0)) if (var.get('placeHoldersLen')>Js(0.0)) else var.get('validLen')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('len')):
                try:
                    var.put('tmp', ((((var.get('revLookup').get(var.get('b64').callprop('charCodeAt', var.get('i')))<<Js(18.0))|(var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(1.0))))<<Js(12.0)))|(var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(2.0))))<<Js(6.0)))|var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(3.0))))))
                    var.get('arr').put((var.put('curByte',Js(var.get('curByte').to_number())+Js(1))-Js(1)), ((var.get('tmp')>>Js(16.0))&Js(255)))
                    var.get('arr').put((var.put('curByte',Js(var.get('curByte').to_number())+Js(1))-Js(1)), ((var.get('tmp')>>Js(8.0))&Js(255)))
                    var.get('arr').put((var.put('curByte',Js(var.get('curByte').to_number())+Js(1))-Js(1)), (var.get('tmp')&Js(255)))
                finally:
                        var.put('i', Js(4.0), '+')
            if PyJsStrictEq(var.get('placeHoldersLen'),Js(2.0)):
                var.put('tmp', ((var.get('revLookup').get(var.get('b64').callprop('charCodeAt', var.get('i')))<<Js(2.0))|(var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(1.0))))>>Js(4.0))))
                var.get('arr').put((var.put('curByte',Js(var.get('curByte').to_number())+Js(1))-Js(1)), (var.get('tmp')&Js(255)))
            if PyJsStrictEq(var.get('placeHoldersLen'),Js(1.0)):
                var.put('tmp', (((var.get('revLookup').get(var.get('b64').callprop('charCodeAt', var.get('i')))<<Js(10.0))|(var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(1.0))))<<Js(4.0)))|(var.get('revLookup').get(var.get('b64').callprop('charCodeAt', (var.get('i')+Js(2.0))))>>Js(2.0))))
                var.get('arr').put((var.put('curByte',Js(var.get('curByte').to_number())+Js(1))-Js(1)), ((var.get('tmp')>>Js(8.0))&Js(255)))
                var.get('arr').put((var.put('curByte',Js(var.get('curByte').to_number())+Js(1))-Js(1)), (var.get('tmp')&Js(255)))
            return var.get('arr')
        PyJsHoisted_toByteArray_.func_name = 'toByteArray'
        var.put('toByteArray', PyJsHoisted_toByteArray_)
        @Js
        def PyJsHoisted_tripletToBase64_(num, this, arguments, var=var):
            var = Scope({'num':num, 'this':this, 'arguments':arguments}, var)
            var.registers(['num'])
            return (((var.get('lookup').get(((var.get('num')>>Js(18.0))&Js(63)))+var.get('lookup').get(((var.get('num')>>Js(12.0))&Js(63))))+var.get('lookup').get(((var.get('num')>>Js(6.0))&Js(63))))+var.get('lookup').get((var.get('num')&Js(63))))
        PyJsHoisted_tripletToBase64_.func_name = 'tripletToBase64'
        var.put('tripletToBase64', PyJsHoisted_tripletToBase64_)
        @Js
        def PyJsHoisted_encodeChunk_(uint8, start, end, this, arguments, var=var):
            var = Scope({'uint8':uint8, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
            var.registers(['uint8', 'i', 'output', 'start', 'tmp', 'end'])
            pass
            var.put('output', Js([]))
            #for JS loop
            var.put('i', var.get('start'))
            while (var.get('i')<var.get('end')):
                try:
                    var.put('tmp', ((((var.get('uint8').get(var.get('i'))<<Js(16.0))&Js(16711680))+((var.get('uint8').get((var.get('i')+Js(1.0)))<<Js(8.0))&Js(65280)))+(var.get('uint8').get((var.get('i')+Js(2.0)))&Js(255))))
                    var.get('output').callprop('push', var.get('tripletToBase64')(var.get('tmp')))
                finally:
                        var.put('i', Js(3.0), '+')
            return var.get('output').callprop('join', Js(''))
        PyJsHoisted_encodeChunk_.func_name = 'encodeChunk'
        var.put('encodeChunk', PyJsHoisted_encodeChunk_)
        @Js
        def PyJsHoisted_fromByteArray_(uint8, this, arguments, var=var):
            var = Scope({'uint8':uint8, 'this':this, 'arguments':arguments}, var)
            var.registers(['uint8', 'len', 'len2', 'i', 'maxChunkLength', 'tmp', 'parts', 'extraBytes'])
            pass
            var.put('len', var.get('uint8').get('length'))
            var.put('extraBytes', (var.get('len')%Js(3.0)))
            var.put('parts', Js([]))
            var.put('maxChunkLength', Js(16383.0))
            #for JS loop
            var.put('i', Js(0.0))
            var.put('len2', (var.get('len')-var.get('extraBytes')))
            while (var.get('i')<var.get('len2')):
                try:
                    var.get('parts').callprop('push', var.get('encodeChunk')(var.get('uint8'), var.get('i'), (var.get('len2') if ((var.get('i')+var.get('maxChunkLength'))>var.get('len2')) else (var.get('i')+var.get('maxChunkLength')))))
                finally:
                        var.put('i', var.get('maxChunkLength'), '+')
            if PyJsStrictEq(var.get('extraBytes'),Js(1.0)):
                var.put('tmp', var.get('uint8').get((var.get('len')-Js(1.0))))
                var.get('parts').callprop('push', ((var.get('lookup').get((var.get('tmp')>>Js(2.0)))+var.get('lookup').get(((var.get('tmp')<<Js(4.0))&Js(63))))+Js('==')))
            else:
                if PyJsStrictEq(var.get('extraBytes'),Js(2.0)):
                    var.put('tmp', ((var.get('uint8').get((var.get('len')-Js(2.0)))<<Js(8.0))+var.get('uint8').get((var.get('len')-Js(1.0)))))
                    var.get('parts').callprop('push', (((var.get('lookup').get((var.get('tmp')>>Js(10.0)))+var.get('lookup').get(((var.get('tmp')>>Js(4.0))&Js(63))))+var.get('lookup').get(((var.get('tmp')<<Js(2.0))&Js(63))))+Js('=')))
            return var.get('parts').callprop('join', Js(''))
        PyJsHoisted_fromByteArray_.func_name = 'fromByteArray'
        var.put('fromByteArray', PyJsHoisted_fromByteArray_)
        Js('use strict')
        var.get('exports').put('byteLength', var.get('byteLength'))
        var.get('exports').put('toByteArray', var.get('toByteArray'))
        var.get('exports').put('fromByteArray', var.get('fromByteArray'))
        var.put('lookup', Js([]))
        var.put('revLookup', Js([]))
        var.put('Arr', (var.get('Uint8Array') if PyJsStrictNeq(var.get('Uint8Array',throw=False).typeof(),Js('undefined')) else var.get('Array')))
        var.put('code', Js('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'))
        #for JS loop
        var.put('i', Js(0.0))
        var.put('len', var.get('code').get('length'))
        while (var.get('i')<var.get('len')):
            try:
                var.get('lookup').put(var.get('i'), var.get('code').get(var.get('i')))
                var.get('revLookup').put(var.get('code').callprop('charCodeAt', var.get('i')), var.get('i'))
            finally:
                    var.put('i',Js(var.get('i').to_number())+Js(1))
        var.get('revLookup').put(Js('-').callprop('charCodeAt', Js(0.0)), Js(62.0))
        var.get('revLookup').put(Js('_').callprop('charCodeAt', Js(0.0)), Js(63.0))
        pass
        pass
        pass
        pass
        pass
        pass
        pass
    PyJs_anonymous_3_._set_name('anonymous')
    @Js
    def PyJs_anonymous_4_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['REVERSE_TABLE', 'module', 'exports', 'require', 'INT_BITS', 'countTrailingZeros'])
        @Js
        def PyJsHoisted_countTrailingZeros_(v, this, arguments, var=var):
            var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
            var.registers(['c', 'v'])
            var.put('c', Js(32.0))
            var.put('v', (-var.get('v')), '&')
            if var.get('v'):
                (var.put('c',Js(var.get('c').to_number())-Js(1))+Js(1))
            if (var.get('v')&Js(65535)):
                var.put('c', Js(16.0), '-')
            if (var.get('v')&Js(16711935)):
                var.put('c', Js(8.0), '-')
            if (var.get('v')&Js(252645135)):
                var.put('c', Js(4.0), '-')
            if (var.get('v')&Js(858993459)):
                var.put('c', Js(2.0), '-')
            if (var.get('v')&Js(1431655765)):
                var.put('c', Js(1.0), '-')
            return var.get('c')
        PyJsHoisted_countTrailingZeros_.func_name = 'countTrailingZeros'
        var.put('countTrailingZeros', PyJsHoisted_countTrailingZeros_)
        Js('use strict')
        Js('use restrict')
        var.put('INT_BITS', Js(32.0))
        var.get('exports').put('INT_BITS', var.get('INT_BITS'))
        var.get('exports').put('INT_MAX', Js(2147483647))
        var.get('exports').put('INT_MIN', ((-Js(1.0))<<(var.get('INT_BITS')-Js(1.0))))
        @Js
        def PyJs_anonymous_5_(v, this, arguments, var=var):
            var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
            var.registers(['v'])
            return ((var.get('v')>Js(0.0))-(var.get('v')<Js(0.0)))
        PyJs_anonymous_5_._set_name('anonymous')
        var.get('exports').put('sign', PyJs_anonymous_5_)
        @Js
        def PyJs_anonymous_6_(v, this, arguments, var=var):
            var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
            var.registers(['v', 'mask'])
            var.put('mask', (var.get('v')>>(var.get('INT_BITS')-Js(1.0))))
            return ((var.get('v')^var.get('mask'))-var.get('mask'))
        PyJs_anonymous_6_._set_name('anonymous')
        var.get('exports').put('abs', PyJs_anonymous_6_)
        @Js
        def PyJs_anonymous_7_(x, y, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'this':this, 'arguments':arguments}, var)
            var.registers(['y', 'x'])
            return (var.get('y')^((var.get('x')^var.get('y'))&(-(var.get('x')<var.get('y')))))
        PyJs_anonymous_7_._set_name('anonymous')
        var.get('exports').put('min', PyJs_anonymous_7_)
        @Js
        def PyJs_anonymous_8_(x, y, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'this':this, 'arguments':arguments}, var)
            var.registers(['y', 'x'])
            return (var.get('x')^((var.get('x')^var.get('y'))&(-(var.get('x')<var.get('y')))))
        PyJs_anonymous_8_._set_name('anonymous')
        var.get('exports').put('max', PyJs_anonymous_8_)
        @Js
        def PyJs_anonymous_9_(v, this, arguments, var=var):
            var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
            var.registers(['v'])
            return ((var.get('v')&(var.get('v')-Js(1.0))).neg() and var.get('v').neg().neg())
        PyJs_anonymous_9_._set_name('anonymous')
        var.get('exports').put('isPow2', PyJs_anonymous_9_)
        @Js
        def PyJs_anonymous_10_(v, this, arguments, var=var):
            var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
            var.registers(['shift', 'v', 'r'])
            pass
            var.put('r', ((var.get('v')>Js(65535))<<Js(4.0)))
            var.put('v', var.get('r'), '>>>')
            var.put('shift', ((var.get('v')>Js(255))<<Js(3.0)))
            var.put('v', var.get('shift'), '>>>')
            var.put('r', var.get('shift'), '|')
            var.put('shift', ((var.get('v')>Js(15))<<Js(2.0)))
            var.put('v', var.get('shift'), '>>>')
            var.put('r', var.get('shift'), '|')
            var.put('shift', ((var.get('v')>Js(3))<<Js(1.0)))
            var.put('v', var.get('shift'), '>>>')
            var.put('r', var.get('shift'), '|')
            return (var.get('r')|(var.get('v')>>Js(1.0)))
        PyJs_anonymous_10_._set_name('anonymous')
        var.get('exports').put('log2', PyJs_anonymous_10_)
        @Js
        def PyJs_anonymous_11_(v, this, arguments, var=var):
            var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
            var.registers(['v'])
            def PyJs_LONG_12_(var=var):
                return (Js(9.0) if (var.get('v')>=Js(1000000000.0)) else (Js(8.0) if (var.get('v')>=Js(100000000.0)) else (Js(7.0) if (var.get('v')>=Js(10000000.0)) else (Js(6.0) if (var.get('v')>=Js(1000000.0)) else (Js(5.0) if (var.get('v')>=Js(100000.0)) else (Js(4.0) if (var.get('v')>=Js(10000.0)) else (Js(3.0) if (var.get('v')>=Js(1000.0)) else (Js(2.0) if (var.get('v')>=Js(100.0)) else (Js(1.0) if (var.get('v')>=Js(10.0)) else Js(0.0))))))))))
            return PyJs_LONG_12_()
        PyJs_anonymous_11_._set_name('anonymous')
        var.get('exports').put('log10', PyJs_anonymous_11_)
        @Js
        def PyJs_anonymous_13_(v, this, arguments, var=var):
            var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
            var.registers(['v'])
            var.put('v', (var.get('v')-(PyJsBshift(var.get('v'),Js(1.0))&Js(1431655765))))
            var.put('v', ((var.get('v')&Js(858993459))+(PyJsBshift(var.get('v'),Js(2.0))&Js(858993459))))
            return PyJsBshift((((var.get('v')+PyJsBshift(var.get('v'),Js(4.0)))&Js(252645135))*Js(16843009)),Js(24.0))
        PyJs_anonymous_13_._set_name('anonymous')
        var.get('exports').put('popCount', PyJs_anonymous_13_)
        pass
        var.get('exports').put('countTrailingZeros', var.get('countTrailingZeros'))
        @Js
        def PyJs_anonymous_14_(v, this, arguments, var=var):
            var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
            var.registers(['v'])
            var.put('v', PyJsStrictEq(var.get('v'),Js(0.0)), '+')
            var.put('v',Js(var.get('v').to_number())-Js(1))
            var.put('v', PyJsBshift(var.get('v'),Js(1.0)), '|')
            var.put('v', PyJsBshift(var.get('v'),Js(2.0)), '|')
            var.put('v', PyJsBshift(var.get('v'),Js(4.0)), '|')
            var.put('v', PyJsBshift(var.get('v'),Js(8.0)), '|')
            var.put('v', PyJsBshift(var.get('v'),Js(16.0)), '|')
            return (var.get('v')+Js(1.0))
        PyJs_anonymous_14_._set_name('anonymous')
        var.get('exports').put('nextPow2', PyJs_anonymous_14_)
        @Js
        def PyJs_anonymous_15_(v, this, arguments, var=var):
            var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
            var.registers(['v'])
            var.put('v', PyJsBshift(var.get('v'),Js(1.0)), '|')
            var.put('v', PyJsBshift(var.get('v'),Js(2.0)), '|')
            var.put('v', PyJsBshift(var.get('v'),Js(4.0)), '|')
            var.put('v', PyJsBshift(var.get('v'),Js(8.0)), '|')
            var.put('v', PyJsBshift(var.get('v'),Js(16.0)), '|')
            return (var.get('v')-PyJsBshift(var.get('v'),Js(1.0)))
        PyJs_anonymous_15_._set_name('anonymous')
        var.get('exports').put('prevPow2', PyJs_anonymous_15_)
        @Js
        def PyJs_anonymous_16_(v, this, arguments, var=var):
            var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
            var.registers(['v'])
            var.put('v', PyJsBshift(var.get('v'),Js(16.0)), '^')
            var.put('v', PyJsBshift(var.get('v'),Js(8.0)), '^')
            var.put('v', PyJsBshift(var.get('v'),Js(4.0)), '^')
            var.put('v', Js(15), '&')
            return (PyJsBshift(Js(27030),var.get('v'))&Js(1.0))
        PyJs_anonymous_16_._set_name('anonymous')
        var.get('exports').put('parity', PyJs_anonymous_16_)
        var.put('REVERSE_TABLE', var.get('Array').create(Js(256.0)))
        @Js
        def PyJs_anonymous_17_(tab, this, arguments, var=var):
            var = Scope({'tab':tab, 'this':this, 'arguments':arguments}, var)
            var.registers(['tab', 'i', 's', 'r', 'v'])
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<Js(256.0)):
                try:
                    var.put('v', var.get('i'))
                    var.put('r', var.get('i'))
                    var.put('s', Js(7.0))
                    #for JS loop
                    var.put('v', Js(1.0), '>>>')
                    while var.get('v'):
                        try:
                            var.put('r', Js(1.0), '<<')
                            var.put('r', (var.get('v')&Js(1.0)), '|')
                            var.put('s',Js(var.get('s').to_number())-Js(1))
                        finally:
                                var.put('v', Js(1.0), '>>>')
                    var.get('tab').put(var.get('i'), ((var.get('r')<<var.get('s'))&Js(255)))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
        PyJs_anonymous_17_._set_name('anonymous')
        PyJs_anonymous_17_(var.get('REVERSE_TABLE'))
        @Js
        def PyJs_anonymous_18_(v, this, arguments, var=var):
            var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
            var.registers(['v'])
            return ((((var.get('REVERSE_TABLE').get((var.get('v')&Js(255)))<<Js(24.0))|(var.get('REVERSE_TABLE').get((PyJsBshift(var.get('v'),Js(8.0))&Js(255)))<<Js(16.0)))|(var.get('REVERSE_TABLE').get((PyJsBshift(var.get('v'),Js(16.0))&Js(255)))<<Js(8.0)))|var.get('REVERSE_TABLE').get((PyJsBshift(var.get('v'),Js(24.0))&Js(255))))
        PyJs_anonymous_18_._set_name('anonymous')
        var.get('exports').put('reverse', PyJs_anonymous_18_)
        @Js
        def PyJs_anonymous_19_(x, y, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'this':this, 'arguments':arguments}, var)
            var.registers(['y', 'x'])
            var.put('x', Js(65535), '&')
            var.put('x', ((var.get('x')|(var.get('x')<<Js(8.0)))&Js(16711935)))
            var.put('x', ((var.get('x')|(var.get('x')<<Js(4.0)))&Js(252645135)))
            var.put('x', ((var.get('x')|(var.get('x')<<Js(2.0)))&Js(858993459)))
            var.put('x', ((var.get('x')|(var.get('x')<<Js(1.0)))&Js(1431655765)))
            var.put('y', Js(65535), '&')
            var.put('y', ((var.get('y')|(var.get('y')<<Js(8.0)))&Js(16711935)))
            var.put('y', ((var.get('y')|(var.get('y')<<Js(4.0)))&Js(252645135)))
            var.put('y', ((var.get('y')|(var.get('y')<<Js(2.0)))&Js(858993459)))
            var.put('y', ((var.get('y')|(var.get('y')<<Js(1.0)))&Js(1431655765)))
            return (var.get('x')|(var.get('y')<<Js(1.0)))
        PyJs_anonymous_19_._set_name('anonymous')
        var.get('exports').put('interleave2', PyJs_anonymous_19_)
        @Js
        def PyJs_anonymous_20_(v, n, this, arguments, var=var):
            var = Scope({'v':v, 'n':n, 'this':this, 'arguments':arguments}, var)
            var.registers(['n', 'v'])
            var.put('v', (PyJsBshift(var.get('v'),var.get('n'))&Js(1431655765)))
            var.put('v', ((var.get('v')|PyJsBshift(var.get('v'),Js(1.0)))&Js(858993459)))
            var.put('v', ((var.get('v')|PyJsBshift(var.get('v'),Js(2.0)))&Js(252645135)))
            var.put('v', ((var.get('v')|PyJsBshift(var.get('v'),Js(4.0)))&Js(16711935)))
            var.put('v', ((var.get('v')|PyJsBshift(var.get('v'),Js(16.0)))&Js(65535)))
            return ((var.get('v')<<Js(16.0))>>Js(16.0))
        PyJs_anonymous_20_._set_name('anonymous')
        var.get('exports').put('deinterleave2', PyJs_anonymous_20_)
        @Js
        def PyJs_anonymous_21_(x, y, z, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'z':z, 'this':this, 'arguments':arguments}, var)
            var.registers(['y', 'z', 'x'])
            var.put('x', Js(1023), '&')
            var.put('x', ((var.get('x')|(var.get('x')<<Js(16.0)))&Js(4278190335.0)))
            var.put('x', ((var.get('x')|(var.get('x')<<Js(8.0)))&Js(251719695.0)))
            var.put('x', ((var.get('x')|(var.get('x')<<Js(4.0)))&Js(3272356035.0)))
            var.put('x', ((var.get('x')|(var.get('x')<<Js(2.0)))&Js(1227133513.0)))
            var.put('y', Js(1023), '&')
            var.put('y', ((var.get('y')|(var.get('y')<<Js(16.0)))&Js(4278190335.0)))
            var.put('y', ((var.get('y')|(var.get('y')<<Js(8.0)))&Js(251719695.0)))
            var.put('y', ((var.get('y')|(var.get('y')<<Js(4.0)))&Js(3272356035.0)))
            var.put('y', ((var.get('y')|(var.get('y')<<Js(2.0)))&Js(1227133513.0)))
            var.put('x', (var.get('y')<<Js(1.0)), '|')
            var.put('z', Js(1023), '&')
            var.put('z', ((var.get('z')|(var.get('z')<<Js(16.0)))&Js(4278190335.0)))
            var.put('z', ((var.get('z')|(var.get('z')<<Js(8.0)))&Js(251719695.0)))
            var.put('z', ((var.get('z')|(var.get('z')<<Js(4.0)))&Js(3272356035.0)))
            var.put('z', ((var.get('z')|(var.get('z')<<Js(2.0)))&Js(1227133513.0)))
            return (var.get('x')|(var.get('z')<<Js(2.0)))
        PyJs_anonymous_21_._set_name('anonymous')
        var.get('exports').put('interleave3', PyJs_anonymous_21_)
        @Js
        def PyJs_anonymous_22_(v, n, this, arguments, var=var):
            var = Scope({'v':v, 'n':n, 'this':this, 'arguments':arguments}, var)
            var.registers(['n', 'v'])
            var.put('v', (PyJsBshift(var.get('v'),var.get('n'))&Js(1227133513.0)))
            var.put('v', ((var.get('v')|PyJsBshift(var.get('v'),Js(2.0)))&Js(3272356035.0)))
            var.put('v', ((var.get('v')|PyJsBshift(var.get('v'),Js(4.0)))&Js(251719695.0)))
            var.put('v', ((var.get('v')|PyJsBshift(var.get('v'),Js(8.0)))&Js(4278190335.0)))
            var.put('v', ((var.get('v')|PyJsBshift(var.get('v'),Js(16.0)))&Js(1023)))
            return ((var.get('v')<<Js(22.0))>>Js(22.0))
        PyJs_anonymous_22_._set_name('anonymous')
        var.get('exports').put('deinterleave3', PyJs_anonymous_22_)
        @Js
        def PyJs_anonymous_23_(v, this, arguments, var=var):
            var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
            var.registers(['t', 'v'])
            var.put('t', (var.get('v')|(var.get('v')-Js(1.0))))
            return ((var.get('t')+Js(1.0))|PyJsBshift((((~var.get('t'))&(-(~var.get('t'))))-Js(1.0)),(var.get('countTrailingZeros')(var.get('v'))+Js(1.0))))
        PyJs_anonymous_23_._set_name('anonymous')
        var.get('exports').put('nextCombination', PyJs_anonymous_23_)
    PyJs_anonymous_4_._set_name('anonymous')
    @Js
    def PyJs_anonymous_24_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['allocUnsafe', 'INVALID_BASE64_RE', 'fromObject', 'typedArraySupport', 'checked', 'swap', 'blitBuffer', 'hexWrite', 'MAX_ARGUMENTS_LENGTH', 'arrayIndexOf', 'bidirectionalIndexOf', 'checkOffset', 'base64', 'Buffer', 'slowToString', 'SlowBuffer', 'fromArrayBuffer', 'fromArrayLike', 'writeDouble', 'ieee754', 'checkInt', 'byteLength', 'hexSlice', 'utf16leToBytes', 'exports', 'K_MAX_LENGTH', 'base64clean', 'ucs2Write', 'base64ToBytes', 'utf8Slice', 'utf8Write', 'require', 'createBuffer', 'base64Write', 'writeFloat', 'latin1Write', 'alloc', 'asciiSlice', 'toHex', 'utf8ToBytes', 'from', 'utf16leSlice', 'module', 'checkIEEE754', 'fromString', 'assertSize', 'numberIsNaN', 'base64Slice', 'latin1Slice', 'isInstance', 'asciiToBytes', 'decodeCodePointsArray', 'asciiWrite'])
        @Js
        def PyJsHoisted_typedArraySupport_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['arr'])
            try:
                var.put('arr', var.get('Uint8Array').create(Js(1.0)))
                @Js
                def PyJs_foo_25_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'foo':PyJs_foo_25_}, var)
                    var.registers([])
                    return Js(42.0)
                PyJs_foo_25_._set_name('foo')
                var.get('arr').put('__proto__', Js({'__proto__':var.get('Uint8Array').get('prototype'),'foo':PyJs_foo_25_}))
                return PyJsStrictEq(var.get('arr').callprop('foo'),Js(42.0))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_29748330 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js(False)
                finally:
                    if PyJsHolder_65_29748330 is not None:
                        var.own['e'] = PyJsHolder_65_29748330
                    else:
                        del var.own['e']
                    del PyJsHolder_65_29748330
        PyJsHoisted_typedArraySupport_.func_name = 'typedArraySupport'
        var.put('typedArraySupport', PyJsHoisted_typedArraySupport_)
        @Js
        def PyJsHoisted_createBuffer_(length, this, arguments, var=var):
            var = Scope({'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 'buf'])
            if (var.get('length')>var.get('K_MAX_LENGTH')):
                PyJsTempException = JsToPyException(var.get('RangeError').create(((Js('The value "')+var.get('length'))+Js('" is invalid for option "size"'))))
                raise PyJsTempException
            var.put('buf', var.get('Uint8Array').create(var.get('length')))
            var.get('buf').put('__proto__', var.get('Buffer').get('prototype'))
            return var.get('buf')
        PyJsHoisted_createBuffer_.func_name = 'createBuffer'
        var.put('createBuffer', PyJsHoisted_createBuffer_)
        @Js
        def PyJsHoisted_Buffer_(arg, encodingOrOffset, length, this, arguments, var=var):
            var = Scope({'arg':arg, 'encodingOrOffset':encodingOrOffset, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 'arg', 'encodingOrOffset'])
            if PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('number')):
                if PyJsStrictEq(var.get('encodingOrOffset',throw=False).typeof(),Js('string')):
                    PyJsTempException = JsToPyException(var.get('TypeError').create(Js('The "string" argument must be of type string. Received type number')))
                    raise PyJsTempException
                return var.get('allocUnsafe')(var.get('arg'))
            return var.get('from')(var.get('arg'), var.get('encodingOrOffset'), var.get('length'))
        PyJsHoisted_Buffer_.func_name = 'Buffer'
        var.put('Buffer', PyJsHoisted_Buffer_)
        @Js
        def PyJsHoisted_from_(value, encodingOrOffset, length, this, arguments, var=var):
            var = Scope({'value':value, 'encodingOrOffset':encodingOrOffset, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['value', 'valueOf', 'b', 'encodingOrOffset', 'length'])
            if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('string')):
                return var.get('fromString')(var.get('value'), var.get('encodingOrOffset'))
            if var.get('ArrayBuffer').callprop('isView', var.get('value')):
                return var.get('fromArrayLike')(var.get('value'))
            if (var.get('value')==var.get(u"null")):
                PyJsTempException = JsToPyException(var.get('TypeError')(((Js('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ')+Js('or Array-like Object. Received type '))+(Js('undefined') if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value'))))))
                raise PyJsTempException
            if (var.get('isInstance')(var.get('value'), var.get('ArrayBuffer')) or (var.get('value') and var.get('isInstance')(var.get('value').get('buffer'), var.get('ArrayBuffer')))):
                return var.get('fromArrayBuffer')(var.get('value'), var.get('encodingOrOffset'), var.get('length'))
            if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('number')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('The "value" argument must not be of type number. Received type number')))
                raise PyJsTempException
            var.put('valueOf', (var.get('value').get('valueOf') and var.get('value').callprop('valueOf')))
            if ((var.get('valueOf')!=var.get(u"null")) and PyJsStrictNeq(var.get('valueOf'),var.get('value'))):
                return var.get('Buffer').callprop('from', var.get('valueOf'), var.get('encodingOrOffset'), var.get('length'))
            var.put('b', var.get('fromObject')(var.get('value')))
            if var.get('b'):
                return var.get('b')
            if ((PyJsStrictNeq(var.get('Symbol',throw=False).typeof(),Js('undefined')) and (var.get('Symbol').get('toPrimitive')!=var.get(u"null"))) and PyJsStrictEq(var.get('value').get(var.get('Symbol').get('toPrimitive')).typeof(),Js('function'))):
                return var.get('Buffer').callprop('from', var.get('value').callprop(var.get('Symbol').get('toPrimitive'), Js('string')), var.get('encodingOrOffset'), var.get('length'))
            PyJsTempException = JsToPyException(var.get('TypeError').create(((Js('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ')+Js('or Array-like Object. Received type '))+(Js('undefined') if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value'))))))
            raise PyJsTempException
        PyJsHoisted_from_.func_name = 'from'
        var.put('from', PyJsHoisted_from_)
        @Js
        def PyJsHoisted_assertSize_(size, this, arguments, var=var):
            var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
            var.registers(['size'])
            if PyJsStrictNeq(var.get('size',throw=False).typeof(),Js('number')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('"size" argument must be of type number')))
                raise PyJsTempException
            else:
                if (var.get('size')<Js(0.0)):
                    PyJsTempException = JsToPyException(var.get('RangeError').create(((Js('The value "')+var.get('size'))+Js('" is invalid for option "size"'))))
                    raise PyJsTempException
        PyJsHoisted_assertSize_.func_name = 'assertSize'
        var.put('assertSize', PyJsHoisted_assertSize_)
        @Js
        def PyJsHoisted_alloc_(size, fill, encoding, this, arguments, var=var):
            var = Scope({'size':size, 'fill':fill, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
            var.registers(['fill', 'size', 'encoding'])
            var.get('assertSize')(var.get('size'))
            if (var.get('size')<=Js(0.0)):
                return var.get('createBuffer')(var.get('size'))
            if PyJsStrictNeq(var.get('fill'),var.get('undefined')):
                return (var.get('createBuffer')(var.get('size')).callprop('fill', var.get('fill'), var.get('encoding')) if PyJsStrictEq(var.get('encoding',throw=False).typeof(),Js('string')) else var.get('createBuffer')(var.get('size')).callprop('fill', var.get('fill')))
            return var.get('createBuffer')(var.get('size'))
        PyJsHoisted_alloc_.func_name = 'alloc'
        var.put('alloc', PyJsHoisted_alloc_)
        @Js
        def PyJsHoisted_allocUnsafe_(size, this, arguments, var=var):
            var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
            var.registers(['size'])
            var.get('assertSize')(var.get('size'))
            return var.get('createBuffer')((Js(0.0) if (var.get('size')<Js(0.0)) else (var.get('checked')(var.get('size'))|Js(0.0))))
        PyJsHoisted_allocUnsafe_.func_name = 'allocUnsafe'
        var.put('allocUnsafe', PyJsHoisted_allocUnsafe_)
        @Js
        def PyJsHoisted_fromString_(string, encoding, this, arguments, var=var):
            var = Scope({'string':string, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
            var.registers(['string', 'encoding', 'buf', 'length', 'actual'])
            if (PyJsStrictNeq(var.get('encoding',throw=False).typeof(),Js('string')) or PyJsStrictEq(var.get('encoding'),Js(''))):
                var.put('encoding', Js('utf8'))
            if var.get('Buffer').callprop('isEncoding', var.get('encoding')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Unknown encoding: ')+var.get('encoding'))))
                raise PyJsTempException
            var.put('length', (var.get('byteLength')(var.get('string'), var.get('encoding'))|Js(0.0)))
            var.put('buf', var.get('createBuffer')(var.get('length')))
            var.put('actual', var.get('buf').callprop('write', var.get('string'), var.get('encoding')))
            if PyJsStrictNeq(var.get('actual'),var.get('length')):
                var.put('buf', var.get('buf').callprop('slice', Js(0.0), var.get('actual')))
            return var.get('buf')
        PyJsHoisted_fromString_.func_name = 'fromString'
        var.put('fromString', PyJsHoisted_fromString_)
        @Js
        def PyJsHoisted_fromArrayLike_(array, this, arguments, var=var):
            var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'length', 'array', 'buf'])
            var.put('length', (Js(0.0) if (var.get('array').get('length')<Js(0.0)) else (var.get('checked')(var.get('array').get('length'))|Js(0.0))))
            var.put('buf', var.get('createBuffer')(var.get('length')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('length')):
                try:
                    var.get('buf').put(var.get('i'), (var.get('array').get(var.get('i'))&Js(255.0)))
                finally:
                        var.put('i', Js(1.0), '+')
            return var.get('buf')
        PyJsHoisted_fromArrayLike_.func_name = 'fromArrayLike'
        var.put('fromArrayLike', PyJsHoisted_fromArrayLike_)
        @Js
        def PyJsHoisted_fromArrayBuffer_(array, byteOffset, length, this, arguments, var=var):
            var = Scope({'array':array, 'byteOffset':byteOffset, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 'array', 'byteOffset', 'buf'])
            if ((var.get('byteOffset')<Js(0.0)) or (var.get('array').get('byteLength')<var.get('byteOffset'))):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('"offset" is outside of buffer bounds')))
                raise PyJsTempException
            if (var.get('array').get('byteLength')<(var.get('byteOffset')+(var.get('length') or Js(0.0)))):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('"length" is outside of buffer bounds')))
                raise PyJsTempException
            pass
            if (PyJsStrictEq(var.get('byteOffset'),var.get('undefined')) and PyJsStrictEq(var.get('length'),var.get('undefined'))):
                var.put('buf', var.get('Uint8Array').create(var.get('array')))
            else:
                if PyJsStrictEq(var.get('length'),var.get('undefined')):
                    var.put('buf', var.get('Uint8Array').create(var.get('array'), var.get('byteOffset')))
                else:
                    var.put('buf', var.get('Uint8Array').create(var.get('array'), var.get('byteOffset'), var.get('length')))
            var.get('buf').put('__proto__', var.get('Buffer').get('prototype'))
            return var.get('buf')
        PyJsHoisted_fromArrayBuffer_.func_name = 'fromArrayBuffer'
        var.put('fromArrayBuffer', PyJsHoisted_fromArrayBuffer_)
        @Js
        def PyJsHoisted_fromObject_(obj, this, arguments, var=var):
            var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'obj', 'buf'])
            if var.get('Buffer').callprop('isBuffer', var.get('obj')):
                var.put('len', (var.get('checked')(var.get('obj').get('length'))|Js(0.0)))
                var.put('buf', var.get('createBuffer')(var.get('len')))
                if PyJsStrictEq(var.get('buf').get('length'),Js(0.0)):
                    return var.get('buf')
                var.get('obj').callprop('copy', var.get('buf'), Js(0.0), Js(0.0), var.get('len'))
                return var.get('buf')
            if PyJsStrictNeq(var.get('obj').get('length'),var.get('undefined')):
                if (PyJsStrictNeq(var.get('obj').get('length').typeof(),Js('number')) or var.get('numberIsNaN')(var.get('obj').get('length'))):
                    return var.get('createBuffer')(Js(0.0))
                return var.get('fromArrayLike')(var.get('obj'))
            if (PyJsStrictEq(var.get('obj').get('type'),Js('Buffer')) and var.get('Array').callprop('isArray', var.get('obj').get('data'))):
                return var.get('fromArrayLike')(var.get('obj').get('data'))
        PyJsHoisted_fromObject_.func_name = 'fromObject'
        var.put('fromObject', PyJsHoisted_fromObject_)
        @Js
        def PyJsHoisted_checked_(length, this, arguments, var=var):
            var = Scope({'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['length'])
            if (var.get('length')>=var.get('K_MAX_LENGTH')):
                PyJsTempException = JsToPyException(var.get('RangeError').create((((Js('Attempt to allocate Buffer larger than maximum ')+Js('size: 0x'))+var.get('K_MAX_LENGTH').callprop('toString', Js(16.0)))+Js(' bytes'))))
                raise PyJsTempException
            return (var.get('length')|Js(0.0))
        PyJsHoisted_checked_.func_name = 'checked'
        var.put('checked', PyJsHoisted_checked_)
        @Js
        def PyJsHoisted_SlowBuffer_(length, this, arguments, var=var):
            var = Scope({'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['length'])
            if ((+var.get('length'))!=var.get('length')):
                var.put('length', Js(0.0))
            return var.get('Buffer').callprop('alloc', (+var.get('length')))
        PyJsHoisted_SlowBuffer_.func_name = 'SlowBuffer'
        var.put('SlowBuffer', PyJsHoisted_SlowBuffer_)
        @Js
        def PyJsHoisted_byteLength_(string, encoding, this, arguments, var=var):
            var = Scope({'string':string, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'mustMatch', 'loweredCase', 'string', 'encoding'])
            if var.get('Buffer').callprop('isBuffer', var.get('string')):
                return var.get('string').get('length')
            if (var.get('ArrayBuffer').callprop('isView', var.get('string')) or var.get('isInstance')(var.get('string'), var.get('ArrayBuffer'))):
                return var.get('string').get('byteLength')
            if PyJsStrictNeq(var.get('string',throw=False).typeof(),Js('string')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(((Js('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ')+Js('Received type '))+(Js('undefined') if PyJsStrictEq(var.get('string',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('string'))))))
                raise PyJsTempException
            var.put('len', var.get('string').get('length'))
            var.put('mustMatch', ((var.get('arguments').get('length')>Js(2.0)) and PyJsStrictEq(var.get('arguments').get('2'),Js(True))))
            if (var.get('mustMatch').neg() and PyJsStrictEq(var.get('len'),Js(0.0))):
                return Js(0.0)
            var.put('loweredCase', Js(False))
            #for JS loop
            
            while 1:
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('encoding'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ascii')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('latin1')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('binary')):
                        SWITCHED = True
                        return var.get('len')
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf8')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-8')):
                        SWITCHED = True
                        return var.get('utf8ToBytes')(var.get('string')).get('length')
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs2')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs-2')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf16le')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-16le')):
                        SWITCHED = True
                        return (var.get('len')*Js(2.0))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('hex')):
                        SWITCHED = True
                        return PyJsBshift(var.get('len'),Js(1.0))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('base64')):
                        SWITCHED = True
                        return var.get('base64ToBytes')(var.get('string')).get('length')
                    if True:
                        SWITCHED = True
                        if var.get('loweredCase'):
                            return ((-Js(1.0)) if var.get('mustMatch') else var.get('utf8ToBytes')(var.get('string')).get('length'))
                        var.put('encoding', (Js('')+var.get('encoding')).callprop('toLowerCase'))
                        var.put('loweredCase', Js(True))
                    SWITCHED = True
                    break
            
        PyJsHoisted_byteLength_.func_name = 'byteLength'
        var.put('byteLength', PyJsHoisted_byteLength_)
        @Js
        def PyJsHoisted_slowToString_(encoding, start, end, this, arguments, var=var):
            var = Scope({'encoding':encoding, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
            var.registers(['end', 'encoding', 'start', 'loweredCase'])
            var.put('loweredCase', Js(False))
            if (PyJsStrictEq(var.get('start'),var.get('undefined')) or (var.get('start')<Js(0.0))):
                var.put('start', Js(0.0))
            if (var.get('start')>var.get(u"this").get('length')):
                return Js('')
            if (PyJsStrictEq(var.get('end'),var.get('undefined')) or (var.get('end')>var.get(u"this").get('length'))):
                var.put('end', var.get(u"this").get('length'))
            if (var.get('end')<=Js(0.0)):
                return Js('')
            var.put('end', Js(0.0), '>>>')
            var.put('start', Js(0.0), '>>>')
            if (var.get('end')<=var.get('start')):
                return Js('')
            if var.get('encoding').neg():
                var.put('encoding', Js('utf8'))
            while Js(True):
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('encoding'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('hex')):
                        SWITCHED = True
                        return var.get('hexSlice')(var.get(u"this"), var.get('start'), var.get('end'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf8')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-8')):
                        SWITCHED = True
                        return var.get('utf8Slice')(var.get(u"this"), var.get('start'), var.get('end'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ascii')):
                        SWITCHED = True
                        return var.get('asciiSlice')(var.get(u"this"), var.get('start'), var.get('end'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('latin1')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('binary')):
                        SWITCHED = True
                        return var.get('latin1Slice')(var.get(u"this"), var.get('start'), var.get('end'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('base64')):
                        SWITCHED = True
                        return var.get('base64Slice')(var.get(u"this"), var.get('start'), var.get('end'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs2')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs-2')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf16le')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-16le')):
                        SWITCHED = True
                        return var.get('utf16leSlice')(var.get(u"this"), var.get('start'), var.get('end'))
                    if True:
                        SWITCHED = True
                        if var.get('loweredCase'):
                            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Unknown encoding: ')+var.get('encoding'))))
                            raise PyJsTempException
                        var.put('encoding', (var.get('encoding')+Js('')).callprop('toLowerCase'))
                        var.put('loweredCase', Js(True))
                    SWITCHED = True
                    break
        PyJsHoisted_slowToString_.func_name = 'slowToString'
        var.put('slowToString', PyJsHoisted_slowToString_)
        @Js
        def PyJsHoisted_swap_(b, n, m, this, arguments, var=var):
            var = Scope({'b':b, 'n':n, 'm':m, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'm', 'b', 'n'])
            var.put('i', var.get('b').get(var.get('n')))
            var.get('b').put(var.get('n'), var.get('b').get(var.get('m')))
            var.get('b').put(var.get('m'), var.get('i'))
        PyJsHoisted_swap_.func_name = 'swap'
        var.put('swap', PyJsHoisted_swap_)
        @Js
        def PyJsHoisted_bidirectionalIndexOf_(buffer, val, byteOffset, encoding, dir, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'val':val, 'byteOffset':byteOffset, 'encoding':encoding, 'dir':dir, 'this':this, 'arguments':arguments}, var)
            var.registers(['dir', 'byteOffset', 'buffer', 'encoding', 'val'])
            if PyJsStrictEq(var.get('buffer').get('length'),Js(0.0)):
                return (-Js(1.0))
            if PyJsStrictEq(var.get('byteOffset',throw=False).typeof(),Js('string')):
                var.put('encoding', var.get('byteOffset'))
                var.put('byteOffset', Js(0.0))
            else:
                if (var.get('byteOffset')>Js(2147483647)):
                    var.put('byteOffset', Js(2147483647))
                else:
                    if (var.get('byteOffset')<(-Js(2147483648))):
                        var.put('byteOffset', (-Js(2147483648)))
            var.put('byteOffset', (+var.get('byteOffset')))
            if var.get('numberIsNaN')(var.get('byteOffset')):
                var.put('byteOffset', (Js(0.0) if var.get('dir') else (var.get('buffer').get('length')-Js(1.0))))
            if (var.get('byteOffset')<Js(0.0)):
                var.put('byteOffset', (var.get('buffer').get('length')+var.get('byteOffset')))
            if (var.get('byteOffset')>=var.get('buffer').get('length')):
                if var.get('dir'):
                    return (-Js(1.0))
                else:
                    var.put('byteOffset', (var.get('buffer').get('length')-Js(1.0)))
            else:
                if (var.get('byteOffset')<Js(0.0)):
                    if var.get('dir'):
                        var.put('byteOffset', Js(0.0))
                    else:
                        return (-Js(1.0))
            if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('string')):
                var.put('val', var.get('Buffer').callprop('from', var.get('val'), var.get('encoding')))
            if var.get('Buffer').callprop('isBuffer', var.get('val')):
                if PyJsStrictEq(var.get('val').get('length'),Js(0.0)):
                    return (-Js(1.0))
                return var.get('arrayIndexOf')(var.get('buffer'), var.get('val'), var.get('byteOffset'), var.get('encoding'), var.get('dir'))
            else:
                if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('number')):
                    var.put('val', (var.get('val')&Js(255)))
                    if PyJsStrictEq(var.get('Uint8Array').get('prototype').get('indexOf').typeof(),Js('function')):
                        if var.get('dir'):
                            return var.get('Uint8Array').get('prototype').get('indexOf').callprop('call', var.get('buffer'), var.get('val'), var.get('byteOffset'))
                        else:
                            return var.get('Uint8Array').get('prototype').get('lastIndexOf').callprop('call', var.get('buffer'), var.get('val'), var.get('byteOffset'))
                    return var.get('arrayIndexOf')(var.get('buffer'), Js([var.get('val')]), var.get('byteOffset'), var.get('encoding'), var.get('dir'))
            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('val must be string, number or Buffer')))
            raise PyJsTempException
        PyJsHoisted_bidirectionalIndexOf_.func_name = 'bidirectionalIndexOf'
        var.put('bidirectionalIndexOf', PyJsHoisted_bidirectionalIndexOf_)
        @Js
        def PyJsHoisted_arrayIndexOf_(arr, val, byteOffset, encoding, dir, this, arguments, var=var):
            var = Scope({'arr':arr, 'val':val, 'byteOffset':byteOffset, 'encoding':encoding, 'dir':dir, 'this':this, 'arguments':arguments}, var)
            var.registers(['valLength', 'i', 'dir', 'found', 'byteOffset', 'val', 'indexSize', 'arr', 'j', 'read', 'encoding', 'foundIndex', 'arrLength'])
            @Js
            def PyJsHoisted_read_(buf, i, this, arguments, var=var):
                var = Scope({'buf':buf, 'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i', 'buf'])
                if PyJsStrictEq(var.get('indexSize'),Js(1.0)):
                    return var.get('buf').get(var.get('i'))
                else:
                    return var.get('buf').callprop('readUInt16BE', (var.get('i')*var.get('indexSize')))
            PyJsHoisted_read_.func_name = 'read'
            var.put('read', PyJsHoisted_read_)
            var.put('indexSize', Js(1.0))
            var.put('arrLength', var.get('arr').get('length'))
            var.put('valLength', var.get('val').get('length'))
            if PyJsStrictNeq(var.get('encoding'),var.get('undefined')):
                var.put('encoding', var.get('String')(var.get('encoding')).callprop('toLowerCase'))
                if (((PyJsStrictEq(var.get('encoding'),Js('ucs2')) or PyJsStrictEq(var.get('encoding'),Js('ucs-2'))) or PyJsStrictEq(var.get('encoding'),Js('utf16le'))) or PyJsStrictEq(var.get('encoding'),Js('utf-16le'))):
                    if ((var.get('arr').get('length')<Js(2.0)) or (var.get('val').get('length')<Js(2.0))):
                        return (-Js(1.0))
                    var.put('indexSize', Js(2.0))
                    var.put('arrLength', Js(2.0), '/')
                    var.put('valLength', Js(2.0), '/')
                    var.put('byteOffset', Js(2.0), '/')
            pass
            pass
            if var.get('dir'):
                var.put('foundIndex', (-Js(1.0)))
                #for JS loop
                var.put('i', var.get('byteOffset'))
                while (var.get('i')<var.get('arrLength')):
                    try:
                        if PyJsStrictEq(var.get('read')(var.get('arr'), var.get('i')),var.get('read')(var.get('val'), (Js(0.0) if PyJsStrictEq(var.get('foundIndex'),(-Js(1.0))) else (var.get('i')-var.get('foundIndex'))))):
                            if PyJsStrictEq(var.get('foundIndex'),(-Js(1.0))):
                                var.put('foundIndex', var.get('i'))
                            if PyJsStrictEq(((var.get('i')-var.get('foundIndex'))+Js(1.0)),var.get('valLength')):
                                return (var.get('foundIndex')*var.get('indexSize'))
                        else:
                            if PyJsStrictNeq(var.get('foundIndex'),(-Js(1.0))):
                                var.put('i', (var.get('i')-var.get('foundIndex')), '-')
                            var.put('foundIndex', (-Js(1.0)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            else:
                if ((var.get('byteOffset')+var.get('valLength'))>var.get('arrLength')):
                    var.put('byteOffset', (var.get('arrLength')-var.get('valLength')))
                #for JS loop
                var.put('i', var.get('byteOffset'))
                while (var.get('i')>=Js(0.0)):
                    try:
                        var.put('found', Js(True))
                        #for JS loop
                        var.put('j', Js(0.0))
                        while (var.get('j')<var.get('valLength')):
                            try:
                                if PyJsStrictNeq(var.get('read')(var.get('arr'), (var.get('i')+var.get('j'))),var.get('read')(var.get('val'), var.get('j'))):
                                    var.put('found', Js(False))
                                    break
                            finally:
                                    (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                        if var.get('found'):
                            return var.get('i')
                    finally:
                            (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
            return (-Js(1.0))
        PyJsHoisted_arrayIndexOf_.func_name = 'arrayIndexOf'
        var.put('arrayIndexOf', PyJsHoisted_arrayIndexOf_)
        @Js
        def PyJsHoisted_hexWrite_(buf, string, offset, length, this, arguments, var=var):
            var = Scope({'buf':buf, 'string':string, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'offset', 'parsed', 'strLen', 'string', 'remaining', 'buf', 'length'])
            var.put('offset', (var.get('Number')(var.get('offset')) or Js(0.0)))
            var.put('remaining', (var.get('buf').get('length')-var.get('offset')))
            if var.get('length').neg():
                var.put('length', var.get('remaining'))
            else:
                var.put('length', var.get('Number')(var.get('length')))
                if (var.get('length')>var.get('remaining')):
                    var.put('length', var.get('remaining'))
            var.put('strLen', var.get('string').get('length'))
            if (var.get('length')>(var.get('strLen')/Js(2.0))):
                var.put('length', (var.get('strLen')/Js(2.0)))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('length')):
                try:
                    var.put('parsed', var.get('parseInt')(var.get('string').callprop('substr', (var.get('i')*Js(2.0)), Js(2.0)), Js(16.0)))
                    if var.get('numberIsNaN')(var.get('parsed')):
                        return var.get('i')
                    var.get('buf').put((var.get('offset')+var.get('i')), var.get('parsed'))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('i')
        PyJsHoisted_hexWrite_.func_name = 'hexWrite'
        var.put('hexWrite', PyJsHoisted_hexWrite_)
        @Js
        def PyJsHoisted_utf8Write_(buf, string, offset, length, this, arguments, var=var):
            var = Scope({'buf':buf, 'string':string, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['offset', 'length', 'string', 'buf'])
            return var.get('blitBuffer')(var.get('utf8ToBytes')(var.get('string'), (var.get('buf').get('length')-var.get('offset'))), var.get('buf'), var.get('offset'), var.get('length'))
        PyJsHoisted_utf8Write_.func_name = 'utf8Write'
        var.put('utf8Write', PyJsHoisted_utf8Write_)
        @Js
        def PyJsHoisted_asciiWrite_(buf, string, offset, length, this, arguments, var=var):
            var = Scope({'buf':buf, 'string':string, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['offset', 'length', 'string', 'buf'])
            return var.get('blitBuffer')(var.get('asciiToBytes')(var.get('string')), var.get('buf'), var.get('offset'), var.get('length'))
        PyJsHoisted_asciiWrite_.func_name = 'asciiWrite'
        var.put('asciiWrite', PyJsHoisted_asciiWrite_)
        @Js
        def PyJsHoisted_latin1Write_(buf, string, offset, length, this, arguments, var=var):
            var = Scope({'buf':buf, 'string':string, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['offset', 'length', 'string', 'buf'])
            return var.get('asciiWrite')(var.get('buf'), var.get('string'), var.get('offset'), var.get('length'))
        PyJsHoisted_latin1Write_.func_name = 'latin1Write'
        var.put('latin1Write', PyJsHoisted_latin1Write_)
        @Js
        def PyJsHoisted_base64Write_(buf, string, offset, length, this, arguments, var=var):
            var = Scope({'buf':buf, 'string':string, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['offset', 'length', 'string', 'buf'])
            return var.get('blitBuffer')(var.get('base64ToBytes')(var.get('string')), var.get('buf'), var.get('offset'), var.get('length'))
        PyJsHoisted_base64Write_.func_name = 'base64Write'
        var.put('base64Write', PyJsHoisted_base64Write_)
        @Js
        def PyJsHoisted_ucs2Write_(buf, string, offset, length, this, arguments, var=var):
            var = Scope({'buf':buf, 'string':string, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['offset', 'length', 'string', 'buf'])
            return var.get('blitBuffer')(var.get('utf16leToBytes')(var.get('string'), (var.get('buf').get('length')-var.get('offset'))), var.get('buf'), var.get('offset'), var.get('length'))
        PyJsHoisted_ucs2Write_.func_name = 'ucs2Write'
        var.put('ucs2Write', PyJsHoisted_ucs2Write_)
        @Js
        def PyJsHoisted_base64Slice_(buf, start, end, this, arguments, var=var):
            var = Scope({'buf':buf, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
            var.registers(['end', 'start', 'buf'])
            if (PyJsStrictEq(var.get('start'),Js(0.0)) and PyJsStrictEq(var.get('end'),var.get('buf').get('length'))):
                return var.get('base64').callprop('fromByteArray', var.get('buf'))
            else:
                return var.get('base64').callprop('fromByteArray', var.get('buf').callprop('slice', var.get('start'), var.get('end')))
        PyJsHoisted_base64Slice_.func_name = 'base64Slice'
        var.put('base64Slice', PyJsHoisted_base64Slice_)
        @Js
        def PyJsHoisted_utf8Slice_(buf, start, end, this, arguments, var=var):
            var = Scope({'buf':buf, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
            var.registers(['thirdByte', 'i', 'secondByte', 'firstByte', 'bytesPerSequence', 'start', 'tempCodePoint', 'buf', 'fourthByte', 'end', 'codePoint', 'res'])
            var.put('end', var.get('Math').callprop('min', var.get('buf').get('length'), var.get('end')))
            var.put('res', Js([]))
            var.put('i', var.get('start'))
            while (var.get('i')<var.get('end')):
                var.put('firstByte', var.get('buf').get(var.get('i')))
                var.put('codePoint', var.get(u"null"))
                var.put('bytesPerSequence', (Js(4.0) if (var.get('firstByte')>Js(239)) else (Js(3.0) if (var.get('firstByte')>Js(223)) else (Js(2.0) if (var.get('firstByte')>Js(191)) else Js(1.0)))))
                if ((var.get('i')+var.get('bytesPerSequence'))<=var.get('end')):
                    pass
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('bytesPerSequence'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                            SWITCHED = True
                            if (var.get('firstByte')<Js(128)):
                                var.put('codePoint', var.get('firstByte'))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                            SWITCHED = True
                            var.put('secondByte', var.get('buf').get((var.get('i')+Js(1.0))))
                            if PyJsStrictEq((var.get('secondByte')&Js(192)),Js(128)):
                                var.put('tempCodePoint', (((var.get('firstByte')&Js(31))<<Js(6))|(var.get('secondByte')&Js(63))))
                                if (var.get('tempCodePoint')>Js(127)):
                                    var.put('codePoint', var.get('tempCodePoint'))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                            SWITCHED = True
                            var.put('secondByte', var.get('buf').get((var.get('i')+Js(1.0))))
                            var.put('thirdByte', var.get('buf').get((var.get('i')+Js(2.0))))
                            if (PyJsStrictEq((var.get('secondByte')&Js(192)),Js(128)) and PyJsStrictEq((var.get('thirdByte')&Js(192)),Js(128))):
                                var.put('tempCodePoint', ((((var.get('firstByte')&Js(15))<<Js(12))|((var.get('secondByte')&Js(63))<<Js(6)))|(var.get('thirdByte')&Js(63))))
                                if ((var.get('tempCodePoint')>Js(2047)) and ((var.get('tempCodePoint')<Js(55296)) or (var.get('tempCodePoint')>Js(57343)))):
                                    var.put('codePoint', var.get('tempCodePoint'))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                            SWITCHED = True
                            var.put('secondByte', var.get('buf').get((var.get('i')+Js(1.0))))
                            var.put('thirdByte', var.get('buf').get((var.get('i')+Js(2.0))))
                            var.put('fourthByte', var.get('buf').get((var.get('i')+Js(3.0))))
                            if ((PyJsStrictEq((var.get('secondByte')&Js(192)),Js(128)) and PyJsStrictEq((var.get('thirdByte')&Js(192)),Js(128))) and PyJsStrictEq((var.get('fourthByte')&Js(192)),Js(128))):
                                var.put('tempCodePoint', (((((var.get('firstByte')&Js(15))<<Js(18))|((var.get('secondByte')&Js(63))<<Js(12)))|((var.get('thirdByte')&Js(63))<<Js(6)))|(var.get('fourthByte')&Js(63))))
                                if ((var.get('tempCodePoint')>Js(65535)) and (var.get('tempCodePoint')<Js(1114112))):
                                    var.put('codePoint', var.get('tempCodePoint'))
                        SWITCHED = True
                        break
                if PyJsStrictEq(var.get('codePoint'),var.get(u"null")):
                    var.put('codePoint', Js(65533))
                    var.put('bytesPerSequence', Js(1.0))
                else:
                    if (var.get('codePoint')>Js(65535)):
                        var.put('codePoint', Js(65536), '-')
                        var.get('res').callprop('push', ((PyJsBshift(var.get('codePoint'),Js(10.0))&Js(1023))|Js(55296)))
                        var.put('codePoint', (Js(56320)|(var.get('codePoint')&Js(1023))))
                var.get('res').callprop('push', var.get('codePoint'))
                var.put('i', var.get('bytesPerSequence'), '+')
            return var.get('decodeCodePointsArray')(var.get('res'))
        PyJsHoisted_utf8Slice_.func_name = 'utf8Slice'
        var.put('utf8Slice', PyJsHoisted_utf8Slice_)
        @Js
        def PyJsHoisted_decodeCodePointsArray_(codePoints, this, arguments, var=var):
            var = Scope({'codePoints':codePoints, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'len', 'codePoints', 'res'])
            var.put('len', var.get('codePoints').get('length'))
            if (var.get('len')<=var.get('MAX_ARGUMENTS_LENGTH')):
                return var.get('String').get('fromCharCode').callprop('apply', var.get('String'), var.get('codePoints'))
            var.put('res', Js(''))
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('len')):
                var.put('res', var.get('String').get('fromCharCode').callprop('apply', var.get('String'), var.get('codePoints').callprop('slice', var.get('i'), var.put('i', var.get('MAX_ARGUMENTS_LENGTH'), '+'))), '+')
            return var.get('res')
        PyJsHoisted_decodeCodePointsArray_.func_name = 'decodeCodePointsArray'
        var.put('decodeCodePointsArray', PyJsHoisted_decodeCodePointsArray_)
        @Js
        def PyJsHoisted_asciiSlice_(buf, start, end, this, arguments, var=var):
            var = Scope({'buf':buf, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
            var.registers(['ret', 'i', 'start', 'buf', 'end'])
            var.put('ret', Js(''))
            var.put('end', var.get('Math').callprop('min', var.get('buf').get('length'), var.get('end')))
            #for JS loop
            var.put('i', var.get('start'))
            while (var.get('i')<var.get('end')):
                try:
                    var.put('ret', var.get('String').callprop('fromCharCode', (var.get('buf').get(var.get('i'))&Js(127))), '+')
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('ret')
        PyJsHoisted_asciiSlice_.func_name = 'asciiSlice'
        var.put('asciiSlice', PyJsHoisted_asciiSlice_)
        @Js
        def PyJsHoisted_latin1Slice_(buf, start, end, this, arguments, var=var):
            var = Scope({'buf':buf, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
            var.registers(['ret', 'i', 'start', 'buf', 'end'])
            var.put('ret', Js(''))
            var.put('end', var.get('Math').callprop('min', var.get('buf').get('length'), var.get('end')))
            #for JS loop
            var.put('i', var.get('start'))
            while (var.get('i')<var.get('end')):
                try:
                    var.put('ret', var.get('String').callprop('fromCharCode', var.get('buf').get(var.get('i'))), '+')
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('ret')
        PyJsHoisted_latin1Slice_.func_name = 'latin1Slice'
        var.put('latin1Slice', PyJsHoisted_latin1Slice_)
        @Js
        def PyJsHoisted_hexSlice_(buf, start, end, this, arguments, var=var):
            var = Scope({'buf':buf, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'i', 'start', 'buf', 'end', 'out'])
            var.put('len', var.get('buf').get('length'))
            if (var.get('start').neg() or (var.get('start')<Js(0.0))):
                var.put('start', Js(0.0))
            if ((var.get('end').neg() or (var.get('end')<Js(0.0))) or (var.get('end')>var.get('len'))):
                var.put('end', var.get('len'))
            var.put('out', Js(''))
            #for JS loop
            var.put('i', var.get('start'))
            while (var.get('i')<var.get('end')):
                try:
                    var.put('out', var.get('toHex')(var.get('buf').get(var.get('i'))), '+')
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('out')
        PyJsHoisted_hexSlice_.func_name = 'hexSlice'
        var.put('hexSlice', PyJsHoisted_hexSlice_)
        @Js
        def PyJsHoisted_utf16leSlice_(buf, start, end, this, arguments, var=var):
            var = Scope({'buf':buf, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'bytes', 'start', 'buf', 'end', 'res'])
            var.put('bytes', var.get('buf').callprop('slice', var.get('start'), var.get('end')))
            var.put('res', Js(''))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('bytes').get('length')):
                try:
                    var.put('res', var.get('String').callprop('fromCharCode', (var.get('bytes').get(var.get('i'))+(var.get('bytes').get((var.get('i')+Js(1.0)))*Js(256.0)))), '+')
                finally:
                        var.put('i', Js(2.0), '+')
            return var.get('res')
        PyJsHoisted_utf16leSlice_.func_name = 'utf16leSlice'
        var.put('utf16leSlice', PyJsHoisted_utf16leSlice_)
        @Js
        def PyJsHoisted_checkOffset_(offset, ext, length, this, arguments, var=var):
            var = Scope({'offset':offset, 'ext':ext, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['offset', 'length', 'ext'])
            if (PyJsStrictNeq((var.get('offset')%Js(1.0)),Js(0.0)) or (var.get('offset')<Js(0.0))):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('offset is not uint')))
                raise PyJsTempException
            if ((var.get('offset')+var.get('ext'))>var.get('length')):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Trying to access beyond buffer length')))
                raise PyJsTempException
        PyJsHoisted_checkOffset_.func_name = 'checkOffset'
        var.put('checkOffset', PyJsHoisted_checkOffset_)
        @Js
        def PyJsHoisted_checkInt_(buf, value, offset, ext, max, min, this, arguments, var=var):
            var = Scope({'buf':buf, 'value':value, 'offset':offset, 'ext':ext, 'max':max, 'min':min, 'this':this, 'arguments':arguments}, var)
            var.registers(['max', 'min', 'value', 'offset', 'buf', 'ext'])
            if var.get('Buffer').callprop('isBuffer', var.get('buf')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('"buffer" argument must be a Buffer instance')))
                raise PyJsTempException
            if ((var.get('value')>var.get('max')) or (var.get('value')<var.get('min'))):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('"value" argument is out of bounds')))
                raise PyJsTempException
            if ((var.get('offset')+var.get('ext'))>var.get('buf').get('length')):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Index out of range')))
                raise PyJsTempException
        PyJsHoisted_checkInt_.func_name = 'checkInt'
        var.put('checkInt', PyJsHoisted_checkInt_)
        @Js
        def PyJsHoisted_checkIEEE754_(buf, value, offset, ext, max, min, this, arguments, var=var):
            var = Scope({'buf':buf, 'value':value, 'offset':offset, 'ext':ext, 'max':max, 'min':min, 'this':this, 'arguments':arguments}, var)
            var.registers(['max', 'min', 'value', 'offset', 'buf', 'ext'])
            if ((var.get('offset')+var.get('ext'))>var.get('buf').get('length')):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Index out of range')))
                raise PyJsTempException
            if (var.get('offset')<Js(0.0)):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Index out of range')))
                raise PyJsTempException
        PyJsHoisted_checkIEEE754_.func_name = 'checkIEEE754'
        var.put('checkIEEE754', PyJsHoisted_checkIEEE754_)
        @Js
        def PyJsHoisted_writeFloat_(buf, value, offset, littleEndian, noAssert, this, arguments, var=var):
            var = Scope({'buf':buf, 'value':value, 'offset':offset, 'littleEndian':littleEndian, 'noAssert':noAssert, 'this':this, 'arguments':arguments}, var)
            var.registers(['littleEndian', 'value', 'offset', 'noAssert', 'buf'])
            var.put('value', (+var.get('value')))
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkIEEE754')(var.get('buf'), var.get('value'), var.get('offset'), Js(4.0), Js(3.4028234663852886e+38), (-Js(3.4028234663852886e+38)))
            var.get('ieee754').callprop('write', var.get('buf'), var.get('value'), var.get('offset'), var.get('littleEndian'), Js(23.0), Js(4.0))
            return (var.get('offset')+Js(4.0))
        PyJsHoisted_writeFloat_.func_name = 'writeFloat'
        var.put('writeFloat', PyJsHoisted_writeFloat_)
        @Js
        def PyJsHoisted_writeDouble_(buf, value, offset, littleEndian, noAssert, this, arguments, var=var):
            var = Scope({'buf':buf, 'value':value, 'offset':offset, 'littleEndian':littleEndian, 'noAssert':noAssert, 'this':this, 'arguments':arguments}, var)
            var.registers(['littleEndian', 'value', 'offset', 'noAssert', 'buf'])
            var.put('value', (+var.get('value')))
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkIEEE754')(var.get('buf'), var.get('value'), var.get('offset'), Js(8.0), Js(1.7976931348623157e+308), (-Js(1.7976931348623157e+308)))
            var.get('ieee754').callprop('write', var.get('buf'), var.get('value'), var.get('offset'), var.get('littleEndian'), Js(52.0), Js(8.0))
            return (var.get('offset')+Js(8.0))
        PyJsHoisted_writeDouble_.func_name = 'writeDouble'
        var.put('writeDouble', PyJsHoisted_writeDouble_)
        @Js
        def PyJsHoisted_base64clean_(str, this, arguments, var=var):
            var = Scope({'str':str, 'this':this, 'arguments':arguments}, var)
            var.registers(['str'])
            var.put('str', var.get('str').callprop('split', Js('=')).get('0'))
            var.put('str', var.get('str').callprop('trim').callprop('replace', var.get('INVALID_BASE64_RE'), Js('')))
            if (var.get('str').get('length')<Js(2.0)):
                return Js('')
            while PyJsStrictNeq((var.get('str').get('length')%Js(4.0)),Js(0.0)):
                var.put('str', (var.get('str')+Js('=')))
            return var.get('str')
        PyJsHoisted_base64clean_.func_name = 'base64clean'
        var.put('base64clean', PyJsHoisted_base64clean_)
        @Js
        def PyJsHoisted_toHex_(n, this, arguments, var=var):
            var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
            var.registers(['n'])
            if (var.get('n')<Js(16.0)):
                return (Js('0')+var.get('n').callprop('toString', Js(16.0)))
            return var.get('n').callprop('toString', Js(16.0))
        PyJsHoisted_toHex_.func_name = 'toHex'
        var.put('toHex', PyJsHoisted_toHex_)
        @Js
        def PyJsHoisted_utf8ToBytes_(string, units, this, arguments, var=var):
            var = Scope({'string':string, 'units':units, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'units', 'codePoint', 'leadSurrogate', 'string', 'bytes', 'length'])
            var.put('units', (var.get('units') or var.get('Infinity')))
            pass
            var.put('length', var.get('string').get('length'))
            var.put('leadSurrogate', var.get(u"null"))
            var.put('bytes', Js([]))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('length')):
                try:
                    var.put('codePoint', var.get('string').callprop('charCodeAt', var.get('i')))
                    if ((var.get('codePoint')>Js(55295)) and (var.get('codePoint')<Js(57344))):
                        if var.get('leadSurrogate').neg():
                            if (var.get('codePoint')>Js(56319)):
                                if (var.put('units', Js(3.0), '-')>(-Js(1.0))):
                                    var.get('bytes').callprop('push', Js(239), Js(191), Js(189))
                                continue
                            else:
                                if PyJsStrictEq((var.get('i')+Js(1.0)),var.get('length')):
                                    if (var.put('units', Js(3.0), '-')>(-Js(1.0))):
                                        var.get('bytes').callprop('push', Js(239), Js(191), Js(189))
                                    continue
                            var.put('leadSurrogate', var.get('codePoint'))
                            continue
                        if (var.get('codePoint')<Js(56320)):
                            if (var.put('units', Js(3.0), '-')>(-Js(1.0))):
                                var.get('bytes').callprop('push', Js(239), Js(191), Js(189))
                            var.put('leadSurrogate', var.get('codePoint'))
                            continue
                        var.put('codePoint', ((((var.get('leadSurrogate')-Js(55296))<<Js(10.0))|(var.get('codePoint')-Js(56320)))+Js(65536)))
                    else:
                        if var.get('leadSurrogate'):
                            if (var.put('units', Js(3.0), '-')>(-Js(1.0))):
                                var.get('bytes').callprop('push', Js(239), Js(191), Js(189))
                    var.put('leadSurrogate', var.get(u"null"))
                    if (var.get('codePoint')<Js(128)):
                        if (var.put('units', Js(1.0), '-')<Js(0.0)):
                            break
                        var.get('bytes').callprop('push', var.get('codePoint'))
                    else:
                        if (var.get('codePoint')<Js(2048)):
                            if (var.put('units', Js(2.0), '-')<Js(0.0)):
                                break
                            var.get('bytes').callprop('push', ((var.get('codePoint')>>Js(6))|Js(192)), ((var.get('codePoint')&Js(63))|Js(128)))
                        else:
                            if (var.get('codePoint')<Js(65536)):
                                if (var.put('units', Js(3.0), '-')<Js(0.0)):
                                    break
                                var.get('bytes').callprop('push', ((var.get('codePoint')>>Js(12))|Js(224)), (((var.get('codePoint')>>Js(6))&Js(63))|Js(128)), ((var.get('codePoint')&Js(63))|Js(128)))
                            else:
                                if (var.get('codePoint')<Js(1114112)):
                                    if (var.put('units', Js(4.0), '-')<Js(0.0)):
                                        break
                                    var.get('bytes').callprop('push', ((var.get('codePoint')>>Js(18))|Js(240)), (((var.get('codePoint')>>Js(12))&Js(63))|Js(128)), (((var.get('codePoint')>>Js(6))&Js(63))|Js(128)), ((var.get('codePoint')&Js(63))|Js(128)))
                                else:
                                    PyJsTempException = JsToPyException(var.get('Error').create(Js('Invalid code point')))
                                    raise PyJsTempException
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('bytes')
        PyJsHoisted_utf8ToBytes_.func_name = 'utf8ToBytes'
        var.put('utf8ToBytes', PyJsHoisted_utf8ToBytes_)
        @Js
        def PyJsHoisted_asciiToBytes_(str, this, arguments, var=var):
            var = Scope({'str':str, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'str', 'byteArray'])
            var.put('byteArray', Js([]))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('str').get('length')):
                try:
                    var.get('byteArray').callprop('push', (var.get('str').callprop('charCodeAt', var.get('i'))&Js(255)))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('byteArray')
        PyJsHoisted_asciiToBytes_.func_name = 'asciiToBytes'
        var.put('asciiToBytes', PyJsHoisted_asciiToBytes_)
        @Js
        def PyJsHoisted_utf16leToBytes_(str, units, this, arguments, var=var):
            var = Scope({'str':str, 'units':units, 'this':this, 'arguments':arguments}, var)
            var.registers(['byteArray', 'i', 'hi', 'c', 'units', 'str', 'lo'])
            pass
            var.put('byteArray', Js([]))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('str').get('length')):
                try:
                    if (var.put('units', Js(2.0), '-')<Js(0.0)):
                        break
                    var.put('c', var.get('str').callprop('charCodeAt', var.get('i')))
                    var.put('hi', (var.get('c')>>Js(8.0)))
                    var.put('lo', (var.get('c')%Js(256.0)))
                    var.get('byteArray').callprop('push', var.get('lo'))
                    var.get('byteArray').callprop('push', var.get('hi'))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('byteArray')
        PyJsHoisted_utf16leToBytes_.func_name = 'utf16leToBytes'
        var.put('utf16leToBytes', PyJsHoisted_utf16leToBytes_)
        @Js
        def PyJsHoisted_base64ToBytes_(str, this, arguments, var=var):
            var = Scope({'str':str, 'this':this, 'arguments':arguments}, var)
            var.registers(['str'])
            return var.get('base64').callprop('toByteArray', var.get('base64clean')(var.get('str')))
        PyJsHoisted_base64ToBytes_.func_name = 'base64ToBytes'
        var.put('base64ToBytes', PyJsHoisted_base64ToBytes_)
        @Js
        def PyJsHoisted_blitBuffer_(src, dst, offset, length, this, arguments, var=var):
            var = Scope({'src':src, 'dst':dst, 'offset':offset, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'offset', 'src', 'dst', 'length'])
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('length')):
                try:
                    if (((var.get('i')+var.get('offset'))>=var.get('dst').get('length')) or (var.get('i')>=var.get('src').get('length'))):
                        break
                    var.get('dst').put((var.get('i')+var.get('offset')), var.get('src').get(var.get('i')))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('i')
        PyJsHoisted_blitBuffer_.func_name = 'blitBuffer'
        var.put('blitBuffer', PyJsHoisted_blitBuffer_)
        @Js
        def PyJsHoisted_isInstance_(obj, type, this, arguments, var=var):
            var = Scope({'obj':obj, 'type':type, 'this':this, 'arguments':arguments}, var)
            var.registers(['type', 'obj'])
            return (var.get('obj').instanceof(var.get('type')) or ((((var.get('obj')!=var.get(u"null")) and (var.get('obj').get('constructor')!=var.get(u"null"))) and (var.get('obj').get('constructor').get('name')!=var.get(u"null"))) and PyJsStrictEq(var.get('obj').get('constructor').get('name'),var.get('type').get('name'))))
        PyJsHoisted_isInstance_.func_name = 'isInstance'
        var.put('isInstance', PyJsHoisted_isInstance_)
        @Js
        def PyJsHoisted_numberIsNaN_(obj, this, arguments, var=var):
            var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
            var.registers(['obj'])
            return PyJsStrictNeq(var.get('obj'),var.get('obj'))
        PyJsHoisted_numberIsNaN_.func_name = 'numberIsNaN'
        var.put('numberIsNaN', PyJsHoisted_numberIsNaN_)
        Js('use strict')
        var.put('base64', var.get('require')(Js('base64-js')))
        var.put('ieee754', var.get('require')(Js('ieee754')))
        var.get('exports').put('Buffer', var.get('Buffer'))
        var.get('exports').put('SlowBuffer', var.get('SlowBuffer'))
        var.get('exports').put('INSPECT_MAX_BYTES', Js(50.0))
        var.put('K_MAX_LENGTH', Js(2147483647))
        var.get('exports').put('kMaxLength', var.get('K_MAX_LENGTH'))
        var.get('Buffer').put('TYPED_ARRAY_SUPPORT', var.get('typedArraySupport')())
        if ((var.get('Buffer').get('TYPED_ARRAY_SUPPORT').neg() and PyJsStrictNeq(var.get('console',throw=False).typeof(),Js('undefined'))) and PyJsStrictEq(var.get('console').get('error').typeof(),Js('function'))):
            var.get('console').callprop('error', (Js('This browser lacks typed array (Uint8Array) support which is required by ')+Js('`buffer` v5.x. Use `buffer` v4.x if you require old browser support.')))
        pass
        @Js
        def PyJs_get_26_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_26_}, var)
            var.registers([])
            if var.get('Buffer').callprop('isBuffer', var.get(u"this")).neg():
                return var.get('undefined')
            return var.get(u"this").get('buffer')
        PyJs_get_26_._set_name('get')
        var.get('Object').callprop('defineProperty', var.get('Buffer').get('prototype'), Js('parent'), Js({'enumerable':Js(True),'get':PyJs_get_26_}))
        @Js
        def PyJs_get_27_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_27_}, var)
            var.registers([])
            if var.get('Buffer').callprop('isBuffer', var.get(u"this")).neg():
                return var.get('undefined')
            return var.get(u"this").get('byteOffset')
        PyJs_get_27_._set_name('get')
        var.get('Object').callprop('defineProperty', var.get('Buffer').get('prototype'), Js('offset'), Js({'enumerable':Js(True),'get':PyJs_get_27_}))
        pass
        pass
        if ((PyJsStrictNeq(var.get('Symbol',throw=False).typeof(),Js('undefined')) and (var.get('Symbol').get('species')!=var.get(u"null"))) and PyJsStrictEq(var.get('Buffer').get(var.get('Symbol').get('species')),var.get('Buffer'))):
            var.get('Object').callprop('defineProperty', var.get('Buffer'), var.get('Symbol').get('species'), Js({'value':var.get(u"null"),'configurable':Js(True),'enumerable':Js(False),'writable':Js(False)}))
        var.get('Buffer').put('poolSize', Js(8192.0))
        pass
        @Js
        def PyJs_anonymous_28_(value, encodingOrOffset, length, this, arguments, var=var):
            var = Scope({'value':value, 'encodingOrOffset':encodingOrOffset, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 'encodingOrOffset', 'value'])
            return var.get('from')(var.get('value'), var.get('encodingOrOffset'), var.get('length'))
        PyJs_anonymous_28_._set_name('anonymous')
        var.get('Buffer').put('from', PyJs_anonymous_28_)
        var.get('Buffer').get('prototype').put('__proto__', var.get('Uint8Array').get('prototype'))
        var.get('Buffer').put('__proto__', var.get('Uint8Array'))
        pass
        pass
        @Js
        def PyJs_anonymous_29_(size, fill, encoding, this, arguments, var=var):
            var = Scope({'size':size, 'fill':fill, 'encoding':encoding, 'this':this, 'arguments':arguments}, var)
            var.registers(['fill', 'size', 'encoding'])
            return var.get('alloc')(var.get('size'), var.get('fill'), var.get('encoding'))
        PyJs_anonymous_29_._set_name('anonymous')
        var.get('Buffer').put('alloc', PyJs_anonymous_29_)
        pass
        @Js
        def PyJs_anonymous_30_(size, this, arguments, var=var):
            var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
            var.registers(['size'])
            return var.get('allocUnsafe')(var.get('size'))
        PyJs_anonymous_30_._set_name('anonymous')
        var.get('Buffer').put('allocUnsafe', PyJs_anonymous_30_)
        @Js
        def PyJs_anonymous_31_(size, this, arguments, var=var):
            var = Scope({'size':size, 'this':this, 'arguments':arguments}, var)
            var.registers(['size'])
            return var.get('allocUnsafe')(var.get('size'))
        PyJs_anonymous_31_._set_name('anonymous')
        var.get('Buffer').put('allocUnsafeSlow', PyJs_anonymous_31_)
        pass
        pass
        pass
        pass
        pass
        pass
        @Js
        def PyJs_isBuffer_32_(b, this, arguments, var=var):
            var = Scope({'b':b, 'this':this, 'arguments':arguments, 'isBuffer':PyJs_isBuffer_32_}, var)
            var.registers(['b'])
            return (((var.get('b')!=var.get(u"null")) and PyJsStrictEq(var.get('b').get('_isBuffer'),Js(True))) and PyJsStrictNeq(var.get('b'),var.get('Buffer').get('prototype')))
        PyJs_isBuffer_32_._set_name('isBuffer')
        var.get('Buffer').put('isBuffer', PyJs_isBuffer_32_)
        @Js
        def PyJs_compare_33_(a, b, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'compare':PyJs_compare_33_}, var)
            var.registers(['x', 'len', 'i', 'b', 'a', 'y'])
            if var.get('isInstance')(var.get('a'), var.get('Uint8Array')):
                var.put('a', var.get('Buffer').callprop('from', var.get('a'), var.get('a').get('offset'), var.get('a').get('byteLength')))
            if var.get('isInstance')(var.get('b'), var.get('Uint8Array')):
                var.put('b', var.get('Buffer').callprop('from', var.get('b'), var.get('b').get('offset'), var.get('b').get('byteLength')))
            if (var.get('Buffer').callprop('isBuffer', var.get('a')).neg() or var.get('Buffer').callprop('isBuffer', var.get('b')).neg()):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array')))
                raise PyJsTempException
            if PyJsStrictEq(var.get('a'),var.get('b')):
                return Js(0.0)
            var.put('x', var.get('a').get('length'))
            var.put('y', var.get('b').get('length'))
            #for JS loop
            var.put('i', Js(0.0))
            var.put('len', var.get('Math').callprop('min', var.get('x'), var.get('y')))
            while (var.get('i')<var.get('len')):
                try:
                    if PyJsStrictNeq(var.get('a').get(var.get('i')),var.get('b').get(var.get('i'))):
                        var.put('x', var.get('a').get(var.get('i')))
                        var.put('y', var.get('b').get(var.get('i')))
                        break
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            if (var.get('x')<var.get('y')):
                return (-Js(1.0))
            if (var.get('y')<var.get('x')):
                return Js(1.0)
            return Js(0.0)
        PyJs_compare_33_._set_name('compare')
        var.get('Buffer').put('compare', PyJs_compare_33_)
        @Js
        def PyJs_isEncoding_34_(encoding, this, arguments, var=var):
            var = Scope({'encoding':encoding, 'this':this, 'arguments':arguments, 'isEncoding':PyJs_isEncoding_34_}, var)
            var.registers(['encoding'])
            while 1:
                SWITCHED = False
                CONDITION = (var.get('String')(var.get('encoding')).callprop('toLowerCase'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js('hex')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('utf8')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-8')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ascii')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('latin1')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('binary')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('base64')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs2')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs-2')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('utf16le')):
                    SWITCHED = True
                    pass
                if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-16le')):
                    SWITCHED = True
                    return Js(True)
                if True:
                    SWITCHED = True
                    return Js(False)
                SWITCHED = True
                break
        PyJs_isEncoding_34_._set_name('isEncoding')
        var.get('Buffer').put('isEncoding', PyJs_isEncoding_34_)
        @Js
        def PyJs_concat_35_(list, length, this, arguments, var=var):
            var = Scope({'list':list, 'length':length, 'this':this, 'arguments':arguments, 'concat':PyJs_concat_35_}, var)
            var.registers(['i', 'buffer', 'length', 'buf', 'list', 'pos'])
            if var.get('Array').callprop('isArray', var.get('list')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('"list" argument must be an Array of Buffers')))
                raise PyJsTempException
            if PyJsStrictEq(var.get('list').get('length'),Js(0.0)):
                return var.get('Buffer').callprop('alloc', Js(0.0))
            pass
            if PyJsStrictEq(var.get('length'),var.get('undefined')):
                var.put('length', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('list').get('length')):
                    try:
                        var.put('length', var.get('list').get(var.get('i')).get('length'), '+')
                    finally:
                            var.put('i',Js(var.get('i').to_number())+Js(1))
            var.put('buffer', var.get('Buffer').callprop('allocUnsafe', var.get('length')))
            var.put('pos', Js(0.0))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('list').get('length')):
                try:
                    var.put('buf', var.get('list').get(var.get('i')))
                    if var.get('isInstance')(var.get('buf'), var.get('Uint8Array')):
                        var.put('buf', var.get('Buffer').callprop('from', var.get('buf')))
                    if var.get('Buffer').callprop('isBuffer', var.get('buf')).neg():
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('"list" argument must be an Array of Buffers')))
                        raise PyJsTempException
                    var.get('buf').callprop('copy', var.get('buffer'), var.get('pos'))
                    var.put('pos', var.get('buf').get('length'), '+')
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('buffer')
        PyJs_concat_35_._set_name('concat')
        var.get('Buffer').put('concat', PyJs_concat_35_)
        pass
        var.get('Buffer').put('byteLength', var.get('byteLength'))
        pass
        var.get('Buffer').get('prototype').put('_isBuffer', Js(True))
        pass
        @Js
        def PyJs_swap16_36_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'swap16':PyJs_swap16_36_}, var)
            var.registers(['i', 'len'])
            var.put('len', var.get(u"this").get('length'))
            if PyJsStrictNeq((var.get('len')%Js(2.0)),Js(0.0)):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Buffer size must be a multiple of 16-bits')))
                raise PyJsTempException
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('len')):
                try:
                    var.get('swap')(var.get(u"this"), var.get('i'), (var.get('i')+Js(1.0)))
                finally:
                        var.put('i', Js(2.0), '+')
            return var.get(u"this")
        PyJs_swap16_36_._set_name('swap16')
        var.get('Buffer').get('prototype').put('swap16', PyJs_swap16_36_)
        @Js
        def PyJs_swap32_37_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'swap32':PyJs_swap32_37_}, var)
            var.registers(['i', 'len'])
            var.put('len', var.get(u"this").get('length'))
            if PyJsStrictNeq((var.get('len')%Js(4.0)),Js(0.0)):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Buffer size must be a multiple of 32-bits')))
                raise PyJsTempException
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('len')):
                try:
                    var.get('swap')(var.get(u"this"), var.get('i'), (var.get('i')+Js(3.0)))
                    var.get('swap')(var.get(u"this"), (var.get('i')+Js(1.0)), (var.get('i')+Js(2.0)))
                finally:
                        var.put('i', Js(4.0), '+')
            return var.get(u"this")
        PyJs_swap32_37_._set_name('swap32')
        var.get('Buffer').get('prototype').put('swap32', PyJs_swap32_37_)
        @Js
        def PyJs_swap64_38_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'swap64':PyJs_swap64_38_}, var)
            var.registers(['i', 'len'])
            var.put('len', var.get(u"this").get('length'))
            if PyJsStrictNeq((var.get('len')%Js(8.0)),Js(0.0)):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Buffer size must be a multiple of 64-bits')))
                raise PyJsTempException
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('len')):
                try:
                    var.get('swap')(var.get(u"this"), var.get('i'), (var.get('i')+Js(7.0)))
                    var.get('swap')(var.get(u"this"), (var.get('i')+Js(1.0)), (var.get('i')+Js(6.0)))
                    var.get('swap')(var.get(u"this"), (var.get('i')+Js(2.0)), (var.get('i')+Js(5.0)))
                    var.get('swap')(var.get(u"this"), (var.get('i')+Js(3.0)), (var.get('i')+Js(4.0)))
                finally:
                        var.put('i', Js(8.0), '+')
            return var.get(u"this")
        PyJs_swap64_38_._set_name('swap64')
        var.get('Buffer').get('prototype').put('swap64', PyJs_swap64_38_)
        @Js
        def PyJs_toString_39_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_39_}, var)
            var.registers(['length'])
            var.put('length', var.get(u"this").get('length'))
            if PyJsStrictEq(var.get('length'),Js(0.0)):
                return Js('')
            if PyJsStrictEq(var.get('arguments').get('length'),Js(0.0)):
                return var.get('utf8Slice')(var.get(u"this"), Js(0.0), var.get('length'))
            return var.get('slowToString').callprop('apply', var.get(u"this"), var.get('arguments'))
        PyJs_toString_39_._set_name('toString')
        var.get('Buffer').get('prototype').put('toString', PyJs_toString_39_)
        var.get('Buffer').get('prototype').put('toLocaleString', var.get('Buffer').get('prototype').get('toString'))
        @Js
        def PyJs_equals_40_(b, this, arguments, var=var):
            var = Scope({'b':b, 'this':this, 'arguments':arguments, 'equals':PyJs_equals_40_}, var)
            var.registers(['b'])
            if var.get('Buffer').callprop('isBuffer', var.get('b')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Argument must be a Buffer')))
                raise PyJsTempException
            if PyJsStrictEq(var.get(u"this"),var.get('b')):
                return Js(True)
            return PyJsStrictEq(var.get('Buffer').callprop('compare', var.get(u"this"), var.get('b')),Js(0.0))
        PyJs_equals_40_._set_name('equals')
        var.get('Buffer').get('prototype').put('equals', PyJs_equals_40_)
        @Js
        def PyJs_inspect_41_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'inspect':PyJs_inspect_41_}, var)
            var.registers(['str', 'max'])
            var.put('str', Js(''))
            var.put('max', var.get('exports').get('INSPECT_MAX_BYTES'))
            var.put('str', var.get(u"this").callprop('toString', Js('hex'), Js(0.0), var.get('max')).callprop('replace', JsRegExp('/(.{2})/g'), Js('$1 ')).callprop('trim'))
            if (var.get(u"this").get('length')>var.get('max')):
                var.put('str', Js(' ... '), '+')
            return ((Js('<Buffer ')+var.get('str'))+Js('>'))
        PyJs_inspect_41_._set_name('inspect')
        var.get('Buffer').get('prototype').put('inspect', PyJs_inspect_41_)
        @Js
        def PyJs_compare_42_(target, start, end, thisStart, thisEnd, this, arguments, var=var):
            var = Scope({'target':target, 'start':start, 'end':end, 'thisStart':thisStart, 'thisEnd':thisEnd, 'this':this, 'arguments':arguments, 'compare':PyJs_compare_42_}, var)
            var.registers(['x', 'len', 'target', 'i', 'targetCopy', 'thisStart', 'thisEnd', 'start', 'end', 'thisCopy', 'y'])
            if var.get('isInstance')(var.get('target'), var.get('Uint8Array')):
                var.put('target', var.get('Buffer').callprop('from', var.get('target'), var.get('target').get('offset'), var.get('target').get('byteLength')))
            if var.get('Buffer').callprop('isBuffer', var.get('target')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError').create(((Js('The "target" argument must be one of type Buffer or Uint8Array. ')+Js('Received type '))+(Js('undefined') if PyJsStrictEq(var.get('target',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('target'))))))
                raise PyJsTempException
            if PyJsStrictEq(var.get('start'),var.get('undefined')):
                var.put('start', Js(0.0))
            if PyJsStrictEq(var.get('end'),var.get('undefined')):
                var.put('end', (var.get('target').get('length') if var.get('target') else Js(0.0)))
            if PyJsStrictEq(var.get('thisStart'),var.get('undefined')):
                var.put('thisStart', Js(0.0))
            if PyJsStrictEq(var.get('thisEnd'),var.get('undefined')):
                var.put('thisEnd', var.get(u"this").get('length'))
            if ((((var.get('start')<Js(0.0)) or (var.get('end')>var.get('target').get('length'))) or (var.get('thisStart')<Js(0.0))) or (var.get('thisEnd')>var.get(u"this").get('length'))):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('out of range index')))
                raise PyJsTempException
            if ((var.get('thisStart')>=var.get('thisEnd')) and (var.get('start')>=var.get('end'))):
                return Js(0.0)
            if (var.get('thisStart')>=var.get('thisEnd')):
                return (-Js(1.0))
            if (var.get('start')>=var.get('end')):
                return Js(1.0)
            var.put('start', Js(0.0), '>>>')
            var.put('end', Js(0.0), '>>>')
            var.put('thisStart', Js(0.0), '>>>')
            var.put('thisEnd', Js(0.0), '>>>')
            if PyJsStrictEq(var.get(u"this"),var.get('target')):
                return Js(0.0)
            var.put('x', (var.get('thisEnd')-var.get('thisStart')))
            var.put('y', (var.get('end')-var.get('start')))
            var.put('len', var.get('Math').callprop('min', var.get('x'), var.get('y')))
            var.put('thisCopy', var.get(u"this").callprop('slice', var.get('thisStart'), var.get('thisEnd')))
            var.put('targetCopy', var.get('target').callprop('slice', var.get('start'), var.get('end')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('len')):
                try:
                    if PyJsStrictNeq(var.get('thisCopy').get(var.get('i')),var.get('targetCopy').get(var.get('i'))):
                        var.put('x', var.get('thisCopy').get(var.get('i')))
                        var.put('y', var.get('targetCopy').get(var.get('i')))
                        break
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            if (var.get('x')<var.get('y')):
                return (-Js(1.0))
            if (var.get('y')<var.get('x')):
                return Js(1.0)
            return Js(0.0)
        PyJs_compare_42_._set_name('compare')
        var.get('Buffer').get('prototype').put('compare', PyJs_compare_42_)
        pass
        pass
        @Js
        def PyJs_includes_43_(val, byteOffset, encoding, this, arguments, var=var):
            var = Scope({'val':val, 'byteOffset':byteOffset, 'encoding':encoding, 'this':this, 'arguments':arguments, 'includes':PyJs_includes_43_}, var)
            var.registers(['encoding', 'byteOffset', 'val'])
            return PyJsStrictNeq(var.get(u"this").callprop('indexOf', var.get('val'), var.get('byteOffset'), var.get('encoding')),(-Js(1.0)))
        PyJs_includes_43_._set_name('includes')
        var.get('Buffer').get('prototype').put('includes', PyJs_includes_43_)
        @Js
        def PyJs_indexOf_44_(val, byteOffset, encoding, this, arguments, var=var):
            var = Scope({'val':val, 'byteOffset':byteOffset, 'encoding':encoding, 'this':this, 'arguments':arguments, 'indexOf':PyJs_indexOf_44_}, var)
            var.registers(['encoding', 'byteOffset', 'val'])
            return var.get('bidirectionalIndexOf')(var.get(u"this"), var.get('val'), var.get('byteOffset'), var.get('encoding'), Js(True))
        PyJs_indexOf_44_._set_name('indexOf')
        var.get('Buffer').get('prototype').put('indexOf', PyJs_indexOf_44_)
        @Js
        def PyJs_lastIndexOf_45_(val, byteOffset, encoding, this, arguments, var=var):
            var = Scope({'val':val, 'byteOffset':byteOffset, 'encoding':encoding, 'this':this, 'arguments':arguments, 'lastIndexOf':PyJs_lastIndexOf_45_}, var)
            var.registers(['encoding', 'byteOffset', 'val'])
            return var.get('bidirectionalIndexOf')(var.get(u"this"), var.get('val'), var.get('byteOffset'), var.get('encoding'), Js(False))
        PyJs_lastIndexOf_45_._set_name('lastIndexOf')
        var.get('Buffer').get('prototype').put('lastIndexOf', PyJs_lastIndexOf_45_)
        pass
        pass
        pass
        pass
        pass
        pass
        @Js
        def PyJs_write_46_(string, offset, length, encoding, this, arguments, var=var):
            var = Scope({'string':string, 'offset':offset, 'length':length, 'encoding':encoding, 'this':this, 'arguments':arguments, 'write':PyJs_write_46_}, var)
            var.registers(['offset', 'loweredCase', 'string', 'remaining', 'encoding', 'length'])
            if PyJsStrictEq(var.get('offset'),var.get('undefined')):
                var.put('encoding', Js('utf8'))
                var.put('length', var.get(u"this").get('length'))
                var.put('offset', Js(0.0))
            else:
                if (PyJsStrictEq(var.get('length'),var.get('undefined')) and PyJsStrictEq(var.get('offset',throw=False).typeof(),Js('string'))):
                    var.put('encoding', var.get('offset'))
                    var.put('length', var.get(u"this").get('length'))
                    var.put('offset', Js(0.0))
                else:
                    if var.get('isFinite')(var.get('offset')):
                        var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
                        if var.get('isFinite')(var.get('length')):
                            var.put('length', PyJsBshift(var.get('length'),Js(0.0)))
                            if PyJsStrictEq(var.get('encoding'),var.get('undefined')):
                                var.put('encoding', Js('utf8'))
                        else:
                            var.put('encoding', var.get('length'))
                            var.put('length', var.get('undefined'))
                    else:
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('Buffer.write(string, encoding, offset[, length]) is no longer supported')))
                        raise PyJsTempException
            var.put('remaining', (var.get(u"this").get('length')-var.get('offset')))
            if (PyJsStrictEq(var.get('length'),var.get('undefined')) or (var.get('length')>var.get('remaining'))):
                var.put('length', var.get('remaining'))
            if (((var.get('string').get('length')>Js(0.0)) and ((var.get('length')<Js(0.0)) or (var.get('offset')<Js(0.0)))) or (var.get('offset')>var.get(u"this").get('length'))):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Attempt to write outside buffer bounds')))
                raise PyJsTempException
            if var.get('encoding').neg():
                var.put('encoding', Js('utf8'))
            var.put('loweredCase', Js(False))
            #for JS loop
            
            while 1:
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('encoding'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('hex')):
                        SWITCHED = True
                        return var.get('hexWrite')(var.get(u"this"), var.get('string'), var.get('offset'), var.get('length'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf8')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-8')):
                        SWITCHED = True
                        return var.get('utf8Write')(var.get(u"this"), var.get('string'), var.get('offset'), var.get('length'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ascii')):
                        SWITCHED = True
                        return var.get('asciiWrite')(var.get(u"this"), var.get('string'), var.get('offset'), var.get('length'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('latin1')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('binary')):
                        SWITCHED = True
                        return var.get('latin1Write')(var.get(u"this"), var.get('string'), var.get('offset'), var.get('length'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('base64')):
                        SWITCHED = True
                        return var.get('base64Write')(var.get(u"this"), var.get('string'), var.get('offset'), var.get('length'))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs2')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('ucs-2')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf16le')):
                        SWITCHED = True
                        pass
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('utf-16le')):
                        SWITCHED = True
                        return var.get('ucs2Write')(var.get(u"this"), var.get('string'), var.get('offset'), var.get('length'))
                    if True:
                        SWITCHED = True
                        if var.get('loweredCase'):
                            PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Unknown encoding: ')+var.get('encoding'))))
                            raise PyJsTempException
                        var.put('encoding', (Js('')+var.get('encoding')).callprop('toLowerCase'))
                        var.put('loweredCase', Js(True))
                    SWITCHED = True
                    break
            
        PyJs_write_46_._set_name('write')
        var.get('Buffer').get('prototype').put('write', PyJs_write_46_)
        @Js
        def PyJs_toJSON_47_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'toJSON':PyJs_toJSON_47_}, var)
            var.registers([])
            return Js({'type':Js('Buffer'),'data':var.get('Array').get('prototype').get('slice').callprop('call', (var.get(u"this").get('_arr') or var.get(u"this")), Js(0.0))})
        PyJs_toJSON_47_._set_name('toJSON')
        var.get('Buffer').get('prototype').put('toJSON', PyJs_toJSON_47_)
        pass
        pass
        var.put('MAX_ARGUMENTS_LENGTH', Js(4096))
        pass
        pass
        pass
        pass
        pass
        @Js
        def PyJs_slice_48_(start, end, this, arguments, var=var):
            var = Scope({'start':start, 'end':end, 'this':this, 'arguments':arguments, 'slice':PyJs_slice_48_}, var)
            var.registers(['end', 'len', 'start', 'newBuf'])
            var.put('len', var.get(u"this").get('length'))
            var.put('start', (~(~var.get('start'))))
            var.put('end', (var.get('len') if PyJsStrictEq(var.get('end'),var.get('undefined')) else (~(~var.get('end')))))
            if (var.get('start')<Js(0.0)):
                var.put('start', var.get('len'), '+')
                if (var.get('start')<Js(0.0)):
                    var.put('start', Js(0.0))
            else:
                if (var.get('start')>var.get('len')):
                    var.put('start', var.get('len'))
            if (var.get('end')<Js(0.0)):
                var.put('end', var.get('len'), '+')
                if (var.get('end')<Js(0.0)):
                    var.put('end', Js(0.0))
            else:
                if (var.get('end')>var.get('len')):
                    var.put('end', var.get('len'))
            if (var.get('end')<var.get('start')):
                var.put('end', var.get('start'))
            var.put('newBuf', var.get(u"this").callprop('subarray', var.get('start'), var.get('end')))
            var.get('newBuf').put('__proto__', var.get('Buffer').get('prototype'))
            return var.get('newBuf')
        PyJs_slice_48_._set_name('slice')
        var.get('Buffer').get('prototype').put('slice', PyJs_slice_48_)
        pass
        @Js
        def PyJs_readUIntLE_49_(offset, byteLength, noAssert, this, arguments, var=var):
            var = Scope({'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUIntLE':PyJs_readUIntLE_49_}, var)
            var.registers(['byteLength', 'i', 'offset', 'noAssert', 'mul', 'val'])
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            var.put('byteLength', PyJsBshift(var.get('byteLength'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), var.get('byteLength'), var.get(u"this").get('length'))
            var.put('val', var.get(u"this").get(var.get('offset')))
            var.put('mul', Js(1.0))
            var.put('i', Js(0.0))
            while ((var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('byteLength')) and var.put('mul', Js(256), '*')):
                var.put('val', (var.get(u"this").get((var.get('offset')+var.get('i')))*var.get('mul')), '+')
            return var.get('val')
        PyJs_readUIntLE_49_._set_name('readUIntLE')
        var.get('Buffer').get('prototype').put('readUIntLE', PyJs_readUIntLE_49_)
        @Js
        def PyJs_readUIntBE_50_(offset, byteLength, noAssert, this, arguments, var=var):
            var = Scope({'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUIntBE':PyJs_readUIntBE_50_}, var)
            var.registers(['byteLength', 'offset', 'noAssert', 'mul', 'val'])
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            var.put('byteLength', PyJsBshift(var.get('byteLength'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), var.get('byteLength'), var.get(u"this").get('length'))
            var.put('val', var.get(u"this").get((var.get('offset')+var.put('byteLength',Js(var.get('byteLength').to_number())-Js(1)))))
            var.put('mul', Js(1.0))
            while ((var.get('byteLength')>Js(0.0)) and var.put('mul', Js(256), '*')):
                var.put('val', (var.get(u"this").get((var.get('offset')+var.put('byteLength',Js(var.get('byteLength').to_number())-Js(1))))*var.get('mul')), '+')
            return var.get('val')
        PyJs_readUIntBE_50_._set_name('readUIntBE')
        var.get('Buffer').get('prototype').put('readUIntBE', PyJs_readUIntBE_50_)
        @Js
        def PyJs_readUInt8_51_(offset, noAssert, this, arguments, var=var):
            var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUInt8':PyJs_readUInt8_51_}, var)
            var.registers(['offset', 'noAssert'])
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(1.0), var.get(u"this").get('length'))
            return var.get(u"this").get(var.get('offset'))
        PyJs_readUInt8_51_._set_name('readUInt8')
        var.get('Buffer').get('prototype').put('readUInt8', PyJs_readUInt8_51_)
        @Js
        def PyJs_readUInt16LE_52_(offset, noAssert, this, arguments, var=var):
            var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUInt16LE':PyJs_readUInt16LE_52_}, var)
            var.registers(['offset', 'noAssert'])
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(2.0), var.get(u"this").get('length'))
            return (var.get(u"this").get(var.get('offset'))|(var.get(u"this").get((var.get('offset')+Js(1.0)))<<Js(8.0)))
        PyJs_readUInt16LE_52_._set_name('readUInt16LE')
        var.get('Buffer').get('prototype').put('readUInt16LE', PyJs_readUInt16LE_52_)
        @Js
        def PyJs_readUInt16BE_53_(offset, noAssert, this, arguments, var=var):
            var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUInt16BE':PyJs_readUInt16BE_53_}, var)
            var.registers(['offset', 'noAssert'])
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(2.0), var.get(u"this").get('length'))
            return ((var.get(u"this").get(var.get('offset'))<<Js(8.0))|var.get(u"this").get((var.get('offset')+Js(1.0))))
        PyJs_readUInt16BE_53_._set_name('readUInt16BE')
        var.get('Buffer').get('prototype').put('readUInt16BE', PyJs_readUInt16BE_53_)
        @Js
        def PyJs_readUInt32LE_54_(offset, noAssert, this, arguments, var=var):
            var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUInt32LE':PyJs_readUInt32LE_54_}, var)
            var.registers(['offset', 'noAssert'])
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(4.0), var.get(u"this").get('length'))
            return (((var.get(u"this").get(var.get('offset'))|(var.get(u"this").get((var.get('offset')+Js(1.0)))<<Js(8.0)))|(var.get(u"this").get((var.get('offset')+Js(2.0)))<<Js(16.0)))+(var.get(u"this").get((var.get('offset')+Js(3.0)))*Js(16777216)))
        PyJs_readUInt32LE_54_._set_name('readUInt32LE')
        var.get('Buffer').get('prototype').put('readUInt32LE', PyJs_readUInt32LE_54_)
        @Js
        def PyJs_readUInt32BE_55_(offset, noAssert, this, arguments, var=var):
            var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readUInt32BE':PyJs_readUInt32BE_55_}, var)
            var.registers(['offset', 'noAssert'])
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(4.0), var.get(u"this").get('length'))
            return ((var.get(u"this").get(var.get('offset'))*Js(16777216))+(((var.get(u"this").get((var.get('offset')+Js(1.0)))<<Js(16.0))|(var.get(u"this").get((var.get('offset')+Js(2.0)))<<Js(8.0)))|var.get(u"this").get((var.get('offset')+Js(3.0)))))
        PyJs_readUInt32BE_55_._set_name('readUInt32BE')
        var.get('Buffer').get('prototype').put('readUInt32BE', PyJs_readUInt32BE_55_)
        @Js
        def PyJs_readIntLE_56_(offset, byteLength, noAssert, this, arguments, var=var):
            var = Scope({'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readIntLE':PyJs_readIntLE_56_}, var)
            var.registers(['byteLength', 'i', 'offset', 'noAssert', 'mul', 'val'])
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            var.put('byteLength', PyJsBshift(var.get('byteLength'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), var.get('byteLength'), var.get(u"this").get('length'))
            var.put('val', var.get(u"this").get(var.get('offset')))
            var.put('mul', Js(1.0))
            var.put('i', Js(0.0))
            while ((var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('byteLength')) and var.put('mul', Js(256), '*')):
                var.put('val', (var.get(u"this").get((var.get('offset')+var.get('i')))*var.get('mul')), '+')
            var.put('mul', Js(128), '*')
            if (var.get('val')>=var.get('mul')):
                var.put('val', var.get('Math').callprop('pow', Js(2.0), (Js(8.0)*var.get('byteLength'))), '-')
            return var.get('val')
        PyJs_readIntLE_56_._set_name('readIntLE')
        var.get('Buffer').get('prototype').put('readIntLE', PyJs_readIntLE_56_)
        @Js
        def PyJs_readIntBE_57_(offset, byteLength, noAssert, this, arguments, var=var):
            var = Scope({'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readIntBE':PyJs_readIntBE_57_}, var)
            var.registers(['byteLength', 'i', 'offset', 'noAssert', 'mul', 'val'])
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            var.put('byteLength', PyJsBshift(var.get('byteLength'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), var.get('byteLength'), var.get(u"this").get('length'))
            var.put('i', var.get('byteLength'))
            var.put('mul', Js(1.0))
            var.put('val', var.get(u"this").get((var.get('offset')+var.put('i',Js(var.get('i').to_number())-Js(1)))))
            while ((var.get('i')>Js(0.0)) and var.put('mul', Js(256), '*')):
                var.put('val', (var.get(u"this").get((var.get('offset')+var.put('i',Js(var.get('i').to_number())-Js(1))))*var.get('mul')), '+')
            var.put('mul', Js(128), '*')
            if (var.get('val')>=var.get('mul')):
                var.put('val', var.get('Math').callprop('pow', Js(2.0), (Js(8.0)*var.get('byteLength'))), '-')
            return var.get('val')
        PyJs_readIntBE_57_._set_name('readIntBE')
        var.get('Buffer').get('prototype').put('readIntBE', PyJs_readIntBE_57_)
        @Js
        def PyJs_readInt8_58_(offset, noAssert, this, arguments, var=var):
            var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readInt8':PyJs_readInt8_58_}, var)
            var.registers(['offset', 'noAssert'])
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(1.0), var.get(u"this").get('length'))
            if (var.get(u"this").get(var.get('offset'))&Js(128)).neg():
                return var.get(u"this").get(var.get('offset'))
            return (((Js(255)-var.get(u"this").get(var.get('offset')))+Js(1.0))*(-Js(1.0)))
        PyJs_readInt8_58_._set_name('readInt8')
        var.get('Buffer').get('prototype').put('readInt8', PyJs_readInt8_58_)
        @Js
        def PyJs_readInt16LE_59_(offset, noAssert, this, arguments, var=var):
            var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readInt16LE':PyJs_readInt16LE_59_}, var)
            var.registers(['offset', 'noAssert', 'val'])
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(2.0), var.get(u"this").get('length'))
            var.put('val', (var.get(u"this").get(var.get('offset'))|(var.get(u"this").get((var.get('offset')+Js(1.0)))<<Js(8.0))))
            return ((var.get('val')|Js(4294901760)) if (var.get('val')&Js(32768)) else var.get('val'))
        PyJs_readInt16LE_59_._set_name('readInt16LE')
        var.get('Buffer').get('prototype').put('readInt16LE', PyJs_readInt16LE_59_)
        @Js
        def PyJs_readInt16BE_60_(offset, noAssert, this, arguments, var=var):
            var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readInt16BE':PyJs_readInt16BE_60_}, var)
            var.registers(['offset', 'noAssert', 'val'])
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(2.0), var.get(u"this").get('length'))
            var.put('val', (var.get(u"this").get((var.get('offset')+Js(1.0)))|(var.get(u"this").get(var.get('offset'))<<Js(8.0))))
            return ((var.get('val')|Js(4294901760)) if (var.get('val')&Js(32768)) else var.get('val'))
        PyJs_readInt16BE_60_._set_name('readInt16BE')
        var.get('Buffer').get('prototype').put('readInt16BE', PyJs_readInt16BE_60_)
        @Js
        def PyJs_readInt32LE_61_(offset, noAssert, this, arguments, var=var):
            var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readInt32LE':PyJs_readInt32LE_61_}, var)
            var.registers(['offset', 'noAssert'])
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(4.0), var.get(u"this").get('length'))
            return (((var.get(u"this").get(var.get('offset'))|(var.get(u"this").get((var.get('offset')+Js(1.0)))<<Js(8.0)))|(var.get(u"this").get((var.get('offset')+Js(2.0)))<<Js(16.0)))|(var.get(u"this").get((var.get('offset')+Js(3.0)))<<Js(24.0)))
        PyJs_readInt32LE_61_._set_name('readInt32LE')
        var.get('Buffer').get('prototype').put('readInt32LE', PyJs_readInt32LE_61_)
        @Js
        def PyJs_readInt32BE_62_(offset, noAssert, this, arguments, var=var):
            var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readInt32BE':PyJs_readInt32BE_62_}, var)
            var.registers(['offset', 'noAssert'])
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(4.0), var.get(u"this").get('length'))
            return ((((var.get(u"this").get(var.get('offset'))<<Js(24.0))|(var.get(u"this").get((var.get('offset')+Js(1.0)))<<Js(16.0)))|(var.get(u"this").get((var.get('offset')+Js(2.0)))<<Js(8.0)))|var.get(u"this").get((var.get('offset')+Js(3.0))))
        PyJs_readInt32BE_62_._set_name('readInt32BE')
        var.get('Buffer').get('prototype').put('readInt32BE', PyJs_readInt32BE_62_)
        @Js
        def PyJs_readFloatLE_63_(offset, noAssert, this, arguments, var=var):
            var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readFloatLE':PyJs_readFloatLE_63_}, var)
            var.registers(['offset', 'noAssert'])
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(4.0), var.get(u"this").get('length'))
            return var.get('ieee754').callprop('read', var.get(u"this"), var.get('offset'), Js(True), Js(23.0), Js(4.0))
        PyJs_readFloatLE_63_._set_name('readFloatLE')
        var.get('Buffer').get('prototype').put('readFloatLE', PyJs_readFloatLE_63_)
        @Js
        def PyJs_readFloatBE_64_(offset, noAssert, this, arguments, var=var):
            var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readFloatBE':PyJs_readFloatBE_64_}, var)
            var.registers(['offset', 'noAssert'])
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(4.0), var.get(u"this").get('length'))
            return var.get('ieee754').callprop('read', var.get(u"this"), var.get('offset'), Js(False), Js(23.0), Js(4.0))
        PyJs_readFloatBE_64_._set_name('readFloatBE')
        var.get('Buffer').get('prototype').put('readFloatBE', PyJs_readFloatBE_64_)
        @Js
        def PyJs_readDoubleLE_65_(offset, noAssert, this, arguments, var=var):
            var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readDoubleLE':PyJs_readDoubleLE_65_}, var)
            var.registers(['offset', 'noAssert'])
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(8.0), var.get(u"this").get('length'))
            return var.get('ieee754').callprop('read', var.get(u"this"), var.get('offset'), Js(True), Js(52.0), Js(8.0))
        PyJs_readDoubleLE_65_._set_name('readDoubleLE')
        var.get('Buffer').get('prototype').put('readDoubleLE', PyJs_readDoubleLE_65_)
        @Js
        def PyJs_readDoubleBE_66_(offset, noAssert, this, arguments, var=var):
            var = Scope({'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'readDoubleBE':PyJs_readDoubleBE_66_}, var)
            var.registers(['offset', 'noAssert'])
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkOffset')(var.get('offset'), Js(8.0), var.get(u"this").get('length'))
            return var.get('ieee754').callprop('read', var.get(u"this"), var.get('offset'), Js(False), Js(52.0), Js(8.0))
        PyJs_readDoubleBE_66_._set_name('readDoubleBE')
        var.get('Buffer').get('prototype').put('readDoubleBE', PyJs_readDoubleBE_66_)
        pass
        @Js
        def PyJs_writeUIntLE_67_(value, offset, byteLength, noAssert, this, arguments, var=var):
            var = Scope({'value':value, 'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUIntLE':PyJs_writeUIntLE_67_}, var)
            var.registers(['byteLength', 'value', 'i', 'offset', 'noAssert', 'mul', 'maxBytes'])
            var.put('value', (+var.get('value')))
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            var.put('byteLength', PyJsBshift(var.get('byteLength'),Js(0.0)))
            if var.get('noAssert').neg():
                var.put('maxBytes', (var.get('Math').callprop('pow', Js(2.0), (Js(8.0)*var.get('byteLength')))-Js(1.0)))
                var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), var.get('byteLength'), var.get('maxBytes'), Js(0.0))
            var.put('mul', Js(1.0))
            var.put('i', Js(0.0))
            var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
            while ((var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('byteLength')) and var.put('mul', Js(256), '*')):
                var.get(u"this").put((var.get('offset')+var.get('i')), ((var.get('value')/var.get('mul'))&Js(255)))
            return (var.get('offset')+var.get('byteLength'))
        PyJs_writeUIntLE_67_._set_name('writeUIntLE')
        var.get('Buffer').get('prototype').put('writeUIntLE', PyJs_writeUIntLE_67_)
        @Js
        def PyJs_writeUIntBE_68_(value, offset, byteLength, noAssert, this, arguments, var=var):
            var = Scope({'value':value, 'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUIntBE':PyJs_writeUIntBE_68_}, var)
            var.registers(['byteLength', 'value', 'i', 'offset', 'noAssert', 'mul', 'maxBytes'])
            var.put('value', (+var.get('value')))
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            var.put('byteLength', PyJsBshift(var.get('byteLength'),Js(0.0)))
            if var.get('noAssert').neg():
                var.put('maxBytes', (var.get('Math').callprop('pow', Js(2.0), (Js(8.0)*var.get('byteLength')))-Js(1.0)))
                var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), var.get('byteLength'), var.get('maxBytes'), Js(0.0))
            var.put('i', (var.get('byteLength')-Js(1.0)))
            var.put('mul', Js(1.0))
            var.get(u"this").put((var.get('offset')+var.get('i')), (var.get('value')&Js(255)))
            while ((var.put('i',Js(var.get('i').to_number())-Js(1))>=Js(0.0)) and var.put('mul', Js(256), '*')):
                var.get(u"this").put((var.get('offset')+var.get('i')), ((var.get('value')/var.get('mul'))&Js(255)))
            return (var.get('offset')+var.get('byteLength'))
        PyJs_writeUIntBE_68_._set_name('writeUIntBE')
        var.get('Buffer').get('prototype').put('writeUIntBE', PyJs_writeUIntBE_68_)
        @Js
        def PyJs_writeUInt8_69_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUInt8':PyJs_writeUInt8_69_}, var)
            var.registers(['offset', 'noAssert', 'value'])
            var.put('value', (+var.get('value')))
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(1.0), Js(255), Js(0.0))
            var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
            return (var.get('offset')+Js(1.0))
        PyJs_writeUInt8_69_._set_name('writeUInt8')
        var.get('Buffer').get('prototype').put('writeUInt8', PyJs_writeUInt8_69_)
        @Js
        def PyJs_writeUInt16LE_70_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUInt16LE':PyJs_writeUInt16LE_70_}, var)
            var.registers(['offset', 'noAssert', 'value'])
            var.put('value', (+var.get('value')))
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(2.0), Js(65535), Js(0.0))
            var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
            var.get(u"this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(8.0)))
            return (var.get('offset')+Js(2.0))
        PyJs_writeUInt16LE_70_._set_name('writeUInt16LE')
        var.get('Buffer').get('prototype').put('writeUInt16LE', PyJs_writeUInt16LE_70_)
        @Js
        def PyJs_writeUInt16BE_71_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUInt16BE':PyJs_writeUInt16BE_71_}, var)
            var.registers(['offset', 'noAssert', 'value'])
            var.put('value', (+var.get('value')))
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(2.0), Js(65535), Js(0.0))
            var.get(u"this").put(var.get('offset'), PyJsBshift(var.get('value'),Js(8.0)))
            var.get(u"this").put((var.get('offset')+Js(1.0)), (var.get('value')&Js(255)))
            return (var.get('offset')+Js(2.0))
        PyJs_writeUInt16BE_71_._set_name('writeUInt16BE')
        var.get('Buffer').get('prototype').put('writeUInt16BE', PyJs_writeUInt16BE_71_)
        @Js
        def PyJs_writeUInt32LE_72_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUInt32LE':PyJs_writeUInt32LE_72_}, var)
            var.registers(['offset', 'noAssert', 'value'])
            var.put('value', (+var.get('value')))
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(4.0), Js(4294967295), Js(0.0))
            var.get(u"this").put((var.get('offset')+Js(3.0)), PyJsBshift(var.get('value'),Js(24.0)))
            var.get(u"this").put((var.get('offset')+Js(2.0)), PyJsBshift(var.get('value'),Js(16.0)))
            var.get(u"this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(8.0)))
            var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
            return (var.get('offset')+Js(4.0))
        PyJs_writeUInt32LE_72_._set_name('writeUInt32LE')
        var.get('Buffer').get('prototype').put('writeUInt32LE', PyJs_writeUInt32LE_72_)
        @Js
        def PyJs_writeUInt32BE_73_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeUInt32BE':PyJs_writeUInt32BE_73_}, var)
            var.registers(['offset', 'noAssert', 'value'])
            var.put('value', (+var.get('value')))
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(4.0), Js(4294967295), Js(0.0))
            var.get(u"this").put(var.get('offset'), PyJsBshift(var.get('value'),Js(24.0)))
            var.get(u"this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(16.0)))
            var.get(u"this").put((var.get('offset')+Js(2.0)), PyJsBshift(var.get('value'),Js(8.0)))
            var.get(u"this").put((var.get('offset')+Js(3.0)), (var.get('value')&Js(255)))
            return (var.get('offset')+Js(4.0))
        PyJs_writeUInt32BE_73_._set_name('writeUInt32BE')
        var.get('Buffer').get('prototype').put('writeUInt32BE', PyJs_writeUInt32BE_73_)
        @Js
        def PyJs_writeIntLE_74_(value, offset, byteLength, noAssert, this, arguments, var=var):
            var = Scope({'value':value, 'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeIntLE':PyJs_writeIntLE_74_}, var)
            var.registers(['byteLength', 'value', 'i', 'offset', 'noAssert', 'mul', 'limit', 'sub'])
            var.put('value', (+var.get('value')))
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.put('limit', var.get('Math').callprop('pow', Js(2.0), ((Js(8.0)*var.get('byteLength'))-Js(1.0))))
                var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), var.get('byteLength'), (var.get('limit')-Js(1.0)), (-var.get('limit')))
            var.put('i', Js(0.0))
            var.put('mul', Js(1.0))
            var.put('sub', Js(0.0))
            var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
            while ((var.put('i',Js(var.get('i').to_number())+Js(1))<var.get('byteLength')) and var.put('mul', Js(256), '*')):
                if (((var.get('value')<Js(0.0)) and PyJsStrictEq(var.get('sub'),Js(0.0))) and PyJsStrictNeq(var.get(u"this").get(((var.get('offset')+var.get('i'))-Js(1.0))),Js(0.0))):
                    var.put('sub', Js(1.0))
                var.get(u"this").put((var.get('offset')+var.get('i')), ((((var.get('value')/var.get('mul'))>>Js(0.0))-var.get('sub'))&Js(255)))
            return (var.get('offset')+var.get('byteLength'))
        PyJs_writeIntLE_74_._set_name('writeIntLE')
        var.get('Buffer').get('prototype').put('writeIntLE', PyJs_writeIntLE_74_)
        @Js
        def PyJs_writeIntBE_75_(value, offset, byteLength, noAssert, this, arguments, var=var):
            var = Scope({'value':value, 'offset':offset, 'byteLength':byteLength, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeIntBE':PyJs_writeIntBE_75_}, var)
            var.registers(['byteLength', 'value', 'i', 'offset', 'noAssert', 'mul', 'limit', 'sub'])
            var.put('value', (+var.get('value')))
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.put('limit', var.get('Math').callprop('pow', Js(2.0), ((Js(8.0)*var.get('byteLength'))-Js(1.0))))
                var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), var.get('byteLength'), (var.get('limit')-Js(1.0)), (-var.get('limit')))
            var.put('i', (var.get('byteLength')-Js(1.0)))
            var.put('mul', Js(1.0))
            var.put('sub', Js(0.0))
            var.get(u"this").put((var.get('offset')+var.get('i')), (var.get('value')&Js(255)))
            while ((var.put('i',Js(var.get('i').to_number())-Js(1))>=Js(0.0)) and var.put('mul', Js(256), '*')):
                if (((var.get('value')<Js(0.0)) and PyJsStrictEq(var.get('sub'),Js(0.0))) and PyJsStrictNeq(var.get(u"this").get(((var.get('offset')+var.get('i'))+Js(1.0))),Js(0.0))):
                    var.put('sub', Js(1.0))
                var.get(u"this").put((var.get('offset')+var.get('i')), ((((var.get('value')/var.get('mul'))>>Js(0.0))-var.get('sub'))&Js(255)))
            return (var.get('offset')+var.get('byteLength'))
        PyJs_writeIntBE_75_._set_name('writeIntBE')
        var.get('Buffer').get('prototype').put('writeIntBE', PyJs_writeIntBE_75_)
        @Js
        def PyJs_writeInt8_76_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeInt8':PyJs_writeInt8_76_}, var)
            var.registers(['offset', 'noAssert', 'value'])
            var.put('value', (+var.get('value')))
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(1.0), Js(127), (-Js(128)))
            if (var.get('value')<Js(0.0)):
                var.put('value', ((Js(255)+var.get('value'))+Js(1.0)))
            var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
            return (var.get('offset')+Js(1.0))
        PyJs_writeInt8_76_._set_name('writeInt8')
        var.get('Buffer').get('prototype').put('writeInt8', PyJs_writeInt8_76_)
        @Js
        def PyJs_writeInt16LE_77_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeInt16LE':PyJs_writeInt16LE_77_}, var)
            var.registers(['offset', 'noAssert', 'value'])
            var.put('value', (+var.get('value')))
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(2.0), Js(32767), (-Js(32768)))
            var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
            var.get(u"this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(8.0)))
            return (var.get('offset')+Js(2.0))
        PyJs_writeInt16LE_77_._set_name('writeInt16LE')
        var.get('Buffer').get('prototype').put('writeInt16LE', PyJs_writeInt16LE_77_)
        @Js
        def PyJs_writeInt16BE_78_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeInt16BE':PyJs_writeInt16BE_78_}, var)
            var.registers(['offset', 'noAssert', 'value'])
            var.put('value', (+var.get('value')))
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(2.0), Js(32767), (-Js(32768)))
            var.get(u"this").put(var.get('offset'), PyJsBshift(var.get('value'),Js(8.0)))
            var.get(u"this").put((var.get('offset')+Js(1.0)), (var.get('value')&Js(255)))
            return (var.get('offset')+Js(2.0))
        PyJs_writeInt16BE_78_._set_name('writeInt16BE')
        var.get('Buffer').get('prototype').put('writeInt16BE', PyJs_writeInt16BE_78_)
        @Js
        def PyJs_writeInt32LE_79_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeInt32LE':PyJs_writeInt32LE_79_}, var)
            var.registers(['offset', 'noAssert', 'value'])
            var.put('value', (+var.get('value')))
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(4.0), Js(2147483647), (-Js(2147483648)))
            var.get(u"this").put(var.get('offset'), (var.get('value')&Js(255)))
            var.get(u"this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(8.0)))
            var.get(u"this").put((var.get('offset')+Js(2.0)), PyJsBshift(var.get('value'),Js(16.0)))
            var.get(u"this").put((var.get('offset')+Js(3.0)), PyJsBshift(var.get('value'),Js(24.0)))
            return (var.get('offset')+Js(4.0))
        PyJs_writeInt32LE_79_._set_name('writeInt32LE')
        var.get('Buffer').get('prototype').put('writeInt32LE', PyJs_writeInt32LE_79_)
        @Js
        def PyJs_writeInt32BE_80_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeInt32BE':PyJs_writeInt32BE_80_}, var)
            var.registers(['offset', 'noAssert', 'value'])
            var.put('value', (+var.get('value')))
            var.put('offset', PyJsBshift(var.get('offset'),Js(0.0)))
            if var.get('noAssert').neg():
                var.get('checkInt')(var.get(u"this"), var.get('value'), var.get('offset'), Js(4.0), Js(2147483647), (-Js(2147483648)))
            if (var.get('value')<Js(0.0)):
                var.put('value', ((Js(4294967295)+var.get('value'))+Js(1.0)))
            var.get(u"this").put(var.get('offset'), PyJsBshift(var.get('value'),Js(24.0)))
            var.get(u"this").put((var.get('offset')+Js(1.0)), PyJsBshift(var.get('value'),Js(16.0)))
            var.get(u"this").put((var.get('offset')+Js(2.0)), PyJsBshift(var.get('value'),Js(8.0)))
            var.get(u"this").put((var.get('offset')+Js(3.0)), (var.get('value')&Js(255)))
            return (var.get('offset')+Js(4.0))
        PyJs_writeInt32BE_80_._set_name('writeInt32BE')
        var.get('Buffer').get('prototype').put('writeInt32BE', PyJs_writeInt32BE_80_)
        pass
        pass
        @Js
        def PyJs_writeFloatLE_81_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeFloatLE':PyJs_writeFloatLE_81_}, var)
            var.registers(['offset', 'noAssert', 'value'])
            return var.get('writeFloat')(var.get(u"this"), var.get('value'), var.get('offset'), Js(True), var.get('noAssert'))
        PyJs_writeFloatLE_81_._set_name('writeFloatLE')
        var.get('Buffer').get('prototype').put('writeFloatLE', PyJs_writeFloatLE_81_)
        @Js
        def PyJs_writeFloatBE_82_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeFloatBE':PyJs_writeFloatBE_82_}, var)
            var.registers(['offset', 'noAssert', 'value'])
            return var.get('writeFloat')(var.get(u"this"), var.get('value'), var.get('offset'), Js(False), var.get('noAssert'))
        PyJs_writeFloatBE_82_._set_name('writeFloatBE')
        var.get('Buffer').get('prototype').put('writeFloatBE', PyJs_writeFloatBE_82_)
        pass
        @Js
        def PyJs_writeDoubleLE_83_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeDoubleLE':PyJs_writeDoubleLE_83_}, var)
            var.registers(['offset', 'noAssert', 'value'])
            return var.get('writeDouble')(var.get(u"this"), var.get('value'), var.get('offset'), Js(True), var.get('noAssert'))
        PyJs_writeDoubleLE_83_._set_name('writeDoubleLE')
        var.get('Buffer').get('prototype').put('writeDoubleLE', PyJs_writeDoubleLE_83_)
        @Js
        def PyJs_writeDoubleBE_84_(value, offset, noAssert, this, arguments, var=var):
            var = Scope({'value':value, 'offset':offset, 'noAssert':noAssert, 'this':this, 'arguments':arguments, 'writeDoubleBE':PyJs_writeDoubleBE_84_}, var)
            var.registers(['offset', 'noAssert', 'value'])
            return var.get('writeDouble')(var.get(u"this"), var.get('value'), var.get('offset'), Js(False), var.get('noAssert'))
        PyJs_writeDoubleBE_84_._set_name('writeDoubleBE')
        var.get('Buffer').get('prototype').put('writeDoubleBE', PyJs_writeDoubleBE_84_)
        @Js
        def PyJs_copy_85_(target, targetStart, start, end, this, arguments, var=var):
            var = Scope({'target':target, 'targetStart':targetStart, 'start':start, 'end':end, 'this':this, 'arguments':arguments, 'copy':PyJs_copy_85_}, var)
            var.registers(['len', 'target', 'i', 'start', 'targetStart', 'end'])
            if var.get('Buffer').callprop('isBuffer', var.get('target')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('argument should be a Buffer')))
                raise PyJsTempException
            if var.get('start').neg():
                var.put('start', Js(0.0))
            if (var.get('end').neg() and PyJsStrictNeq(var.get('end'),Js(0.0))):
                var.put('end', var.get(u"this").get('length'))
            if (var.get('targetStart')>=var.get('target').get('length')):
                var.put('targetStart', var.get('target').get('length'))
            if var.get('targetStart').neg():
                var.put('targetStart', Js(0.0))
            if ((var.get('end')>Js(0.0)) and (var.get('end')<var.get('start'))):
                var.put('end', var.get('start'))
            if PyJsStrictEq(var.get('end'),var.get('start')):
                return Js(0.0)
            if (PyJsStrictEq(var.get('target').get('length'),Js(0.0)) or PyJsStrictEq(var.get(u"this").get('length'),Js(0.0))):
                return Js(0.0)
            if (var.get('targetStart')<Js(0.0)):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('targetStart out of bounds')))
                raise PyJsTempException
            if ((var.get('start')<Js(0.0)) or (var.get('start')>=var.get(u"this").get('length'))):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Index out of range')))
                raise PyJsTempException
            if (var.get('end')<Js(0.0)):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('sourceEnd out of bounds')))
                raise PyJsTempException
            if (var.get('end')>var.get(u"this").get('length')):
                var.put('end', var.get(u"this").get('length'))
            if ((var.get('target').get('length')-var.get('targetStart'))<(var.get('end')-var.get('start'))):
                var.put('end', ((var.get('target').get('length')-var.get('targetStart'))+var.get('start')))
            var.put('len', (var.get('end')-var.get('start')))
            if (PyJsStrictEq(var.get(u"this"),var.get('target')) and PyJsStrictEq(var.get('Uint8Array').get('prototype').get('copyWithin').typeof(),Js('function'))):
                var.get(u"this").callprop('copyWithin', var.get('targetStart'), var.get('start'), var.get('end'))
            else:
                if ((PyJsStrictEq(var.get(u"this"),var.get('target')) and (var.get('start')<var.get('targetStart'))) and (var.get('targetStart')<var.get('end'))):
                    #for JS loop
                    var.put('i', (var.get('len')-Js(1.0)))
                    while (var.get('i')>=Js(0.0)):
                        try:
                            var.get('target').put((var.get('i')+var.get('targetStart')), var.get(u"this").get((var.get('i')+var.get('start'))))
                        finally:
                                var.put('i',Js(var.get('i').to_number())-Js(1))
                else:
                    var.get('Uint8Array').get('prototype').get('set').callprop('call', var.get('target'), var.get(u"this").callprop('subarray', var.get('start'), var.get('end')), var.get('targetStart'))
            return var.get('len')
        PyJs_copy_85_._set_name('copy')
        var.get('Buffer').get('prototype').put('copy', PyJs_copy_85_)
        @Js
        def PyJs_fill_86_(val, start, end, encoding, this, arguments, var=var):
            var = Scope({'val':val, 'start':start, 'end':end, 'encoding':encoding, 'this':this, 'arguments':arguments, 'fill':PyJs_fill_86_}, var)
            var.registers(['len', 'i', 'code', 'start', 'encoding', 'bytes', 'end', 'val'])
            if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('string')):
                if PyJsStrictEq(var.get('start',throw=False).typeof(),Js('string')):
                    var.put('encoding', var.get('start'))
                    var.put('start', Js(0.0))
                    var.put('end', var.get(u"this").get('length'))
                else:
                    if PyJsStrictEq(var.get('end',throw=False).typeof(),Js('string')):
                        var.put('encoding', var.get('end'))
                        var.put('end', var.get(u"this").get('length'))
                if (PyJsStrictNeq(var.get('encoding'),var.get('undefined')) and PyJsStrictNeq(var.get('encoding',throw=False).typeof(),Js('string'))):
                    PyJsTempException = JsToPyException(var.get('TypeError').create(Js('encoding must be a string')))
                    raise PyJsTempException
                if (PyJsStrictEq(var.get('encoding',throw=False).typeof(),Js('string')) and var.get('Buffer').callprop('isEncoding', var.get('encoding')).neg()):
                    PyJsTempException = JsToPyException(var.get('TypeError').create((Js('Unknown encoding: ')+var.get('encoding'))))
                    raise PyJsTempException
                if PyJsStrictEq(var.get('val').get('length'),Js(1.0)):
                    var.put('code', var.get('val').callprop('charCodeAt', Js(0.0)))
                    if ((PyJsStrictEq(var.get('encoding'),Js('utf8')) and (var.get('code')<Js(128.0))) or PyJsStrictEq(var.get('encoding'),Js('latin1'))):
                        var.put('val', var.get('code'))
            else:
                if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('number')):
                    var.put('val', (var.get('val')&Js(255.0)))
            if (((var.get('start')<Js(0.0)) or (var.get(u"this").get('length')<var.get('start'))) or (var.get(u"this").get('length')<var.get('end'))):
                PyJsTempException = JsToPyException(var.get('RangeError').create(Js('Out of range index')))
                raise PyJsTempException
            if (var.get('end')<=var.get('start')):
                return var.get(u"this")
            var.put('start', PyJsBshift(var.get('start'),Js(0.0)))
            var.put('end', (var.get(u"this").get('length') if PyJsStrictEq(var.get('end'),var.get('undefined')) else PyJsBshift(var.get('end'),Js(0.0))))
            if var.get('val').neg():
                var.put('val', Js(0.0))
            pass
            if PyJsStrictEq(var.get('val',throw=False).typeof(),Js('number')):
                #for JS loop
                var.put('i', var.get('start'))
                while (var.get('i')<var.get('end')):
                    try:
                        var.get(u"this").put(var.get('i'), var.get('val'))
                    finally:
                            var.put('i',Js(var.get('i').to_number())+Js(1))
            else:
                var.put('bytes', (var.get('val') if var.get('Buffer').callprop('isBuffer', var.get('val')) else var.get('Buffer').callprop('from', var.get('val'), var.get('encoding'))))
                var.put('len', var.get('bytes').get('length'))
                if PyJsStrictEq(var.get('len'),Js(0.0)):
                    PyJsTempException = JsToPyException(var.get('TypeError').create(((Js('The value "')+var.get('val'))+Js('" is invalid for argument "value"'))))
                    raise PyJsTempException
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<(var.get('end')-var.get('start'))):
                    try:
                        var.get(u"this").put((var.get('i')+var.get('start')), var.get('bytes').get((var.get('i')%var.get('len'))))
                    finally:
                            var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get(u"this")
        PyJs_fill_86_._set_name('fill')
        var.get('Buffer').get('prototype').put('fill', PyJs_fill_86_)
        var.put('INVALID_BASE64_RE', JsRegExp('/[^+/0-9A-Za-z-_]/g'))
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
    PyJs_anonymous_24_._set_name('anonymous')
    @Js
    def PyJs_anonymous_87_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'Procedure', 'createThunk', 'exports', 'require', 'compileCwise'])
        @Js
        def PyJsHoisted_Procedure_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").put('argTypes', Js([]))
            var.get(u"this").put('shimArgs', Js([]))
            var.get(u"this").put('arrayArgs', Js([]))
            var.get(u"this").put('arrayBlockIndices', Js([]))
            var.get(u"this").put('scalarArgs', Js([]))
            var.get(u"this").put('offsetArgs', Js([]))
            var.get(u"this").put('offsetArgIndex', Js([]))
            var.get(u"this").put('indexArgs', Js([]))
            var.get(u"this").put('shapeArgs', Js([]))
            var.get(u"this").put('funcName', Js(''))
            var.get(u"this").put('pre', var.get(u"null"))
            var.get(u"this").put('body', var.get(u"null"))
            var.get(u"this").put('post', var.get(u"null"))
            var.get(u"this").put('debug', Js(False))
        PyJsHoisted_Procedure_.func_name = 'Procedure'
        var.put('Procedure', PyJsHoisted_Procedure_)
        @Js
        def PyJsHoisted_compileCwise_(user_args, this, arguments, var=var):
            var = Scope({'user_args':user_args, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'arg_type', 'user_args', 'proc', 'proc_args'])
            var.put('proc', var.get('Procedure').create())
            var.get('proc').put('pre', var.get('user_args').get('pre'))
            var.get('proc').put('body', var.get('user_args').get('body'))
            var.get('proc').put('post', var.get('user_args').get('post'))
            var.put('proc_args', var.get('user_args').get('args').callprop('slice', Js(0.0)))
            var.get('proc').put('argTypes', var.get('proc_args'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('proc_args').get('length')):
                try:
                    var.put('arg_type', var.get('proc_args').get(var.get('i')))
                    if (PyJsStrictEq(var.get('arg_type'),Js('array')) or (PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('arg_type',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('arg_type'))),Js('object')) and var.get('arg_type').get('blockIndices'))):
                        var.get('proc').get('argTypes').put(var.get('i'), Js('array'))
                        var.get('proc').get('arrayArgs').callprop('push', var.get('i'))
                        var.get('proc').get('arrayBlockIndices').callprop('push', (var.get('arg_type').get('blockIndices') if var.get('arg_type').get('blockIndices') else Js(0.0)))
                        var.get('proc').get('shimArgs').callprop('push', (Js('array')+var.get('i')))
                        if ((var.get('i')<var.get('proc').get('pre').get('args').get('length')) and (var.get('proc').get('pre').get('args').get(var.get('i')).get('count')>Js(0.0))):
                            PyJsTempException = JsToPyException(var.get('Error').create(Js('cwise: pre() block may not reference array args')))
                            raise PyJsTempException
                        if ((var.get('i')<var.get('proc').get('post').get('args').get('length')) and (var.get('proc').get('post').get('args').get(var.get('i')).get('count')>Js(0.0))):
                            PyJsTempException = JsToPyException(var.get('Error').create(Js('cwise: post() block may not reference array args')))
                            raise PyJsTempException
                    else:
                        if PyJsStrictEq(var.get('arg_type'),Js('scalar')):
                            var.get('proc').get('scalarArgs').callprop('push', var.get('i'))
                            var.get('proc').get('shimArgs').callprop('push', (Js('scalar')+var.get('i')))
                        else:
                            if PyJsStrictEq(var.get('arg_type'),Js('index')):
                                var.get('proc').get('indexArgs').callprop('push', var.get('i'))
                                if ((var.get('i')<var.get('proc').get('pre').get('args').get('length')) and (var.get('proc').get('pre').get('args').get(var.get('i')).get('count')>Js(0.0))):
                                    PyJsTempException = JsToPyException(var.get('Error').create(Js('cwise: pre() block may not reference array index')))
                                    raise PyJsTempException
                                if ((var.get('i')<var.get('proc').get('body').get('args').get('length')) and var.get('proc').get('body').get('args').get(var.get('i')).get('lvalue')):
                                    PyJsTempException = JsToPyException(var.get('Error').create(Js('cwise: body() block may not write to array index')))
                                    raise PyJsTempException
                                if ((var.get('i')<var.get('proc').get('post').get('args').get('length')) and (var.get('proc').get('post').get('args').get(var.get('i')).get('count')>Js(0.0))):
                                    PyJsTempException = JsToPyException(var.get('Error').create(Js('cwise: post() block may not reference array index')))
                                    raise PyJsTempException
                            else:
                                if PyJsStrictEq(var.get('arg_type'),Js('shape')):
                                    var.get('proc').get('shapeArgs').callprop('push', var.get('i'))
                                    if ((var.get('i')<var.get('proc').get('pre').get('args').get('length')) and var.get('proc').get('pre').get('args').get(var.get('i')).get('lvalue')):
                                        PyJsTempException = JsToPyException(var.get('Error').create(Js('cwise: pre() block may not write to array shape')))
                                        raise PyJsTempException
                                    if ((var.get('i')<var.get('proc').get('body').get('args').get('length')) and var.get('proc').get('body').get('args').get(var.get('i')).get('lvalue')):
                                        PyJsTempException = JsToPyException(var.get('Error').create(Js('cwise: body() block may not write to array shape')))
                                        raise PyJsTempException
                                    if ((var.get('i')<var.get('proc').get('post').get('args').get('length')) and var.get('proc').get('post').get('args').get(var.get('i')).get('lvalue')):
                                        PyJsTempException = JsToPyException(var.get('Error').create(Js('cwise: post() block may not write to array shape')))
                                        raise PyJsTempException
                                else:
                                    if (PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('arg_type',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('arg_type'))),Js('object')) and var.get('arg_type').get('offset')):
                                        var.get('proc').get('argTypes').put(var.get('i'), Js('offset'))
                                        var.get('proc').get('offsetArgs').callprop('push', Js({'array':var.get('arg_type').get('array'),'offset':var.get('arg_type').get('offset')}))
                                        var.get('proc').get('offsetArgIndex').callprop('push', var.get('i'))
                                    else:
                                        PyJsTempException = JsToPyException(var.get('Error').create((Js('cwise: Unknown argument type ')+var.get('proc_args').get(var.get('i')))))
                                        raise PyJsTempException
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            if (var.get('proc').get('arrayArgs').get('length')<=Js(0.0)):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('cwise: No array arguments specified')))
                raise PyJsTempException
            if (var.get('proc').get('pre').get('args').get('length')>var.get('proc_args').get('length')):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('cwise: Too many arguments in pre() block')))
                raise PyJsTempException
            if (var.get('proc').get('body').get('args').get('length')>var.get('proc_args').get('length')):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('cwise: Too many arguments in body() block')))
                raise PyJsTempException
            if (var.get('proc').get('post').get('args').get('length')>var.get('proc_args').get('length')):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('cwise: Too many arguments in post() block')))
                raise PyJsTempException
            var.get('proc').put('debug', (var.get('user_args').get('printCode').neg().neg() or var.get('user_args').get('debug').neg().neg()))
            var.get('proc').put('funcName', (var.get('user_args').get('funcName') or Js('cwise')))
            var.get('proc').put('blockSize', (var.get('user_args').get('blockSize') or Js(64.0)))
            return var.get('createThunk')(var.get('proc'))
        PyJsHoisted_compileCwise_.func_name = 'compileCwise'
        var.put('compileCwise', PyJsHoisted_compileCwise_)
        Js('use strict')
        var.put('createThunk', var.get('require')(Js('./lib/thunk.js')))
        pass
        pass
        var.get('module').put('exports', var.get('compileCwise'))
    PyJs_anonymous_87_._set_name('anonymous')
    @Js
    def PyJs_anonymous_88_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['uniq', 'module', 'typeSummary', 'exports', 'generateCWiseOp', 'processBlock', 'innerFill', 'outerFill', 'require', 'countMatches'])
        @Js
        def PyJsHoisted_innerFill_(order, proc, body, this, arguments, var=var):
            var = Scope({'order':order, 'proc':proc, 'body':body, 'this':this, 'arguments':arguments}, var)
            var.registers(['nargs', 'i', 'order', 'vars', 'body', 'j', 'proc', 'idx', 'code', 'dimension', 'has_index', 'pidx'])
            var.put('dimension', var.get('order').get('length'))
            var.put('nargs', var.get('proc').get('arrayArgs').get('length'))
            var.put('has_index', (var.get('proc').get('indexArgs').get('length')>Js(0.0)))
            var.put('code', Js([]))
            var.put('vars', Js([]))
            var.put('idx', Js(0.0))
            var.put('pidx', Js(0.0))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('dimension')):
                try:
                    var.get('vars').callprop('push', Js([Js('i'), var.get('i'), Js('=0')]).callprop('join', Js('')))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            #for JS loop
            var.put('j', Js(0.0))
            while (var.get('j')<var.get('nargs')):
                try:
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('dimension')):
                        try:
                            var.put('pidx', var.get('idx'))
                            var.put('idx', var.get('order').get(var.get('i')))
                            if PyJsStrictEq(var.get('i'),Js(0.0)):
                                var.get('vars').callprop('push', Js([Js('d'), var.get('j'), Js('s'), var.get('i'), Js('=t'), var.get('j'), Js('p'), var.get('idx')]).callprop('join', Js('')))
                            else:
                                var.get('vars').callprop('push', Js([Js('d'), var.get('j'), Js('s'), var.get('i'), Js('=(t'), var.get('j'), Js('p'), var.get('idx'), Js('-s'), var.get('pidx'), Js('*t'), var.get('j'), Js('p'), var.get('pidx'), Js(')')]).callprop('join', Js('')))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                finally:
                        var.put('j',Js(var.get('j').to_number())+Js(1))
            if (var.get('vars').get('length')>Js(0.0)):
                var.get('code').callprop('push', (Js('var ')+var.get('vars').callprop('join', Js(','))))
            #for JS loop
            var.put('i', (var.get('dimension')-Js(1.0)))
            while (var.get('i')>=Js(0.0)):
                try:
                    var.put('idx', var.get('order').get(var.get('i')))
                    var.get('code').callprop('push', Js([Js('for(i'), var.get('i'), Js('=0;i'), var.get('i'), Js('<s'), var.get('idx'), Js(';++i'), var.get('i'), Js('){')]).callprop('join', Js('')))
                finally:
                        var.put('i',Js(var.get('i').to_number())-Js(1))
            var.get('code').callprop('push', var.get('body'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('dimension')):
                try:
                    var.put('pidx', var.get('idx'))
                    var.put('idx', var.get('order').get(var.get('i')))
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<var.get('nargs')):
                        try:
                            var.get('code').callprop('push', Js([Js('p'), var.get('j'), Js('+=d'), var.get('j'), Js('s'), var.get('i')]).callprop('join', Js('')))
                        finally:
                                var.put('j',Js(var.get('j').to_number())+Js(1))
                    if var.get('has_index'):
                        if (var.get('i')>Js(0.0)):
                            var.get('code').callprop('push', Js([Js('index['), var.get('pidx'), Js(']-=s'), var.get('pidx')]).callprop('join', Js('')))
                        var.get('code').callprop('push', Js([Js('++index['), var.get('idx'), Js(']')]).callprop('join', Js('')))
                    var.get('code').callprop('push', Js('}'))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('code').callprop('join', Js('\n'))
        PyJsHoisted_innerFill_.func_name = 'innerFill'
        var.put('innerFill', PyJsHoisted_innerFill_)
        @Js
        def PyJsHoisted_outerFill_(matched, order, proc, body, this, arguments, var=var):
            var = Scope({'matched':matched, 'order':order, 'proc':proc, 'body':body, 'this':this, 'arguments':arguments}, var)
            var.registers(['nargs', 'indexStr', 'matched', 'i', 'order', 'body', 'blockSize', 'j', 'proc', 'code', 'dimension', 'has_index'])
            var.put('dimension', var.get('order').get('length'))
            var.put('nargs', var.get('proc').get('arrayArgs').get('length'))
            var.put('blockSize', var.get('proc').get('blockSize'))
            var.put('has_index', (var.get('proc').get('indexArgs').get('length')>Js(0.0)))
            var.put('code', Js([]))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('nargs')):
                try:
                    var.get('code').callprop('push', Js([Js('var offset'), var.get('i'), Js('=p'), var.get('i')]).callprop('join', Js('')))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            #for JS loop
            var.put('i', var.get('matched'))
            while (var.get('i')<var.get('dimension')):
                try:
                    var.get('code').callprop('push', Js([((Js('for(var j')+var.get('i'))+Js('=SS[')), var.get('order').get(var.get('i')), Js(']|0;j'), var.get('i'), Js('>0;){')]).callprop('join', Js('')))
                    var.get('code').callprop('push', Js([Js('if(j'), var.get('i'), Js('<'), var.get('blockSize'), Js('){')]).callprop('join', Js('')))
                    var.get('code').callprop('push', Js([Js('s'), var.get('order').get(var.get('i')), Js('=j'), var.get('i')]).callprop('join', Js('')))
                    var.get('code').callprop('push', Js([Js('j'), var.get('i'), Js('=0')]).callprop('join', Js('')))
                    var.get('code').callprop('push', Js([Js('}else{s'), var.get('order').get(var.get('i')), Js('='), var.get('blockSize')]).callprop('join', Js('')))
                    var.get('code').callprop('push', Js([Js('j'), var.get('i'), Js('-='), var.get('blockSize'), Js('}')]).callprop('join', Js('')))
                    if var.get('has_index'):
                        var.get('code').callprop('push', Js([Js('index['), var.get('order').get(var.get('i')), Js(']=j'), var.get('i')]).callprop('join', Js('')))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('nargs')):
                try:
                    var.put('indexStr', Js([(Js('offset')+var.get('i'))]))
                    #for JS loop
                    var.put('j', var.get('matched'))
                    while (var.get('j')<var.get('dimension')):
                        try:
                            var.get('indexStr').callprop('push', Js([Js('j'), var.get('j'), Js('*t'), var.get('i'), Js('p'), var.get('order').get(var.get('j'))]).callprop('join', Js('')))
                        finally:
                                var.put('j',Js(var.get('j').to_number())+Js(1))
                    var.get('code').callprop('push', Js([Js('p'), var.get('i'), Js('=('), var.get('indexStr').callprop('join', Js('+')), Js(')')]).callprop('join', Js('')))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            var.get('code').callprop('push', var.get('innerFill')(var.get('order'), var.get('proc'), var.get('body')))
            #for JS loop
            var.put('i', var.get('matched'))
            while (var.get('i')<var.get('dimension')):
                try:
                    var.get('code').callprop('push', Js('}'))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('code').callprop('join', Js('\n'))
        PyJsHoisted_outerFill_.func_name = 'outerFill'
        var.put('outerFill', PyJsHoisted_outerFill_)
        @Js
        def PyJsHoisted_countMatches_(orders, this, arguments, var=var):
            var = Scope({'orders':orders, 'this':this, 'arguments':arguments}, var)
            var.registers(['dimension', 'orders', 'matched', 'j'])
            var.put('matched', Js(0.0))
            var.put('dimension', var.get('orders').get('0').get('length'))
            while (var.get('matched')<var.get('dimension')):
                #for JS loop
                var.put('j', Js(1.0))
                while (var.get('j')<var.get('orders').get('length')):
                    try:
                        if PyJsStrictNeq(var.get('orders').get(var.get('j')).get(var.get('matched')),var.get('orders').get('0').get(var.get('matched'))):
                            return var.get('matched')
                    finally:
                            var.put('j',Js(var.get('j').to_number())+Js(1))
                var.put('matched',Js(var.get('matched').to_number())+Js(1))
            return var.get('matched')
        PyJsHoisted_countMatches_.func_name = 'countMatches'
        var.put('countMatches', PyJsHoisted_countMatches_)
        @Js
        def PyJsHoisted_processBlock_(block, proc, dtypes, this, arguments, var=var):
            var = Scope({'block':block, 'proc':proc, 'dtypes':dtypes, 'this':this, 'arguments':arguments}, var)
            var.registers(['re', 'pre', 'carg', 'i', 'arrNum', 'post', 'ptrStr', 'offArg', 'localStr', 'block', 'offArgIndex', 'reStrArr', 'dtypes', 'j', 'ptrStrArr', 'proc', 'code', 'arrStr'])
            var.put('code', var.get('block').get('body'))
            var.put('pre', Js([]))
            var.put('post', Js([]))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('block').get('args').get('length')):
                try:
                    var.put('carg', var.get('block').get('args').get(var.get('i')))
                    if (var.get('carg').get('count')<=Js(0.0)):
                        continue
                    var.put('re', var.get('RegExp').create(var.get('carg').get('name'), Js('g')))
                    var.put('ptrStr', Js(''))
                    var.put('arrNum', var.get('proc').get('arrayArgs').callprop('indexOf', var.get('i')))
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('proc').get('argTypes').get(var.get('i')))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('offset')):
                            SWITCHED = True
                            var.put('offArgIndex', var.get('proc').get('offsetArgIndex').callprop('indexOf', var.get('i')))
                            var.put('offArg', var.get('proc').get('offsetArgs').get(var.get('offArgIndex')))
                            var.put('arrNum', var.get('offArg').get('array'))
                            var.put('ptrStr', (Js('+q')+var.get('offArgIndex')))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('array')):
                            SWITCHED = True
                            var.put('ptrStr', ((Js('p')+var.get('arrNum'))+var.get('ptrStr')))
                            var.put('localStr', (Js('l')+var.get('i')))
                            var.put('arrStr', (Js('a')+var.get('arrNum')))
                            if PyJsStrictEq(var.get('proc').get('arrayBlockIndices').get(var.get('arrNum')),Js(0.0)):
                                if PyJsStrictEq(var.get('carg').get('count'),Js(1.0)):
                                    if PyJsStrictEq(var.get('dtypes').get(var.get('arrNum')),Js('generic')):
                                        if var.get('carg').get('lvalue'):
                                            var.get('pre').callprop('push', Js([Js('var '), var.get('localStr'), Js('='), var.get('arrStr'), Js('.get('), var.get('ptrStr'), Js(')')]).callprop('join', Js('')))
                                            var.put('code', var.get('code').callprop('replace', var.get('re'), var.get('localStr')))
                                            var.get('post').callprop('push', Js([var.get('arrStr'), Js('.set('), var.get('ptrStr'), Js(','), var.get('localStr'), Js(')')]).callprop('join', Js('')))
                                        else:
                                            var.put('code', var.get('code').callprop('replace', var.get('re'), Js([var.get('arrStr'), Js('.get('), var.get('ptrStr'), Js(')')]).callprop('join', Js(''))))
                                    else:
                                        var.put('code', var.get('code').callprop('replace', var.get('re'), Js([var.get('arrStr'), Js('['), var.get('ptrStr'), Js(']')]).callprop('join', Js(''))))
                                else:
                                    if PyJsStrictEq(var.get('dtypes').get(var.get('arrNum')),Js('generic')):
                                        var.get('pre').callprop('push', Js([Js('var '), var.get('localStr'), Js('='), var.get('arrStr'), Js('.get('), var.get('ptrStr'), Js(')')]).callprop('join', Js('')))
                                        var.put('code', var.get('code').callprop('replace', var.get('re'), var.get('localStr')))
                                        if var.get('carg').get('lvalue'):
                                            var.get('post').callprop('push', Js([var.get('arrStr'), Js('.set('), var.get('ptrStr'), Js(','), var.get('localStr'), Js(')')]).callprop('join', Js('')))
                                    else:
                                        var.get('pre').callprop('push', Js([Js('var '), var.get('localStr'), Js('='), var.get('arrStr'), Js('['), var.get('ptrStr'), Js(']')]).callprop('join', Js('')))
                                        var.put('code', var.get('code').callprop('replace', var.get('re'), var.get('localStr')))
                                        if var.get('carg').get('lvalue'):
                                            var.get('post').callprop('push', Js([var.get('arrStr'), Js('['), var.get('ptrStr'), Js(']='), var.get('localStr')]).callprop('join', Js('')))
                            else:
                                var.put('reStrArr', Js([var.get('carg').get('name')]))
                                var.put('ptrStrArr', Js([var.get('ptrStr')]))
                                #for JS loop
                                var.put('j', Js(0.0))
                                while (var.get('j')<var.get('Math').callprop('abs', var.get('proc').get('arrayBlockIndices').get(var.get('arrNum')))):
                                    try:
                                        var.get('reStrArr').callprop('push', Js('\\s*\\[([^\\]]+)\\]'))
                                        var.get('ptrStrArr').callprop('push', (((((Js('$')+(var.get('j')+Js(1.0)))+Js('*t'))+var.get('arrNum'))+Js('b'))+var.get('j')))
                                    finally:
                                            (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                                var.put('re', var.get('RegExp').create(var.get('reStrArr').callprop('join', Js('')), Js('g')))
                                var.put('ptrStr', var.get('ptrStrArr').callprop('join', Js('+')))
                                if PyJsStrictEq(var.get('dtypes').get(var.get('arrNum')),Js('generic')):
                                    PyJsTempException = JsToPyException(var.get('Error').create(Js('cwise: Generic arrays not supported in combination with blocks!')))
                                    raise PyJsTempException
                                else:
                                    var.put('code', var.get('code').callprop('replace', var.get('re'), Js([var.get('arrStr'), Js('['), var.get('ptrStr'), Js(']')]).callprop('join', Js(''))))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('scalar')):
                            SWITCHED = True
                            var.put('code', var.get('code').callprop('replace', var.get('re'), (Js('Y')+var.get('proc').get('scalarArgs').callprop('indexOf', var.get('i')))))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('index')):
                            SWITCHED = True
                            var.put('code', var.get('code').callprop('replace', var.get('re'), Js('index')))
                            break
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('shape')):
                            SWITCHED = True
                            var.put('code', var.get('code').callprop('replace', var.get('re'), Js('shape')))
                            break
                        SWITCHED = True
                        break
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return Js([var.get('pre').callprop('join', Js('\n')), var.get('code'), var.get('post').callprop('join', Js('\n'))]).callprop('join', Js('\n')).callprop('trim')
        PyJsHoisted_processBlock_.func_name = 'processBlock'
        var.put('processBlock', PyJsHoisted_processBlock_)
        @Js
        def PyJsHoisted_typeSummary_(dtypes, this, arguments, var=var):
            var = Scope({'dtypes':dtypes, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'dtypes', 'summary', 'allEqual', 't', 'digits'])
            var.put('summary', var.get('Array').create(var.get('dtypes').get('length')))
            var.put('allEqual', Js(True))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('dtypes').get('length')):
                try:
                    var.put('t', var.get('dtypes').get(var.get('i')))
                    var.put('digits', var.get('t').callprop('match', JsRegExp('/\\d+/')))
                    if var.get('digits').neg():
                        var.put('digits', Js(''))
                    else:
                        var.put('digits', var.get('digits').get('0'))
                    if PyJsStrictEq(var.get('t').callprop('charAt', Js(0.0)),Js(0.0)):
                        var.get('summary').put(var.get('i'), ((Js('u')+var.get('t').callprop('charAt', Js(1.0)))+var.get('digits')))
                    else:
                        var.get('summary').put(var.get('i'), (var.get('t').callprop('charAt', Js(0.0))+var.get('digits')))
                    if (var.get('i')>Js(0.0)):
                        var.put('allEqual', (var.get('allEqual') and PyJsStrictEq(var.get('summary').get(var.get('i')),var.get('summary').get((var.get('i')-Js(1.0))))))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            if var.get('allEqual'):
                return var.get('summary').get('0')
            return var.get('summary').callprop('join', Js(''))
        PyJsHoisted_typeSummary_.func_name = 'typeSummary'
        var.put('typeSummary', PyJsHoisted_typeSummary_)
        @Js
        def PyJsHoisted_generateCWiseOp_(proc, typesig, this, arguments, var=var):
            var = Scope({'proc':proc, 'typesig':typesig, 'this':this, 'arguments':arguments}, var)
            var.registers(['f', 'loopEnd', 'zeros', 'vars', 'init_string', 'code', 'dimension', 'arglist', 'off_arg', 'blockEnd', 'dtypes', 'body', 'proc', 'newOrder', 'i', 'blockBegin', 'orders', 'j', 'matched', 'loopName', 'loopOrders', 'typesig', 'loopBegin', 'thisVars'])
            var.put('dimension', ((var.get('typesig').get('1').get('length')-var.get('Math').callprop('abs', var.get('proc').get('arrayBlockIndices').get('0')))|Js(0.0)))
            var.put('orders', var.get('Array').create(var.get('proc').get('arrayArgs').get('length')))
            var.put('dtypes', var.get('Array').create(var.get('proc').get('arrayArgs').get('length')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('proc').get('arrayArgs').get('length')):
                try:
                    var.get('dtypes').put(var.get('i'), var.get('typesig').get((Js(2.0)*var.get('i'))))
                    var.get('orders').put(var.get('i'), var.get('typesig').get(((Js(2.0)*var.get('i'))+Js(1.0))))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            var.put('blockBegin', Js([]))
            var.put('blockEnd', Js([]))
            var.put('loopBegin', Js([]))
            var.put('loopEnd', Js([]))
            var.put('loopOrders', Js([]))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('proc').get('arrayArgs').get('length')):
                try:
                    if (var.get('proc').get('arrayBlockIndices').get(var.get('i'))<Js(0.0)):
                        var.get('loopBegin').callprop('push', Js(0.0))
                        var.get('loopEnd').callprop('push', var.get('dimension'))
                        var.get('blockBegin').callprop('push', var.get('dimension'))
                        var.get('blockEnd').callprop('push', (var.get('dimension')+var.get('proc').get('arrayBlockIndices').get(var.get('i'))))
                    else:
                        var.get('loopBegin').callprop('push', var.get('proc').get('arrayBlockIndices').get(var.get('i')))
                        var.get('loopEnd').callprop('push', (var.get('proc').get('arrayBlockIndices').get(var.get('i'))+var.get('dimension')))
                        var.get('blockBegin').callprop('push', Js(0.0))
                        var.get('blockEnd').callprop('push', var.get('proc').get('arrayBlockIndices').get(var.get('i')))
                    var.put('newOrder', Js([]))
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<var.get('orders').get(var.get('i')).get('length')):
                        try:
                            if ((var.get('loopBegin').get(var.get('i'))<=var.get('orders').get(var.get('i')).get(var.get('j'))) and (var.get('orders').get(var.get('i')).get(var.get('j'))<var.get('loopEnd').get(var.get('i')))):
                                var.get('newOrder').callprop('push', (var.get('orders').get(var.get('i')).get(var.get('j'))-var.get('loopBegin').get(var.get('i'))))
                        finally:
                                (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                    var.get('loopOrders').callprop('push', var.get('newOrder'))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            var.put('arglist', Js([Js('SS')]))
            var.put('code', Js([Js("'use strict'")]))
            var.put('vars', Js([]))
            #for JS loop
            var.put('j', Js(0.0))
            while (var.get('j')<var.get('dimension')):
                try:
                    var.get('vars').callprop('push', Js([Js('s'), var.get('j'), Js('=SS['), var.get('j'), Js(']')]).callprop('join', Js('')))
                finally:
                        var.put('j',Js(var.get('j').to_number())+Js(1))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('proc').get('arrayArgs').get('length')):
                try:
                    var.get('arglist').callprop('push', (Js('a')+var.get('i')))
                    var.get('arglist').callprop('push', (Js('t')+var.get('i')))
                    var.get('arglist').callprop('push', (Js('p')+var.get('i')))
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<var.get('dimension')):
                        try:
                            var.get('vars').callprop('push', Js([Js('t'), var.get('i'), Js('p'), var.get('j'), Js('=t'), var.get('i'), Js('['), (var.get('loopBegin').get(var.get('i'))+var.get('j')), Js(']')]).callprop('join', Js('')))
                        finally:
                                var.put('j',Js(var.get('j').to_number())+Js(1))
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<var.get('Math').callprop('abs', var.get('proc').get('arrayBlockIndices').get(var.get('i')))):
                        try:
                            var.get('vars').callprop('push', Js([Js('t'), var.get('i'), Js('b'), var.get('j'), Js('=t'), var.get('i'), Js('['), (var.get('blockBegin').get(var.get('i'))+var.get('j')), Js(']')]).callprop('join', Js('')))
                        finally:
                                var.put('j',Js(var.get('j').to_number())+Js(1))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('proc').get('scalarArgs').get('length')):
                try:
                    var.get('arglist').callprop('push', (Js('Y')+var.get('i')))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            if (var.get('proc').get('shapeArgs').get('length')>Js(0.0)):
                var.get('vars').callprop('push', Js('shape=SS.slice(0)'))
            if (var.get('proc').get('indexArgs').get('length')>Js(0.0)):
                var.put('zeros', var.get('Array').create(var.get('dimension')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('dimension')):
                    try:
                        var.get('zeros').put(var.get('i'), Js('0'))
                    finally:
                            var.put('i',Js(var.get('i').to_number())+Js(1))
                var.get('vars').callprop('push', Js([Js('index=['), var.get('zeros').callprop('join', Js(',')), Js(']')]).callprop('join', Js('')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('proc').get('offsetArgs').get('length')):
                try:
                    var.put('off_arg', var.get('proc').get('offsetArgs').get(var.get('i')))
                    var.put('init_string', Js([]))
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<var.get('off_arg').get('offset').get('length')):
                        try:
                            if PyJsStrictEq(var.get('off_arg').get('offset').get(var.get('j')),Js(0.0)):
                                continue
                            else:
                                if PyJsStrictEq(var.get('off_arg').get('offset').get(var.get('j')),Js(1.0)):
                                    var.get('init_string').callprop('push', Js([Js('t'), var.get('off_arg').get('array'), Js('p'), var.get('j')]).callprop('join', Js('')))
                                else:
                                    var.get('init_string').callprop('push', Js([var.get('off_arg').get('offset').get(var.get('j')), Js('*t'), var.get('off_arg').get('array'), Js('p'), var.get('j')]).callprop('join', Js('')))
                        finally:
                                var.put('j',Js(var.get('j').to_number())+Js(1))
                    if PyJsStrictEq(var.get('init_string').get('length'),Js(0.0)):
                        var.get('vars').callprop('push', ((Js('q')+var.get('i'))+Js('=0')))
                    else:
                        var.get('vars').callprop('push', Js([Js('q'), var.get('i'), Js('='), var.get('init_string').callprop('join', Js('+'))]).callprop('join', Js('')))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            var.put('thisVars', var.get('uniq')(Js([]).callprop('concat', var.get('proc').get('pre').get('thisVars')).callprop('concat', var.get('proc').get('body').get('thisVars')).callprop('concat', var.get('proc').get('post').get('thisVars'))))
            var.put('vars', var.get('vars').callprop('concat', var.get('thisVars')))
            if (var.get('vars').get('length')>Js(0.0)):
                var.get('code').callprop('push', (Js('var ')+var.get('vars').callprop('join', Js(','))))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('proc').get('arrayArgs').get('length')):
                try:
                    var.get('code').callprop('push', ((Js('p')+var.get('i'))+Js('|=0')))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            if (var.get('proc').get('pre').get('body').get('length')>Js(3.0)):
                var.get('code').callprop('push', var.get('processBlock')(var.get('proc').get('pre'), var.get('proc'), var.get('dtypes')))
            var.put('body', var.get('processBlock')(var.get('proc').get('body'), var.get('proc'), var.get('dtypes')))
            var.put('matched', var.get('countMatches')(var.get('loopOrders')))
            if (var.get('matched')<var.get('dimension')):
                var.get('code').callprop('push', var.get('outerFill')(var.get('matched'), var.get('loopOrders').get('0'), var.get('proc'), var.get('body')))
            else:
                var.get('code').callprop('push', var.get('innerFill')(var.get('loopOrders').get('0'), var.get('proc'), var.get('body')))
            if (var.get('proc').get('post').get('body').get('length')>Js(3.0)):
                var.get('code').callprop('push', var.get('processBlock')(var.get('proc').get('post'), var.get('proc'), var.get('dtypes')))
            if var.get('proc').get('debug'):
                var.get('console').callprop('log', Js('-----Generated cwise routine for '), var.get('typesig'), ((Js(':\n')+var.get('code').callprop('join', Js('\n')))+Js('\n----------')))
            var.put('loopName', Js([(var.get('proc').get('funcName') or Js('unnamed')), Js('_cwise_loop_'), var.get('orders').get('0').callprop('join', Js('s')), Js('m'), var.get('matched'), var.get('typeSummary')(var.get('dtypes'))]).callprop('join', Js('')))
            var.put('f', var.get('Function').create(Js([Js('function '), var.get('loopName'), Js('('), var.get('arglist').callprop('join', Js(',')), Js('){'), var.get('code').callprop('join', Js('\n')), Js('} return '), var.get('loopName')]).callprop('join', Js(''))))
            return var.get('f')()
        PyJsHoisted_generateCWiseOp_.func_name = 'generateCWiseOp'
        var.put('generateCWiseOp', PyJsHoisted_generateCWiseOp_)
        Js('use strict')
        var.put('uniq', var.get('require')(Js('uniq')))
        pass
        pass
        pass
        pass
        pass
        pass
        var.get('module').put('exports', var.get('generateCWiseOp'))
    PyJs_anonymous_88_._set_name('anonymous')
    @Js
    def PyJs_anonymous_89_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'createThunk', 'exports', 'require', 'compile'])
        @Js
        def PyJsHoisted_createThunk_(proc, this, arguments, var=var):
            var = Scope({'proc':proc, 'this':this, 'arguments':arguments}, var)
            var.registers(['thunk', 'string_typesig', 'i', 'thunkName', 'typesig', 'vars', 'shapeConditions', 'j', 'proc', 'shapeLengthConditions', 'code', 'proc_args'])
            var.put('code', Js([Js("'use strict'"), Js('var CACHED={}')]))
            var.put('vars', Js([]))
            var.put('thunkName', (var.get('proc').get('funcName')+Js('_cwise_thunk')))
            var.get('code').callprop('push', Js([Js('return function '), var.get('thunkName'), Js('('), var.get('proc').get('shimArgs').callprop('join', Js(',')), Js('){')]).callprop('join', Js('')))
            var.put('typesig', Js([]))
            var.put('string_typesig', Js([]))
            var.put('proc_args', Js([Js([Js('array'), var.get('proc').get('arrayArgs').get('0'), Js('.shape.slice('), var.get('Math').callprop('max', Js(0.0), var.get('proc').get('arrayBlockIndices').get('0')), (((Js(',')+var.get('proc').get('arrayBlockIndices').get('0'))+Js(')')) if (var.get('proc').get('arrayBlockIndices').get('0')<Js(0.0)) else Js(')'))]).callprop('join', Js(''))]))
            var.put('shapeLengthConditions', Js([]))
            var.put('shapeConditions', Js([]))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('proc').get('arrayArgs').get('length')):
                try:
                    var.put('j', var.get('proc').get('arrayArgs').get(var.get('i')))
                    var.get('vars').callprop('push', Js([Js('t'), var.get('j'), Js('=array'), var.get('j'), Js('.dtype,'), Js('r'), var.get('j'), Js('=array'), var.get('j'), Js('.order')]).callprop('join', Js('')))
                    var.get('typesig').callprop('push', (Js('t')+var.get('j')))
                    var.get('typesig').callprop('push', (Js('r')+var.get('j')))
                    var.get('string_typesig').callprop('push', (Js('t')+var.get('j')))
                    var.get('string_typesig').callprop('push', ((Js('r')+var.get('j'))+Js('.join()')))
                    var.get('proc_args').callprop('push', ((Js('array')+var.get('j'))+Js('.data')))
                    var.get('proc_args').callprop('push', ((Js('array')+var.get('j'))+Js('.stride')))
                    var.get('proc_args').callprop('push', ((Js('array')+var.get('j'))+Js('.offset|0')))
                    if (var.get('i')>Js(0.0)):
                        var.get('shapeLengthConditions').callprop('push', (((((Js('array')+var.get('proc').get('arrayArgs').get('0'))+Js('.shape.length===array'))+var.get('j'))+Js('.shape.length+'))+(var.get('Math').callprop('abs', var.get('proc').get('arrayBlockIndices').get('0'))-var.get('Math').callprop('abs', var.get('proc').get('arrayBlockIndices').get(var.get('i'))))))
                        var.get('shapeConditions').callprop('push', ((((((((Js('array')+var.get('proc').get('arrayArgs').get('0'))+Js('.shape[shapeIndex+'))+var.get('Math').callprop('max', Js(0.0), var.get('proc').get('arrayBlockIndices').get('0')))+Js(']===array'))+var.get('j'))+Js('.shape[shapeIndex+'))+var.get('Math').callprop('max', Js(0.0), var.get('proc').get('arrayBlockIndices').get(var.get('i'))))+Js(']')))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            if (var.get('proc').get('arrayArgs').get('length')>Js(1.0)):
                var.get('code').callprop('push', ((Js('if (!(')+var.get('shapeLengthConditions').callprop('join', Js(' && ')))+Js(")) throw new Error('cwise: Arrays do not all have the same dimensionality!')")))
                var.get('code').callprop('push', ((((Js('for(var shapeIndex=array')+var.get('proc').get('arrayArgs').get('0'))+Js('.shape.length-'))+var.get('Math').callprop('abs', var.get('proc').get('arrayBlockIndices').get('0')))+Js('; shapeIndex-->0;) {')))
                var.get('code').callprop('push', ((Js('if (!(')+var.get('shapeConditions').callprop('join', Js(' && ')))+Js(")) throw new Error('cwise: Arrays do not all have the same shape!')")))
                var.get('code').callprop('push', Js('}'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('proc').get('scalarArgs').get('length')):
                try:
                    var.get('proc_args').callprop('push', (Js('scalar')+var.get('proc').get('scalarArgs').get(var.get('i'))))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            var.get('vars').callprop('push', Js([Js('type=['), var.get('string_typesig').callprop('join', Js(',')), Js('].join()')]).callprop('join', Js('')))
            var.get('vars').callprop('push', Js('proc=CACHED[type]'))
            var.get('code').callprop('push', (Js('var ')+var.get('vars').callprop('join', Js(','))))
            var.get('code').callprop('push', Js([Js('if(!proc){'), Js('CACHED[type]=proc=compile(['), var.get('typesig').callprop('join', Js(',')), Js('])}'), Js('return proc('), var.get('proc_args').callprop('join', Js(',')), Js(')}')]).callprop('join', Js('')))
            if var.get('proc').get('debug'):
                var.get('console').callprop('log', ((Js('-----Generated thunk:\n')+var.get('code').callprop('join', Js('\n')))+Js('\n----------')))
            var.put('thunk', var.get('Function').create(Js('compile'), var.get('code').callprop('join', Js('\n'))))
            return var.get('thunk')(var.get('compile').callprop('bind', var.get('undefined'), var.get('proc')))
        PyJsHoisted_createThunk_.func_name = 'createThunk'
        var.put('createThunk', PyJsHoisted_createThunk_)
        Js('use strict')
        var.put('compile', var.get('require')(Js('./compile.js')))
        pass
        var.get('module').put('exports', var.get('createThunk'))
    PyJs_anonymous_89_._set_name('anonymous')
    @Js
    def PyJs_anonymous_90_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        var.get('module').put('exports', var.get('require')(Js('cwise-compiler')))
    PyJs_anonymous_90_._set_name('anonymous')
    @Js
    def PyJs_anonymous_91_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'dupe', 'require', 'dupe_array', 'dupe_number'])
        @Js
        def PyJsHoisted_dupe_array_(count, value, i, this, arguments, var=var):
            var = Scope({'count':count, 'value':value, 'i':i, 'this':this, 'arguments':arguments}, var)
            var.registers(['value', 'i', 'c', 'result', 'count', 'j'])
            var.put('c', (var.get('count').get(var.get('i'))|Js(0.0)))
            if (var.get('c')<=Js(0.0)):
                return Js([])
            var.put('result', var.get('Array').create(var.get('c')))
            if PyJsStrictEq(var.get('i'),(var.get('count').get('length')-Js(1.0))):
                #for JS loop
                var.put('j', Js(0.0))
                while (var.get('j')<var.get('c')):
                    try:
                        var.get('result').put(var.get('j'), var.get('value'))
                    finally:
                            var.put('j',Js(var.get('j').to_number())+Js(1))
            else:
                #for JS loop
                var.put('j', Js(0.0))
                while (var.get('j')<var.get('c')):
                    try:
                        var.get('result').put(var.get('j'), var.get('dupe_array')(var.get('count'), var.get('value'), (var.get('i')+Js(1.0))))
                    finally:
                            var.put('j',Js(var.get('j').to_number())+Js(1))
            return var.get('result')
        PyJsHoisted_dupe_array_.func_name = 'dupe_array'
        var.put('dupe_array', PyJsHoisted_dupe_array_)
        @Js
        def PyJsHoisted_dupe_number_(count, value, this, arguments, var=var):
            var = Scope({'count':count, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'result', 'count', 'value'])
            pass
            var.put('result', var.get('Array').create(var.get('count')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('count')):
                try:
                    var.get('result').put(var.get('i'), var.get('value'))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('result')
        PyJsHoisted_dupe_number_.func_name = 'dupe_number'
        var.put('dupe_number', PyJsHoisted_dupe_number_)
        @Js
        def PyJsHoisted_dupe_(count, value, this, arguments, var=var):
            var = Scope({'count':count, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['count', 'value'])
            if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('undefined')):
                var.put('value', Js(0.0))
            while 1:
                SWITCHED = False
                CONDITION = ((Js('undefined') if PyJsStrictEq(var.get('count',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('count'))))
                if SWITCHED or PyJsStrictEq(CONDITION, Js('number')):
                    SWITCHED = True
                    if (var.get('count')>Js(0.0)):
                        return var.get('dupe_number')((var.get('count')|Js(0.0)), var.get('value'))
                    break
                if SWITCHED or PyJsStrictEq(CONDITION, Js('object')):
                    SWITCHED = True
                    if PyJsStrictEq(var.get('count').get('length').typeof(),Js('number')):
                        return var.get('dupe_array')(var.get('count'), var.get('value'), Js(0.0))
                    break
                SWITCHED = True
                break
            return Js([])
        PyJsHoisted_dupe_.func_name = 'dupe'
        var.put('dupe', PyJsHoisted_dupe_)
        Js('use strict')
        pass
        pass
        pass
        var.get('module').put('exports', var.get('dupe'))
    PyJs_anonymous_91_._set_name('anonymous')
    @Js
    def PyJs_anonymous_92_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_93_(buffer, offset, isLE, mLen, nBytes, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'offset':offset, 'isLE':isLE, 'mLen':mLen, 'nBytes':nBytes, 'this':this, 'arguments':arguments}, var)
            var.registers(['m', 'eMax', 'i', 's', 'offset', 'nBytes', 'eLen', 'nBits', 'buffer', 'd', 'mLen', 'e', 'eBias', 'isLE'])
            pass
            var.put('eLen', (((var.get('nBytes')*Js(8.0))-var.get('mLen'))-Js(1.0)))
            var.put('eMax', ((Js(1.0)<<var.get('eLen'))-Js(1.0)))
            var.put('eBias', (var.get('eMax')>>Js(1.0)))
            var.put('nBits', (-Js(7.0)))
            var.put('i', ((var.get('nBytes')-Js(1.0)) if var.get('isLE') else Js(0.0)))
            var.put('d', ((-Js(1.0)) if var.get('isLE') else Js(1.0)))
            var.put('s', var.get('buffer').get((var.get('offset')+var.get('i'))))
            var.put('i', var.get('d'), '+')
            var.put('e', (var.get('s')&((Js(1.0)<<(-var.get('nBits')))-Js(1.0))))
            var.put('s', (-var.get('nBits')), '>>')
            var.put('nBits', var.get('eLen'), '+')
            #for JS loop
            
            while (var.get('nBits')>Js(0.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(var.put('e', ((var.get('e')*Js(256.0))+var.get('buffer').get((var.get('offset')+var.get('i'))))),var.put('i', var.get('d'), '+')),var.put('nBits', Js(8.0), '-'))
            var.put('m', (var.get('e')&((Js(1.0)<<(-var.get('nBits')))-Js(1.0))))
            var.put('e', (-var.get('nBits')), '>>')
            var.put('nBits', var.get('mLen'), '+')
            #for JS loop
            
            while (var.get('nBits')>Js(0.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(var.put('m', ((var.get('m')*Js(256.0))+var.get('buffer').get((var.get('offset')+var.get('i'))))),var.put('i', var.get('d'), '+')),var.put('nBits', Js(8.0), '-'))
            if PyJsStrictEq(var.get('e'),Js(0.0)):
                var.put('e', (Js(1.0)-var.get('eBias')))
            else:
                if PyJsStrictEq(var.get('e'),var.get('eMax')):
                    return (var.get('NaN') if var.get('m') else (((-Js(1.0)) if var.get('s') else Js(1.0))*var.get('Infinity')))
                else:
                    var.put('m', (var.get('m')+var.get('Math').callprop('pow', Js(2.0), var.get('mLen'))))
                    var.put('e', (var.get('e')-var.get('eBias')))
            return ((((-Js(1.0)) if var.get('s') else Js(1.0))*var.get('m'))*var.get('Math').callprop('pow', Js(2.0), (var.get('e')-var.get('mLen'))))
        PyJs_anonymous_93_._set_name('anonymous')
        var.get('exports').put('read', PyJs_anonymous_93_)
        @Js
        def PyJs_anonymous_94_(buffer, value, offset, isLE, mLen, nBytes, this, arguments, var=var):
            var = Scope({'buffer':buffer, 'value':value, 'offset':offset, 'isLE':isLE, 'mLen':mLen, 'nBytes':nBytes, 'this':this, 'arguments':arguments}, var)
            var.registers(['m', 'eMax', 'value', 'i', 's', 'offset', 'c', 'nBytes', 'eLen', 'rt', 'buffer', 'd', 'mLen', 'e', 'eBias', 'isLE'])
            pass
            var.put('eLen', (((var.get('nBytes')*Js(8.0))-var.get('mLen'))-Js(1.0)))
            var.put('eMax', ((Js(1.0)<<var.get('eLen'))-Js(1.0)))
            var.put('eBias', (var.get('eMax')>>Js(1.0)))
            var.put('rt', ((var.get('Math').callprop('pow', Js(2.0), (-Js(24.0)))-var.get('Math').callprop('pow', Js(2.0), (-Js(77.0)))) if PyJsStrictEq(var.get('mLen'),Js(23.0)) else Js(0.0)))
            var.put('i', (Js(0.0) if var.get('isLE') else (var.get('nBytes')-Js(1.0))))
            var.put('d', (Js(1.0) if var.get('isLE') else (-Js(1.0))))
            var.put('s', (Js(1.0) if ((var.get('value')<Js(0.0)) or (PyJsStrictEq(var.get('value'),Js(0.0)) and ((Js(1.0)/var.get('value'))<Js(0.0)))) else Js(0.0)))
            var.put('value', var.get('Math').callprop('abs', var.get('value')))
            if (var.get('isNaN')(var.get('value')) or PyJsStrictEq(var.get('value'),var.get('Infinity'))):
                var.put('m', (Js(1.0) if var.get('isNaN')(var.get('value')) else Js(0.0)))
                var.put('e', var.get('eMax'))
            else:
                var.put('e', var.get('Math').callprop('floor', (var.get('Math').callprop('log', var.get('value'))/var.get('Math').get('LN2'))))
                if ((var.get('value')*var.put('c', var.get('Math').callprop('pow', Js(2.0), (-var.get('e')))))<Js(1.0)):
                    (var.put('e',Js(var.get('e').to_number())-Js(1))+Js(1))
                    var.put('c', Js(2.0), '*')
                if ((var.get('e')+var.get('eBias'))>=Js(1.0)):
                    var.put('value', (var.get('rt')/var.get('c')), '+')
                else:
                    var.put('value', (var.get('rt')*var.get('Math').callprop('pow', Js(2.0), (Js(1.0)-var.get('eBias')))), '+')
                if ((var.get('value')*var.get('c'))>=Js(2.0)):
                    (var.put('e',Js(var.get('e').to_number())+Js(1))-Js(1))
                    var.put('c', Js(2.0), '/')
                if ((var.get('e')+var.get('eBias'))>=var.get('eMax')):
                    var.put('m', Js(0.0))
                    var.put('e', var.get('eMax'))
                else:
                    if ((var.get('e')+var.get('eBias'))>=Js(1.0)):
                        var.put('m', (((var.get('value')*var.get('c'))-Js(1.0))*var.get('Math').callprop('pow', Js(2.0), var.get('mLen'))))
                        var.put('e', (var.get('e')+var.get('eBias')))
                    else:
                        var.put('m', ((var.get('value')*var.get('Math').callprop('pow', Js(2.0), (var.get('eBias')-Js(1.0))))*var.get('Math').callprop('pow', Js(2.0), var.get('mLen'))))
                        var.put('e', Js(0.0))
            #for JS loop
            
            while (var.get('mLen')>=Js(8.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(PyJsComma(var.get('buffer').put((var.get('offset')+var.get('i')), (var.get('m')&Js(255))),var.put('i', var.get('d'), '+')),var.put('m', Js(256.0), '/')),var.put('mLen', Js(8.0), '-'))
            var.put('e', ((var.get('e')<<var.get('mLen'))|var.get('m')))
            var.put('eLen', var.get('mLen'), '+')
            #for JS loop
            
            while (var.get('eLen')>Js(0.0)):
                try:
                    pass
                finally:
                        PyJsComma(PyJsComma(PyJsComma(var.get('buffer').put((var.get('offset')+var.get('i')), (var.get('e')&Js(255))),var.put('i', var.get('d'), '+')),var.put('e', Js(256.0), '/')),var.put('eLen', Js(8.0), '-'))
            var.get('buffer').put(((var.get('offset')+var.get('i'))-var.get('d')), (var.get('s')*Js(128.0)), '|')
        PyJs_anonymous_94_._set_name('anonymous')
        var.get('exports').put('write', PyJs_anonymous_94_)
    PyJs_anonymous_92_._set_name('anonymous')
    @Js
    def PyJs_anonymous_95_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['iota', 'exports', 'require', 'module'])
        @Js
        def PyJsHoisted_iota_(n, this, arguments, var=var):
            var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'result', 'n'])
            var.put('result', var.get('Array').create(var.get('n')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('n')):
                try:
                    var.get('result').put(var.get('i'), var.get('i'))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('result')
        PyJsHoisted_iota_.func_name = 'iota'
        var.put('iota', PyJsHoisted_iota_)
        Js('use strict')
        pass
        var.get('module').put('exports', var.get('iota'))
    PyJs_anonymous_95_._set_name('anonymous')
    @Js
    def PyJs_anonymous_96_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'require', 'isSlowBuffer', 'isBuffer'])
        @Js
        def PyJsHoisted_isBuffer_(obj, this, arguments, var=var):
            var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
            var.registers(['obj'])
            return ((var.get('obj').get('constructor').neg().neg() and PyJsStrictEq(var.get('obj').get('constructor').get('isBuffer').typeof(),Js('function'))) and var.get('obj').get('constructor').callprop('isBuffer', var.get('obj')))
        PyJsHoisted_isBuffer_.func_name = 'isBuffer'
        var.put('isBuffer', PyJsHoisted_isBuffer_)
        @Js
        def PyJsHoisted_isSlowBuffer_(obj, this, arguments, var=var):
            var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
            var.registers(['obj'])
            return ((PyJsStrictEq(var.get('obj').get('readFloatLE').typeof(),Js('function')) and PyJsStrictEq(var.get('obj').get('slice').typeof(),Js('function'))) and var.get('isBuffer')(var.get('obj').callprop('slice', Js(0.0), Js(0.0))))
        PyJsHoisted_isSlowBuffer_.func_name = 'isSlowBuffer'
        var.put('isSlowBuffer', PyJsHoisted_isSlowBuffer_)
        @Js
        def PyJs_anonymous_97_(obj, this, arguments, var=var):
            var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
            var.registers(['obj'])
            return ((var.get('obj')!=var.get(u"null")) and ((var.get('isBuffer')(var.get('obj')) or var.get('isSlowBuffer')(var.get('obj'))) or var.get('obj').get('_isBuffer').neg().neg()))
        PyJs_anonymous_97_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_97_)
        pass
        pass
    PyJs_anonymous_96_._set_name('anonymous')
    @Js
    def PyJs_anonymous_98_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_99_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global'])
            pass
            @Js
            def PyJs_anonymous_100_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['proxyTag', 'baseTimes', 'reHasUnicodeWord', 'arrayEvery', 'rsComboRange', 'strictIndexOf', 'arrayIncludes', 'rsOrdLower', 'boolTag', 'uint32Tag', 'nodeIsTypedArray', 'reApos', 'WRAP_FLIP_FLAG', 'unescapeHtmlChar', 'symbolTag', 'reComboHalfMarksRange', 'argsTag', 'strictLastIndexOf', 'rsDingbatRange', 'HASH_UNDEFINED', 'WRAP_BIND_FLAG', 'PLACEHOLDER', 'rsUpper', 'dataViewTag', 'rsBreakRange', 'nodeIsDate', 'arrayReduceRight', 'charsEndIndex', 'runInContext', 'rsUpperRange', 'nodeUtil', 'promiseTag', 'reWrapDetails', 'rsDigits', 'rsRegional', 'rsAstralRange', 'deburrLetter', 'uint8Tag', 'float32Tag', 'unicodeToArray', 'apply', 'baseFindIndex', 'genTag', 'baseUnary', 'LAZY_FILTER_FLAG', 'unicodeSize', 'CLONE_SYMBOLS_FLAG', 'reTrimStart', 'baseProperty', 'arrayEachRight', 'baseFindKey', 'mapTag', 'baseIsNaN', 'rsOptVar', 'reIsHostCtor', 'LAZY_MAP_FLAG', 'arrayReduce', 'freeGlobal', 'HOT_COUNT', 'MAX_SAFE_INTEGER', 'LAZY_WHILE_FLAG', 'funcTag', 'reTrimEnd', 'rsMiscUpper', 'cloneableTags', 'getValue', 'arrayPush', 'htmlEscapes', 'typedArrayTags', 'reEmptyStringLeading', 'baseIndexOf', 'reIsBinary', 'regexpTag', 'weakSetTag', 'arrayIncludesWith', 'rsComboSymbolsRange', 'errorTag', 'arrayAggregator', 'numberTag', 'nodeIsArrayBuffer', 'reSplitDetails', 'rePropName', 'baseSortBy', 'setTag', 'rsEmoji', 'CORE_ERROR_TEXT', 'nodeIsRegExp', 'reLatin', 'reEvaluate', 'overArg', 'float64Tag', 'rsMiscLower', 'WRAP_PARTIAL_RIGHT_FLAG', 'escapeStringChar', 'WRAP_CURRY_RIGHT_FLAG', 'baseToPairs', 'FUNC_ERROR_TEXT', 'rsBreak', 'DEFAULT_TRUNC_LENGTH', 'reIsPlainProp', 'reIsBadHex', 'deburredLetters', 'objectTag', 'WRAP_BIND_KEY_FLAG', 'MAX_INTEGER', 'WRAP_CURRY_BOUND_FLAG', 'arrayBufferTag', 'baseIndexOfWith', 'MAX_ARRAY_LENGTH', 'reFlags', 'reInterpolate', 'replaceHolders', 'reHasRegExpChar', 'uint8ClampedTag', 'rsMathOpRange', 'reTrim', 'COMPARE_UNORDERED_FLAG', 'reUnescapedHtml', 'reAsciiWord', 'rsFitz', 'reIsOctal', 'rsVarRange', 'cacheHas', 'rsCombo', 'WRAP_CURRY_FLAG', 'unicodeWords', 'reRegExpChar', 'rsSurrPair', 'rsOrdUpper', 'rsSeq', 'weakMapTag', 'reEscapeChar', 'rsPunctuationRange', 'INFINITY', 'rsOptContrUpper', 'reUnescapedString', 'escapeHtmlChar', 'htmlUnescapes', 'VERSION', 'basePropertyOf', 'setToArray', 'reNoMatch', 'contextProps', 'int32Tag', 'iteratorToArray', 'rsMisc', 'stringEscapes', 'baseReduce', 'moduleExports', 'mapToArray', 'setToPairs', 'rsNonAstral', 'rsApos', 'asciiWords', 'nullTag', 'baseValues', 'HALF_MAX_ARRAY_LENGTH', 'stringSize', 'MAX_ARRAY_INDEX', 'asyncTag', 'asciiSize', 'CLONE_FLAT_FLAG', 'reHasUnescapedHtml', 'uint16Tag', 'rsLower', 'rsOptJoin', 'stringTag', 'baseSum', 'WRAP_PARTIAL_FLAG', 'rsSpaceRange', 'freeModule', '_', 'root', 'reUnicode', 'COMPARE_PARTIAL_FLAG', 'HOT_SPAN', 'rsSymbol', 'rsDingbat', 'reEmptyStringTrailing', 'reWrapComment', 'wrapFlags', 'rsAstral', 'baseMean', 'reComboMark', 'charsStartIndex', 'asciiToArray', 'dateTag', 'reIsUint', 'templateCounter', 'reEsTemplate', 'rsOptContrLower', 'arrayMap', 'CLONE_DEEP_FLAG', 'reEscapedHtml', 'WRAP_REARG_FLAG', 'reOptMod', 'freeProcess', 'LARGE_ARRAY_SIZE', 'reUnicodeWord', 'reIsDeepProp', 'nodeIsMap', 'int8Tag', 'undefined', 'freeSelf', 'int16Tag', 'stringToArray', 'undefinedTag', 'arrayEach', 'rsLowerRange', 'rsZWJ', 'reHasUnicode', 'freeExports', 'DEFAULT_TRUNC_OMISSION', 'hasUnicode', 'reEmptyStringMiddle', 'domExcTag', 'WRAP_ARY_FLAG', 'arrayFilter', 'freeParseFloat', 'rsNonCharRange', 'MAX_MEMOIZE_SIZE', 'rsModifier', 'hasUnicodeWord', 'freeParseInt', 'arraySome', 'countHolders', 'reEscape', 'arrayTag', 'rsComboMarksRange', 'nodeIsSet', 'NAN', 'reHasEscapedHtml'])
                @Js
                def PyJsHoisted_apply_(func, thisArg, args, this, arguments, var=var):
                    var = Scope({'func':func, 'thisArg':thisArg, 'args':args, 'this':this, 'arguments':arguments}, var)
                    var.registers(['func', 'args', 'thisArg'])
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('args').get('length'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                            SWITCHED = True
                            return var.get('func').callprop('call', var.get('thisArg'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                            SWITCHED = True
                            return var.get('func').callprop('call', var.get('thisArg'), var.get('args').get('0'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                            SWITCHED = True
                            return var.get('func').callprop('call', var.get('thisArg'), var.get('args').get('0'), var.get('args').get('1'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                            SWITCHED = True
                            return var.get('func').callprop('call', var.get('thisArg'), var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'))
                        SWITCHED = True
                        break
                    return var.get('func').callprop('apply', var.get('thisArg'), var.get('args'))
                PyJsHoisted_apply_.func_name = 'apply'
                var.put('apply', PyJsHoisted_apply_)
                @Js
                def PyJsHoisted_arrayAggregator_(array, setter, iteratee, accumulator, this, arguments, var=var):
                    var = Scope({'array':array, 'setter':setter, 'iteratee':iteratee, 'accumulator':accumulator, 'this':this, 'arguments':arguments}, var)
                    var.registers(['value', 'array', 'length', 'accumulator', 'setter', 'iteratee', 'index'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        var.put('value', var.get('array').get(var.get('index')))
                        var.get('setter')(var.get('accumulator'), var.get('value'), var.get('iteratee')(var.get('value')), var.get('array'))
                    return var.get('accumulator')
                PyJsHoisted_arrayAggregator_.func_name = 'arrayAggregator'
                var.put('arrayAggregator', PyJsHoisted_arrayAggregator_)
                @Js
                def PyJsHoisted_arrayEach_(array, iteratee, this, arguments, var=var):
                    var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length', 'iteratee', 'array', 'index'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        if PyJsStrictEq(var.get('iteratee')(var.get('array').get(var.get('index')), var.get('index'), var.get('array')),Js(False)):
                            break
                    return var.get('array')
                PyJsHoisted_arrayEach_.func_name = 'arrayEach'
                var.put('arrayEach', PyJsHoisted_arrayEach_)
                @Js
                def PyJsHoisted_arrayEachRight_(array, iteratee, this, arguments, var=var):
                    var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length', 'iteratee', 'array'])
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                        if PyJsStrictEq(var.get('iteratee')(var.get('array').get(var.get('length')), var.get('length'), var.get('array')),Js(False)):
                            break
                    return var.get('array')
                PyJsHoisted_arrayEachRight_.func_name = 'arrayEachRight'
                var.put('arrayEachRight', PyJsHoisted_arrayEachRight_)
                @Js
                def PyJsHoisted_arrayEvery_(array, predicate, this, arguments, var=var):
                    var = Scope({'array':array, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                    var.registers(['predicate', 'length', 'array', 'index'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        if var.get('predicate')(var.get('array').get(var.get('index')), var.get('index'), var.get('array')).neg():
                            return Js(False)
                    return Js(True)
                PyJsHoisted_arrayEvery_.func_name = 'arrayEvery'
                var.put('arrayEvery', PyJsHoisted_arrayEvery_)
                @Js
                def PyJsHoisted_arrayFilter_(array, predicate, this, arguments, var=var):
                    var = Scope({'array':array, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                    var.registers(['value', 'array', 'predicate', 'result', 'resIndex', 'length', 'index'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    var.put('resIndex', Js(0.0))
                    var.put('result', Js([]))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        var.put('value', var.get('array').get(var.get('index')))
                        if var.get('predicate')(var.get('value'), var.get('index'), var.get('array')):
                            var.get('result').put((var.put('resIndex',Js(var.get('resIndex').to_number())+Js(1))-Js(1)), var.get('value'))
                    return var.get('result')
                PyJsHoisted_arrayFilter_.func_name = 'arrayFilter'
                var.put('arrayFilter', PyJsHoisted_arrayFilter_)
                @Js
                def PyJsHoisted_arrayIncludes_(array, value, this, arguments, var=var):
                    var = Scope({'array':array, 'value':value, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length', 'array', 'value'])
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    return (var.get('length').neg().neg() and (var.get('baseIndexOf')(var.get('array'), var.get('value'), Js(0.0))>(-Js(1.0))))
                PyJsHoisted_arrayIncludes_.func_name = 'arrayIncludes'
                var.put('arrayIncludes', PyJsHoisted_arrayIncludes_)
                @Js
                def PyJsHoisted_arrayIncludesWith_(array, value, comparator, this, arguments, var=var):
                    var = Scope({'array':array, 'value':value, 'comparator':comparator, 'this':this, 'arguments':arguments}, var)
                    var.registers(['comparator', 'value', 'array', 'length', 'index'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        if var.get('comparator')(var.get('value'), var.get('array').get(var.get('index'))):
                            return Js(True)
                    return Js(False)
                PyJsHoisted_arrayIncludesWith_.func_name = 'arrayIncludesWith'
                var.put('arrayIncludesWith', PyJsHoisted_arrayIncludesWith_)
                @Js
                def PyJsHoisted_arrayMap_(array, iteratee, this, arguments, var=var):
                    var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'result', 'length', 'iteratee', 'index'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    var.put('result', var.get('Array')(var.get('length')))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        var.get('result').put(var.get('index'), var.get('iteratee')(var.get('array').get(var.get('index')), var.get('index'), var.get('array')))
                    return var.get('result')
                PyJsHoisted_arrayMap_.func_name = 'arrayMap'
                var.put('arrayMap', PyJsHoisted_arrayMap_)
                @Js
                def PyJsHoisted_arrayPush_(array, values, this, arguments, var=var):
                    var = Scope({'array':array, 'values':values, 'this':this, 'arguments':arguments}, var)
                    var.registers(['offset', 'values', 'array', 'length', 'index'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', var.get('values').get('length'))
                    var.put('offset', var.get('array').get('length'))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        var.get('array').put((var.get('offset')+var.get('index')), var.get('values').get(var.get('index')))
                    return var.get('array')
                PyJsHoisted_arrayPush_.func_name = 'arrayPush'
                var.put('arrayPush', PyJsHoisted_arrayPush_)
                @Js
                def PyJsHoisted_arrayReduce_(array, iteratee, accumulator, initAccum, this, arguments, var=var):
                    var = Scope({'array':array, 'iteratee':iteratee, 'accumulator':accumulator, 'initAccum':initAccum, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'initAccum', 'accumulator', 'length', 'iteratee', 'index'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    if (var.get('initAccum') and var.get('length')):
                        var.put('accumulator', var.get('array').get(var.put('index',Js(var.get('index').to_number())+Js(1))))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        var.put('accumulator', var.get('iteratee')(var.get('accumulator'), var.get('array').get(var.get('index')), var.get('index'), var.get('array')))
                    return var.get('accumulator')
                PyJsHoisted_arrayReduce_.func_name = 'arrayReduce'
                var.put('arrayReduce', PyJsHoisted_arrayReduce_)
                @Js
                def PyJsHoisted_arrayReduceRight_(array, iteratee, accumulator, initAccum, this, arguments, var=var):
                    var = Scope({'array':array, 'iteratee':iteratee, 'accumulator':accumulator, 'initAccum':initAccum, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'initAccum', 'accumulator', 'length', 'iteratee'])
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    if (var.get('initAccum') and var.get('length')):
                        var.put('accumulator', var.get('array').get(var.put('length',Js(var.get('length').to_number())-Js(1))))
                    while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                        var.put('accumulator', var.get('iteratee')(var.get('accumulator'), var.get('array').get(var.get('length')), var.get('length'), var.get('array')))
                    return var.get('accumulator')
                PyJsHoisted_arrayReduceRight_.func_name = 'arrayReduceRight'
                var.put('arrayReduceRight', PyJsHoisted_arrayReduceRight_)
                @Js
                def PyJsHoisted_arraySome_(array, predicate, this, arguments, var=var):
                    var = Scope({'array':array, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                    var.registers(['predicate', 'length', 'array', 'index'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        if var.get('predicate')(var.get('array').get(var.get('index')), var.get('index'), var.get('array')):
                            return Js(True)
                    return Js(False)
                PyJsHoisted_arraySome_.func_name = 'arraySome'
                var.put('arraySome', PyJsHoisted_arraySome_)
                @Js
                def PyJsHoisted_asciiToArray_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return var.get('string').callprop('split', Js(''))
                PyJsHoisted_asciiToArray_.func_name = 'asciiToArray'
                var.put('asciiToArray', PyJsHoisted_asciiToArray_)
                @Js
                def PyJsHoisted_asciiWords_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return (var.get('string').callprop('match', var.get('reAsciiWord')) or Js([]))
                PyJsHoisted_asciiWords_.func_name = 'asciiWords'
                var.put('asciiWords', PyJsHoisted_asciiWords_)
                @Js
                def PyJsHoisted_baseFindKey_(collection, predicate, eachFunc, this, arguments, var=var):
                    var = Scope({'collection':collection, 'predicate':predicate, 'eachFunc':eachFunc, 'this':this, 'arguments':arguments}, var)
                    var.registers(['predicate', 'result', 'eachFunc', 'collection'])
                    pass
                    @Js
                    def PyJs_anonymous_107_(value, key, collection, this, arguments, var=var):
                        var = Scope({'value':value, 'key':key, 'collection':collection, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'collection', 'value'])
                        if var.get('predicate')(var.get('value'), var.get('key'), var.get('collection')):
                            var.put('result', var.get('key'))
                            return Js(False)
                    PyJs_anonymous_107_._set_name('anonymous')
                    var.get('eachFunc')(var.get('collection'), PyJs_anonymous_107_)
                    return var.get('result')
                PyJsHoisted_baseFindKey_.func_name = 'baseFindKey'
                var.put('baseFindKey', PyJsHoisted_baseFindKey_)
                @Js
                def PyJsHoisted_baseFindIndex_(array, predicate, fromIndex, fromRight, this, arguments, var=var):
                    var = Scope({'array':array, 'predicate':predicate, 'fromIndex':fromIndex, 'fromRight':fromRight, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'predicate', 'fromRight', 'fromIndex', 'length', 'index'])
                    var.put('length', var.get('array').get('length'))
                    var.put('index', (var.get('fromIndex')+(Js(1.0) if var.get('fromRight') else (-Js(1.0)))))
                    while ((var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)) if var.get('fromRight') else (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length'))):
                        if var.get('predicate')(var.get('array').get(var.get('index')), var.get('index'), var.get('array')):
                            return var.get('index')
                    return (-Js(1.0))
                PyJsHoisted_baseFindIndex_.func_name = 'baseFindIndex'
                var.put('baseFindIndex', PyJsHoisted_baseFindIndex_)
                @Js
                def PyJsHoisted_baseIndexOf_(array, value, fromIndex, this, arguments, var=var):
                    var = Scope({'array':array, 'value':value, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                    var.registers(['fromIndex', 'array', 'value'])
                    return (var.get('strictIndexOf')(var.get('array'), var.get('value'), var.get('fromIndex')) if PyJsStrictEq(var.get('value'),var.get('value')) else var.get('baseFindIndex')(var.get('array'), var.get('baseIsNaN'), var.get('fromIndex')))
                PyJsHoisted_baseIndexOf_.func_name = 'baseIndexOf'
                var.put('baseIndexOf', PyJsHoisted_baseIndexOf_)
                @Js
                def PyJsHoisted_baseIndexOfWith_(array, value, fromIndex, comparator, this, arguments, var=var):
                    var = Scope({'array':array, 'value':value, 'fromIndex':fromIndex, 'comparator':comparator, 'this':this, 'arguments':arguments}, var)
                    var.registers(['comparator', 'value', 'array', 'fromIndex', 'length', 'index'])
                    var.put('index', (var.get('fromIndex')-Js(1.0)))
                    var.put('length', var.get('array').get('length'))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        if var.get('comparator')(var.get('array').get(var.get('index')), var.get('value')):
                            return var.get('index')
                    return (-Js(1.0))
                PyJsHoisted_baseIndexOfWith_.func_name = 'baseIndexOfWith'
                var.put('baseIndexOfWith', PyJsHoisted_baseIndexOfWith_)
                @Js
                def PyJsHoisted_baseIsNaN_(value, this, arguments, var=var):
                    var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                    var.registers(['value'])
                    return PyJsStrictNeq(var.get('value'),var.get('value'))
                PyJsHoisted_baseIsNaN_.func_name = 'baseIsNaN'
                var.put('baseIsNaN', PyJsHoisted_baseIsNaN_)
                @Js
                def PyJsHoisted_baseMean_(array, iteratee, this, arguments, var=var):
                    var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length', 'iteratee', 'array'])
                    var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                    return ((var.get('baseSum')(var.get('array'), var.get('iteratee'))/var.get('length')) if var.get('length') else var.get('NAN'))
                PyJsHoisted_baseMean_.func_name = 'baseMean'
                var.put('baseMean', PyJsHoisted_baseMean_)
                @Js
                def PyJsHoisted_baseProperty_(key, this, arguments, var=var):
                    var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                    var.registers(['key'])
                    @Js
                    def PyJs_anonymous_108_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        return (var.get('undefined') if (var.get('object')==var.get(u"null")) else var.get('object').get(var.get('key')))
                    PyJs_anonymous_108_._set_name('anonymous')
                    return PyJs_anonymous_108_
                PyJsHoisted_baseProperty_.func_name = 'baseProperty'
                var.put('baseProperty', PyJsHoisted_baseProperty_)
                @Js
                def PyJsHoisted_basePropertyOf_(object, this, arguments, var=var):
                    var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                    var.registers(['object'])
                    @Js
                    def PyJs_anonymous_109_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key'])
                        return (var.get('undefined') if (var.get('object')==var.get(u"null")) else var.get('object').get(var.get('key')))
                    PyJs_anonymous_109_._set_name('anonymous')
                    return PyJs_anonymous_109_
                PyJsHoisted_basePropertyOf_.func_name = 'basePropertyOf'
                var.put('basePropertyOf', PyJsHoisted_basePropertyOf_)
                @Js
                def PyJsHoisted_baseReduce_(collection, iteratee, accumulator, initAccum, eachFunc, this, arguments, var=var):
                    var = Scope({'collection':collection, 'iteratee':iteratee, 'accumulator':accumulator, 'initAccum':initAccum, 'eachFunc':eachFunc, 'this':this, 'arguments':arguments}, var)
                    var.registers(['eachFunc', 'collection', 'initAccum', 'accumulator', 'iteratee'])
                    @Js
                    def PyJs_anonymous_110_(value, index, collection, this, arguments, var=var):
                        var = Scope({'value':value, 'index':index, 'collection':collection, 'this':this, 'arguments':arguments}, var)
                        var.registers(['collection', 'index', 'value'])
                        var.put('accumulator', (PyJsComma(var.put('initAccum', Js(False)),var.get('value')) if var.get('initAccum') else var.get('iteratee')(var.get('accumulator'), var.get('value'), var.get('index'), var.get('collection'))))
                    PyJs_anonymous_110_._set_name('anonymous')
                    var.get('eachFunc')(var.get('collection'), PyJs_anonymous_110_)
                    return var.get('accumulator')
                PyJsHoisted_baseReduce_.func_name = 'baseReduce'
                var.put('baseReduce', PyJsHoisted_baseReduce_)
                @Js
                def PyJsHoisted_baseSortBy_(array, comparer, this, arguments, var=var):
                    var = Scope({'array':array, 'comparer':comparer, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length', 'comparer', 'array'])
                    var.put('length', var.get('array').get('length'))
                    var.get('array').callprop('sort', var.get('comparer'))
                    while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                        var.get('array').put(var.get('length'), var.get('array').get(var.get('length')).get('value'))
                    return var.get('array')
                PyJsHoisted_baseSortBy_.func_name = 'baseSortBy'
                var.put('baseSortBy', PyJsHoisted_baseSortBy_)
                @Js
                def PyJsHoisted_baseSum_(array, iteratee, this, arguments, var=var):
                    var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                    var.registers(['array', 'index', 'result', 'length', 'iteratee', 'current'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', var.get('array').get('length'))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        var.put('current', var.get('iteratee')(var.get('array').get(var.get('index'))))
                        if PyJsStrictNeq(var.get('current'),var.get('undefined')):
                            var.put('result', (var.get('current') if PyJsStrictEq(var.get('result'),var.get('undefined')) else (var.get('result')+var.get('current'))))
                    return var.get('result')
                PyJsHoisted_baseSum_.func_name = 'baseSum'
                var.put('baseSum', PyJsHoisted_baseSum_)
                @Js
                def PyJsHoisted_baseTimes_(n, iteratee, this, arguments, var=var):
                    var = Scope({'n':n, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                    var.registers(['result', 'n', 'iteratee', 'index'])
                    var.put('index', (-Js(1.0)))
                    var.put('result', var.get('Array')(var.get('n')))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('n')):
                        var.get('result').put(var.get('index'), var.get('iteratee')(var.get('index')))
                    return var.get('result')
                PyJsHoisted_baseTimes_.func_name = 'baseTimes'
                var.put('baseTimes', PyJsHoisted_baseTimes_)
                @Js
                def PyJsHoisted_baseToPairs_(object, props, this, arguments, var=var):
                    var = Scope({'object':object, 'props':props, 'this':this, 'arguments':arguments}, var)
                    var.registers(['object', 'props'])
                    @Js
                    def PyJs_anonymous_111_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key'])
                        return Js([var.get('key'), var.get('object').get(var.get('key'))])
                    PyJs_anonymous_111_._set_name('anonymous')
                    return var.get('arrayMap')(var.get('props'), PyJs_anonymous_111_)
                PyJsHoisted_baseToPairs_.func_name = 'baseToPairs'
                var.put('baseToPairs', PyJsHoisted_baseToPairs_)
                @Js
                def PyJsHoisted_baseUnary_(func, this, arguments, var=var):
                    var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                    var.registers(['func'])
                    @Js
                    def PyJs_anonymous_112_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return var.get('func')(var.get('value'))
                    PyJs_anonymous_112_._set_name('anonymous')
                    return PyJs_anonymous_112_
                PyJsHoisted_baseUnary_.func_name = 'baseUnary'
                var.put('baseUnary', PyJsHoisted_baseUnary_)
                @Js
                def PyJsHoisted_baseValues_(object, props, this, arguments, var=var):
                    var = Scope({'object':object, 'props':props, 'this':this, 'arguments':arguments}, var)
                    var.registers(['object', 'props'])
                    @Js
                    def PyJs_anonymous_113_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key'])
                        return var.get('object').get(var.get('key'))
                    PyJs_anonymous_113_._set_name('anonymous')
                    return var.get('arrayMap')(var.get('props'), PyJs_anonymous_113_)
                PyJsHoisted_baseValues_.func_name = 'baseValues'
                var.put('baseValues', PyJsHoisted_baseValues_)
                @Js
                def PyJsHoisted_cacheHas_(cache, key, this, arguments, var=var):
                    var = Scope({'cache':cache, 'key':key, 'this':this, 'arguments':arguments}, var)
                    var.registers(['cache', 'key'])
                    return var.get('cache').callprop('has', var.get('key'))
                PyJsHoisted_cacheHas_.func_name = 'cacheHas'
                var.put('cacheHas', PyJsHoisted_cacheHas_)
                @Js
                def PyJsHoisted_charsStartIndex_(strSymbols, chrSymbols, this, arguments, var=var):
                    var = Scope({'strSymbols':strSymbols, 'chrSymbols':chrSymbols, 'this':this, 'arguments':arguments}, var)
                    var.registers(['length', 'chrSymbols', 'index', 'strSymbols'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', var.get('strSymbols').get('length'))
                    while ((var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')) and (var.get('baseIndexOf')(var.get('chrSymbols'), var.get('strSymbols').get(var.get('index')), Js(0.0))>(-Js(1.0)))):
                        pass
                    return var.get('index')
                PyJsHoisted_charsStartIndex_.func_name = 'charsStartIndex'
                var.put('charsStartIndex', PyJsHoisted_charsStartIndex_)
                @Js
                def PyJsHoisted_charsEndIndex_(strSymbols, chrSymbols, this, arguments, var=var):
                    var = Scope({'strSymbols':strSymbols, 'chrSymbols':chrSymbols, 'this':this, 'arguments':arguments}, var)
                    var.registers(['strSymbols', 'chrSymbols', 'index'])
                    var.put('index', var.get('strSymbols').get('length'))
                    while ((var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)) and (var.get('baseIndexOf')(var.get('chrSymbols'), var.get('strSymbols').get(var.get('index')), Js(0.0))>(-Js(1.0)))):
                        pass
                    return var.get('index')
                PyJsHoisted_charsEndIndex_.func_name = 'charsEndIndex'
                var.put('charsEndIndex', PyJsHoisted_charsEndIndex_)
                @Js
                def PyJsHoisted_countHolders_(array, placeholder, this, arguments, var=var):
                    var = Scope({'array':array, 'placeholder':placeholder, 'this':this, 'arguments':arguments}, var)
                    var.registers(['result', 'length', 'array', 'placeholder'])
                    var.put('length', var.get('array').get('length'))
                    var.put('result', Js(0.0))
                    while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                        if PyJsStrictEq(var.get('array').get(var.get('length')),var.get('placeholder')):
                            var.put('result',Js(var.get('result').to_number())+Js(1))
                    return var.get('result')
                PyJsHoisted_countHolders_.func_name = 'countHolders'
                var.put('countHolders', PyJsHoisted_countHolders_)
                @Js
                def PyJsHoisted_escapeStringChar_(chr, this, arguments, var=var):
                    var = Scope({'chr':chr, 'this':this, 'arguments':arguments}, var)
                    var.registers(['chr'])
                    return (Js('\\')+var.get('stringEscapes').get(var.get('chr')))
                PyJsHoisted_escapeStringChar_.func_name = 'escapeStringChar'
                var.put('escapeStringChar', PyJsHoisted_escapeStringChar_)
                @Js
                def PyJsHoisted_getValue_(object, key, this, arguments, var=var):
                    var = Scope({'object':object, 'key':key, 'this':this, 'arguments':arguments}, var)
                    var.registers(['object', 'key'])
                    return (var.get('undefined') if (var.get('object')==var.get(u"null")) else var.get('object').get(var.get('key')))
                PyJsHoisted_getValue_.func_name = 'getValue'
                var.put('getValue', PyJsHoisted_getValue_)
                @Js
                def PyJsHoisted_hasUnicode_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return var.get('reHasUnicode').callprop('test', var.get('string'))
                PyJsHoisted_hasUnicode_.func_name = 'hasUnicode'
                var.put('hasUnicode', PyJsHoisted_hasUnicode_)
                @Js
                def PyJsHoisted_hasUnicodeWord_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return var.get('reHasUnicodeWord').callprop('test', var.get('string'))
                PyJsHoisted_hasUnicodeWord_.func_name = 'hasUnicodeWord'
                var.put('hasUnicodeWord', PyJsHoisted_hasUnicodeWord_)
                @Js
                def PyJsHoisted_iteratorToArray_(iterator, this, arguments, var=var):
                    var = Scope({'iterator':iterator, 'this':this, 'arguments':arguments}, var)
                    var.registers(['result', 'iterator', 'data'])
                    var.put('result', Js([]))
                    while var.put('data', var.get('iterator').callprop('next')).get('done').neg():
                        var.get('result').callprop('push', var.get('data').get('value'))
                    return var.get('result')
                PyJsHoisted_iteratorToArray_.func_name = 'iteratorToArray'
                var.put('iteratorToArray', PyJsHoisted_iteratorToArray_)
                @Js
                def PyJsHoisted_mapToArray_(map, this, arguments, var=var):
                    var = Scope({'map':map, 'this':this, 'arguments':arguments}, var)
                    var.registers(['result', 'map', 'index'])
                    var.put('index', (-Js(1.0)))
                    var.put('result', var.get('Array')(var.get('map').get('size')))
                    @Js
                    def PyJs_anonymous_114_(value, key, this, arguments, var=var):
                        var = Scope({'value':value, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'value'])
                        var.get('result').put(var.put('index',Js(var.get('index').to_number())+Js(1)), Js([var.get('key'), var.get('value')]))
                    PyJs_anonymous_114_._set_name('anonymous')
                    var.get('map').callprop('forEach', PyJs_anonymous_114_)
                    return var.get('result')
                PyJsHoisted_mapToArray_.func_name = 'mapToArray'
                var.put('mapToArray', PyJsHoisted_mapToArray_)
                @Js
                def PyJsHoisted_overArg_(func, transform, this, arguments, var=var):
                    var = Scope({'func':func, 'transform':transform, 'this':this, 'arguments':arguments}, var)
                    var.registers(['func', 'transform'])
                    @Js
                    def PyJs_anonymous_115_(arg, this, arguments, var=var):
                        var = Scope({'arg':arg, 'this':this, 'arguments':arguments}, var)
                        var.registers(['arg'])
                        return var.get('func')(var.get('transform')(var.get('arg')))
                    PyJs_anonymous_115_._set_name('anonymous')
                    return PyJs_anonymous_115_
                PyJsHoisted_overArg_.func_name = 'overArg'
                var.put('overArg', PyJsHoisted_overArg_)
                @Js
                def PyJsHoisted_replaceHolders_(array, placeholder, this, arguments, var=var):
                    var = Scope({'array':array, 'placeholder':placeholder, 'this':this, 'arguments':arguments}, var)
                    var.registers(['value', 'array', 'placeholder', 'result', 'resIndex', 'length', 'index'])
                    var.put('index', (-Js(1.0)))
                    var.put('length', var.get('array').get('length'))
                    var.put('resIndex', Js(0.0))
                    var.put('result', Js([]))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        var.put('value', var.get('array').get(var.get('index')))
                        if (PyJsStrictEq(var.get('value'),var.get('placeholder')) or PyJsStrictEq(var.get('value'),var.get('PLACEHOLDER'))):
                            var.get('array').put(var.get('index'), var.get('PLACEHOLDER'))
                            var.get('result').put((var.put('resIndex',Js(var.get('resIndex').to_number())+Js(1))-Js(1)), var.get('index'))
                    return var.get('result')
                PyJsHoisted_replaceHolders_.func_name = 'replaceHolders'
                var.put('replaceHolders', PyJsHoisted_replaceHolders_)
                @Js
                def PyJsHoisted_setToArray_(set, this, arguments, var=var):
                    var = Scope({'set':set, 'this':this, 'arguments':arguments}, var)
                    var.registers(['set', 'result', 'index'])
                    var.put('index', (-Js(1.0)))
                    var.put('result', var.get('Array')(var.get('set').get('size')))
                    @Js
                    def PyJs_anonymous_116_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        var.get('result').put(var.put('index',Js(var.get('index').to_number())+Js(1)), var.get('value'))
                    PyJs_anonymous_116_._set_name('anonymous')
                    var.get('set').callprop('forEach', PyJs_anonymous_116_)
                    return var.get('result')
                PyJsHoisted_setToArray_.func_name = 'setToArray'
                var.put('setToArray', PyJsHoisted_setToArray_)
                @Js
                def PyJsHoisted_setToPairs_(set, this, arguments, var=var):
                    var = Scope({'set':set, 'this':this, 'arguments':arguments}, var)
                    var.registers(['set', 'result', 'index'])
                    var.put('index', (-Js(1.0)))
                    var.put('result', var.get('Array')(var.get('set').get('size')))
                    @Js
                    def PyJs_anonymous_117_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        var.get('result').put(var.put('index',Js(var.get('index').to_number())+Js(1)), Js([var.get('value'), var.get('value')]))
                    PyJs_anonymous_117_._set_name('anonymous')
                    var.get('set').callprop('forEach', PyJs_anonymous_117_)
                    return var.get('result')
                PyJsHoisted_setToPairs_.func_name = 'setToPairs'
                var.put('setToPairs', PyJsHoisted_setToPairs_)
                @Js
                def PyJsHoisted_strictIndexOf_(array, value, fromIndex, this, arguments, var=var):
                    var = Scope({'array':array, 'value':value, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                    var.registers(['value', 'array', 'fromIndex', 'length', 'index'])
                    var.put('index', (var.get('fromIndex')-Js(1.0)))
                    var.put('length', var.get('array').get('length'))
                    while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                        if PyJsStrictEq(var.get('array').get(var.get('index')),var.get('value')):
                            return var.get('index')
                    return (-Js(1.0))
                PyJsHoisted_strictIndexOf_.func_name = 'strictIndexOf'
                var.put('strictIndexOf', PyJsHoisted_strictIndexOf_)
                @Js
                def PyJsHoisted_strictLastIndexOf_(array, value, fromIndex, this, arguments, var=var):
                    var = Scope({'array':array, 'value':value, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                    var.registers(['fromIndex', 'array', 'index', 'value'])
                    var.put('index', (var.get('fromIndex')+Js(1.0)))
                    while (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)):
                        if PyJsStrictEq(var.get('array').get(var.get('index')),var.get('value')):
                            return var.get('index')
                    return var.get('index')
                PyJsHoisted_strictLastIndexOf_.func_name = 'strictLastIndexOf'
                var.put('strictLastIndexOf', PyJsHoisted_strictLastIndexOf_)
                @Js
                def PyJsHoisted_stringSize_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return (var.get('unicodeSize')(var.get('string')) if var.get('hasUnicode')(var.get('string')) else var.get('asciiSize')(var.get('string')))
                PyJsHoisted_stringSize_.func_name = 'stringSize'
                var.put('stringSize', PyJsHoisted_stringSize_)
                @Js
                def PyJsHoisted_stringToArray_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return (var.get('unicodeToArray')(var.get('string')) if var.get('hasUnicode')(var.get('string')) else var.get('asciiToArray')(var.get('string')))
                PyJsHoisted_stringToArray_.func_name = 'stringToArray'
                var.put('stringToArray', PyJsHoisted_stringToArray_)
                @Js
                def PyJsHoisted_unicodeSize_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['result', 'string'])
                    var.put('result', var.get('reUnicode').put('lastIndex', Js(0.0)))
                    while var.get('reUnicode').callprop('test', var.get('string')):
                        var.put('result',Js(var.get('result').to_number())+Js(1))
                    return var.get('result')
                PyJsHoisted_unicodeSize_.func_name = 'unicodeSize'
                var.put('unicodeSize', PyJsHoisted_unicodeSize_)
                @Js
                def PyJsHoisted_unicodeToArray_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return (var.get('string').callprop('match', var.get('reUnicode')) or Js([]))
                PyJsHoisted_unicodeToArray_.func_name = 'unicodeToArray'
                var.put('unicodeToArray', PyJsHoisted_unicodeToArray_)
                @Js
                def PyJsHoisted_unicodeWords_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return (var.get('string').callprop('match', var.get('reUnicodeWord')) or Js([]))
                PyJsHoisted_unicodeWords_.func_name = 'unicodeWords'
                var.put('unicodeWords', PyJsHoisted_unicodeWords_)
                pass
                var.put('VERSION', Js('4.17.11'))
                var.put('LARGE_ARRAY_SIZE', Js(200.0))
                var.put('CORE_ERROR_TEXT', Js('Unsupported core-js use. Try https://npms.io/search?q=ponyfill.'))
                var.put('FUNC_ERROR_TEXT', Js('Expected a function'))
                var.put('HASH_UNDEFINED', Js('__lodash_hash_undefined__'))
                var.put('MAX_MEMOIZE_SIZE', Js(500.0))
                var.put('PLACEHOLDER', Js('__lodash_placeholder__'))
                var.put('CLONE_DEEP_FLAG', Js(1.0))
                var.put('CLONE_FLAT_FLAG', Js(2.0))
                var.put('CLONE_SYMBOLS_FLAG', Js(4.0))
                var.put('COMPARE_PARTIAL_FLAG', Js(1.0))
                var.put('COMPARE_UNORDERED_FLAG', Js(2.0))
                var.put('WRAP_BIND_FLAG', Js(1.0))
                var.put('WRAP_BIND_KEY_FLAG', Js(2.0))
                var.put('WRAP_CURRY_BOUND_FLAG', Js(4.0))
                var.put('WRAP_CURRY_FLAG', Js(8.0))
                var.put('WRAP_CURRY_RIGHT_FLAG', Js(16.0))
                var.put('WRAP_PARTIAL_FLAG', Js(32.0))
                var.put('WRAP_PARTIAL_RIGHT_FLAG', Js(64.0))
                var.put('WRAP_ARY_FLAG', Js(128.0))
                var.put('WRAP_REARG_FLAG', Js(256.0))
                var.put('WRAP_FLIP_FLAG', Js(512.0))
                var.put('DEFAULT_TRUNC_LENGTH', Js(30.0))
                var.put('DEFAULT_TRUNC_OMISSION', Js('...'))
                var.put('HOT_COUNT', Js(800.0))
                var.put('HOT_SPAN', Js(16.0))
                var.put('LAZY_FILTER_FLAG', Js(1.0))
                var.put('LAZY_MAP_FLAG', Js(2.0))
                var.put('LAZY_WHILE_FLAG', Js(3.0))
                var.put('INFINITY', (Js(1.0)/Js(0.0)))
                var.put('MAX_SAFE_INTEGER', Js(9007199254740991.0))
                var.put('MAX_INTEGER', Js(1.7976931348623157e+308))
                var.put('NAN', (Js(0.0)/Js(0.0)))
                var.put('MAX_ARRAY_LENGTH', Js(4294967295.0))
                var.put('MAX_ARRAY_INDEX', (var.get('MAX_ARRAY_LENGTH')-Js(1.0)))
                var.put('HALF_MAX_ARRAY_LENGTH', PyJsBshift(var.get('MAX_ARRAY_LENGTH'),Js(1.0)))
                var.put('wrapFlags', Js([Js([Js('ary'), var.get('WRAP_ARY_FLAG')]), Js([Js('bind'), var.get('WRAP_BIND_FLAG')]), Js([Js('bindKey'), var.get('WRAP_BIND_KEY_FLAG')]), Js([Js('curry'), var.get('WRAP_CURRY_FLAG')]), Js([Js('curryRight'), var.get('WRAP_CURRY_RIGHT_FLAG')]), Js([Js('flip'), var.get('WRAP_FLIP_FLAG')]), Js([Js('partial'), var.get('WRAP_PARTIAL_FLAG')]), Js([Js('partialRight'), var.get('WRAP_PARTIAL_RIGHT_FLAG')]), Js([Js('rearg'), var.get('WRAP_REARG_FLAG')])]))
                var.put('argsTag', Js('[object Arguments]'))
                var.put('arrayTag', Js('[object Array]'))
                var.put('asyncTag', Js('[object AsyncFunction]'))
                var.put('boolTag', Js('[object Boolean]'))
                var.put('dateTag', Js('[object Date]'))
                var.put('domExcTag', Js('[object DOMException]'))
                var.put('errorTag', Js('[object Error]'))
                var.put('funcTag', Js('[object Function]'))
                var.put('genTag', Js('[object GeneratorFunction]'))
                var.put('mapTag', Js('[object Map]'))
                var.put('numberTag', Js('[object Number]'))
                var.put('nullTag', Js('[object Null]'))
                var.put('objectTag', Js('[object Object]'))
                var.put('promiseTag', Js('[object Promise]'))
                var.put('proxyTag', Js('[object Proxy]'))
                var.put('regexpTag', Js('[object RegExp]'))
                var.put('setTag', Js('[object Set]'))
                var.put('stringTag', Js('[object String]'))
                var.put('symbolTag', Js('[object Symbol]'))
                var.put('undefinedTag', Js('[object Undefined]'))
                var.put('weakMapTag', Js('[object WeakMap]'))
                var.put('weakSetTag', Js('[object WeakSet]'))
                var.put('arrayBufferTag', Js('[object ArrayBuffer]'))
                var.put('dataViewTag', Js('[object DataView]'))
                var.put('float32Tag', Js('[object Float32Array]'))
                var.put('float64Tag', Js('[object Float64Array]'))
                var.put('int8Tag', Js('[object Int8Array]'))
                var.put('int16Tag', Js('[object Int16Array]'))
                var.put('int32Tag', Js('[object Int32Array]'))
                var.put('uint8Tag', Js('[object Uint8Array]'))
                var.put('uint8ClampedTag', Js('[object Uint8ClampedArray]'))
                var.put('uint16Tag', Js('[object Uint16Array]'))
                var.put('uint32Tag', Js('[object Uint32Array]'))
                var.put('reEmptyStringLeading', JsRegExp("/\\b__p \\+= '';/g"))
                var.put('reEmptyStringMiddle', JsRegExp("/\\b(__p \\+=) '' \\+/g"))
                var.put('reEmptyStringTrailing', JsRegExp("/(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g"))
                var.put('reEscapedHtml', JsRegExp('/&(?:amp|lt|gt|quot|#39);/g'))
                var.put('reUnescapedHtml', JsRegExp('/[&<>"\']/g'))
                var.put('reHasEscapedHtml', var.get('RegExp')(var.get('reEscapedHtml').get('source')))
                var.put('reHasUnescapedHtml', var.get('RegExp')(var.get('reUnescapedHtml').get('source')))
                var.put('reEscape', JsRegExp('/<%-([\\s\\S]+?)%>/g'))
                var.put('reEvaluate', JsRegExp('/<%([\\s\\S]+?)%>/g'))
                var.put('reInterpolate', JsRegExp('/<%=([\\s\\S]+?)%>/g'))
                var.put('reIsDeepProp', JsRegExp('/\\.|\\[(?:[^[\\]]*|(["\'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/'))
                var.put('reIsPlainProp', JsRegExp('/^\\w*$/'))
                var.put('rePropName', JsRegExp('/[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|(["\'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g'))
                var.put('reRegExpChar', JsRegExp('/[\\\\^$.*+?()[\\]{}|]/g'))
                var.put('reHasRegExpChar', var.get('RegExp')(var.get('reRegExpChar').get('source')))
                var.put('reTrim', JsRegExp('/^\\s+|\\s+$/g'))
                var.put('reTrimStart', JsRegExp('/^\\s+/'))
                var.put('reTrimEnd', JsRegExp('/\\s+$/'))
                var.put('reWrapComment', JsRegExp('/\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/'))
                var.put('reWrapDetails', JsRegExp('/\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/'))
                var.put('reSplitDetails', JsRegExp('/,? & /'))
                var.put('reAsciiWord', JsRegExp('/[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g'))
                var.put('reEscapeChar', JsRegExp('/\\\\(\\\\)?/g'))
                var.put('reEsTemplate', JsRegExp('/\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g'))
                var.put('reFlags', JsRegExp('/\\w*$/'))
                var.put('reIsBadHex', JsRegExp('/^[-+]0x[0-9a-f]+$/i'))
                var.put('reIsBinary', JsRegExp('/^0b[01]+$/i'))
                var.put('reIsHostCtor', JsRegExp('/^\\[object .+?Constructor\\]$/'))
                var.put('reIsOctal', JsRegExp('/^0o[0-7]+$/i'))
                var.put('reIsUint', JsRegExp('/^(?:0|[1-9]\\d*)$/'))
                var.put('reLatin', JsRegExp('/[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g'))
                var.put('reNoMatch', JsRegExp('/($^)/'))
                var.put('reUnescapedString', JsRegExp("/['\\n\\r\\u2028\\u2029\\\\]/g"))
                var.put('rsAstralRange', Js('\\ud800-\\udfff'))
                var.put('rsComboMarksRange', Js('\\u0300-\\u036f'))
                var.put('reComboHalfMarksRange', Js('\\ufe20-\\ufe2f'))
                var.put('rsComboSymbolsRange', Js('\\u20d0-\\u20ff'))
                var.put('rsComboRange', ((var.get('rsComboMarksRange')+var.get('reComboHalfMarksRange'))+var.get('rsComboSymbolsRange')))
                var.put('rsDingbatRange', Js('\\u2700-\\u27bf'))
                var.put('rsLowerRange', Js('a-z\\xdf-\\xf6\\xf8-\\xff'))
                var.put('rsMathOpRange', Js('\\xac\\xb1\\xd7\\xf7'))
                var.put('rsNonCharRange', Js('\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf'))
                var.put('rsPunctuationRange', Js('\\u2000-\\u206f'))
                var.put('rsSpaceRange', Js(' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000'))
                var.put('rsUpperRange', Js('A-Z\\xc0-\\xd6\\xd8-\\xde'))
                var.put('rsVarRange', Js('\\ufe0e\\ufe0f'))
                var.put('rsBreakRange', (((var.get('rsMathOpRange')+var.get('rsNonCharRange'))+var.get('rsPunctuationRange'))+var.get('rsSpaceRange')))
                var.put('rsApos', Js("['’]"))
                var.put('rsAstral', ((Js('[')+var.get('rsAstralRange'))+Js(']')))
                var.put('rsBreak', ((Js('[')+var.get('rsBreakRange'))+Js(']')))
                var.put('rsCombo', ((Js('[')+var.get('rsComboRange'))+Js(']')))
                var.put('rsDigits', Js('\\d+'))
                var.put('rsDingbat', ((Js('[')+var.get('rsDingbatRange'))+Js(']')))
                var.put('rsLower', ((Js('[')+var.get('rsLowerRange'))+Js(']')))
                var.put('rsMisc', (((((((Js('[^')+var.get('rsAstralRange'))+var.get('rsBreakRange'))+var.get('rsDigits'))+var.get('rsDingbatRange'))+var.get('rsLowerRange'))+var.get('rsUpperRange'))+Js(']')))
                var.put('rsFitz', Js('\\ud83c[\\udffb-\\udfff]'))
                var.put('rsModifier', ((((Js('(?:')+var.get('rsCombo'))+Js('|'))+var.get('rsFitz'))+Js(')')))
                var.put('rsNonAstral', ((Js('[^')+var.get('rsAstralRange'))+Js(']')))
                var.put('rsRegional', Js('(?:\\ud83c[\\udde6-\\uddff]){2}'))
                var.put('rsSurrPair', Js('[\\ud800-\\udbff][\\udc00-\\udfff]'))
                var.put('rsUpper', ((Js('[')+var.get('rsUpperRange'))+Js(']')))
                var.put('rsZWJ', Js('\\u200d'))
                var.put('rsMiscLower', ((((Js('(?:')+var.get('rsLower'))+Js('|'))+var.get('rsMisc'))+Js(')')))
                var.put('rsMiscUpper', ((((Js('(?:')+var.get('rsUpper'))+Js('|'))+var.get('rsMisc'))+Js(')')))
                var.put('rsOptContrLower', ((Js('(?:')+var.get('rsApos'))+Js('(?:d|ll|m|re|s|t|ve))?')))
                var.put('rsOptContrUpper', ((Js('(?:')+var.get('rsApos'))+Js('(?:D|LL|M|RE|S|T|VE))?')))
                var.put('reOptMod', (var.get('rsModifier')+Js('?')))
                var.put('rsOptVar', ((Js('[')+var.get('rsVarRange'))+Js(']?')))
                var.put('rsOptJoin', (((((((Js('(?:')+var.get('rsZWJ'))+Js('(?:'))+Js([var.get('rsNonAstral'), var.get('rsRegional'), var.get('rsSurrPair')]).callprop('join', Js('|')))+Js(')'))+var.get('rsOptVar'))+var.get('reOptMod'))+Js(')*')))
                var.put('rsOrdLower', Js('\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])'))
                var.put('rsOrdUpper', Js('\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])'))
                var.put('rsSeq', ((var.get('rsOptVar')+var.get('reOptMod'))+var.get('rsOptJoin')))
                var.put('rsEmoji', (((Js('(?:')+Js([var.get('rsDingbat'), var.get('rsRegional'), var.get('rsSurrPair')]).callprop('join', Js('|')))+Js(')'))+var.get('rsSeq')))
                var.put('rsSymbol', ((Js('(?:')+Js([((var.get('rsNonAstral')+var.get('rsCombo'))+Js('?')), var.get('rsCombo'), var.get('rsRegional'), var.get('rsSurrPair'), var.get('rsAstral')]).callprop('join', Js('|')))+Js(')')))
                var.put('reApos', var.get('RegExp')(var.get('rsApos'), Js('g')))
                var.put('reComboMark', var.get('RegExp')(var.get('rsCombo'), Js('g')))
                var.put('reUnicode', var.get('RegExp')((((((var.get('rsFitz')+Js('(?='))+var.get('rsFitz'))+Js(')|'))+var.get('rsSymbol'))+var.get('rsSeq')), Js('g')))
                def PyJs_LONG_101_(var=var):
                    return Js([(((((((var.get('rsUpper')+Js('?'))+var.get('rsLower'))+Js('+'))+var.get('rsOptContrLower'))+Js('(?='))+Js([var.get('rsBreak'), var.get('rsUpper'), Js('$')]).callprop('join', Js('|')))+Js(')')), (((((var.get('rsMiscUpper')+Js('+'))+var.get('rsOptContrUpper'))+Js('(?='))+Js([var.get('rsBreak'), (var.get('rsUpper')+var.get('rsMiscLower')), Js('$')]).callprop('join', Js('|')))+Js(')')), ((((var.get('rsUpper')+Js('?'))+var.get('rsMiscLower'))+Js('+'))+var.get('rsOptContrLower')), ((var.get('rsUpper')+Js('+'))+var.get('rsOptContrUpper')), var.get('rsOrdUpper'), var.get('rsOrdLower'), var.get('rsDigits'), var.get('rsEmoji')]).callprop('join', Js('|'))
                var.put('reUnicodeWord', var.get('RegExp')(PyJs_LONG_101_(), Js('g')))
                var.put('reHasUnicode', var.get('RegExp')((((((Js('[')+var.get('rsZWJ'))+var.get('rsAstralRange'))+var.get('rsComboRange'))+var.get('rsVarRange'))+Js(']'))))
                var.put('reHasUnicodeWord', JsRegExp('/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/'))
                var.put('contextProps', Js([Js('Array'), Js('Buffer'), Js('DataView'), Js('Date'), Js('Error'), Js('Float32Array'), Js('Float64Array'), Js('Function'), Js('Int8Array'), Js('Int16Array'), Js('Int32Array'), Js('Map'), Js('Math'), Js('Object'), Js('Promise'), Js('RegExp'), Js('Set'), Js('String'), Js('Symbol'), Js('TypeError'), Js('Uint8Array'), Js('Uint8ClampedArray'), Js('Uint16Array'), Js('Uint32Array'), Js('WeakMap'), Js('_'), Js('clearTimeout'), Js('isFinite'), Js('parseInt'), Js('setTimeout')]))
                var.put('templateCounter', (-Js(1.0)))
                var.put('typedArrayTags', Js({}))
                def PyJs_LONG_102_(var=var):
                    return var.get('typedArrayTags').put(var.get('float64Tag'), var.get('typedArrayTags').put(var.get('int8Tag'), var.get('typedArrayTags').put(var.get('int16Tag'), var.get('typedArrayTags').put(var.get('int32Tag'), var.get('typedArrayTags').put(var.get('uint8Tag'), var.get('typedArrayTags').put(var.get('uint8ClampedTag'), var.get('typedArrayTags').put(var.get('uint16Tag'), var.get('typedArrayTags').put(var.get('uint32Tag'), Js(True)))))))))
                var.get('typedArrayTags').put(var.get('float32Tag'), PyJs_LONG_102_())
                def PyJs_LONG_103_(var=var):
                    return var.get('typedArrayTags').put(var.get('funcTag'), var.get('typedArrayTags').put(var.get('mapTag'), var.get('typedArrayTags').put(var.get('numberTag'), var.get('typedArrayTags').put(var.get('objectTag'), var.get('typedArrayTags').put(var.get('regexpTag'), var.get('typedArrayTags').put(var.get('setTag'), var.get('typedArrayTags').put(var.get('stringTag'), var.get('typedArrayTags').put(var.get('weakMapTag'), Js(False)))))))))
                var.get('typedArrayTags').put(var.get('argsTag'), var.get('typedArrayTags').put(var.get('arrayTag'), var.get('typedArrayTags').put(var.get('arrayBufferTag'), var.get('typedArrayTags').put(var.get('boolTag'), var.get('typedArrayTags').put(var.get('dataViewTag'), var.get('typedArrayTags').put(var.get('dateTag'), var.get('typedArrayTags').put(var.get('errorTag'), PyJs_LONG_103_())))))))
                var.put('cloneableTags', Js({}))
                def PyJs_LONG_105_(var=var):
                    def PyJs_LONG_104_(var=var):
                        return var.get('cloneableTags').put(var.get('regexpTag'), var.get('cloneableTags').put(var.get('setTag'), var.get('cloneableTags').put(var.get('stringTag'), var.get('cloneableTags').put(var.get('symbolTag'), var.get('cloneableTags').put(var.get('uint8Tag'), var.get('cloneableTags').put(var.get('uint8ClampedTag'), var.get('cloneableTags').put(var.get('uint16Tag'), var.get('cloneableTags').put(var.get('uint32Tag'), Js(True)))))))))
                    return var.get('cloneableTags').put(var.get('float32Tag'), var.get('cloneableTags').put(var.get('float64Tag'), var.get('cloneableTags').put(var.get('int8Tag'), var.get('cloneableTags').put(var.get('int16Tag'), var.get('cloneableTags').put(var.get('int32Tag'), var.get('cloneableTags').put(var.get('mapTag'), var.get('cloneableTags').put(var.get('numberTag'), var.get('cloneableTags').put(var.get('objectTag'), PyJs_LONG_104_()))))))))
                var.get('cloneableTags').put(var.get('argsTag'), var.get('cloneableTags').put(var.get('arrayTag'), var.get('cloneableTags').put(var.get('arrayBufferTag'), var.get('cloneableTags').put(var.get('dataViewTag'), var.get('cloneableTags').put(var.get('boolTag'), var.get('cloneableTags').put(var.get('dateTag'), PyJs_LONG_105_()))))))
                var.get('cloneableTags').put(var.get('errorTag'), var.get('cloneableTags').put(var.get('funcTag'), var.get('cloneableTags').put(var.get('weakMapTag'), Js(False))))
                var.put('deburredLetters', Js({'À':Js('A'),'Á':Js('A'),'Â':Js('A'),'Ã':Js('A'),'Ä':Js('A'),'Å':Js('A'),'à':Js('a'),'á':Js('a'),'â':Js('a'),'ã':Js('a'),'ä':Js('a'),'å':Js('a'),'Ç':Js('C'),'ç':Js('c'),'Ð':Js('D'),'ð':Js('d'),'È':Js('E'),'É':Js('E'),'Ê':Js('E'),'Ë':Js('E'),'è':Js('e'),'é':Js('e'),'ê':Js('e'),'ë':Js('e'),'Ì':Js('I'),'Í':Js('I'),'Î':Js('I'),'Ï':Js('I'),'ì':Js('i'),'í':Js('i'),'î':Js('i'),'ï':Js('i'),'Ñ':Js('N'),'ñ':Js('n'),'Ò':Js('O'),'Ó':Js('O'),'Ô':Js('O'),'Õ':Js('O'),'Ö':Js('O'),'Ø':Js('O'),'ò':Js('o'),'ó':Js('o'),'ô':Js('o'),'õ':Js('o'),'ö':Js('o'),'ø':Js('o'),'Ù':Js('U'),'Ú':Js('U'),'Û':Js('U'),'Ü':Js('U'),'ù':Js('u'),'ú':Js('u'),'û':Js('u'),'ü':Js('u'),'Ý':Js('Y'),'ý':Js('y'),'ÿ':Js('y'),'Æ':Js('Ae'),'æ':Js('ae'),'Þ':Js('Th'),'þ':Js('th'),'ß':Js('ss'),'Ā':Js('A'),'Ă':Js('A'),'Ą':Js('A'),'ā':Js('a'),'ă':Js('a'),'ą':Js('a'),'Ć':Js('C'),'Ĉ':Js('C'),'Ċ':Js('C'),'Č':Js('C'),'ć':Js('c'),'ĉ':Js('c'),'ċ':Js('c'),'č':Js('c'),'Ď':Js('D'),'Đ':Js('D'),'ď':Js('d'),'đ':Js('d'),'Ē':Js('E'),'Ĕ':Js('E'),'Ė':Js('E'),'Ę':Js('E'),'Ě':Js('E'),'ē':Js('e'),'ĕ':Js('e'),'ė':Js('e'),'ę':Js('e'),'ě':Js('e'),'Ĝ':Js('G'),'Ğ':Js('G'),'Ġ':Js('G'),'Ģ':Js('G'),'ĝ':Js('g'),'ğ':Js('g'),'ġ':Js('g'),'ģ':Js('g'),'Ĥ':Js('H'),'Ħ':Js('H'),'ĥ':Js('h'),'ħ':Js('h'),'Ĩ':Js('I'),'Ī':Js('I'),'Ĭ':Js('I'),'Į':Js('I'),'İ':Js('I'),'ĩ':Js('i'),'ī':Js('i'),'ĭ':Js('i'),'į':Js('i'),'ı':Js('i'),'Ĵ':Js('J'),'ĵ':Js('j'),'Ķ':Js('K'),'ķ':Js('k'),'ĸ':Js('k'),'Ĺ':Js('L'),'Ļ':Js('L'),'Ľ':Js('L'),'Ŀ':Js('L'),'Ł':Js('L'),'ĺ':Js('l'),'ļ':Js('l'),'ľ':Js('l'),'ŀ':Js('l'),'ł':Js('l'),'Ń':Js('N'),'Ņ':Js('N'),'Ň':Js('N'),'Ŋ':Js('N'),'ń':Js('n'),'ņ':Js('n'),'ň':Js('n'),'ŋ':Js('n'),'Ō':Js('O'),'Ŏ':Js('O'),'Ő':Js('O'),'ō':Js('o'),'ŏ':Js('o'),'ő':Js('o'),'Ŕ':Js('R'),'Ŗ':Js('R'),'Ř':Js('R'),'ŕ':Js('r'),'ŗ':Js('r'),'ř':Js('r'),'Ś':Js('S'),'Ŝ':Js('S'),'Ş':Js('S'),'Š':Js('S'),'ś':Js('s'),'ŝ':Js('s'),'ş':Js('s'),'š':Js('s'),'Ţ':Js('T'),'Ť':Js('T'),'Ŧ':Js('T'),'ţ':Js('t'),'ť':Js('t'),'ŧ':Js('t'),'Ũ':Js('U'),'Ū':Js('U'),'Ŭ':Js('U'),'Ů':Js('U'),'Ű':Js('U'),'Ų':Js('U'),'ũ':Js('u'),'ū':Js('u'),'ŭ':Js('u'),'ů':Js('u'),'ű':Js('u'),'ų':Js('u'),'Ŵ':Js('W'),'ŵ':Js('w'),'Ŷ':Js('Y'),'ŷ':Js('y'),'Ÿ':Js('Y'),'Ź':Js('Z'),'Ż':Js('Z'),'Ž':Js('Z'),'ź':Js('z'),'ż':Js('z'),'ž':Js('z'),'Ĳ':Js('IJ'),'ĳ':Js('ij'),'Œ':Js('Oe'),'œ':Js('oe'),'ŉ':Js("'n"),'ſ':Js('s')}))
                var.put('htmlEscapes', Js({'&':Js('&amp;'),'<':Js('&lt;'),'>':Js('&gt;'),'"':Js('&quot;'),"'":Js('&#39;')}))
                var.put('htmlUnescapes', Js({'&amp;':Js('&'),'&lt;':Js('<'),'&gt;':Js('>'),'&quot;':Js('"'),'&#39;':Js("'")}))
                var.put('stringEscapes', Js({'\\':Js('\\'),"'":Js("'"),'\n':Js('n'),'\r':Js('r'),'\u2028':Js('u2028'),'\u2029':Js('u2029')}))
                var.put('freeParseFloat', var.get('parseFloat'))
                var.put('freeParseInt', var.get('parseInt'))
                var.put('freeGlobal', (((((Js('undefined') if PyJsStrictEq(var.get('global',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('global')))==Js('object')) and var.get('global')) and PyJsStrictEq(var.get('global').get('Object'),var.get('Object'))) and var.get('global')))
                var.put('freeSelf', (((((Js('undefined') if PyJsStrictEq(var.get('self',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('self')))==Js('object')) and var.get('self')) and PyJsStrictEq(var.get('self').get('Object'),var.get('Object'))) and var.get('self')))
                var.put('root', ((var.get('freeGlobal') or var.get('freeSelf')) or var.get('Function')(Js('return this'))()))
                var.put('freeExports', (((((Js('undefined') if PyJsStrictEq(var.get('exports',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('exports')))==Js('object')) and var.get('exports')) and var.get('exports').get('nodeType').neg()) and var.get('exports')))
                var.put('freeModule', ((((var.get('freeExports') and ((Js('undefined') if PyJsStrictEq(var.get('module',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('module')))==Js('object'))) and var.get('module')) and var.get('module').get('nodeType').neg()) and var.get('module')))
                var.put('moduleExports', (var.get('freeModule') and PyJsStrictEq(var.get('freeModule').get('exports'),var.get('freeExports'))))
                var.put('freeProcess', (var.get('moduleExports') and var.get('freeGlobal').get('process')))
                @Js
                def PyJs_anonymous_106_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['types'])
                    try:
                        var.put('types', ((var.get('freeModule') and var.get('freeModule').get('require')) and var.get('freeModule').callprop('require', Js('util')).get('types')))
                        if var.get('types'):
                            return var.get('types')
                        return ((var.get('freeProcess') and var.get('freeProcess').get('binding')) and var.get('freeProcess').callprop('binding', Js('util')))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_14351404 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            pass
                        finally:
                            if PyJsHolder_65_14351404 is not None:
                                var.own['e'] = PyJsHolder_65_14351404
                            else:
                                del var.own['e']
                            del PyJsHolder_65_14351404
                PyJs_anonymous_106_._set_name('anonymous')
                var.put('nodeUtil', PyJs_anonymous_106_())
                var.put('nodeIsArrayBuffer', (var.get('nodeUtil') and var.get('nodeUtil').get('isArrayBuffer')))
                var.put('nodeIsDate', (var.get('nodeUtil') and var.get('nodeUtil').get('isDate')))
                var.put('nodeIsMap', (var.get('nodeUtil') and var.get('nodeUtil').get('isMap')))
                var.put('nodeIsRegExp', (var.get('nodeUtil') and var.get('nodeUtil').get('isRegExp')))
                var.put('nodeIsSet', (var.get('nodeUtil') and var.get('nodeUtil').get('isSet')))
                var.put('nodeIsTypedArray', (var.get('nodeUtil') and var.get('nodeUtil').get('isTypedArray')))
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                var.put('asciiSize', var.get('baseProperty')(Js('length')))
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                var.put('deburrLetter', var.get('basePropertyOf')(var.get('deburredLetters')))
                var.put('escapeHtmlChar', var.get('basePropertyOf')(var.get('htmlEscapes')))
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                pass
                var.put('unescapeHtmlChar', var.get('basePropertyOf')(var.get('htmlUnescapes')))
                pass
                pass
                pass
                @Js
                def PyJs_runInContext_118_(context, this, arguments, var=var):
                    var = Scope({'context':context, 'this':this, 'arguments':arguments, 'runInContext':PyJs_runInContext_118_}, var)
                    var.registers(['gte', 'promiseCtorString', 'baseOrderBy', 'pullAllWith', 'baseWhile', 'ctxClearTimeout', 'replace', 'identity', 'constant', 'wrapperAt', 'listCacheHas', 'escape', 'Function', 'cloneTypedArray', 'funcToString', 'isWeakSet', 'bindAll', 'random', 'xor', 'nativeFloor', 'over', 'isRegExp', 'thru', 'defaultTo', 'flattenDepth', 'countBy', 'now', 'symbolToString', 'createToPairs', 'flip', 'invokeMap', 'sortedIndexBy', 'assignValue', 'TypeError', 'basePullAt', 'wrapperReverse', 'createCtor', 'Date', 'listCacheGet', 'clamp', 'isIndex', 'baseIsRegExp', 'dataViewCtorString', 'baseIsArrayBuffer', 'invoke', 'sortedLastIndexOf', 'baseIsMap', 'matches', 'rearg', 'baseNth', 'rest', 'sortedIndex', 'isKeyable', 'baseEachRight', 'takeWhile', 'nth', 'baseConformsTo', 'sortedLastIndex', 'matchesStrictComparable', 'createFlow', 'tail', 'nativeGetSymbols', 'nativeReverse', 'coreJsData', 'toSource', 'baseFlatten', 'Stack', 'equalArrays', 'compareMultiple', 'overEvery', 'isFinite', 'lastIndexOf', 'isObjectLike', 'stackHas', 'baseIsEqual', 'isTypedArray', 'reorder', 'endsWith', 'wrapperClone', 'baseAssign', 'baseSet', 'flatMapDeep', 'reduce', 'getData', 'wrapperNext', 'setData', 'stackDelete', 'sample', 'without', 'baseClamp', 'unary', 'hasIn', 'keysIn', 'intersectionWith', 'mapCacheClear', 'partialRight', 'create', 'overArgs', 'baseRepeat', 'zipObjectDeep', 'SetCache', 'castArrayLikeObject', 'range', 'findKey', 'ListCache', 'nativeCreate', 'customOmitClone', 'isStrictComparable', 'symbolProto', 'delay', 'baseForOwn', 'stubArray', 'fromPairs', 'stringToPath', 'ctxSetTimeout', 'listCacheSet', 'assocIndexOf', 'sortedLastIndexBy', 'cloneArrayBuffer', 'createSet', 'escapeRegExp', 'includes', 'baseWrapperValue', 'propertyIsEnumerable', 'isWeakMap', 'words', 'pullAllBy', 'RegExp', 'mapValues', 'cloneDeep', 'flatMapDepth', 'matchesProperty', 'baseMap', 'hashHas', 'pullAll', 'createBind', 'snakeCase', 'baseUniq', 'baseInvoke', 'arrayLikeKeys', 'nativeKeys', 'toInteger', 'objectCtorString', 'intersectionBy', 'mixin', 'baseSetToString', 'setWrapToString', 'zipWith', 'reduceRight', 'pullAt', 'isFlattenable', 'allocUnsafe', 'intersection', 'realNames', 'isBoolean', 'createRelationalOperation', 'wrapperValue', 'baseSortedUniq', 'isNumber', 'difference', 'reverse', 'assignInWith', 'times', 'basePickBy', 'baseMatchesProperty', 'mapKeys', 'min', 'concat', 'isObject', 'pad', 'stackClear', 'filter', 'curryRight', 'castRest', 'toPlainObject', '_Symbol', 'arraySampleSize', 'arrayShuffle', 'omit', 'functionsIn', 'uniqueId', 'isMasked', 'symbolValueOf', 'nativeNow', 'lowerCase', 'indexOf', 'arraySample', 'kebabCase', 'stackSet', 'getAllKeys', 'nativeKeysIn', 'equalObjects', 'setCacheHas', 'sumBy', 'hasOwnProperty', 'nativeMin', 'isMatchWith', 'noConflict', 'invert', 'createPartial', 'baseEach', 'baseFor', 'baseKeys', 'sampleSize', 'isFunction', 'initCloneArray', 'baseToString', 'propertyOf', 'baseSample', 'differenceWith', 'eq', 'conforms', 'union', 'trimEnd', 'conformsTo', 'initCloneByTag', 'nativeMax', 'partition', 'isEmpty', 'shuffle', 'parent', 'defer', 'baseIsTypedArray', 'gt', 'partial', 'getAllKeysIn', 'baseIsDate', 'baseInRange', 'dropRight', 'baseGetTag', 'objectToString', 'chain', 'mapCacheGet', 'shuffleSelf', 'createMathOperation', 'stubFalse', 'Hash', 'createAggregator', 'baseRest', 'stubString', 'isArguments', 'xorWith', 'isSet', 'weakMapCtorString', 'toSafeInteger', 'clone', 'basePropertyDeep', 'isKey', 'lowerFirst', 'divide', 'isNil', 'getNative', 'assignWith', 'floor', 'splice', 'template', 'minBy', 'baseToNumber', 'basePullAll', 'compact', 'padStart', 'every', 'isNative', 'sum', 'toPairs', 'iteratee', 'startsWith', 'curry', 'baseHas', 'baseSortedIndexBy', 'clearTimeout', 'isArray', 'listCacheClear', 'baseLt', 'spread', 'startCase', 'baseCreate', 'round', 'forIn', 'drop', 'memoize', 'tap', 'MapCache', 'baseIteratee', 'castSlice', 'equalByTag', 'baseExtremum', 'flatRest', 'assign', 'has', 'compareAscending', 'slice', 'omitBy', 'setCtorString', 'dropWhile', 'attempt', 'flowRight', 'baseIsNative', 'Uint8Array', 'baseDelay', 'WeakMap', 'transform', 'baseLodash', 'mapCtorString', 'nativeObjectToString', 'createCurry', 'max', 'lodash', 'getHolder', 'camelCase', 'unzip', 'overSome', 'baseForRight', 'baseSome', 'createOver', 'Set', 'some', 'isUndefined', 'Array', 'valuesIn', 'toPath', 'baseHasIn', 'baseKeysIn', 'toString', 'head', 'Map', 'lazyReverse', 'maskSrcKey', 'assignMergeValue', 'toKey', 'nativeParseInt', 'copySymbols', 'isEqualWith', 'baseClone', 'getTag', 'differenceBy', 'lt', 'baseAggregator', 'createFind', 'getWrapDetails', 'findIndex', 'createWrap', 'getView', 'isString', 'wrapperCommit', 'wrapperToIterator', 'castArray', 'set', 'cloneDataView', 'repeat', 'rangeRight', 'takeRightWhile', 'shortOut', 'trim', 'baseGt', 'baseUnset', 'baseInverter', 'add', 'createCompounder', 'getFuncName', 'hashGet', 'createInverter', 'forOwn', 'LodashWrapper', 'baseIsArguments', 'forEachRight', 'meanBy', 'toUpper', 'DataView', 'baseFilter', 'mergeData', 'baseIsMatch', 'mergeWith', 'composeArgs', 'groupBy', 'getMatchData', 'idCounter', 'symIterator', 'split', 'createRange', 'mapCacheHas', 'upperFirst', 'stubObject', 'ceil', 'createRecurry', 'defineProperty', 'toLength', 'baseIsSet', 'zipObject', 'toNumber', 'pickBy', 'takeRight', 'nativeIsBuffer', 'createBaseEach', 'sortedIndexOf', 'context', 'getRawTag', 'setCacheAdd', 'unescape', 'baseFunctions', 'invertBy', 'nativeJoin', 'basePick', 'createRound', 'copySymbolsIn', 'after', 'map', 'cloneWith', 'stubTrue', 'subtract', 'values', 'findLastIndex', 'at', 'findLastKey', 'baseSetData', 'initCloneObject', 'get', 'functions', 'isMaskable', 'overRest', 'setToString', 'objectProto', 'hashDelete', 'baseIntersection', 'xorBy', 'debounce', 'copyArray', 'toArray', 'unzipWith', 'keys', 'deburr', 'baseMergeDeep', 'isNaN', 'cond', 'unset', 'baseXor', 'baseMerge', 'take', 'baseFill', 'assignIn', 'baseUpdate', 'updateWith', 'isPrototype', 'toPairsIn', 'join', 'baseSampleSize', 'property', 'chunk', 'findLast', 'once', 'truncate', 'reIsNative', 'sortedUniqBy', 'baseZipObject', 'customDefaultsMerge', 'keyBy', 'lte', 'castFunction', 'baseEvery', 'arrayProto', 'isLength', 'merge', 'baseMatches', 'isLaziable', 'isMatch', 'capitalize', 'getMapData', 'unionBy', 'cloneDeepWith', 'sortBy', 'zip', 'lazyValue', 'getSymbols', 'noop', 'wrapperChain', 'baseGet', 'isInteger', 'dropRightWhile', 'nativeIsFinite', 'baseIsEqualDeep', 'nativeCeil', 'initial', 'isPlainObject', 'safeGet', 'isArrayLikeObject', 'wrapperPlant', 'wrap', 'baseSortedIndex', 'isNull', 'forOwnRight', 'lazyClone', 'nthArg', 'hashSet', 'listCacheDelete', 'uniqWith', 'inRange', 'cloneBuffer', 'forEach', 'method', 'baseGetAllKeys', 'hasPath', 'sortedUniq', 'before', 'last', 'baseRandom', 'reject', 'insertWrapDetails', 'isDate', 'symToStringTag', 'forInRight', 'flatten', 'isEqual', 'createAssigner', 'isSafeInteger', 'uniqBy', 'Math', 'getSymbolsIn', 'isArrayLike', 'isSymbol', 'baseAssignValue', 'spreadableSymbol', 'padEnd', 'baseForOwnRight', 'negate', 'isMap', 'oldDash', 'multiply', 'pick', 'orderBy', 'setWith', 'mean', 'composeArgsRight', 'createPadding', 'objectCreate', 'metaMap', 'upperCase', 'isIterateeCall', 'bind', 'createHybrid', 'updateWrapDetails', 'find', 'parseInt', 'ctxNow', 'flatMap', 'cloneSymbol', 'toFinite', 'nativeRandom', 'LazyWrapper', 'defaultsDeep', 'ary', 'isArrayBuffer', 'isBuffer', 'remove', 'copyObject', 'baseSlice', 'getIteratee', 'castPath', 'throttle', 'Error', 'bindKey', 'baseDifference', 'setTimeout', 'baseAssignIn', 'String', 'createCaseFirst', 'fill', 'baseRange', 'cloneRegExp', 'hashClear', 'baseAt', 'flattenDeep', 'stackGet', 'isElement', 'pull', 'uniq', 'Promise', 'Object', 'mapCacheSet', 'toLower', 'Buffer', 'result', 'memoizeCapped', 'unionWith', 'getPrototype', 'funcProto', 'update', 'isError', 'createBaseFor', 'customDefaultsAssignIn', 'defaults', 'methodOf', 'maxBy', 'mapCacheDelete', 'flow', 'baseShuffle', 'trimStart', 'baseConforms', 'size'])
                    @Js
                    def PyJsHoisted_lodash_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        if ((var.get('isObjectLike')(var.get('value')) and var.get('isArray')(var.get('value')).neg()) and var.get('value').instanceof(var.get('LazyWrapper')).neg()):
                            if var.get('value').instanceof(var.get('LodashWrapper')):
                                return var.get('value')
                            if var.get('hasOwnProperty').callprop('call', var.get('value'), Js('__wrapped__')):
                                return var.get('wrapperClone')(var.get('value'))
                        return var.get('LodashWrapper').create(var.get('value'))
                    PyJsHoisted_lodash_.func_name = 'lodash'
                    var.put('lodash', PyJsHoisted_lodash_)
                    @Js
                    def PyJsHoisted_baseLodash_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        pass
                    PyJsHoisted_baseLodash_.func_name = 'baseLodash'
                    var.put('baseLodash', PyJsHoisted_baseLodash_)
                    @Js
                    def PyJsHoisted_LodashWrapper_(value, chainAll, this, arguments, var=var):
                        var = Scope({'value':value, 'chainAll':chainAll, 'this':this, 'arguments':arguments}, var)
                        var.registers(['chainAll', 'value'])
                        var.get(u"this").put('__wrapped__', var.get('value'))
                        var.get(u"this").put('__actions__', Js([]))
                        var.get(u"this").put('__chain__', var.get('chainAll').neg().neg())
                        var.get(u"this").put('__index__', Js(0.0))
                        var.get(u"this").put('__values__', var.get('undefined'))
                    PyJsHoisted_LodashWrapper_.func_name = 'LodashWrapper'
                    var.put('LodashWrapper', PyJsHoisted_LodashWrapper_)
                    @Js
                    def PyJsHoisted_LazyWrapper_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        var.get(u"this").put('__wrapped__', var.get('value'))
                        var.get(u"this").put('__actions__', Js([]))
                        var.get(u"this").put('__dir__', Js(1.0))
                        var.get(u"this").put('__filtered__', Js(False))
                        var.get(u"this").put('__iteratees__', Js([]))
                        var.get(u"this").put('__takeCount__', var.get('MAX_ARRAY_LENGTH'))
                        var.get(u"this").put('__views__', Js([]))
                    PyJsHoisted_LazyWrapper_.func_name = 'LazyWrapper'
                    var.put('LazyWrapper', PyJsHoisted_LazyWrapper_)
                    @Js
                    def PyJsHoisted_lazyClone_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['result'])
                        var.put('result', var.get('LazyWrapper').create(var.get(u"this").get('__wrapped__')))
                        var.get('result').put('__actions__', var.get('copyArray')(var.get(u"this").get('__actions__')))
                        var.get('result').put('__dir__', var.get(u"this").get('__dir__'))
                        var.get('result').put('__filtered__', var.get(u"this").get('__filtered__'))
                        var.get('result').put('__iteratees__', var.get('copyArray')(var.get(u"this").get('__iteratees__')))
                        var.get('result').put('__takeCount__', var.get(u"this").get('__takeCount__'))
                        var.get('result').put('__views__', var.get('copyArray')(var.get(u"this").get('__views__')))
                        return var.get('result')
                    PyJsHoisted_lazyClone_.func_name = 'lazyClone'
                    var.put('lazyClone', PyJsHoisted_lazyClone_)
                    @Js
                    def PyJsHoisted_lazyReverse_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['result'])
                        if var.get(u"this").get('__filtered__'):
                            var.put('result', var.get('LazyWrapper').create(var.get(u"this")))
                            var.get('result').put('__dir__', (-Js(1.0)))
                            var.get('result').put('__filtered__', Js(True))
                        else:
                            var.put('result', var.get(u"this").callprop('clone'))
                            var.get('result').put('__dir__', (-Js(1.0)), '*')
                        return var.get('result')
                    PyJsHoisted_lazyReverse_.func_name = 'lazyReverse'
                    var.put('lazyReverse', PyJsHoisted_lazyReverse_)
                    @Js
                    def PyJsHoisted_lazyValue_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratees', 'takeCount', 'computed', 'start', 'data', 'end', 'iteratee', 'isRight', 'iterIndex', 'result', 'view', 'length', 'isArr', 'value', 'arrLength', 'dir', 'array', 'iterLength', 'type', 'resIndex', 'index'])
                        var.put('array', var.get(u"this").get('__wrapped__').callprop('value'))
                        var.put('dir', var.get(u"this").get('__dir__'))
                        var.put('isArr', var.get('isArray')(var.get('array')))
                        var.put('isRight', (var.get('dir')<Js(0.0)))
                        var.put('arrLength', (var.get('array').get('length') if var.get('isArr') else Js(0.0)))
                        var.put('view', var.get('getView')(Js(0.0), var.get('arrLength'), var.get(u"this").get('__views__')))
                        var.put('start', var.get('view').get('start'))
                        var.put('end', var.get('view').get('end'))
                        var.put('length', (var.get('end')-var.get('start')))
                        var.put('index', (var.get('end') if var.get('isRight') else (var.get('start')-Js(1.0))))
                        var.put('iteratees', var.get(u"this").get('__iteratees__'))
                        var.put('iterLength', var.get('iteratees').get('length'))
                        var.put('resIndex', Js(0.0))
                        var.put('takeCount', var.get('nativeMin')(var.get('length'), var.get(u"this").get('__takeCount__')))
                        if (var.get('isArr').neg() or ((var.get('isRight').neg() and (var.get('arrLength')==var.get('length'))) and (var.get('takeCount')==var.get('length')))):
                            return var.get('baseWrapperValue')(var.get('array'), var.get(u"this").get('__actions__'))
                        var.put('result', Js([]))
                        class JS_CONTINUE_LABEL_6f75746572(Exception): pass
                        class JS_BREAK_LABEL_6f75746572(Exception): pass
                        try:
                            while ((var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)) and (var.get('resIndex')<var.get('takeCount'))):
                                try:
                                    var.put('index', var.get('dir'), '+')
                                    var.put('iterIndex', (-Js(1.0)))
                                    var.put('value', var.get('array').get(var.get('index')))
                                    while (var.put('iterIndex',Js(var.get('iterIndex').to_number())+Js(1))<var.get('iterLength')):
                                        var.put('data', var.get('iteratees').get(var.get('iterIndex')))
                                        var.put('iteratee', var.get('data').get('iteratee'))
                                        var.put('type', var.get('data').get('type'))
                                        var.put('computed', var.get('iteratee')(var.get('value')))
                                        if (var.get('type')==var.get('LAZY_MAP_FLAG')):
                                            var.put('value', var.get('computed'))
                                        else:
                                            if var.get('computed').neg():
                                                if (var.get('type')==var.get('LAZY_FILTER_FLAG')):
                                                    raise JS_CONTINUE_LABEL_6f75746572("Continued")
                                                else:
                                                    raise JS_BREAK_LABEL_6f75746572("Breaked")
                                    var.get('result').put((var.put('resIndex',Js(var.get('resIndex').to_number())+Js(1))-Js(1)), var.get('value'))
                                except JS_CONTINUE_LABEL_6f75746572:
                                    pass
                        except JS_BREAK_LABEL_6f75746572:
                            pass
                        return var.get('result')
                    PyJsHoisted_lazyValue_.func_name = 'lazyValue'
                    var.put('lazyValue', PyJsHoisted_lazyValue_)
                    @Js
                    def PyJsHoisted_Hash_(entries, this, arguments, var=var):
                        var = Scope({'entries':entries, 'this':this, 'arguments':arguments}, var)
                        var.registers(['entry', 'length', 'entries', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', (Js(0.0) if (var.get('entries')==var.get(u"null")) else var.get('entries').get('length')))
                        var.get(u"this").callprop('clear')
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('entry', var.get('entries').get(var.get('index')))
                            var.get(u"this").callprop('set', var.get('entry').get('0'), var.get('entry').get('1'))
                    PyJsHoisted_Hash_.func_name = 'Hash'
                    var.put('Hash', PyJsHoisted_Hash_)
                    @Js
                    def PyJsHoisted_hashClear_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get(u"this").put('__data__', (var.get('nativeCreate')(var.get(u"null")) if var.get('nativeCreate') else Js({})))
                        var.get(u"this").put('size', Js(0.0))
                    PyJsHoisted_hashClear_.func_name = 'hashClear'
                    var.put('hashClear', PyJsHoisted_hashClear_)
                    @Js
                    def PyJsHoisted_hashDelete_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'key'])
                        var.put('result', (var.get(u"this").callprop('has', var.get('key')) and var.get(u"this").get('__data__').delete(var.get('key'))))
                        var.get(u"this").put('size', (Js(1.0) if var.get('result') else Js(0.0)), '-')
                        return var.get('result')
                    PyJsHoisted_hashDelete_.func_name = 'hashDelete'
                    var.put('hashDelete', PyJsHoisted_hashDelete_)
                    @Js
                    def PyJsHoisted_hashGet_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'data', 'key'])
                        var.put('data', var.get(u"this").get('__data__'))
                        if var.get('nativeCreate'):
                            var.put('result', var.get('data').get(var.get('key')))
                            return (var.get('undefined') if PyJsStrictEq(var.get('result'),var.get('HASH_UNDEFINED')) else var.get('result'))
                        return (var.get('data').get(var.get('key')) if var.get('hasOwnProperty').callprop('call', var.get('data'), var.get('key')) else var.get('undefined'))
                    PyJsHoisted_hashGet_.func_name = 'hashGet'
                    var.put('hashGet', PyJsHoisted_hashGet_)
                    @Js
                    def PyJsHoisted_hashHas_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['data', 'key'])
                        var.put('data', var.get(u"this").get('__data__'))
                        return (PyJsStrictNeq(var.get('data').get(var.get('key')),var.get('undefined')) if var.get('nativeCreate') else var.get('hasOwnProperty').callprop('call', var.get('data'), var.get('key')))
                    PyJsHoisted_hashHas_.func_name = 'hashHas'
                    var.put('hashHas', PyJsHoisted_hashHas_)
                    @Js
                    def PyJsHoisted_hashSet_(key, value, this, arguments, var=var):
                        var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['data', 'value', 'key'])
                        var.put('data', var.get(u"this").get('__data__'))
                        var.get(u"this").put('size', (Js(0.0) if var.get(u"this").callprop('has', var.get('key')) else Js(1.0)), '+')
                        var.get('data').put(var.get('key'), (var.get('HASH_UNDEFINED') if (var.get('nativeCreate') and PyJsStrictEq(var.get('value'),var.get('undefined'))) else var.get('value')))
                        return var.get(u"this")
                    PyJsHoisted_hashSet_.func_name = 'hashSet'
                    var.put('hashSet', PyJsHoisted_hashSet_)
                    @Js
                    def PyJsHoisted_ListCache_(entries, this, arguments, var=var):
                        var = Scope({'entries':entries, 'this':this, 'arguments':arguments}, var)
                        var.registers(['entry', 'length', 'entries', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', (Js(0.0) if (var.get('entries')==var.get(u"null")) else var.get('entries').get('length')))
                        var.get(u"this").callprop('clear')
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('entry', var.get('entries').get(var.get('index')))
                            var.get(u"this").callprop('set', var.get('entry').get('0'), var.get('entry').get('1'))
                    PyJsHoisted_ListCache_.func_name = 'ListCache'
                    var.put('ListCache', PyJsHoisted_ListCache_)
                    @Js
                    def PyJsHoisted_listCacheClear_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get(u"this").put('__data__', Js([]))
                        var.get(u"this").put('size', Js(0.0))
                    PyJsHoisted_listCacheClear_.func_name = 'listCacheClear'
                    var.put('listCacheClear', PyJsHoisted_listCacheClear_)
                    @Js
                    def PyJsHoisted_listCacheDelete_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'data', 'index', 'lastIndex'])
                        var.put('data', var.get(u"this").get('__data__'))
                        var.put('index', var.get('assocIndexOf')(var.get('data'), var.get('key')))
                        if (var.get('index')<Js(0.0)):
                            return Js(False)
                        var.put('lastIndex', (var.get('data').get('length')-Js(1.0)))
                        if (var.get('index')==var.get('lastIndex')):
                            var.get('data').callprop('pop')
                        else:
                            var.get('splice').callprop('call', var.get('data'), var.get('index'), Js(1.0))
                        var.get(u"this").put('size',Js(var.get(u"this").get('size').to_number())-Js(1))
                        return Js(True)
                    PyJsHoisted_listCacheDelete_.func_name = 'listCacheDelete'
                    var.put('listCacheDelete', PyJsHoisted_listCacheDelete_)
                    @Js
                    def PyJsHoisted_listCacheGet_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['data', 'index', 'key'])
                        var.put('data', var.get(u"this").get('__data__'))
                        var.put('index', var.get('assocIndexOf')(var.get('data'), var.get('key')))
                        return (var.get('undefined') if (var.get('index')<Js(0.0)) else var.get('data').get(var.get('index')).get('1'))
                    PyJsHoisted_listCacheGet_.func_name = 'listCacheGet'
                    var.put('listCacheGet', PyJsHoisted_listCacheGet_)
                    @Js
                    def PyJsHoisted_listCacheHas_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key'])
                        return (var.get('assocIndexOf')(var.get(u"this").get('__data__'), var.get('key'))>(-Js(1.0)))
                    PyJsHoisted_listCacheHas_.func_name = 'listCacheHas'
                    var.put('listCacheHas', PyJsHoisted_listCacheHas_)
                    @Js
                    def PyJsHoisted_listCacheSet_(key, value, this, arguments, var=var):
                        var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'data', 'index', 'key'])
                        var.put('data', var.get(u"this").get('__data__'))
                        var.put('index', var.get('assocIndexOf')(var.get('data'), var.get('key')))
                        if (var.get('index')<Js(0.0)):
                            var.get(u"this").put('size',Js(var.get(u"this").get('size').to_number())+Js(1))
                            var.get('data').callprop('push', Js([var.get('key'), var.get('value')]))
                        else:
                            var.get('data').get(var.get('index')).put('1', var.get('value'))
                        return var.get(u"this")
                    PyJsHoisted_listCacheSet_.func_name = 'listCacheSet'
                    var.put('listCacheSet', PyJsHoisted_listCacheSet_)
                    @Js
                    def PyJsHoisted_MapCache_(entries, this, arguments, var=var):
                        var = Scope({'entries':entries, 'this':this, 'arguments':arguments}, var)
                        var.registers(['entry', 'length', 'entries', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', (Js(0.0) if (var.get('entries')==var.get(u"null")) else var.get('entries').get('length')))
                        var.get(u"this").callprop('clear')
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('entry', var.get('entries').get(var.get('index')))
                            var.get(u"this").callprop('set', var.get('entry').get('0'), var.get('entry').get('1'))
                    PyJsHoisted_MapCache_.func_name = 'MapCache'
                    var.put('MapCache', PyJsHoisted_MapCache_)
                    @Js
                    def PyJsHoisted_mapCacheClear_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get(u"this").put('size', Js(0.0))
                        var.get(u"this").put('__data__', Js({'hash':var.get('Hash').create(),'map':(var.get('Map') or var.get('ListCache')).create(),'string':var.get('Hash').create()}))
                    PyJsHoisted_mapCacheClear_.func_name = 'mapCacheClear'
                    var.put('mapCacheClear', PyJsHoisted_mapCacheClear_)
                    @Js
                    def PyJsHoisted_mapCacheDelete_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'key'])
                        var.put('result', var.get('getMapData')(var.get(u"this"), var.get('key')).callprop('delete', var.get('key')))
                        var.get(u"this").put('size', (Js(1.0) if var.get('result') else Js(0.0)), '-')
                        return var.get('result')
                    PyJsHoisted_mapCacheDelete_.func_name = 'mapCacheDelete'
                    var.put('mapCacheDelete', PyJsHoisted_mapCacheDelete_)
                    @Js
                    def PyJsHoisted_mapCacheGet_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key'])
                        return var.get('getMapData')(var.get(u"this"), var.get('key')).callprop('get', var.get('key'))
                    PyJsHoisted_mapCacheGet_.func_name = 'mapCacheGet'
                    var.put('mapCacheGet', PyJsHoisted_mapCacheGet_)
                    @Js
                    def PyJsHoisted_mapCacheHas_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key'])
                        return var.get('getMapData')(var.get(u"this"), var.get('key')).callprop('has', var.get('key'))
                    PyJsHoisted_mapCacheHas_.func_name = 'mapCacheHas'
                    var.put('mapCacheHas', PyJsHoisted_mapCacheHas_)
                    @Js
                    def PyJsHoisted_mapCacheSet_(key, value, this, arguments, var=var):
                        var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['size', 'data', 'value', 'key'])
                        var.put('data', var.get('getMapData')(var.get(u"this"), var.get('key')))
                        var.put('size', var.get('data').get('size'))
                        var.get('data').callprop('set', var.get('key'), var.get('value'))
                        var.get(u"this").put('size', (Js(0.0) if (var.get('data').get('size')==var.get('size')) else Js(1.0)), '+')
                        return var.get(u"this")
                    PyJsHoisted_mapCacheSet_.func_name = 'mapCacheSet'
                    var.put('mapCacheSet', PyJsHoisted_mapCacheSet_)
                    @Js
                    def PyJsHoisted_SetCache_(values, this, arguments, var=var):
                        var = Scope({'values':values, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values', 'length', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', (Js(0.0) if (var.get('values')==var.get(u"null")) else var.get('values').get('length')))
                        var.get(u"this").put('__data__', var.get('MapCache').create())
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.get(u"this").callprop('add', var.get('values').get(var.get('index')))
                    PyJsHoisted_SetCache_.func_name = 'SetCache'
                    var.put('SetCache', PyJsHoisted_SetCache_)
                    @Js
                    def PyJsHoisted_setCacheAdd_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        var.get(u"this").get('__data__').callprop('set', var.get('value'), var.get('HASH_UNDEFINED'))
                        return var.get(u"this")
                    PyJsHoisted_setCacheAdd_.func_name = 'setCacheAdd'
                    var.put('setCacheAdd', PyJsHoisted_setCacheAdd_)
                    @Js
                    def PyJsHoisted_setCacheHas_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return var.get(u"this").get('__data__').callprop('has', var.get('value'))
                    PyJsHoisted_setCacheHas_.func_name = 'setCacheHas'
                    var.put('setCacheHas', PyJsHoisted_setCacheHas_)
                    @Js
                    def PyJsHoisted_Stack_(entries, this, arguments, var=var):
                        var = Scope({'entries':entries, 'this':this, 'arguments':arguments}, var)
                        var.registers(['data', 'entries'])
                        var.put('data', var.get(u"this").put('__data__', var.get('ListCache').create(var.get('entries'))))
                        var.get(u"this").put('size', var.get('data').get('size'))
                    PyJsHoisted_Stack_.func_name = 'Stack'
                    var.put('Stack', PyJsHoisted_Stack_)
                    @Js
                    def PyJsHoisted_stackClear_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        var.get(u"this").put('__data__', var.get('ListCache').create())
                        var.get(u"this").put('size', Js(0.0))
                    PyJsHoisted_stackClear_.func_name = 'stackClear'
                    var.put('stackClear', PyJsHoisted_stackClear_)
                    @Js
                    def PyJsHoisted_stackDelete_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'data', 'key'])
                        var.put('data', var.get(u"this").get('__data__'))
                        var.put('result', var.get('data').callprop('delete', var.get('key')))
                        var.get(u"this").put('size', var.get('data').get('size'))
                        return var.get('result')
                    PyJsHoisted_stackDelete_.func_name = 'stackDelete'
                    var.put('stackDelete', PyJsHoisted_stackDelete_)
                    @Js
                    def PyJsHoisted_stackGet_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key'])
                        return var.get(u"this").get('__data__').callprop('get', var.get('key'))
                    PyJsHoisted_stackGet_.func_name = 'stackGet'
                    var.put('stackGet', PyJsHoisted_stackGet_)
                    @Js
                    def PyJsHoisted_stackHas_(key, this, arguments, var=var):
                        var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key'])
                        return var.get(u"this").get('__data__').callprop('has', var.get('key'))
                    PyJsHoisted_stackHas_.func_name = 'stackHas'
                    var.put('stackHas', PyJsHoisted_stackHas_)
                    @Js
                    def PyJsHoisted_stackSet_(key, value, this, arguments, var=var):
                        var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['pairs', 'data', 'value', 'key'])
                        var.put('data', var.get(u"this").get('__data__'))
                        if var.get('data').instanceof(var.get('ListCache')):
                            var.put('pairs', var.get('data').get('__data__'))
                            if (var.get('Map').neg() or (var.get('pairs').get('length')<(var.get('LARGE_ARRAY_SIZE')-Js(1.0)))):
                                var.get('pairs').callprop('push', Js([var.get('key'), var.get('value')]))
                                var.get(u"this").put('size', var.get('data').put('size',Js(var.get('data').get('size').to_number())+Js(1)))
                                return var.get(u"this")
                            var.put('data', var.get(u"this").put('__data__', var.get('MapCache').create(var.get('pairs'))))
                        var.get('data').callprop('set', var.get('key'), var.get('value'))
                        var.get(u"this").put('size', var.get('data').get('size'))
                        return var.get(u"this")
                    PyJsHoisted_stackSet_.func_name = 'stackSet'
                    var.put('stackSet', PyJsHoisted_stackSet_)
                    @Js
                    def PyJsHoisted_arrayLikeKeys_(value, inherited, this, arguments, var=var):
                        var = Scope({'value':value, 'inherited':inherited, 'this':this, 'arguments':arguments}, var)
                        var.registers(['isArr', 'value', 'inherited', 'isType', 'isBuff', 'isArg', 'result', 'key', 'length', 'skipIndexes'])
                        var.put('isArr', var.get('isArray')(var.get('value')))
                        var.put('isArg', (var.get('isArr').neg() and var.get('isArguments')(var.get('value'))))
                        var.put('isBuff', ((var.get('isArr').neg() and var.get('isArg').neg()) and var.get('isBuffer')(var.get('value'))))
                        var.put('isType', (((var.get('isArr').neg() and var.get('isArg').neg()) and var.get('isBuff').neg()) and var.get('isTypedArray')(var.get('value'))))
                        var.put('skipIndexes', (((var.get('isArr') or var.get('isArg')) or var.get('isBuff')) or var.get('isType')))
                        var.put('result', (var.get('baseTimes')(var.get('value').get('length'), var.get('String')) if var.get('skipIndexes') else Js([])))
                        var.put('length', var.get('result').get('length'))
                        for PyJsTemp in var.get('value'):
                            var.put('key', PyJsTemp)
                            def PyJs_LONG_123_(var=var):
                                return ((var.get('inherited') or var.get('hasOwnProperty').callprop('call', var.get('value'), var.get('key'))) and (var.get('skipIndexes') and ((((var.get('key')==Js('length')) or (var.get('isBuff') and ((var.get('key')==Js('offset')) or (var.get('key')==Js('parent'))))) or (var.get('isType') and (((var.get('key')==Js('buffer')) or (var.get('key')==Js('byteLength'))) or (var.get('key')==Js('byteOffset'))))) or var.get('isIndex')(var.get('key'), var.get('length')))).neg())
                            if PyJs_LONG_123_():
                                var.get('result').callprop('push', var.get('key'))
                        return var.get('result')
                    PyJsHoisted_arrayLikeKeys_.func_name = 'arrayLikeKeys'
                    var.put('arrayLikeKeys', PyJsHoisted_arrayLikeKeys_)
                    @Js
                    def PyJsHoisted_arraySample_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'array'])
                        var.put('length', var.get('array').get('length'))
                        return (var.get('array').get(var.get('baseRandom')(Js(0.0), (var.get('length')-Js(1.0)))) if var.get('length') else var.get('undefined'))
                    PyJsHoisted_arraySample_.func_name = 'arraySample'
                    var.put('arraySample', PyJsHoisted_arraySample_)
                    @Js
                    def PyJsHoisted_arraySampleSize_(array, n, this, arguments, var=var):
                        var = Scope({'array':array, 'n':n, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'array'])
                        return var.get('shuffleSelf')(var.get('copyArray')(var.get('array')), var.get('baseClamp')(var.get('n'), Js(0.0), var.get('array').get('length')))
                    PyJsHoisted_arraySampleSize_.func_name = 'arraySampleSize'
                    var.put('arraySampleSize', PyJsHoisted_arraySampleSize_)
                    @Js
                    def PyJsHoisted_arrayShuffle_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array'])
                        return var.get('shuffleSelf')(var.get('copyArray')(var.get('array')))
                    PyJsHoisted_arrayShuffle_.func_name = 'arrayShuffle'
                    var.put('arrayShuffle', PyJsHoisted_arrayShuffle_)
                    @Js
                    def PyJsHoisted_assignMergeValue_(object, key, value, this, arguments, var=var):
                        var = Scope({'object':object, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'value', 'key'])
                        if ((PyJsStrictNeq(var.get('value'),var.get('undefined')) and var.get('eq')(var.get('object').get(var.get('key')), var.get('value')).neg()) or (PyJsStrictEq(var.get('value'),var.get('undefined')) and var.get('object').contains(var.get('key')).neg())):
                            var.get('baseAssignValue')(var.get('object'), var.get('key'), var.get('value'))
                    PyJsHoisted_assignMergeValue_.func_name = 'assignMergeValue'
                    var.put('assignMergeValue', PyJsHoisted_assignMergeValue_)
                    @Js
                    def PyJsHoisted_assignValue_(object, key, value, this, arguments, var=var):
                        var = Scope({'object':object, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'objValue', 'value', 'key'])
                        var.put('objValue', var.get('object').get(var.get('key')))
                        if ((var.get('hasOwnProperty').callprop('call', var.get('object'), var.get('key')) and var.get('eq')(var.get('objValue'), var.get('value'))).neg() or (PyJsStrictEq(var.get('value'),var.get('undefined')) and var.get('object').contains(var.get('key')).neg())):
                            var.get('baseAssignValue')(var.get('object'), var.get('key'), var.get('value'))
                    PyJsHoisted_assignValue_.func_name = 'assignValue'
                    var.put('assignValue', PyJsHoisted_assignValue_)
                    @Js
                    def PyJsHoisted_assocIndexOf_(array, key, this, arguments, var=var):
                        var = Scope({'array':array, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'array', 'key'])
                        var.put('length', var.get('array').get('length'))
                        while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                            if var.get('eq')(var.get('array').get(var.get('length')).get('0'), var.get('key')):
                                return var.get('length')
                        return (-Js(1.0))
                    PyJsHoisted_assocIndexOf_.func_name = 'assocIndexOf'
                    var.put('assocIndexOf', PyJsHoisted_assocIndexOf_)
                    @Js
                    def PyJsHoisted_baseAggregator_(collection, setter, iteratee, accumulator, this, arguments, var=var):
                        var = Scope({'collection':collection, 'setter':setter, 'iteratee':iteratee, 'accumulator':accumulator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['accumulator', 'setter', 'iteratee', 'collection'])
                        @Js
                        def PyJs_anonymous_124_(value, key, collection, this, arguments, var=var):
                            var = Scope({'value':value, 'key':key, 'collection':collection, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key', 'collection', 'value'])
                            var.get('setter')(var.get('accumulator'), var.get('value'), var.get('iteratee')(var.get('value')), var.get('collection'))
                        PyJs_anonymous_124_._set_name('anonymous')
                        var.get('baseEach')(var.get('collection'), PyJs_anonymous_124_)
                        return var.get('accumulator')
                    PyJsHoisted_baseAggregator_.func_name = 'baseAggregator'
                    var.put('baseAggregator', PyJsHoisted_baseAggregator_)
                    @Js
                    def PyJsHoisted_baseAssign_(object, source, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'source'])
                        return (var.get('object') and var.get('copyObject')(var.get('source'), var.get('keys')(var.get('source')), var.get('object')))
                    PyJsHoisted_baseAssign_.func_name = 'baseAssign'
                    var.put('baseAssign', PyJsHoisted_baseAssign_)
                    @Js
                    def PyJsHoisted_baseAssignIn_(object, source, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'source'])
                        return (var.get('object') and var.get('copyObject')(var.get('source'), var.get('keysIn')(var.get('source')), var.get('object')))
                    PyJsHoisted_baseAssignIn_.func_name = 'baseAssignIn'
                    var.put('baseAssignIn', PyJsHoisted_baseAssignIn_)
                    @Js
                    def PyJsHoisted_baseAssignValue_(object, key, value, this, arguments, var=var):
                        var = Scope({'object':object, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'value', 'key'])
                        if ((var.get('key')==Js('__proto__')) and var.get('defineProperty')):
                            var.get('defineProperty')(var.get('object'), var.get('key'), Js({'configurable':Js(True),'enumerable':Js(True),'value':var.get('value'),'writable':Js(True)}))
                        else:
                            var.get('object').put(var.get('key'), var.get('value'))
                    PyJsHoisted_baseAssignValue_.func_name = 'baseAssignValue'
                    var.put('baseAssignValue', PyJsHoisted_baseAssignValue_)
                    @Js
                    def PyJsHoisted_baseAt_(object, paths, this, arguments, var=var):
                        var = Scope({'object':object, 'paths':paths, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'paths', 'result', 'length', 'skip', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('paths').get('length'))
                        var.put('result', var.get('Array')(var.get('length')))
                        var.put('skip', (var.get('object')==var.get(u"null")))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.get('result').put(var.get('index'), (var.get('undefined') if var.get('skip') else var.get('get')(var.get('object'), var.get('paths').get(var.get('index')))))
                        return var.get('result')
                    PyJsHoisted_baseAt_.func_name = 'baseAt'
                    var.put('baseAt', PyJsHoisted_baseAt_)
                    @Js
                    def PyJsHoisted_baseClamp_(number, lower, upper, this, arguments, var=var):
                        var = Scope({'number':number, 'lower':lower, 'upper':upper, 'this':this, 'arguments':arguments}, var)
                        var.registers(['upper', 'number', 'lower'])
                        if PyJsStrictEq(var.get('number'),var.get('number')):
                            if PyJsStrictNeq(var.get('upper'),var.get('undefined')):
                                var.put('number', (var.get('number') if (var.get('number')<=var.get('upper')) else var.get('upper')))
                            if PyJsStrictNeq(var.get('lower'),var.get('undefined')):
                                var.put('number', (var.get('number') if (var.get('number')>=var.get('lower')) else var.get('lower')))
                        return var.get('number')
                    PyJsHoisted_baseClamp_.func_name = 'baseClamp'
                    var.put('baseClamp', PyJsHoisted_baseClamp_)
                    @Js
                    def PyJsHoisted_baseClone_(value, bitmask, customizer, key, object, stack, this, arguments, var=var):
                        var = Scope({'value':value, 'bitmask':bitmask, 'customizer':customizer, 'key':key, 'object':object, 'stack':stack, 'this':this, 'arguments':arguments}, var)
                        var.registers(['bitmask', 'customizer', 'isArr', 'isFull', 'value', 'isDeep', 'tag', 'key', 'props', 'object', 'result', 'isFlat', 'keysFunc', 'stack', 'stacked', 'isFunc'])
                        var.put('isDeep', (var.get('bitmask')&var.get('CLONE_DEEP_FLAG')))
                        var.put('isFlat', (var.get('bitmask')&var.get('CLONE_FLAT_FLAG')))
                        var.put('isFull', (var.get('bitmask')&var.get('CLONE_SYMBOLS_FLAG')))
                        if var.get('customizer'):
                            var.put('result', (var.get('customizer')(var.get('value'), var.get('key'), var.get('object'), var.get('stack')) if var.get('object') else var.get('customizer')(var.get('value'))))
                        if PyJsStrictNeq(var.get('result'),var.get('undefined')):
                            return var.get('result')
                        if var.get('isObject')(var.get('value')).neg():
                            return var.get('value')
                        var.put('isArr', var.get('isArray')(var.get('value')))
                        if var.get('isArr'):
                            var.put('result', var.get('initCloneArray')(var.get('value')))
                            if var.get('isDeep').neg():
                                return var.get('copyArray')(var.get('value'), var.get('result'))
                        else:
                            var.put('tag', var.get('getTag')(var.get('value')))
                            var.put('isFunc', ((var.get('tag')==var.get('funcTag')) or (var.get('tag')==var.get('genTag'))))
                            if var.get('isBuffer')(var.get('value')):
                                return var.get('cloneBuffer')(var.get('value'), var.get('isDeep'))
                            if (((var.get('tag')==var.get('objectTag')) or (var.get('tag')==var.get('argsTag'))) or (var.get('isFunc') and var.get('object').neg())):
                                var.put('result', (Js({}) if (var.get('isFlat') or var.get('isFunc')) else var.get('initCloneObject')(var.get('value'))))
                                if var.get('isDeep').neg():
                                    return (var.get('copySymbolsIn')(var.get('value'), var.get('baseAssignIn')(var.get('result'), var.get('value'))) if var.get('isFlat') else var.get('copySymbols')(var.get('value'), var.get('baseAssign')(var.get('result'), var.get('value'))))
                            else:
                                if var.get('cloneableTags').get(var.get('tag')).neg():
                                    return (var.get('value') if var.get('object') else Js({}))
                                var.put('result', var.get('initCloneByTag')(var.get('value'), var.get('tag'), var.get('isDeep')))
                        (var.get('stack') or var.put('stack', var.get('Stack').create()))
                        var.put('stacked', var.get('stack').callprop('get', var.get('value')))
                        if var.get('stacked'):
                            return var.get('stacked')
                        var.get('stack').callprop('set', var.get('value'), var.get('result'))
                        if var.get('isSet')(var.get('value')):
                            @Js
                            def PyJs_anonymous_125_(subValue, this, arguments, var=var):
                                var = Scope({'subValue':subValue, 'this':this, 'arguments':arguments}, var)
                                var.registers(['subValue'])
                                var.get('result').callprop('add', var.get('baseClone')(var.get('subValue'), var.get('bitmask'), var.get('customizer'), var.get('subValue'), var.get('value'), var.get('stack')))
                            PyJs_anonymous_125_._set_name('anonymous')
                            var.get('value').callprop('forEach', PyJs_anonymous_125_)
                            return var.get('result')
                        if var.get('isMap')(var.get('value')):
                            @Js
                            def PyJs_anonymous_126_(subValue, key, this, arguments, var=var):
                                var = Scope({'subValue':subValue, 'key':key, 'this':this, 'arguments':arguments}, var)
                                var.registers(['subValue', 'key'])
                                var.get('result').callprop('set', var.get('key'), var.get('baseClone')(var.get('subValue'), var.get('bitmask'), var.get('customizer'), var.get('key'), var.get('value'), var.get('stack')))
                            PyJs_anonymous_126_._set_name('anonymous')
                            var.get('value').callprop('forEach', PyJs_anonymous_126_)
                            return var.get('result')
                        var.put('keysFunc', ((var.get('getAllKeysIn') if var.get('isFlat') else var.get('getAllKeys')) if var.get('isFull') else (var.get('keysIn') if var.get('isFlat') else var.get('keys'))))
                        var.put('props', (var.get('undefined') if var.get('isArr') else var.get('keysFunc')(var.get('value'))))
                        @Js
                        def PyJs_anonymous_127_(subValue, key, this, arguments, var=var):
                            var = Scope({'subValue':subValue, 'key':key, 'this':this, 'arguments':arguments}, var)
                            var.registers(['subValue', 'key'])
                            if var.get('props'):
                                var.put('key', var.get('subValue'))
                                var.put('subValue', var.get('value').get(var.get('key')))
                            var.get('assignValue')(var.get('result'), var.get('key'), var.get('baseClone')(var.get('subValue'), var.get('bitmask'), var.get('customizer'), var.get('key'), var.get('value'), var.get('stack')))
                        PyJs_anonymous_127_._set_name('anonymous')
                        var.get('arrayEach')((var.get('props') or var.get('value')), PyJs_anonymous_127_)
                        return var.get('result')
                    PyJsHoisted_baseClone_.func_name = 'baseClone'
                    var.put('baseClone', PyJsHoisted_baseClone_)
                    @Js
                    def PyJsHoisted_baseConforms_(source, this, arguments, var=var):
                        var = Scope({'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['props', 'source'])
                        var.put('props', var.get('keys')(var.get('source')))
                        @Js
                        def PyJs_anonymous_128_(object, this, arguments, var=var):
                            var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object'])
                            return var.get('baseConformsTo')(var.get('object'), var.get('source'), var.get('props'))
                        PyJs_anonymous_128_._set_name('anonymous')
                        return PyJs_anonymous_128_
                    PyJsHoisted_baseConforms_.func_name = 'baseConforms'
                    var.put('baseConforms', PyJsHoisted_baseConforms_)
                    @Js
                    def PyJsHoisted_baseConformsTo_(object, source, props, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'props':props, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'object', 'props', 'predicate', 'key', 'length', 'source'])
                        var.put('length', var.get('props').get('length'))
                        if (var.get('object')==var.get(u"null")):
                            return var.get('length').neg()
                        var.put('object', var.get('Object')(var.get('object')))
                        while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                            var.put('key', var.get('props').get(var.get('length')))
                            var.put('predicate', var.get('source').get(var.get('key')))
                            var.put('value', var.get('object').get(var.get('key')))
                            if ((PyJsStrictEq(var.get('value'),var.get('undefined')) and var.get('object').contains(var.get('key')).neg()) or var.get('predicate')(var.get('value')).neg()):
                                return Js(False)
                        return Js(True)
                    PyJsHoisted_baseConformsTo_.func_name = 'baseConformsTo'
                    var.put('baseConformsTo', PyJsHoisted_baseConformsTo_)
                    @Js
                    def PyJsHoisted_baseDelay_(func, wait, args, this, arguments, var=var):
                        var = Scope({'func':func, 'wait':wait, 'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['wait', 'func', 'args'])
                        if (var.get('func',throw=False).typeof()!=Js('function')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                            raise PyJsTempException
                        @Js
                        def PyJs_anonymous_129_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            var.get('func').callprop('apply', var.get('undefined'), var.get('args'))
                        PyJs_anonymous_129_._set_name('anonymous')
                        return var.get('setTimeout')(PyJs_anonymous_129_, var.get('wait'))
                    PyJsHoisted_baseDelay_.func_name = 'baseDelay'
                    var.put('baseDelay', PyJsHoisted_baseDelay_)
                    @Js
                    def PyJsHoisted_baseDifference_(array, values, iteratee, comparator, this, arguments, var=var):
                        var = Scope({'array':array, 'values':values, 'iteratee':iteratee, 'comparator':comparator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['valuesIndex', 'comparator', 'isCommon', 'value', 'values', 'array', 'includes', 'result', 'computed', 'valuesLength', 'length', 'iteratee', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('includes', var.get('arrayIncludes'))
                        var.put('isCommon', Js(True))
                        var.put('length', var.get('array').get('length'))
                        var.put('result', Js([]))
                        var.put('valuesLength', var.get('values').get('length'))
                        if var.get('length').neg():
                            return var.get('result')
                        if var.get('iteratee'):
                            var.put('values', var.get('arrayMap')(var.get('values'), var.get('baseUnary')(var.get('iteratee'))))
                        if var.get('comparator'):
                            var.put('includes', var.get('arrayIncludesWith'))
                            var.put('isCommon', Js(False))
                        else:
                            if (var.get('values').get('length')>=var.get('LARGE_ARRAY_SIZE')):
                                var.put('includes', var.get('cacheHas'))
                                var.put('isCommon', Js(False))
                                var.put('values', var.get('SetCache').create(var.get('values')))
                        class JS_CONTINUE_LABEL_6f75746572(Exception): pass
                        class JS_BREAK_LABEL_6f75746572(Exception): pass
                        try:
                            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                                try:
                                    var.put('value', var.get('array').get(var.get('index')))
                                    var.put('computed', (var.get('value') if (var.get('iteratee')==var.get(u"null")) else var.get('iteratee')(var.get('value'))))
                                    var.put('value', (var.get('value') if (var.get('comparator') or PyJsStrictNeq(var.get('value'),Js(0.0))) else Js(0.0)))
                                    if (var.get('isCommon') and PyJsStrictEq(var.get('computed'),var.get('computed'))):
                                        var.put('valuesIndex', var.get('valuesLength'))
                                        while (var.put('valuesIndex',Js(var.get('valuesIndex').to_number())-Js(1))+Js(1)):
                                            if PyJsStrictEq(var.get('values').get(var.get('valuesIndex')),var.get('computed')):
                                                raise JS_CONTINUE_LABEL_6f75746572("Continued")
                                        var.get('result').callprop('push', var.get('value'))
                                    else:
                                        if var.get('includes')(var.get('values'), var.get('computed'), var.get('comparator')).neg():
                                            var.get('result').callprop('push', var.get('value'))
                                except JS_CONTINUE_LABEL_6f75746572:
                                    pass
                        except JS_BREAK_LABEL_6f75746572:
                            pass
                        return var.get('result')
                    PyJsHoisted_baseDifference_.func_name = 'baseDifference'
                    var.put('baseDifference', PyJsHoisted_baseDifference_)
                    @Js
                    def PyJsHoisted_baseEvery_(collection, predicate, this, arguments, var=var):
                        var = Scope({'collection':collection, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate', 'result', 'collection'])
                        var.put('result', Js(True))
                        @Js
                        def PyJs_anonymous_130_(value, index, collection, this, arguments, var=var):
                            var = Scope({'value':value, 'index':index, 'collection':collection, 'this':this, 'arguments':arguments}, var)
                            var.registers(['collection', 'index', 'value'])
                            var.put('result', var.get('predicate')(var.get('value'), var.get('index'), var.get('collection')).neg().neg())
                            return var.get('result')
                        PyJs_anonymous_130_._set_name('anonymous')
                        var.get('baseEach')(var.get('collection'), PyJs_anonymous_130_)
                        return var.get('result')
                    PyJsHoisted_baseEvery_.func_name = 'baseEvery'
                    var.put('baseEvery', PyJsHoisted_baseEvery_)
                    @Js
                    def PyJsHoisted_baseExtremum_(array, iteratee, comparator, this, arguments, var=var):
                        var = Scope({'array':array, 'iteratee':iteratee, 'comparator':comparator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['comparator', 'value', 'array', 'index', 'result', 'computed', 'length', 'iteratee', 'current'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('array').get('length'))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('value', var.get('array').get(var.get('index')))
                            var.put('current', var.get('iteratee')(var.get('value')))
                            if ((var.get('current')!=var.get(u"null")) and ((PyJsStrictEq(var.get('current'),var.get('current')) and var.get('isSymbol')(var.get('current')).neg()) if PyJsStrictEq(var.get('computed'),var.get('undefined')) else var.get('comparator')(var.get('current'), var.get('computed')))):
                                var.put('computed', var.get('current'))
                                var.put('result', var.get('value'))
                        return var.get('result')
                    PyJsHoisted_baseExtremum_.func_name = 'baseExtremum'
                    var.put('baseExtremum', PyJsHoisted_baseExtremum_)
                    @Js
                    def PyJsHoisted_baseFill_(array, value, start, end, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'array', 'start', 'end', 'length'])
                        var.put('length', var.get('array').get('length'))
                        var.put('start', var.get('toInteger')(var.get('start')))
                        if (var.get('start')<Js(0.0)):
                            var.put('start', (Js(0.0) if ((-var.get('start'))>var.get('length')) else (var.get('length')+var.get('start'))))
                        var.put('end', (var.get('length') if (PyJsStrictEq(var.get('end'),var.get('undefined')) or (var.get('end')>var.get('length'))) else var.get('toInteger')(var.get('end'))))
                        if (var.get('end')<Js(0.0)):
                            var.put('end', var.get('length'), '+')
                        var.put('end', (Js(0.0) if (var.get('start')>var.get('end')) else var.get('toLength')(var.get('end'))))
                        while (var.get('start')<var.get('end')):
                            var.get('array').put((var.put('start',Js(var.get('start').to_number())+Js(1))-Js(1)), var.get('value'))
                        return var.get('array')
                    PyJsHoisted_baseFill_.func_name = 'baseFill'
                    var.put('baseFill', PyJsHoisted_baseFill_)
                    @Js
                    def PyJsHoisted_baseFilter_(collection, predicate, this, arguments, var=var):
                        var = Scope({'collection':collection, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate', 'result', 'collection'])
                        var.put('result', Js([]))
                        @Js
                        def PyJs_anonymous_131_(value, index, collection, this, arguments, var=var):
                            var = Scope({'value':value, 'index':index, 'collection':collection, 'this':this, 'arguments':arguments}, var)
                            var.registers(['collection', 'index', 'value'])
                            if var.get('predicate')(var.get('value'), var.get('index'), var.get('collection')):
                                var.get('result').callprop('push', var.get('value'))
                        PyJs_anonymous_131_._set_name('anonymous')
                        var.get('baseEach')(var.get('collection'), PyJs_anonymous_131_)
                        return var.get('result')
                    PyJsHoisted_baseFilter_.func_name = 'baseFilter'
                    var.put('baseFilter', PyJsHoisted_baseFilter_)
                    @Js
                    def PyJsHoisted_baseFlatten_(array, depth, predicate, isStrict, result, this, arguments, var=var):
                        var = Scope({'array':array, 'depth':depth, 'predicate':predicate, 'isStrict':isStrict, 'result':result, 'this':this, 'arguments':arguments}, var)
                        var.registers(['depth', 'value', 'array', 'predicate', 'result', 'length', 'index', 'isStrict'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('array').get('length'))
                        (var.get('predicate') or var.put('predicate', var.get('isFlattenable')))
                        (var.get('result') or var.put('result', Js([])))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('value', var.get('array').get(var.get('index')))
                            if ((var.get('depth')>Js(0.0)) and var.get('predicate')(var.get('value'))):
                                if (var.get('depth')>Js(1.0)):
                                    var.get('baseFlatten')(var.get('value'), (var.get('depth')-Js(1.0)), var.get('predicate'), var.get('isStrict'), var.get('result'))
                                else:
                                    var.get('arrayPush')(var.get('result'), var.get('value'))
                            else:
                                if var.get('isStrict').neg():
                                    var.get('result').put(var.get('result').get('length'), var.get('value'))
                        return var.get('result')
                    PyJsHoisted_baseFlatten_.func_name = 'baseFlatten'
                    var.put('baseFlatten', PyJsHoisted_baseFlatten_)
                    @Js
                    def PyJsHoisted_baseForOwn_(object, iteratee, this, arguments, var=var):
                        var = Scope({'object':object, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'iteratee'])
                        return (var.get('object') and var.get('baseFor')(var.get('object'), var.get('iteratee'), var.get('keys')))
                    PyJsHoisted_baseForOwn_.func_name = 'baseForOwn'
                    var.put('baseForOwn', PyJsHoisted_baseForOwn_)
                    @Js
                    def PyJsHoisted_baseForOwnRight_(object, iteratee, this, arguments, var=var):
                        var = Scope({'object':object, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'iteratee'])
                        return (var.get('object') and var.get('baseForRight')(var.get('object'), var.get('iteratee'), var.get('keys')))
                    PyJsHoisted_baseForOwnRight_.func_name = 'baseForOwnRight'
                    var.put('baseForOwnRight', PyJsHoisted_baseForOwnRight_)
                    @Js
                    def PyJsHoisted_baseFunctions_(object, props, this, arguments, var=var):
                        var = Scope({'object':object, 'props':props, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'props'])
                        @Js
                        def PyJs_anonymous_132_(key, this, arguments, var=var):
                            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key'])
                            return var.get('isFunction')(var.get('object').get(var.get('key')))
                        PyJs_anonymous_132_._set_name('anonymous')
                        return var.get('arrayFilter')(var.get('props'), PyJs_anonymous_132_)
                    PyJsHoisted_baseFunctions_.func_name = 'baseFunctions'
                    var.put('baseFunctions', PyJsHoisted_baseFunctions_)
                    @Js
                    def PyJsHoisted_baseGet_(object, path, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'object', 'length', 'index'])
                        var.put('path', var.get('castPath')(var.get('path'), var.get('object')))
                        var.put('index', Js(0.0))
                        var.put('length', var.get('path').get('length'))
                        while ((var.get('object')!=var.get(u"null")) and (var.get('index')<var.get('length'))):
                            var.put('object', var.get('object').get(var.get('toKey')(var.get('path').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))))
                        return (var.get('object') if (var.get('index') and (var.get('index')==var.get('length'))) else var.get('undefined'))
                    PyJsHoisted_baseGet_.func_name = 'baseGet'
                    var.put('baseGet', PyJsHoisted_baseGet_)
                    @Js
                    def PyJsHoisted_baseGetAllKeys_(object, keysFunc, symbolsFunc, this, arguments, var=var):
                        var = Scope({'object':object, 'keysFunc':keysFunc, 'symbolsFunc':symbolsFunc, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'result', 'symbolsFunc', 'keysFunc'])
                        var.put('result', var.get('keysFunc')(var.get('object')))
                        return (var.get('result') if var.get('isArray')(var.get('object')) else var.get('arrayPush')(var.get('result'), var.get('symbolsFunc')(var.get('object'))))
                    PyJsHoisted_baseGetAllKeys_.func_name = 'baseGetAllKeys'
                    var.put('baseGetAllKeys', PyJsHoisted_baseGetAllKeys_)
                    @Js
                    def PyJsHoisted_baseGetTag_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        if (var.get('value')==var.get(u"null")):
                            return (var.get('undefinedTag') if PyJsStrictEq(var.get('value'),var.get('undefined')) else var.get('nullTag'))
                        return (var.get('getRawTag')(var.get('value')) if (var.get('symToStringTag') and var.get('Object')(var.get('value')).contains(var.get('symToStringTag'))) else var.get('objectToString')(var.get('value')))
                    PyJsHoisted_baseGetTag_.func_name = 'baseGetTag'
                    var.put('baseGetTag', PyJsHoisted_baseGetTag_)
                    @Js
                    def PyJsHoisted_baseGt_(value, other, this, arguments, var=var):
                        var = Scope({'value':value, 'other':other, 'this':this, 'arguments':arguments}, var)
                        var.registers(['other', 'value'])
                        return (var.get('value')>var.get('other'))
                    PyJsHoisted_baseGt_.func_name = 'baseGt'
                    var.put('baseGt', PyJsHoisted_baseGt_)
                    @Js
                    def PyJsHoisted_baseHas_(object, key, this, arguments, var=var):
                        var = Scope({'object':object, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'key'])
                        return ((var.get('object')!=var.get(u"null")) and var.get('hasOwnProperty').callprop('call', var.get('object'), var.get('key')))
                    PyJsHoisted_baseHas_.func_name = 'baseHas'
                    var.put('baseHas', PyJsHoisted_baseHas_)
                    @Js
                    def PyJsHoisted_baseHasIn_(object, key, this, arguments, var=var):
                        var = Scope({'object':object, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'key'])
                        return ((var.get('object')!=var.get(u"null")) and var.get('Object')(var.get('object')).contains(var.get('key')))
                    PyJsHoisted_baseHasIn_.func_name = 'baseHasIn'
                    var.put('baseHasIn', PyJsHoisted_baseHasIn_)
                    @Js
                    def PyJsHoisted_baseInRange_(number, start, end, this, arguments, var=var):
                        var = Scope({'number':number, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                        var.registers(['end', 'number', 'start'])
                        return ((var.get('number')>=var.get('nativeMin')(var.get('start'), var.get('end'))) and (var.get('number')<var.get('nativeMax')(var.get('start'), var.get('end'))))
                    PyJsHoisted_baseInRange_.func_name = 'baseInRange'
                    var.put('baseInRange', PyJsHoisted_baseInRange_)
                    @Js
                    def PyJsHoisted_baseIntersection_(arrays, iteratee, comparator, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'iteratee':iteratee, 'comparator':comparator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['othIndex', 'comparator', 'value', 'seen', 'arrays', 'array', 'maxLength', 'includes', 'result', 'othLength', 'computed', 'cache', 'caches', 'length', 'iteratee', 'index'])
                        var.put('includes', (var.get('arrayIncludesWith') if var.get('comparator') else var.get('arrayIncludes')))
                        var.put('length', var.get('arrays').get('0').get('length'))
                        var.put('othLength', var.get('arrays').get('length'))
                        var.put('othIndex', var.get('othLength'))
                        var.put('caches', var.get('Array')(var.get('othLength')))
                        var.put('maxLength', var.get('Infinity'))
                        var.put('result', Js([]))
                        while (var.put('othIndex',Js(var.get('othIndex').to_number())-Js(1))+Js(1)):
                            var.put('array', var.get('arrays').get(var.get('othIndex')))
                            if (var.get('othIndex') and var.get('iteratee')):
                                var.put('array', var.get('arrayMap')(var.get('array'), var.get('baseUnary')(var.get('iteratee'))))
                            var.put('maxLength', var.get('nativeMin')(var.get('array').get('length'), var.get('maxLength')))
                            var.get('caches').put(var.get('othIndex'), (var.get('SetCache').create((var.get('othIndex') and var.get('array'))) if (var.get('comparator').neg() and (var.get('iteratee') or ((var.get('length')>=Js(120.0)) and (var.get('array').get('length')>=Js(120.0))))) else var.get('undefined')))
                        var.put('array', var.get('arrays').get('0'))
                        var.put('index', (-Js(1.0)))
                        var.put('seen', var.get('caches').get('0'))
                        class JS_CONTINUE_LABEL_6f75746572(Exception): pass
                        class JS_BREAK_LABEL_6f75746572(Exception): pass
                        try:
                            while ((var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')) and (var.get('result').get('length')<var.get('maxLength'))):
                                try:
                                    var.put('value', var.get('array').get(var.get('index')))
                                    var.put('computed', (var.get('iteratee')(var.get('value')) if var.get('iteratee') else var.get('value')))
                                    var.put('value', (var.get('value') if (var.get('comparator') or PyJsStrictNeq(var.get('value'),Js(0.0))) else Js(0.0)))
                                    if (var.get('cacheHas')(var.get('seen'), var.get('computed')) if var.get('seen') else var.get('includes')(var.get('result'), var.get('computed'), var.get('comparator'))).neg():
                                        var.put('othIndex', var.get('othLength'))
                                        while var.put('othIndex',Js(var.get('othIndex').to_number())-Js(1)):
                                            var.put('cache', var.get('caches').get(var.get('othIndex')))
                                            if (var.get('cacheHas')(var.get('cache'), var.get('computed')) if var.get('cache') else var.get('includes')(var.get('arrays').get(var.get('othIndex')), var.get('computed'), var.get('comparator'))).neg():
                                                raise JS_CONTINUE_LABEL_6f75746572("Continued")
                                        if var.get('seen'):
                                            var.get('seen').callprop('push', var.get('computed'))
                                        var.get('result').callprop('push', var.get('value'))
                                except JS_CONTINUE_LABEL_6f75746572:
                                    pass
                        except JS_BREAK_LABEL_6f75746572:
                            pass
                        return var.get('result')
                    PyJsHoisted_baseIntersection_.func_name = 'baseIntersection'
                    var.put('baseIntersection', PyJsHoisted_baseIntersection_)
                    @Js
                    def PyJsHoisted_baseInverter_(object, setter, iteratee, accumulator, this, arguments, var=var):
                        var = Scope({'object':object, 'setter':setter, 'iteratee':iteratee, 'accumulator':accumulator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['accumulator', 'object', 'setter', 'iteratee'])
                        @Js
                        def PyJs_anonymous_133_(value, key, object, this, arguments, var=var):
                            var = Scope({'value':value, 'key':key, 'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key', 'object', 'value'])
                            var.get('setter')(var.get('accumulator'), var.get('iteratee')(var.get('value')), var.get('key'), var.get('object'))
                        PyJs_anonymous_133_._set_name('anonymous')
                        var.get('baseForOwn')(var.get('object'), PyJs_anonymous_133_)
                        return var.get('accumulator')
                    PyJsHoisted_baseInverter_.func_name = 'baseInverter'
                    var.put('baseInverter', PyJsHoisted_baseInverter_)
                    @Js
                    def PyJsHoisted_baseInvoke_(object, path, args, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'func', 'args', 'object'])
                        var.put('path', var.get('castPath')(var.get('path'), var.get('object')))
                        var.put('object', var.get('parent')(var.get('object'), var.get('path')))
                        var.put('func', (var.get('object') if (var.get('object')==var.get(u"null")) else var.get('object').get(var.get('toKey')(var.get('last')(var.get('path'))))))
                        return (var.get('undefined') if (var.get('func')==var.get(u"null")) else var.get('apply')(var.get('func'), var.get('object'), var.get('args')))
                    PyJsHoisted_baseInvoke_.func_name = 'baseInvoke'
                    var.put('baseInvoke', PyJsHoisted_baseInvoke_)
                    @Js
                    def PyJsHoisted_baseIsArguments_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('isObjectLike')(var.get('value')) and (var.get('baseGetTag')(var.get('value'))==var.get('argsTag')))
                    PyJsHoisted_baseIsArguments_.func_name = 'baseIsArguments'
                    var.put('baseIsArguments', PyJsHoisted_baseIsArguments_)
                    @Js
                    def PyJsHoisted_baseIsArrayBuffer_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('isObjectLike')(var.get('value')) and (var.get('baseGetTag')(var.get('value'))==var.get('arrayBufferTag')))
                    PyJsHoisted_baseIsArrayBuffer_.func_name = 'baseIsArrayBuffer'
                    var.put('baseIsArrayBuffer', PyJsHoisted_baseIsArrayBuffer_)
                    @Js
                    def PyJsHoisted_baseIsDate_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('isObjectLike')(var.get('value')) and (var.get('baseGetTag')(var.get('value'))==var.get('dateTag')))
                    PyJsHoisted_baseIsDate_.func_name = 'baseIsDate'
                    var.put('baseIsDate', PyJsHoisted_baseIsDate_)
                    @Js
                    def PyJsHoisted_baseIsEqual_(value, other, bitmask, customizer, stack, this, arguments, var=var):
                        var = Scope({'value':value, 'other':other, 'bitmask':bitmask, 'customizer':customizer, 'stack':stack, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'value', 'bitmask', 'other', 'stack'])
                        if PyJsStrictEq(var.get('value'),var.get('other')):
                            return Js(True)
                        if (((var.get('value')==var.get(u"null")) or (var.get('other')==var.get(u"null"))) or (var.get('isObjectLike')(var.get('value')).neg() and var.get('isObjectLike')(var.get('other')).neg())):
                            return (PyJsStrictNeq(var.get('value'),var.get('value')) and PyJsStrictNeq(var.get('other'),var.get('other')))
                        return var.get('baseIsEqualDeep')(var.get('value'), var.get('other'), var.get('bitmask'), var.get('customizer'), var.get('baseIsEqual'), var.get('stack'))
                    PyJsHoisted_baseIsEqual_.func_name = 'baseIsEqual'
                    var.put('baseIsEqual', PyJsHoisted_baseIsEqual_)
                    @Js
                    def PyJsHoisted_baseIsEqualDeep_(object, other, bitmask, customizer, equalFunc, stack, this, arguments, var=var):
                        var = Scope({'object':object, 'other':other, 'bitmask':bitmask, 'customizer':customizer, 'equalFunc':equalFunc, 'stack':stack, 'this':this, 'arguments':arguments}, var)
                        var.registers(['othIsArr', 'bitmask', 'customizer', 'objIsArr', 'othIsWrapped', 'object', 'objTag', 'equalFunc', 'othUnwrapped', 'othIsObj', 'objIsWrapped', 'othTag', 'isSameTag', 'objIsObj', 'objUnwrapped', 'other', 'stack'])
                        var.put('objIsArr', var.get('isArray')(var.get('object')))
                        var.put('othIsArr', var.get('isArray')(var.get('other')))
                        var.put('objTag', (var.get('arrayTag') if var.get('objIsArr') else var.get('getTag')(var.get('object'))))
                        var.put('othTag', (var.get('arrayTag') if var.get('othIsArr') else var.get('getTag')(var.get('other'))))
                        var.put('objTag', (var.get('objectTag') if (var.get('objTag')==var.get('argsTag')) else var.get('objTag')))
                        var.put('othTag', (var.get('objectTag') if (var.get('othTag')==var.get('argsTag')) else var.get('othTag')))
                        var.put('objIsObj', (var.get('objTag')==var.get('objectTag')))
                        var.put('othIsObj', (var.get('othTag')==var.get('objectTag')))
                        var.put('isSameTag', (var.get('objTag')==var.get('othTag')))
                        if (var.get('isSameTag') and var.get('isBuffer')(var.get('object'))):
                            if var.get('isBuffer')(var.get('other')).neg():
                                return Js(False)
                            var.put('objIsArr', Js(True))
                            var.put('objIsObj', Js(False))
                        if (var.get('isSameTag') and var.get('objIsObj').neg()):
                            (var.get('stack') or var.put('stack', var.get('Stack').create()))
                            return (var.get('equalArrays')(var.get('object'), var.get('other'), var.get('bitmask'), var.get('customizer'), var.get('equalFunc'), var.get('stack')) if (var.get('objIsArr') or var.get('isTypedArray')(var.get('object'))) else var.get('equalByTag')(var.get('object'), var.get('other'), var.get('objTag'), var.get('bitmask'), var.get('customizer'), var.get('equalFunc'), var.get('stack')))
                        if (var.get('bitmask')&var.get('COMPARE_PARTIAL_FLAG')).neg():
                            var.put('objIsWrapped', (var.get('objIsObj') and var.get('hasOwnProperty').callprop('call', var.get('object'), Js('__wrapped__'))))
                            var.put('othIsWrapped', (var.get('othIsObj') and var.get('hasOwnProperty').callprop('call', var.get('other'), Js('__wrapped__'))))
                            if (var.get('objIsWrapped') or var.get('othIsWrapped')):
                                var.put('objUnwrapped', (var.get('object').callprop('value') if var.get('objIsWrapped') else var.get('object')))
                                var.put('othUnwrapped', (var.get('other').callprop('value') if var.get('othIsWrapped') else var.get('other')))
                                (var.get('stack') or var.put('stack', var.get('Stack').create()))
                                return var.get('equalFunc')(var.get('objUnwrapped'), var.get('othUnwrapped'), var.get('bitmask'), var.get('customizer'), var.get('stack'))
                        if var.get('isSameTag').neg():
                            return Js(False)
                        (var.get('stack') or var.put('stack', var.get('Stack').create()))
                        return var.get('equalObjects')(var.get('object'), var.get('other'), var.get('bitmask'), var.get('customizer'), var.get('equalFunc'), var.get('stack'))
                    PyJsHoisted_baseIsEqualDeep_.func_name = 'baseIsEqualDeep'
                    var.put('baseIsEqualDeep', PyJsHoisted_baseIsEqualDeep_)
                    @Js
                    def PyJsHoisted_baseIsMap_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('isObjectLike')(var.get('value')) and (var.get('getTag')(var.get('value'))==var.get('mapTag')))
                    PyJsHoisted_baseIsMap_.func_name = 'baseIsMap'
                    var.put('baseIsMap', PyJsHoisted_baseIsMap_)
                    @Js
                    def PyJsHoisted_baseIsMatch_(object, source, matchData, customizer, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'matchData':matchData, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'noCustomizer', 'object', 'matchData', 'result', 'objValue', 'data', 'key', 'srcValue', 'length', 'source', 'index', 'stack'])
                        var.put('index', var.get('matchData').get('length'))
                        var.put('length', var.get('index'))
                        var.put('noCustomizer', var.get('customizer').neg())
                        if (var.get('object')==var.get(u"null")):
                            return var.get('length').neg()
                        var.put('object', var.get('Object')(var.get('object')))
                        while (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)):
                            var.put('data', var.get('matchData').get(var.get('index')))
                            if (PyJsStrictNeq(var.get('data').get('1'),var.get('object').get(var.get('data').get('0'))) if (var.get('noCustomizer') and var.get('data').get('2')) else var.get('object').contains(var.get('data').get('0')).neg()):
                                return Js(False)
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('data', var.get('matchData').get(var.get('index')))
                            var.put('key', var.get('data').get('0'))
                            var.put('objValue', var.get('object').get(var.get('key')))
                            var.put('srcValue', var.get('data').get('1'))
                            if (var.get('noCustomizer') and var.get('data').get('2')):
                                if (PyJsStrictEq(var.get('objValue'),var.get('undefined')) and var.get('object').contains(var.get('key')).neg()):
                                    return Js(False)
                            else:
                                var.put('stack', var.get('Stack').create())
                                if var.get('customizer'):
                                    var.put('result', var.get('customizer')(var.get('objValue'), var.get('srcValue'), var.get('key'), var.get('object'), var.get('source'), var.get('stack')))
                                if (var.get('baseIsEqual')(var.get('srcValue'), var.get('objValue'), (var.get('COMPARE_PARTIAL_FLAG')|var.get('COMPARE_UNORDERED_FLAG')), var.get('customizer'), var.get('stack')) if PyJsStrictEq(var.get('result'),var.get('undefined')) else var.get('result')).neg():
                                    return Js(False)
                        return Js(True)
                    PyJsHoisted_baseIsMatch_.func_name = 'baseIsMatch'
                    var.put('baseIsMatch', PyJsHoisted_baseIsMatch_)
                    @Js
                    def PyJsHoisted_baseIsNative_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['pattern', 'value'])
                        if (var.get('isObject')(var.get('value')).neg() or var.get('isMasked')(var.get('value'))):
                            return Js(False)
                        var.put('pattern', (var.get('reIsNative') if var.get('isFunction')(var.get('value')) else var.get('reIsHostCtor')))
                        return var.get('pattern').callprop('test', var.get('toSource')(var.get('value')))
                    PyJsHoisted_baseIsNative_.func_name = 'baseIsNative'
                    var.put('baseIsNative', PyJsHoisted_baseIsNative_)
                    @Js
                    def PyJsHoisted_baseIsRegExp_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('isObjectLike')(var.get('value')) and (var.get('baseGetTag')(var.get('value'))==var.get('regexpTag')))
                    PyJsHoisted_baseIsRegExp_.func_name = 'baseIsRegExp'
                    var.put('baseIsRegExp', PyJsHoisted_baseIsRegExp_)
                    @Js
                    def PyJsHoisted_baseIsSet_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('isObjectLike')(var.get('value')) and (var.get('getTag')(var.get('value'))==var.get('setTag')))
                    PyJsHoisted_baseIsSet_.func_name = 'baseIsSet'
                    var.put('baseIsSet', PyJsHoisted_baseIsSet_)
                    @Js
                    def PyJsHoisted_baseIsTypedArray_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('isObjectLike')(var.get('value')) and var.get('isLength')(var.get('value').get('length'))) and var.get('typedArrayTags').get(var.get('baseGetTag')(var.get('value'))).neg().neg())
                    PyJsHoisted_baseIsTypedArray_.func_name = 'baseIsTypedArray'
                    var.put('baseIsTypedArray', PyJsHoisted_baseIsTypedArray_)
                    @Js
                    def PyJsHoisted_baseIteratee_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        if (var.get('value',throw=False).typeof()==Js('function')):
                            return var.get('value')
                        if (var.get('value')==var.get(u"null")):
                            return var.get('identity')
                        if ((Js('undefined') if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value')))==Js('object')):
                            return (var.get('baseMatchesProperty')(var.get('value').get('0'), var.get('value').get('1')) if var.get('isArray')(var.get('value')) else var.get('baseMatches')(var.get('value')))
                        return var.get('property')(var.get('value'))
                    PyJsHoisted_baseIteratee_.func_name = 'baseIteratee'
                    var.put('baseIteratee', PyJsHoisted_baseIteratee_)
                    @Js
                    def PyJsHoisted_baseKeys_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'result', 'key'])
                        if var.get('isPrototype')(var.get('object')).neg():
                            return var.get('nativeKeys')(var.get('object'))
                        var.put('result', Js([]))
                        for PyJsTemp in var.get('Object')(var.get('object')):
                            var.put('key', PyJsTemp)
                            if (var.get('hasOwnProperty').callprop('call', var.get('object'), var.get('key')) and (var.get('key')!=Js('constructor'))):
                                var.get('result').callprop('push', var.get('key'))
                        return var.get('result')
                    PyJsHoisted_baseKeys_.func_name = 'baseKeys'
                    var.put('baseKeys', PyJsHoisted_baseKeys_)
                    @Js
                    def PyJsHoisted_baseKeysIn_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['isProto', 'result', 'object', 'key'])
                        if var.get('isObject')(var.get('object')).neg():
                            return var.get('nativeKeysIn')(var.get('object'))
                        var.put('isProto', var.get('isPrototype')(var.get('object')))
                        var.put('result', Js([]))
                        for PyJsTemp in var.get('object'):
                            var.put('key', PyJsTemp)
                            if ((var.get('key')==Js('constructor')) and (var.get('isProto') or var.get('hasOwnProperty').callprop('call', var.get('object'), var.get('key')).neg())).neg():
                                var.get('result').callprop('push', var.get('key'))
                        return var.get('result')
                    PyJsHoisted_baseKeysIn_.func_name = 'baseKeysIn'
                    var.put('baseKeysIn', PyJsHoisted_baseKeysIn_)
                    @Js
                    def PyJsHoisted_baseLt_(value, other, this, arguments, var=var):
                        var = Scope({'value':value, 'other':other, 'this':this, 'arguments':arguments}, var)
                        var.registers(['other', 'value'])
                        return (var.get('value')<var.get('other'))
                    PyJsHoisted_baseLt_.func_name = 'baseLt'
                    var.put('baseLt', PyJsHoisted_baseLt_)
                    @Js
                    def PyJsHoisted_baseMap_(collection, iteratee, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'iteratee', 'collection', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('result', (var.get('Array')(var.get('collection').get('length')) if var.get('isArrayLike')(var.get('collection')) else Js([])))
                        @Js
                        def PyJs_anonymous_134_(value, key, collection, this, arguments, var=var):
                            var = Scope({'value':value, 'key':key, 'collection':collection, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key', 'collection', 'value'])
                            var.get('result').put(var.put('index',Js(var.get('index').to_number())+Js(1)), var.get('iteratee')(var.get('value'), var.get('key'), var.get('collection')))
                        PyJs_anonymous_134_._set_name('anonymous')
                        var.get('baseEach')(var.get('collection'), PyJs_anonymous_134_)
                        return var.get('result')
                    PyJsHoisted_baseMap_.func_name = 'baseMap'
                    var.put('baseMap', PyJsHoisted_baseMap_)
                    @Js
                    def PyJsHoisted_baseMatches_(source, this, arguments, var=var):
                        var = Scope({'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['matchData', 'source'])
                        var.put('matchData', var.get('getMatchData')(var.get('source')))
                        if ((var.get('matchData').get('length')==Js(1.0)) and var.get('matchData').get('0').get('2')):
                            return var.get('matchesStrictComparable')(var.get('matchData').get('0').get('0'), var.get('matchData').get('0').get('1'))
                        @Js
                        def PyJs_anonymous_135_(object, this, arguments, var=var):
                            var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object'])
                            return (PyJsStrictEq(var.get('object'),var.get('source')) or var.get('baseIsMatch')(var.get('object'), var.get('source'), var.get('matchData')))
                        PyJs_anonymous_135_._set_name('anonymous')
                        return PyJs_anonymous_135_
                    PyJsHoisted_baseMatches_.func_name = 'baseMatches'
                    var.put('baseMatches', PyJsHoisted_baseMatches_)
                    @Js
                    def PyJsHoisted_baseMatchesProperty_(path, srcValue, this, arguments, var=var):
                        var = Scope({'path':path, 'srcValue':srcValue, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'srcValue'])
                        if (var.get('isKey')(var.get('path')) and var.get('isStrictComparable')(var.get('srcValue'))):
                            return var.get('matchesStrictComparable')(var.get('toKey')(var.get('path')), var.get('srcValue'))
                        @Js
                        def PyJs_anonymous_136_(object, this, arguments, var=var):
                            var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object', 'objValue'])
                            var.put('objValue', var.get('get')(var.get('object'), var.get('path')))
                            return (var.get('hasIn')(var.get('object'), var.get('path')) if (PyJsStrictEq(var.get('objValue'),var.get('undefined')) and PyJsStrictEq(var.get('objValue'),var.get('srcValue'))) else var.get('baseIsEqual')(var.get('srcValue'), var.get('objValue'), (var.get('COMPARE_PARTIAL_FLAG')|var.get('COMPARE_UNORDERED_FLAG'))))
                        PyJs_anonymous_136_._set_name('anonymous')
                        return PyJs_anonymous_136_
                    PyJsHoisted_baseMatchesProperty_.func_name = 'baseMatchesProperty'
                    var.put('baseMatchesProperty', PyJsHoisted_baseMatchesProperty_)
                    @Js
                    def PyJsHoisted_baseMerge_(object, source, srcIndex, customizer, stack, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'srcIndex':srcIndex, 'customizer':customizer, 'stack':stack, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'srcIndex', 'object', 'source', 'stack'])
                        if PyJsStrictEq(var.get('object'),var.get('source')):
                            return var.get('undefined')
                        @Js
                        def PyJs_anonymous_137_(srcValue, key, this, arguments, var=var):
                            var = Scope({'srcValue':srcValue, 'key':key, 'this':this, 'arguments':arguments}, var)
                            var.registers(['srcValue', 'key', 'newValue'])
                            if var.get('isObject')(var.get('srcValue')):
                                (var.get('stack') or var.put('stack', var.get('Stack').create()))
                                var.get('baseMergeDeep')(var.get('object'), var.get('source'), var.get('key'), var.get('srcIndex'), var.get('baseMerge'), var.get('customizer'), var.get('stack'))
                            else:
                                var.put('newValue', (var.get('customizer')(var.get('safeGet')(var.get('object'), var.get('key')), var.get('srcValue'), (var.get('key')+Js('')), var.get('object'), var.get('source'), var.get('stack')) if var.get('customizer') else var.get('undefined')))
                                if PyJsStrictEq(var.get('newValue'),var.get('undefined')):
                                    var.put('newValue', var.get('srcValue'))
                                var.get('assignMergeValue')(var.get('object'), var.get('key'), var.get('newValue'))
                        PyJs_anonymous_137_._set_name('anonymous')
                        var.get('baseFor')(var.get('source'), PyJs_anonymous_137_, var.get('keysIn'))
                    PyJsHoisted_baseMerge_.func_name = 'baseMerge'
                    var.put('baseMerge', PyJsHoisted_baseMerge_)
                    @Js
                    def PyJsHoisted_baseMergeDeep_(object, source, key, srcIndex, mergeFunc, customizer, stack, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'key':key, 'srcIndex':srcIndex, 'mergeFunc':mergeFunc, 'customizer':customizer, 'stack':stack, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'isArr', 'isTyped', 'srcIndex', 'isCommon', 'newValue', 'object', 'isBuff', 'mergeFunc', 'objValue', 'key', 'srcValue', 'source', 'stacked', 'stack'])
                        var.put('objValue', var.get('safeGet')(var.get('object'), var.get('key')))
                        var.put('srcValue', var.get('safeGet')(var.get('source'), var.get('key')))
                        var.put('stacked', var.get('stack').callprop('get', var.get('srcValue')))
                        if var.get('stacked'):
                            var.get('assignMergeValue')(var.get('object'), var.get('key'), var.get('stacked'))
                            return var.get('undefined')
                        var.put('newValue', (var.get('customizer')(var.get('objValue'), var.get('srcValue'), (var.get('key')+Js('')), var.get('object'), var.get('source'), var.get('stack')) if var.get('customizer') else var.get('undefined')))
                        var.put('isCommon', PyJsStrictEq(var.get('newValue'),var.get('undefined')))
                        if var.get('isCommon'):
                            var.put('isArr', var.get('isArray')(var.get('srcValue')))
                            var.put('isBuff', (var.get('isArr').neg() and var.get('isBuffer')(var.get('srcValue'))))
                            var.put('isTyped', ((var.get('isArr').neg() and var.get('isBuff').neg()) and var.get('isTypedArray')(var.get('srcValue'))))
                            var.put('newValue', var.get('srcValue'))
                            if ((var.get('isArr') or var.get('isBuff')) or var.get('isTyped')):
                                if var.get('isArray')(var.get('objValue')):
                                    var.put('newValue', var.get('objValue'))
                                else:
                                    if var.get('isArrayLikeObject')(var.get('objValue')):
                                        var.put('newValue', var.get('copyArray')(var.get('objValue')))
                                    else:
                                        if var.get('isBuff'):
                                            var.put('isCommon', Js(False))
                                            var.put('newValue', var.get('cloneBuffer')(var.get('srcValue'), Js(True)))
                                        else:
                                            if var.get('isTyped'):
                                                var.put('isCommon', Js(False))
                                                var.put('newValue', var.get('cloneTypedArray')(var.get('srcValue'), Js(True)))
                                            else:
                                                var.put('newValue', Js([]))
                            else:
                                if (var.get('isPlainObject')(var.get('srcValue')) or var.get('isArguments')(var.get('srcValue'))):
                                    var.put('newValue', var.get('objValue'))
                                    if var.get('isArguments')(var.get('objValue')):
                                        var.put('newValue', var.get('toPlainObject')(var.get('objValue')))
                                    else:
                                        if (var.get('isObject')(var.get('objValue')).neg() or var.get('isFunction')(var.get('objValue'))):
                                            var.put('newValue', var.get('initCloneObject')(var.get('srcValue')))
                                else:
                                    var.put('isCommon', Js(False))
                        if var.get('isCommon'):
                            var.get('stack').callprop('set', var.get('srcValue'), var.get('newValue'))
                            var.get('mergeFunc')(var.get('newValue'), var.get('srcValue'), var.get('srcIndex'), var.get('customizer'), var.get('stack'))
                            var.get('stack').callprop('delete', var.get('srcValue'))
                        var.get('assignMergeValue')(var.get('object'), var.get('key'), var.get('newValue'))
                    PyJsHoisted_baseMergeDeep_.func_name = 'baseMergeDeep'
                    var.put('baseMergeDeep', PyJsHoisted_baseMergeDeep_)
                    @Js
                    def PyJsHoisted_baseNth_(array, n, this, arguments, var=var):
                        var = Scope({'array':array, 'n':n, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'n', 'array'])
                        var.put('length', var.get('array').get('length'))
                        if var.get('length').neg():
                            return var.get('undefined')
                        var.put('n', (var.get('length') if (var.get('n')<Js(0.0)) else Js(0.0)), '+')
                        return (var.get('array').get(var.get('n')) if var.get('isIndex')(var.get('n'), var.get('length')) else var.get('undefined'))
                    PyJsHoisted_baseNth_.func_name = 'baseNth'
                    var.put('baseNth', PyJsHoisted_baseNth_)
                    @Js
                    def PyJsHoisted_baseOrderBy_(collection, iteratees, orders, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratees':iteratees, 'orders':orders, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratees', 'result', 'orders', 'collection', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('iteratees', var.get('arrayMap')((var.get('iteratees') if var.get('iteratees').get('length') else Js([var.get('identity')])), var.get('baseUnary')(var.get('getIteratee')())))
                        @Js
                        def PyJs_anonymous_138_(value, key, collection, this, arguments, var=var):
                            var = Scope({'value':value, 'key':key, 'collection':collection, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key', 'criteria', 'collection', 'value'])
                            @Js
                            def PyJs_anonymous_139_(iteratee, this, arguments, var=var):
                                var = Scope({'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                                var.registers(['iteratee'])
                                return var.get('iteratee')(var.get('value'))
                            PyJs_anonymous_139_._set_name('anonymous')
                            var.put('criteria', var.get('arrayMap')(var.get('iteratees'), PyJs_anonymous_139_))
                            return Js({'criteria':var.get('criteria'),'index':var.put('index',Js(var.get('index').to_number())+Js(1)),'value':var.get('value')})
                        PyJs_anonymous_138_._set_name('anonymous')
                        var.put('result', var.get('baseMap')(var.get('collection'), PyJs_anonymous_138_))
                        @Js
                        def PyJs_anonymous_140_(object, other, this, arguments, var=var):
                            var = Scope({'object':object, 'other':other, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object', 'other'])
                            return var.get('compareMultiple')(var.get('object'), var.get('other'), var.get('orders'))
                        PyJs_anonymous_140_._set_name('anonymous')
                        return var.get('baseSortBy')(var.get('result'), PyJs_anonymous_140_)
                    PyJsHoisted_baseOrderBy_.func_name = 'baseOrderBy'
                    var.put('baseOrderBy', PyJsHoisted_baseOrderBy_)
                    @Js
                    def PyJsHoisted_basePick_(object, paths, this, arguments, var=var):
                        var = Scope({'object':object, 'paths':paths, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'paths'])
                        @Js
                        def PyJs_anonymous_141_(value, path, this, arguments, var=var):
                            var = Scope({'value':value, 'path':path, 'this':this, 'arguments':arguments}, var)
                            var.registers(['path', 'value'])
                            return var.get('hasIn')(var.get('object'), var.get('path'))
                        PyJs_anonymous_141_._set_name('anonymous')
                        return var.get('basePickBy')(var.get('object'), var.get('paths'), PyJs_anonymous_141_)
                    PyJsHoisted_basePick_.func_name = 'basePick'
                    var.put('basePick', PyJsHoisted_basePick_)
                    @Js
                    def PyJsHoisted_basePickBy_(object, paths, predicate, this, arguments, var=var):
                        var = Scope({'object':object, 'paths':paths, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'object', 'paths', 'path', 'predicate', 'result', 'length', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('paths').get('length'))
                        var.put('result', Js({}))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('path', var.get('paths').get(var.get('index')))
                            var.put('value', var.get('baseGet')(var.get('object'), var.get('path')))
                            if var.get('predicate')(var.get('value'), var.get('path')):
                                var.get('baseSet')(var.get('result'), var.get('castPath')(var.get('path'), var.get('object')), var.get('value'))
                        return var.get('result')
                    PyJsHoisted_basePickBy_.func_name = 'basePickBy'
                    var.put('basePickBy', PyJsHoisted_basePickBy_)
                    @Js
                    def PyJsHoisted_basePropertyDeep_(path, this, arguments, var=var):
                        var = Scope({'path':path, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path'])
                        @Js
                        def PyJs_anonymous_142_(object, this, arguments, var=var):
                            var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object'])
                            return var.get('baseGet')(var.get('object'), var.get('path'))
                        PyJs_anonymous_142_._set_name('anonymous')
                        return PyJs_anonymous_142_
                    PyJsHoisted_basePropertyDeep_.func_name = 'basePropertyDeep'
                    var.put('basePropertyDeep', PyJsHoisted_basePropertyDeep_)
                    @Js
                    def PyJsHoisted_basePullAll_(array, values, iteratee, comparator, this, arguments, var=var):
                        var = Scope({'array':array, 'values':values, 'iteratee':iteratee, 'comparator':comparator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['comparator', 'value', 'values', 'seen', 'array', 'computed', 'indexOf', 'fromIndex', 'length', 'iteratee', 'index'])
                        var.put('indexOf', (var.get('baseIndexOfWith') if var.get('comparator') else var.get('baseIndexOf')))
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('values').get('length'))
                        var.put('seen', var.get('array'))
                        if PyJsStrictEq(var.get('array'),var.get('values')):
                            var.put('values', var.get('copyArray')(var.get('values')))
                        if var.get('iteratee'):
                            var.put('seen', var.get('arrayMap')(var.get('array'), var.get('baseUnary')(var.get('iteratee'))))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('fromIndex', Js(0.0))
                            var.put('value', var.get('values').get(var.get('index')))
                            var.put('computed', (var.get('iteratee')(var.get('value')) if var.get('iteratee') else var.get('value')))
                            while (var.put('fromIndex', var.get('indexOf')(var.get('seen'), var.get('computed'), var.get('fromIndex'), var.get('comparator')))>(-Js(1.0))):
                                if PyJsStrictNeq(var.get('seen'),var.get('array')):
                                    var.get('splice').callprop('call', var.get('seen'), var.get('fromIndex'), Js(1.0))
                                var.get('splice').callprop('call', var.get('array'), var.get('fromIndex'), Js(1.0))
                        return var.get('array')
                    PyJsHoisted_basePullAll_.func_name = 'basePullAll'
                    var.put('basePullAll', PyJsHoisted_basePullAll_)
                    @Js
                    def PyJsHoisted_basePullAt_(array, indexes, this, arguments, var=var):
                        var = Scope({'array':array, 'indexes':indexes, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'indexes', 'previous', 'lastIndex', 'length', 'index'])
                        var.put('length', (var.get('indexes').get('length') if var.get('array') else Js(0.0)))
                        var.put('lastIndex', (var.get('length')-Js(1.0)))
                        while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                            var.put('index', var.get('indexes').get(var.get('length')))
                            if ((var.get('length')==var.get('lastIndex')) or PyJsStrictNeq(var.get('index'),var.get('previous'))):
                                var.put('previous', var.get('index'))
                                if var.get('isIndex')(var.get('index')):
                                    var.get('splice').callprop('call', var.get('array'), var.get('index'), Js(1.0))
                                else:
                                    var.get('baseUnset')(var.get('array'), var.get('index'))
                        return var.get('array')
                    PyJsHoisted_basePullAt_.func_name = 'basePullAt'
                    var.put('basePullAt', PyJsHoisted_basePullAt_)
                    @Js
                    def PyJsHoisted_baseRandom_(lower, upper, this, arguments, var=var):
                        var = Scope({'lower':lower, 'upper':upper, 'this':this, 'arguments':arguments}, var)
                        var.registers(['upper', 'lower'])
                        return (var.get('lower')+var.get('nativeFloor')((var.get('nativeRandom')()*((var.get('upper')-var.get('lower'))+Js(1.0)))))
                    PyJsHoisted_baseRandom_.func_name = 'baseRandom'
                    var.put('baseRandom', PyJsHoisted_baseRandom_)
                    @Js
                    def PyJsHoisted_baseRange_(start, end, step, fromRight, this, arguments, var=var):
                        var = Scope({'start':start, 'end':end, 'step':step, 'fromRight':fromRight, 'this':this, 'arguments':arguments}, var)
                        var.registers(['step', 'result', 'start', 'fromRight', 'end', 'length', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('nativeMax')(var.get('nativeCeil')(((var.get('end')-var.get('start'))/(var.get('step') or Js(1.0)))), Js(0.0)))
                        var.put('result', var.get('Array')(var.get('length')))
                        while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                            var.get('result').put((var.get('length') if var.get('fromRight') else var.put('index',Js(var.get('index').to_number())+Js(1))), var.get('start'))
                            var.put('start', var.get('step'), '+')
                        return var.get('result')
                    PyJsHoisted_baseRange_.func_name = 'baseRange'
                    var.put('baseRange', PyJsHoisted_baseRange_)
                    @Js
                    def PyJsHoisted_baseRepeat_(string, n, this, arguments, var=var):
                        var = Scope({'string':string, 'n':n, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'n', 'string'])
                        var.put('result', Js(''))
                        if ((var.get('string').neg() or (var.get('n')<Js(1.0))) or (var.get('n')>var.get('MAX_SAFE_INTEGER'))):
                            return var.get('result')
                        while 1:
                            if (var.get('n')%Js(2.0)):
                                var.put('result', var.get('string'), '+')
                            var.put('n', var.get('nativeFloor')((var.get('n')/Js(2.0))))
                            if var.get('n'):
                                var.put('string', var.get('string'), '+')
                            if not var.get('n'):
                                break
                        return var.get('result')
                    PyJsHoisted_baseRepeat_.func_name = 'baseRepeat'
                    var.put('baseRepeat', PyJsHoisted_baseRepeat_)
                    @Js
                    def PyJsHoisted_baseRest_(func, start, this, arguments, var=var):
                        var = Scope({'func':func, 'start':start, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'start'])
                        return var.get('setToString')(var.get('overRest')(var.get('func'), var.get('start'), var.get('identity')), (var.get('func')+Js('')))
                    PyJsHoisted_baseRest_.func_name = 'baseRest'
                    var.put('baseRest', PyJsHoisted_baseRest_)
                    @Js
                    def PyJsHoisted_baseSample_(collection, this, arguments, var=var):
                        var = Scope({'collection':collection, 'this':this, 'arguments':arguments}, var)
                        var.registers(['collection'])
                        return var.get('arraySample')(var.get('values')(var.get('collection')))
                    PyJsHoisted_baseSample_.func_name = 'baseSample'
                    var.put('baseSample', PyJsHoisted_baseSample_)
                    @Js
                    def PyJsHoisted_baseSampleSize_(collection, n, this, arguments, var=var):
                        var = Scope({'collection':collection, 'n':n, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'array', 'collection'])
                        var.put('array', var.get('values')(var.get('collection')))
                        return var.get('shuffleSelf')(var.get('array'), var.get('baseClamp')(var.get('n'), Js(0.0), var.get('array').get('length')))
                    PyJsHoisted_baseSampleSize_.func_name = 'baseSampleSize'
                    var.put('baseSampleSize', PyJsHoisted_baseSampleSize_)
                    @Js
                    def PyJsHoisted_baseSet_(object, path, value, customizer, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'value':value, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'lastIndex', 'newValue', 'value', 'object', 'nested', 'path', 'objValue', 'key', 'length', 'index'])
                        if var.get('isObject')(var.get('object')).neg():
                            return var.get('object')
                        var.put('path', var.get('castPath')(var.get('path'), var.get('object')))
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('path').get('length'))
                        var.put('lastIndex', (var.get('length')-Js(1.0)))
                        var.put('nested', var.get('object'))
                        while ((var.get('nested')!=var.get(u"null")) and (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length'))):
                            var.put('key', var.get('toKey')(var.get('path').get(var.get('index'))))
                            var.put('newValue', var.get('value'))
                            if (var.get('index')!=var.get('lastIndex')):
                                var.put('objValue', var.get('nested').get(var.get('key')))
                                var.put('newValue', (var.get('customizer')(var.get('objValue'), var.get('key'), var.get('nested')) if var.get('customizer') else var.get('undefined')))
                                if PyJsStrictEq(var.get('newValue'),var.get('undefined')):
                                    var.put('newValue', (var.get('objValue') if var.get('isObject')(var.get('objValue')) else (Js([]) if var.get('isIndex')(var.get('path').get((var.get('index')+Js(1.0)))) else Js({}))))
                            var.get('assignValue')(var.get('nested'), var.get('key'), var.get('newValue'))
                            var.put('nested', var.get('nested').get(var.get('key')))
                        return var.get('object')
                    PyJsHoisted_baseSet_.func_name = 'baseSet'
                    var.put('baseSet', PyJsHoisted_baseSet_)
                    @Js
                    def PyJsHoisted_baseShuffle_(collection, this, arguments, var=var):
                        var = Scope({'collection':collection, 'this':this, 'arguments':arguments}, var)
                        var.registers(['collection'])
                        return var.get('shuffleSelf')(var.get('values')(var.get('collection')))
                    PyJsHoisted_baseShuffle_.func_name = 'baseShuffle'
                    var.put('baseShuffle', PyJsHoisted_baseShuffle_)
                    @Js
                    def PyJsHoisted_baseSlice_(array, start, end, this, arguments, var=var):
                        var = Scope({'array':array, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'result', 'start', 'end', 'length', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('array').get('length'))
                        if (var.get('start')<Js(0.0)):
                            var.put('start', (Js(0.0) if ((-var.get('start'))>var.get('length')) else (var.get('length')+var.get('start'))))
                        var.put('end', (var.get('length') if (var.get('end')>var.get('length')) else var.get('end')))
                        if (var.get('end')<Js(0.0)):
                            var.put('end', var.get('length'), '+')
                        var.put('length', (Js(0.0) if (var.get('start')>var.get('end')) else PyJsBshift((var.get('end')-var.get('start')),Js(0.0))))
                        var.put('start', Js(0.0), '>>>')
                        var.put('result', var.get('Array')(var.get('length')))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.get('result').put(var.get('index'), var.get('array').get((var.get('index')+var.get('start'))))
                        return var.get('result')
                    PyJsHoisted_baseSlice_.func_name = 'baseSlice'
                    var.put('baseSlice', PyJsHoisted_baseSlice_)
                    @Js
                    def PyJsHoisted_baseSome_(collection, predicate, this, arguments, var=var):
                        var = Scope({'collection':collection, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate', 'result', 'collection'])
                        pass
                        @Js
                        def PyJs_anonymous_145_(value, index, collection, this, arguments, var=var):
                            var = Scope({'value':value, 'index':index, 'collection':collection, 'this':this, 'arguments':arguments}, var)
                            var.registers(['collection', 'index', 'value'])
                            var.put('result', var.get('predicate')(var.get('value'), var.get('index'), var.get('collection')))
                            return var.get('result').neg()
                        PyJs_anonymous_145_._set_name('anonymous')
                        var.get('baseEach')(var.get('collection'), PyJs_anonymous_145_)
                        return var.get('result').neg().neg()
                    PyJsHoisted_baseSome_.func_name = 'baseSome'
                    var.put('baseSome', PyJsHoisted_baseSome_)
                    @Js
                    def PyJsHoisted_baseSortedIndex_(array, value, retHighest, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'retHighest':retHighest, 'this':this, 'arguments':arguments}, var)
                        var.registers(['high', 'value', 'retHighest', 'low', 'array', 'computed', 'mid'])
                        var.put('low', Js(0.0))
                        var.put('high', (var.get('low') if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if (((var.get('value',throw=False).typeof()==Js('number')) and PyJsStrictEq(var.get('value'),var.get('value'))) and (var.get('high')<=var.get('HALF_MAX_ARRAY_LENGTH'))):
                            while (var.get('low')<var.get('high')):
                                var.put('mid', PyJsBshift((var.get('low')+var.get('high')),Js(1.0)))
                                var.put('computed', var.get('array').get(var.get('mid')))
                                if ((PyJsStrictNeq(var.get('computed'),var.get(u"null")) and var.get('isSymbol')(var.get('computed')).neg()) and ((var.get('computed')<=var.get('value')) if var.get('retHighest') else (var.get('computed')<var.get('value')))):
                                    var.put('low', (var.get('mid')+Js(1.0)))
                                else:
                                    var.put('high', var.get('mid'))
                            return var.get('high')
                        return var.get('baseSortedIndexBy')(var.get('array'), var.get('value'), var.get('identity'), var.get('retHighest'))
                    PyJsHoisted_baseSortedIndex_.func_name = 'baseSortedIndex'
                    var.put('baseSortedIndex', PyJsHoisted_baseSortedIndex_)
                    @Js
                    def PyJsHoisted_baseSortedIndexBy_(array, value, iteratee, retHighest, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'iteratee':iteratee, 'retHighest':retHighest, 'this':this, 'arguments':arguments}, var)
                        var.registers(['valIsSymbol', 'othIsNull', 'iteratee', 'value', 'retHighest', 'othIsReflexive', 'low', 'othIsDefined', 'valIsNaN', 'setLow', 'array', 'othIsSymbol', 'mid', 'computed', 'high', 'valIsNull', 'valIsUndefined'])
                        var.put('value', var.get('iteratee')(var.get('value')))
                        var.put('low', Js(0.0))
                        var.put('high', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        var.put('valIsNaN', PyJsStrictNeq(var.get('value'),var.get('value')))
                        var.put('valIsNull', PyJsStrictEq(var.get('value'),var.get(u"null")))
                        var.put('valIsSymbol', var.get('isSymbol')(var.get('value')))
                        var.put('valIsUndefined', PyJsStrictEq(var.get('value'),var.get('undefined')))
                        while (var.get('low')<var.get('high')):
                            var.put('mid', var.get('nativeFloor')(((var.get('low')+var.get('high'))/Js(2.0))))
                            var.put('computed', var.get('iteratee')(var.get('array').get(var.get('mid'))))
                            var.put('othIsDefined', PyJsStrictNeq(var.get('computed'),var.get('undefined')))
                            var.put('othIsNull', PyJsStrictEq(var.get('computed'),var.get(u"null")))
                            var.put('othIsReflexive', PyJsStrictEq(var.get('computed'),var.get('computed')))
                            var.put('othIsSymbol', var.get('isSymbol')(var.get('computed')))
                            if var.get('valIsNaN'):
                                var.put('setLow', (var.get('retHighest') or var.get('othIsReflexive')))
                            else:
                                if var.get('valIsUndefined'):
                                    var.put('setLow', (var.get('othIsReflexive') and (var.get('retHighest') or var.get('othIsDefined'))))
                                else:
                                    if var.get('valIsNull'):
                                        var.put('setLow', ((var.get('othIsReflexive') and var.get('othIsDefined')) and (var.get('retHighest') or var.get('othIsNull').neg())))
                                    else:
                                        if var.get('valIsSymbol'):
                                            var.put('setLow', (((var.get('othIsReflexive') and var.get('othIsDefined')) and var.get('othIsNull').neg()) and (var.get('retHighest') or var.get('othIsSymbol').neg())))
                                        else:
                                            if (var.get('othIsNull') or var.get('othIsSymbol')):
                                                var.put('setLow', Js(False))
                                            else:
                                                var.put('setLow', ((var.get('computed')<=var.get('value')) if var.get('retHighest') else (var.get('computed')<var.get('value'))))
                            if var.get('setLow'):
                                var.put('low', (var.get('mid')+Js(1.0)))
                            else:
                                var.put('high', var.get('mid'))
                        return var.get('nativeMin')(var.get('high'), var.get('MAX_ARRAY_INDEX'))
                    PyJsHoisted_baseSortedIndexBy_.func_name = 'baseSortedIndexBy'
                    var.put('baseSortedIndexBy', PyJsHoisted_baseSortedIndexBy_)
                    @Js
                    def PyJsHoisted_baseSortedUniq_(array, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'seen', 'array', 'result', 'computed', 'resIndex', 'length', 'iteratee', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('array').get('length'))
                        var.put('resIndex', Js(0.0))
                        var.put('result', Js([]))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('value', var.get('array').get(var.get('index')))
                            var.put('computed', (var.get('iteratee')(var.get('value')) if var.get('iteratee') else var.get('value')))
                            if (var.get('index').neg() or var.get('eq')(var.get('computed'), var.get('seen')).neg()):
                                var.put('seen', var.get('computed'))
                                var.get('result').put((var.put('resIndex',Js(var.get('resIndex').to_number())+Js(1))-Js(1)), (Js(0.0) if PyJsStrictEq(var.get('value'),Js(0.0)) else var.get('value')))
                        return var.get('result')
                    PyJsHoisted_baseSortedUniq_.func_name = 'baseSortedUniq'
                    var.put('baseSortedUniq', PyJsHoisted_baseSortedUniq_)
                    @Js
                    def PyJsHoisted_baseToNumber_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        if (var.get('value',throw=False).typeof()==Js('number')):
                            return var.get('value')
                        if var.get('isSymbol')(var.get('value')):
                            return var.get('NAN')
                        return (+var.get('value'))
                    PyJsHoisted_baseToNumber_.func_name = 'baseToNumber'
                    var.put('baseToNumber', PyJsHoisted_baseToNumber_)
                    @Js
                    def PyJsHoisted_baseToString_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'value'])
                        if (var.get('value',throw=False).typeof()==Js('string')):
                            return var.get('value')
                        if var.get('isArray')(var.get('value')):
                            return (var.get('arrayMap')(var.get('value'), var.get('baseToString'))+Js(''))
                        if var.get('isSymbol')(var.get('value')):
                            return (var.get('symbolToString').callprop('call', var.get('value')) if var.get('symbolToString') else Js(''))
                        var.put('result', (var.get('value')+Js('')))
                        return (Js('-0') if ((var.get('result')==Js('0')) and ((Js(1.0)/var.get('value'))==(-var.get('INFINITY')))) else var.get('result'))
                    PyJsHoisted_baseToString_.func_name = 'baseToString'
                    var.put('baseToString', PyJsHoisted_baseToString_)
                    @Js
                    def PyJsHoisted_baseUniq_(array, iteratee, comparator, this, arguments, var=var):
                        var = Scope({'array':array, 'iteratee':iteratee, 'comparator':comparator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['set', 'comparator', 'seenIndex', 'isCommon', 'value', 'seen', 'array', 'includes', 'result', 'computed', 'length', 'iteratee', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('includes', var.get('arrayIncludes'))
                        var.put('length', var.get('array').get('length'))
                        var.put('isCommon', Js(True))
                        var.put('result', Js([]))
                        var.put('seen', var.get('result'))
                        if var.get('comparator'):
                            var.put('isCommon', Js(False))
                            var.put('includes', var.get('arrayIncludesWith'))
                        else:
                            if (var.get('length')>=var.get('LARGE_ARRAY_SIZE')):
                                var.put('set', (var.get(u"null") if var.get('iteratee') else var.get('createSet')(var.get('array'))))
                                if var.get('set'):
                                    return var.get('setToArray')(var.get('set'))
                                var.put('isCommon', Js(False))
                                var.put('includes', var.get('cacheHas'))
                                var.put('seen', var.get('SetCache').create())
                            else:
                                var.put('seen', (Js([]) if var.get('iteratee') else var.get('result')))
                        class JS_CONTINUE_LABEL_6f75746572(Exception): pass
                        class JS_BREAK_LABEL_6f75746572(Exception): pass
                        try:
                            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                                try:
                                    var.put('value', var.get('array').get(var.get('index')))
                                    var.put('computed', (var.get('iteratee')(var.get('value')) if var.get('iteratee') else var.get('value')))
                                    var.put('value', (var.get('value') if (var.get('comparator') or PyJsStrictNeq(var.get('value'),Js(0.0))) else Js(0.0)))
                                    if (var.get('isCommon') and PyJsStrictEq(var.get('computed'),var.get('computed'))):
                                        var.put('seenIndex', var.get('seen').get('length'))
                                        while (var.put('seenIndex',Js(var.get('seenIndex').to_number())-Js(1))+Js(1)):
                                            if PyJsStrictEq(var.get('seen').get(var.get('seenIndex')),var.get('computed')):
                                                raise JS_CONTINUE_LABEL_6f75746572("Continued")
                                        if var.get('iteratee'):
                                            var.get('seen').callprop('push', var.get('computed'))
                                        var.get('result').callprop('push', var.get('value'))
                                    else:
                                        if var.get('includes')(var.get('seen'), var.get('computed'), var.get('comparator')).neg():
                                            if PyJsStrictNeq(var.get('seen'),var.get('result')):
                                                var.get('seen').callprop('push', var.get('computed'))
                                            var.get('result').callprop('push', var.get('value'))
                                except JS_CONTINUE_LABEL_6f75746572:
                                    pass
                        except JS_BREAK_LABEL_6f75746572:
                            pass
                        return var.get('result')
                    PyJsHoisted_baseUniq_.func_name = 'baseUniq'
                    var.put('baseUniq', PyJsHoisted_baseUniq_)
                    @Js
                    def PyJsHoisted_baseUnset_(object, path, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'object'])
                        var.put('path', var.get('castPath')(var.get('path'), var.get('object')))
                        var.put('object', var.get('parent')(var.get('object'), var.get('path')))
                        return ((var.get('object')==var.get(u"null")) or var.get('object').delete(var.get('toKey')(var.get('last')(var.get('path')))))
                    PyJsHoisted_baseUnset_.func_name = 'baseUnset'
                    var.put('baseUnset', PyJsHoisted_baseUnset_)
                    @Js
                    def PyJsHoisted_baseUpdate_(object, path, updater, customizer, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'updater':updater, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'object', 'updater', 'customizer'])
                        return var.get('baseSet')(var.get('object'), var.get('path'), var.get('updater')(var.get('baseGet')(var.get('object'), var.get('path'))), var.get('customizer'))
                    PyJsHoisted_baseUpdate_.func_name = 'baseUpdate'
                    var.put('baseUpdate', PyJsHoisted_baseUpdate_)
                    @Js
                    def PyJsHoisted_baseWhile_(array, predicate, isDrop, fromRight, this, arguments, var=var):
                        var = Scope({'array':array, 'predicate':predicate, 'isDrop':isDrop, 'fromRight':fromRight, 'this':this, 'arguments':arguments}, var)
                        var.registers(['isDrop', 'array', 'predicate', 'fromRight', 'length', 'index'])
                        var.put('length', var.get('array').get('length'))
                        var.put('index', (var.get('length') if var.get('fromRight') else (-Js(1.0))))
                        while (((var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)) if var.get('fromRight') else (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length'))) and var.get('predicate')(var.get('array').get(var.get('index')), var.get('index'), var.get('array'))):
                            pass
                        return (var.get('baseSlice')(var.get('array'), (Js(0.0) if var.get('fromRight') else var.get('index')), ((var.get('index')+Js(1.0)) if var.get('fromRight') else var.get('length'))) if var.get('isDrop') else var.get('baseSlice')(var.get('array'), ((var.get('index')+Js(1.0)) if var.get('fromRight') else Js(0.0)), (var.get('length') if var.get('fromRight') else var.get('index'))))
                    PyJsHoisted_baseWhile_.func_name = 'baseWhile'
                    var.put('baseWhile', PyJsHoisted_baseWhile_)
                    @Js
                    def PyJsHoisted_baseWrapperValue_(value, actions, this, arguments, var=var):
                        var = Scope({'value':value, 'actions':actions, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'actions', 'value'])
                        var.put('result', var.get('value'))
                        if var.get('result').instanceof(var.get('LazyWrapper')):
                            var.put('result', var.get('result').callprop('value'))
                        @Js
                        def PyJs_anonymous_146_(result, action, this, arguments, var=var):
                            var = Scope({'result':result, 'action':action, 'this':this, 'arguments':arguments}, var)
                            var.registers(['result', 'action'])
                            return var.get('action').get('func').callprop('apply', var.get('action').get('thisArg'), var.get('arrayPush')(Js([var.get('result')]), var.get('action').get('args')))
                        PyJs_anonymous_146_._set_name('anonymous')
                        return var.get('arrayReduce')(var.get('actions'), PyJs_anonymous_146_, var.get('result'))
                    PyJsHoisted_baseWrapperValue_.func_name = 'baseWrapperValue'
                    var.put('baseWrapperValue', PyJsHoisted_baseWrapperValue_)
                    @Js
                    def PyJsHoisted_baseXor_(arrays, iteratee, comparator, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'iteratee':iteratee, 'comparator':comparator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['othIndex', 'comparator', 'arrays', 'array', 'result', 'length', 'iteratee', 'index'])
                        var.put('length', var.get('arrays').get('length'))
                        if (var.get('length')<Js(2.0)):
                            return (var.get('baseUniq')(var.get('arrays').get('0')) if var.get('length') else Js([]))
                        var.put('index', (-Js(1.0)))
                        var.put('result', var.get('Array')(var.get('length')))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('array', var.get('arrays').get(var.get('index')))
                            var.put('othIndex', (-Js(1.0)))
                            while (var.put('othIndex',Js(var.get('othIndex').to_number())+Js(1))<var.get('length')):
                                if (var.get('othIndex')!=var.get('index')):
                                    var.get('result').put(var.get('index'), var.get('baseDifference')((var.get('result').get(var.get('index')) or var.get('array')), var.get('arrays').get(var.get('othIndex')), var.get('iteratee'), var.get('comparator')))
                        return var.get('baseUniq')(var.get('baseFlatten')(var.get('result'), Js(1.0)), var.get('iteratee'), var.get('comparator'))
                    PyJsHoisted_baseXor_.func_name = 'baseXor'
                    var.put('baseXor', PyJsHoisted_baseXor_)
                    @Js
                    def PyJsHoisted_baseZipObject_(props, values, assignFunc, this, arguments, var=var):
                        var = Scope({'props':props, 'values':values, 'assignFunc':assignFunc, 'this':this, 'arguments':arguments}, var)
                        var.registers(['assignFunc', 'value', 'values', 'props', 'valsLength', 'result', 'length', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('props').get('length'))
                        var.put('valsLength', var.get('values').get('length'))
                        var.put('result', Js({}))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('value', (var.get('values').get(var.get('index')) if (var.get('index')<var.get('valsLength')) else var.get('undefined')))
                            var.get('assignFunc')(var.get('result'), var.get('props').get(var.get('index')), var.get('value'))
                        return var.get('result')
                    PyJsHoisted_baseZipObject_.func_name = 'baseZipObject'
                    var.put('baseZipObject', PyJsHoisted_baseZipObject_)
                    @Js
                    def PyJsHoisted_castArrayLikeObject_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('value') if var.get('isArrayLikeObject')(var.get('value')) else Js([]))
                    PyJsHoisted_castArrayLikeObject_.func_name = 'castArrayLikeObject'
                    var.put('castArrayLikeObject', PyJsHoisted_castArrayLikeObject_)
                    @Js
                    def PyJsHoisted_castFunction_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('value') if (var.get('value',throw=False).typeof()==Js('function')) else var.get('identity'))
                    PyJsHoisted_castFunction_.func_name = 'castFunction'
                    var.put('castFunction', PyJsHoisted_castFunction_)
                    @Js
                    def PyJsHoisted_castPath_(value, object, this, arguments, var=var):
                        var = Scope({'value':value, 'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'value'])
                        if var.get('isArray')(var.get('value')):
                            return var.get('value')
                        return (Js([var.get('value')]) if var.get('isKey')(var.get('value'), var.get('object')) else var.get('stringToPath')(var.get('toString')(var.get('value'))))
                    PyJsHoisted_castPath_.func_name = 'castPath'
                    var.put('castPath', PyJsHoisted_castPath_)
                    @Js
                    def PyJsHoisted_castSlice_(array, start, end, this, arguments, var=var):
                        var = Scope({'array':array, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                        var.registers(['end', 'length', 'array', 'start'])
                        var.put('length', var.get('array').get('length'))
                        var.put('end', (var.get('length') if PyJsStrictEq(var.get('end'),var.get('undefined')) else var.get('end')))
                        return (var.get('array') if (var.get('start').neg() and (var.get('end')>=var.get('length'))) else var.get('baseSlice')(var.get('array'), var.get('start'), var.get('end')))
                    PyJsHoisted_castSlice_.func_name = 'castSlice'
                    var.put('castSlice', PyJsHoisted_castSlice_)
                    @Js
                    def PyJsHoisted_cloneBuffer_(buffer, isDeep, this, arguments, var=var):
                        var = Scope({'buffer':buffer, 'isDeep':isDeep, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'length', 'buffer', 'isDeep'])
                        if var.get('isDeep'):
                            return var.get('buffer').callprop('slice')
                        var.put('length', var.get('buffer').get('length'))
                        var.put('result', (var.get('allocUnsafe')(var.get('length')) if var.get('allocUnsafe') else var.get('buffer').get('constructor').create(var.get('length'))))
                        var.get('buffer').callprop('copy', var.get('result'))
                        return var.get('result')
                    PyJsHoisted_cloneBuffer_.func_name = 'cloneBuffer'
                    var.put('cloneBuffer', PyJsHoisted_cloneBuffer_)
                    @Js
                    def PyJsHoisted_cloneArrayBuffer_(arrayBuffer, this, arguments, var=var):
                        var = Scope({'arrayBuffer':arrayBuffer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'arrayBuffer'])
                        var.put('result', var.get('arrayBuffer').get('constructor').create(var.get('arrayBuffer').get('byteLength')))
                        var.get('Uint8Array').create(var.get('result')).callprop('set', var.get('Uint8Array').create(var.get('arrayBuffer')))
                        return var.get('result')
                    PyJsHoisted_cloneArrayBuffer_.func_name = 'cloneArrayBuffer'
                    var.put('cloneArrayBuffer', PyJsHoisted_cloneArrayBuffer_)
                    @Js
                    def PyJsHoisted_cloneDataView_(dataView, isDeep, this, arguments, var=var):
                        var = Scope({'dataView':dataView, 'isDeep':isDeep, 'this':this, 'arguments':arguments}, var)
                        var.registers(['isDeep', 'dataView', 'buffer'])
                        var.put('buffer', (var.get('cloneArrayBuffer')(var.get('dataView').get('buffer')) if var.get('isDeep') else var.get('dataView').get('buffer')))
                        return var.get('dataView').get('constructor').create(var.get('buffer'), var.get('dataView').get('byteOffset'), var.get('dataView').get('byteLength'))
                    PyJsHoisted_cloneDataView_.func_name = 'cloneDataView'
                    var.put('cloneDataView', PyJsHoisted_cloneDataView_)
                    @Js
                    def PyJsHoisted_cloneRegExp_(regexp, this, arguments, var=var):
                        var = Scope({'regexp':regexp, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'regexp'])
                        var.put('result', var.get('regexp').get('constructor').create(var.get('regexp').get('source'), var.get('reFlags').callprop('exec', var.get('regexp'))))
                        var.get('result').put('lastIndex', var.get('regexp').get('lastIndex'))
                        return var.get('result')
                    PyJsHoisted_cloneRegExp_.func_name = 'cloneRegExp'
                    var.put('cloneRegExp', PyJsHoisted_cloneRegExp_)
                    @Js
                    def PyJsHoisted_cloneSymbol_(symbol, this, arguments, var=var):
                        var = Scope({'symbol':symbol, 'this':this, 'arguments':arguments}, var)
                        var.registers(['symbol'])
                        return (var.get('Object')(var.get('symbolValueOf').callprop('call', var.get('symbol'))) if var.get('symbolValueOf') else Js({}))
                    PyJsHoisted_cloneSymbol_.func_name = 'cloneSymbol'
                    var.put('cloneSymbol', PyJsHoisted_cloneSymbol_)
                    @Js
                    def PyJsHoisted_cloneTypedArray_(typedArray, isDeep, this, arguments, var=var):
                        var = Scope({'typedArray':typedArray, 'isDeep':isDeep, 'this':this, 'arguments':arguments}, var)
                        var.registers(['isDeep', 'typedArray', 'buffer'])
                        var.put('buffer', (var.get('cloneArrayBuffer')(var.get('typedArray').get('buffer')) if var.get('isDeep') else var.get('typedArray').get('buffer')))
                        return var.get('typedArray').get('constructor').create(var.get('buffer'), var.get('typedArray').get('byteOffset'), var.get('typedArray').get('length'))
                    PyJsHoisted_cloneTypedArray_.func_name = 'cloneTypedArray'
                    var.put('cloneTypedArray', PyJsHoisted_cloneTypedArray_)
                    @Js
                    def PyJsHoisted_compareAscending_(value, other, this, arguments, var=var):
                        var = Scope({'value':value, 'other':other, 'this':this, 'arguments':arguments}, var)
                        var.registers(['valIsSymbol', 'valIsReflexive', 'othIsNull', 'other', 'value', 'othIsReflexive', 'othIsDefined', 'othIsSymbol', 'valIsNull', 'valIsDefined'])
                        if PyJsStrictNeq(var.get('value'),var.get('other')):
                            var.put('valIsDefined', PyJsStrictNeq(var.get('value'),var.get('undefined')))
                            var.put('valIsNull', PyJsStrictEq(var.get('value'),var.get(u"null")))
                            var.put('valIsReflexive', PyJsStrictEq(var.get('value'),var.get('value')))
                            var.put('valIsSymbol', var.get('isSymbol')(var.get('value')))
                            var.put('othIsDefined', PyJsStrictNeq(var.get('other'),var.get('undefined')))
                            var.put('othIsNull', PyJsStrictEq(var.get('other'),var.get(u"null")))
                            var.put('othIsReflexive', PyJsStrictEq(var.get('other'),var.get('other')))
                            var.put('othIsSymbol', var.get('isSymbol')(var.get('other')))
                            def PyJs_LONG_148_(var=var):
                                return ((((((var.get('othIsNull').neg() and var.get('othIsSymbol').neg()) and var.get('valIsSymbol').neg()) and (var.get('value')>var.get('other'))) or ((((var.get('valIsSymbol') and var.get('othIsDefined')) and var.get('othIsReflexive')) and var.get('othIsNull').neg()) and var.get('othIsSymbol').neg())) or ((var.get('valIsNull') and var.get('othIsDefined')) and var.get('othIsReflexive'))) or (var.get('valIsDefined').neg() and var.get('othIsReflexive')))
                            if (PyJs_LONG_148_() or var.get('valIsReflexive').neg()):
                                return Js(1.0)
                            def PyJs_LONG_149_(var=var):
                                return ((((((var.get('valIsNull').neg() and var.get('valIsSymbol').neg()) and var.get('othIsSymbol').neg()) and (var.get('value')<var.get('other'))) or ((((var.get('othIsSymbol') and var.get('valIsDefined')) and var.get('valIsReflexive')) and var.get('valIsNull').neg()) and var.get('valIsSymbol').neg())) or ((var.get('othIsNull') and var.get('valIsDefined')) and var.get('valIsReflexive'))) or (var.get('othIsDefined').neg() and var.get('valIsReflexive')))
                            if (PyJs_LONG_149_() or var.get('othIsReflexive').neg()):
                                return (-Js(1.0))
                        return Js(0.0)
                    PyJsHoisted_compareAscending_.func_name = 'compareAscending'
                    var.put('compareAscending', PyJsHoisted_compareAscending_)
                    @Js
                    def PyJsHoisted_compareMultiple_(object, other, orders, this, arguments, var=var):
                        var = Scope({'object':object, 'other':other, 'orders':orders, 'this':this, 'arguments':arguments}, var)
                        var.registers(['ordersLength', 'object', 'objCriteria', 'result', 'orders', 'othCriteria', 'length', 'order', 'other', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('objCriteria', var.get('object').get('criteria'))
                        var.put('othCriteria', var.get('other').get('criteria'))
                        var.put('length', var.get('objCriteria').get('length'))
                        var.put('ordersLength', var.get('orders').get('length'))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('result', var.get('compareAscending')(var.get('objCriteria').get(var.get('index')), var.get('othCriteria').get(var.get('index'))))
                            if var.get('result'):
                                if (var.get('index')>=var.get('ordersLength')):
                                    return var.get('result')
                                var.put('order', var.get('orders').get(var.get('index')))
                                return (var.get('result')*((-Js(1.0)) if (var.get('order')==Js('desc')) else Js(1.0)))
                        return (var.get('object').get('index')-var.get('other').get('index'))
                    PyJsHoisted_compareMultiple_.func_name = 'compareMultiple'
                    var.put('compareMultiple', PyJsHoisted_compareMultiple_)
                    @Js
                    def PyJsHoisted_composeArgs_(args, partials, holders, isCurried, this, arguments, var=var):
                        var = Scope({'args':args, 'partials':partials, 'holders':holders, 'isCurried':isCurried, 'this':this, 'arguments':arguments}, var)
                        var.registers(['leftIndex', 'leftLength', 'args', 'partials', 'rangeLength', 'argsIndex', 'argsLength', 'holdersLength', 'result', 'holders', 'isUncurried', 'isCurried'])
                        var.put('argsIndex', (-Js(1.0)))
                        var.put('argsLength', var.get('args').get('length'))
                        var.put('holdersLength', var.get('holders').get('length'))
                        var.put('leftIndex', (-Js(1.0)))
                        var.put('leftLength', var.get('partials').get('length'))
                        var.put('rangeLength', var.get('nativeMax')((var.get('argsLength')-var.get('holdersLength')), Js(0.0)))
                        var.put('result', var.get('Array')((var.get('leftLength')+var.get('rangeLength'))))
                        var.put('isUncurried', var.get('isCurried').neg())
                        while (var.put('leftIndex',Js(var.get('leftIndex').to_number())+Js(1))<var.get('leftLength')):
                            var.get('result').put(var.get('leftIndex'), var.get('partials').get(var.get('leftIndex')))
                        while (var.put('argsIndex',Js(var.get('argsIndex').to_number())+Js(1))<var.get('holdersLength')):
                            if (var.get('isUncurried') or (var.get('argsIndex')<var.get('argsLength'))):
                                var.get('result').put(var.get('holders').get(var.get('argsIndex')), var.get('args').get(var.get('argsIndex')))
                        while (var.put('rangeLength',Js(var.get('rangeLength').to_number())-Js(1))+Js(1)):
                            var.get('result').put((var.put('leftIndex',Js(var.get('leftIndex').to_number())+Js(1))-Js(1)), var.get('args').get((var.put('argsIndex',Js(var.get('argsIndex').to_number())+Js(1))-Js(1))))
                        return var.get('result')
                    PyJsHoisted_composeArgs_.func_name = 'composeArgs'
                    var.put('composeArgs', PyJsHoisted_composeArgs_)
                    @Js
                    def PyJsHoisted_composeArgsRight_(args, partials, holders, isCurried, this, arguments, var=var):
                        var = Scope({'args':args, 'partials':partials, 'holders':holders, 'isCurried':isCurried, 'this':this, 'arguments':arguments}, var)
                        var.registers(['rightIndex', 'offset', 'args', 'partials', 'rangeLength', 'argsIndex', 'argsLength', 'holdersIndex', 'holdersLength', 'result', 'holders', 'rightLength', 'isUncurried', 'isCurried'])
                        var.put('argsIndex', (-Js(1.0)))
                        var.put('argsLength', var.get('args').get('length'))
                        var.put('holdersIndex', (-Js(1.0)))
                        var.put('holdersLength', var.get('holders').get('length'))
                        var.put('rightIndex', (-Js(1.0)))
                        var.put('rightLength', var.get('partials').get('length'))
                        var.put('rangeLength', var.get('nativeMax')((var.get('argsLength')-var.get('holdersLength')), Js(0.0)))
                        var.put('result', var.get('Array')((var.get('rangeLength')+var.get('rightLength'))))
                        var.put('isUncurried', var.get('isCurried').neg())
                        while (var.put('argsIndex',Js(var.get('argsIndex').to_number())+Js(1))<var.get('rangeLength')):
                            var.get('result').put(var.get('argsIndex'), var.get('args').get(var.get('argsIndex')))
                        var.put('offset', var.get('argsIndex'))
                        while (var.put('rightIndex',Js(var.get('rightIndex').to_number())+Js(1))<var.get('rightLength')):
                            var.get('result').put((var.get('offset')+var.get('rightIndex')), var.get('partials').get(var.get('rightIndex')))
                        while (var.put('holdersIndex',Js(var.get('holdersIndex').to_number())+Js(1))<var.get('holdersLength')):
                            if (var.get('isUncurried') or (var.get('argsIndex')<var.get('argsLength'))):
                                var.get('result').put((var.get('offset')+var.get('holders').get(var.get('holdersIndex'))), var.get('args').get((var.put('argsIndex',Js(var.get('argsIndex').to_number())+Js(1))-Js(1))))
                        return var.get('result')
                    PyJsHoisted_composeArgsRight_.func_name = 'composeArgsRight'
                    var.put('composeArgsRight', PyJsHoisted_composeArgsRight_)
                    @Js
                    def PyJsHoisted_copyArray_(source, array, this, arguments, var=var):
                        var = Scope({'source':source, 'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'array', 'source', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('source').get('length'))
                        (var.get('array') or var.put('array', var.get('Array')(var.get('length'))))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.get('array').put(var.get('index'), var.get('source').get(var.get('index')))
                        return var.get('array')
                    PyJsHoisted_copyArray_.func_name = 'copyArray'
                    var.put('copyArray', PyJsHoisted_copyArray_)
                    @Js
                    def PyJsHoisted_copyObject_(source, props, object, customizer, this, arguments, var=var):
                        var = Scope({'source':source, 'props':props, 'object':object, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'newValue', 'object', 'props', 'isNew', 'key', 'length', 'source', 'index'])
                        var.put('isNew', var.get('object').neg())
                        (var.get('object') or var.put('object', Js({})))
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('props').get('length'))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('key', var.get('props').get(var.get('index')))
                            var.put('newValue', (var.get('customizer')(var.get('object').get(var.get('key')), var.get('source').get(var.get('key')), var.get('key'), var.get('object'), var.get('source')) if var.get('customizer') else var.get('undefined')))
                            if PyJsStrictEq(var.get('newValue'),var.get('undefined')):
                                var.put('newValue', var.get('source').get(var.get('key')))
                            if var.get('isNew'):
                                var.get('baseAssignValue')(var.get('object'), var.get('key'), var.get('newValue'))
                            else:
                                var.get('assignValue')(var.get('object'), var.get('key'), var.get('newValue'))
                        return var.get('object')
                    PyJsHoisted_copyObject_.func_name = 'copyObject'
                    var.put('copyObject', PyJsHoisted_copyObject_)
                    @Js
                    def PyJsHoisted_copySymbols_(source, object, this, arguments, var=var):
                        var = Scope({'source':source, 'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'source'])
                        return var.get('copyObject')(var.get('source'), var.get('getSymbols')(var.get('source')), var.get('object'))
                    PyJsHoisted_copySymbols_.func_name = 'copySymbols'
                    var.put('copySymbols', PyJsHoisted_copySymbols_)
                    @Js
                    def PyJsHoisted_copySymbolsIn_(source, object, this, arguments, var=var):
                        var = Scope({'source':source, 'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'source'])
                        return var.get('copyObject')(var.get('source'), var.get('getSymbolsIn')(var.get('source')), var.get('object'))
                    PyJsHoisted_copySymbolsIn_.func_name = 'copySymbolsIn'
                    var.put('copySymbolsIn', PyJsHoisted_copySymbolsIn_)
                    @Js
                    def PyJsHoisted_createAggregator_(setter, initializer, this, arguments, var=var):
                        var = Scope({'setter':setter, 'initializer':initializer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['setter', 'initializer'])
                        @Js
                        def PyJs_anonymous_150_(collection, iteratee, this, arguments, var=var):
                            var = Scope({'collection':collection, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                            var.registers(['accumulator', 'func', 'iteratee', 'collection'])
                            var.put('func', (var.get('arrayAggregator') if var.get('isArray')(var.get('collection')) else var.get('baseAggregator')))
                            var.put('accumulator', (var.get('initializer')() if var.get('initializer') else Js({})))
                            return var.get('func')(var.get('collection'), var.get('setter'), var.get('getIteratee')(var.get('iteratee'), Js(2.0)), var.get('accumulator'))
                        PyJs_anonymous_150_._set_name('anonymous')
                        return PyJs_anonymous_150_
                    PyJsHoisted_createAggregator_.func_name = 'createAggregator'
                    var.put('createAggregator', PyJsHoisted_createAggregator_)
                    @Js
                    def PyJsHoisted_createAssigner_(assigner, this, arguments, var=var):
                        var = Scope({'assigner':assigner, 'this':this, 'arguments':arguments}, var)
                        var.registers(['assigner'])
                        @Js
                        def PyJs_anonymous_151_(object, sources, this, arguments, var=var):
                            var = Scope({'object':object, 'sources':sources, 'this':this, 'arguments':arguments}, var)
                            var.registers(['customizer', 'sources', 'guard', 'object', 'length', 'source', 'index'])
                            var.put('index', (-Js(1.0)))
                            var.put('length', var.get('sources').get('length'))
                            var.put('customizer', (var.get('sources').get((var.get('length')-Js(1.0))) if (var.get('length')>Js(1.0)) else var.get('undefined')))
                            var.put('guard', (var.get('sources').get('2') if (var.get('length')>Js(2.0)) else var.get('undefined')))
                            var.put('customizer', (PyJsComma((var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)),var.get('customizer')) if ((var.get('assigner').get('length')>Js(3.0)) and (var.get('customizer',throw=False).typeof()==Js('function'))) else var.get('undefined')))
                            if (var.get('guard') and var.get('isIterateeCall')(var.get('sources').get('0'), var.get('sources').get('1'), var.get('guard'))):
                                var.put('customizer', (var.get('undefined') if (var.get('length')<Js(3.0)) else var.get('customizer')))
                                var.put('length', Js(1.0))
                            var.put('object', var.get('Object')(var.get('object')))
                            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                                var.put('source', var.get('sources').get(var.get('index')))
                                if var.get('source'):
                                    var.get('assigner')(var.get('object'), var.get('source'), var.get('index'), var.get('customizer'))
                            return var.get('object')
                        PyJs_anonymous_151_._set_name('anonymous')
                        return var.get('baseRest')(PyJs_anonymous_151_)
                    PyJsHoisted_createAssigner_.func_name = 'createAssigner'
                    var.put('createAssigner', PyJsHoisted_createAssigner_)
                    @Js
                    def PyJsHoisted_createBaseEach_(eachFunc, fromRight, this, arguments, var=var):
                        var = Scope({'eachFunc':eachFunc, 'fromRight':fromRight, 'this':this, 'arguments':arguments}, var)
                        var.registers(['eachFunc', 'fromRight'])
                        @Js
                        def PyJs_anonymous_152_(collection, iteratee, this, arguments, var=var):
                            var = Scope({'collection':collection, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                            var.registers(['iterable', 'collection', 'length', 'iteratee', 'index'])
                            if (var.get('collection')==var.get(u"null")):
                                return var.get('collection')
                            if var.get('isArrayLike')(var.get('collection')).neg():
                                return var.get('eachFunc')(var.get('collection'), var.get('iteratee'))
                            var.put('length', var.get('collection').get('length'))
                            var.put('index', (var.get('length') if var.get('fromRight') else (-Js(1.0))))
                            var.put('iterable', var.get('Object')(var.get('collection')))
                            while ((var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)) if var.get('fromRight') else (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length'))):
                                if PyJsStrictEq(var.get('iteratee')(var.get('iterable').get(var.get('index')), var.get('index'), var.get('iterable')),Js(False)):
                                    break
                            return var.get('collection')
                        PyJs_anonymous_152_._set_name('anonymous')
                        return PyJs_anonymous_152_
                    PyJsHoisted_createBaseEach_.func_name = 'createBaseEach'
                    var.put('createBaseEach', PyJsHoisted_createBaseEach_)
                    @Js
                    def PyJsHoisted_createBaseFor_(fromRight, this, arguments, var=var):
                        var = Scope({'fromRight':fromRight, 'this':this, 'arguments':arguments}, var)
                        var.registers(['fromRight'])
                        @Js
                        def PyJs_anonymous_153_(object, iteratee, keysFunc, this, arguments, var=var):
                            var = Scope({'object':object, 'iteratee':iteratee, 'keysFunc':keysFunc, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object', 'props', 'iterable', 'key', 'length', 'iteratee', 'index', 'keysFunc'])
                            var.put('index', (-Js(1.0)))
                            var.put('iterable', var.get('Object')(var.get('object')))
                            var.put('props', var.get('keysFunc')(var.get('object')))
                            var.put('length', var.get('props').get('length'))
                            while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                                var.put('key', var.get('props').get((var.get('length') if var.get('fromRight') else var.put('index',Js(var.get('index').to_number())+Js(1)))))
                                if PyJsStrictEq(var.get('iteratee')(var.get('iterable').get(var.get('key')), var.get('key'), var.get('iterable')),Js(False)):
                                    break
                            return var.get('object')
                        PyJs_anonymous_153_._set_name('anonymous')
                        return PyJs_anonymous_153_
                    PyJsHoisted_createBaseFor_.func_name = 'createBaseFor'
                    var.put('createBaseFor', PyJsHoisted_createBaseFor_)
                    @Js
                    def PyJsHoisted_createBind_(func, bitmask, thisArg, this, arguments, var=var):
                        var = Scope({'func':func, 'bitmask':bitmask, 'thisArg':thisArg, 'this':this, 'arguments':arguments}, var)
                        var.registers(['thisArg', 'isBind', 'func', 'bitmask', 'Ctor', 'wrapper'])
                        @Js
                        def PyJsHoisted_wrapper_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['fn'])
                            var.put('fn', (var.get('Ctor') if ((var.get(u"this") and PyJsStrictNeq(var.get(u"this"),var.get('root'))) and var.get(u"this").instanceof(var.get('wrapper'))) else var.get('func')))
                            return var.get('fn').callprop('apply', (var.get('thisArg') if var.get('isBind') else var.get(u"this")), var.get('arguments'))
                        PyJsHoisted_wrapper_.func_name = 'wrapper'
                        var.put('wrapper', PyJsHoisted_wrapper_)
                        var.put('isBind', (var.get('bitmask')&var.get('WRAP_BIND_FLAG')))
                        var.put('Ctor', var.get('createCtor')(var.get('func')))
                        pass
                        return var.get('wrapper')
                    PyJsHoisted_createBind_.func_name = 'createBind'
                    var.put('createBind', PyJsHoisted_createBind_)
                    @Js
                    def PyJsHoisted_createCaseFirst_(methodName, this, arguments, var=var):
                        var = Scope({'methodName':methodName, 'this':this, 'arguments':arguments}, var)
                        var.registers(['methodName'])
                        @Js
                        def PyJs_anonymous_154_(string, this, arguments, var=var):
                            var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                            var.registers(['chr', 'strSymbols', 'string', 'trailing'])
                            var.put('string', var.get('toString')(var.get('string')))
                            var.put('strSymbols', (var.get('stringToArray')(var.get('string')) if var.get('hasUnicode')(var.get('string')) else var.get('undefined')))
                            var.put('chr', (var.get('strSymbols').get('0') if var.get('strSymbols') else var.get('string').callprop('charAt', Js(0.0))))
                            var.put('trailing', (var.get('castSlice')(var.get('strSymbols'), Js(1.0)).callprop('join', Js('')) if var.get('strSymbols') else var.get('string').callprop('slice', Js(1.0))))
                            return (var.get('chr').callprop(var.get('methodName'))+var.get('trailing'))
                        PyJs_anonymous_154_._set_name('anonymous')
                        return PyJs_anonymous_154_
                    PyJsHoisted_createCaseFirst_.func_name = 'createCaseFirst'
                    var.put('createCaseFirst', PyJsHoisted_createCaseFirst_)
                    @Js
                    def PyJsHoisted_createCompounder_(callback, this, arguments, var=var):
                        var = Scope({'callback':callback, 'this':this, 'arguments':arguments}, var)
                        var.registers(['callback'])
                        @Js
                        def PyJs_anonymous_155_(string, this, arguments, var=var):
                            var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                            var.registers(['string'])
                            return var.get('arrayReduce')(var.get('words')(var.get('deburr')(var.get('string')).callprop('replace', var.get('reApos'), Js(''))), var.get('callback'), Js(''))
                        PyJs_anonymous_155_._set_name('anonymous')
                        return PyJs_anonymous_155_
                    PyJsHoisted_createCompounder_.func_name = 'createCompounder'
                    var.put('createCompounder', PyJsHoisted_createCompounder_)
                    @Js
                    def PyJsHoisted_createCtor_(Ctor, this, arguments, var=var):
                        var = Scope({'Ctor':Ctor, 'this':this, 'arguments':arguments}, var)
                        var.registers(['Ctor'])
                        @Js
                        def PyJs_anonymous_156_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['result', 'args', 'thisBinding'])
                            var.put('args', var.get('arguments'))
                            while 1:
                                SWITCHED = False
                                CONDITION = (var.get('args').get('length'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                                    SWITCHED = True
                                    return var.get('Ctor').create()
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                                    SWITCHED = True
                                    return var.get('Ctor').create(var.get('args').get('0'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                                    SWITCHED = True
                                    return var.get('Ctor').create(var.get('args').get('0'), var.get('args').get('1'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                                    SWITCHED = True
                                    return var.get('Ctor').create(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                                    SWITCHED = True
                                    return var.get('Ctor').create(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'), var.get('args').get('3'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(5.0)):
                                    SWITCHED = True
                                    return var.get('Ctor').create(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'), var.get('args').get('3'), var.get('args').get('4'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(6.0)):
                                    SWITCHED = True
                                    return var.get('Ctor').create(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'), var.get('args').get('3'), var.get('args').get('4'), var.get('args').get('5'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(7.0)):
                                    SWITCHED = True
                                    return var.get('Ctor').create(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'), var.get('args').get('3'), var.get('args').get('4'), var.get('args').get('5'), var.get('args').get('6'))
                                SWITCHED = True
                                break
                            var.put('thisBinding', var.get('baseCreate')(var.get('Ctor').get('prototype')))
                            var.put('result', var.get('Ctor').callprop('apply', var.get('thisBinding'), var.get('args')))
                            return (var.get('result') if var.get('isObject')(var.get('result')) else var.get('thisBinding'))
                        PyJs_anonymous_156_._set_name('anonymous')
                        return PyJs_anonymous_156_
                    PyJsHoisted_createCtor_.func_name = 'createCtor'
                    var.put('createCtor', PyJsHoisted_createCtor_)
                    @Js
                    def PyJsHoisted_createCurry_(func, bitmask, arity, this, arguments, var=var):
                        var = Scope({'func':func, 'bitmask':bitmask, 'arity':arity, 'this':this, 'arguments':arguments}, var)
                        var.registers(['arity', 'func', 'bitmask', 'Ctor', 'wrapper'])
                        @Js
                        def PyJsHoisted_wrapper_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['args', 'placeholder', 'fn', 'holders', 'length', 'index'])
                            var.put('length', var.get('arguments').get('length'))
                            var.put('args', var.get('Array')(var.get('length')))
                            var.put('index', var.get('length'))
                            var.put('placeholder', var.get('getHolder')(var.get('wrapper')))
                            while (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)):
                                var.get('args').put(var.get('index'), var.get('arguments').get(var.get('index')))
                            var.put('holders', (Js([]) if (((var.get('length')<Js(3.0)) and PyJsStrictNeq(var.get('args').get('0'),var.get('placeholder'))) and PyJsStrictNeq(var.get('args').get((var.get('length')-Js(1.0))),var.get('placeholder'))) else var.get('replaceHolders')(var.get('args'), var.get('placeholder'))))
                            var.put('length', var.get('holders').get('length'), '-')
                            if (var.get('length')<var.get('arity')):
                                return var.get('createRecurry')(var.get('func'), var.get('bitmask'), var.get('createHybrid'), var.get('wrapper').get('placeholder'), var.get('undefined'), var.get('args'), var.get('holders'), var.get('undefined'), var.get('undefined'), (var.get('arity')-var.get('length')))
                            var.put('fn', (var.get('Ctor') if ((var.get(u"this") and PyJsStrictNeq(var.get(u"this"),var.get('root'))) and var.get(u"this").instanceof(var.get('wrapper'))) else var.get('func')))
                            return var.get('apply')(var.get('fn'), var.get(u"this"), var.get('args'))
                        PyJsHoisted_wrapper_.func_name = 'wrapper'
                        var.put('wrapper', PyJsHoisted_wrapper_)
                        var.put('Ctor', var.get('createCtor')(var.get('func')))
                        pass
                        return var.get('wrapper')
                    PyJsHoisted_createCurry_.func_name = 'createCurry'
                    var.put('createCurry', PyJsHoisted_createCurry_)
                    @Js
                    def PyJsHoisted_createFind_(findIndexFunc, this, arguments, var=var):
                        var = Scope({'findIndexFunc':findIndexFunc, 'this':this, 'arguments':arguments}, var)
                        var.registers(['findIndexFunc'])
                        @Js
                        def PyJs_anonymous_157_(collection, predicate, fromIndex, this, arguments, var=var):
                            var = Scope({'collection':collection, 'predicate':predicate, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                            var.registers(['predicate', 'iterable', 'collection', 'fromIndex', 'iteratee', 'index'])
                            var.put('iterable', var.get('Object')(var.get('collection')))
                            if var.get('isArrayLike')(var.get('collection')).neg():
                                var.put('iteratee', var.get('getIteratee')(var.get('predicate'), Js(3.0)))
                                var.put('collection', var.get('keys')(var.get('collection')))
                                @Js
                                def PyJs_predicate_158_(key, this, arguments, var=var):
                                    var = Scope({'key':key, 'this':this, 'arguments':arguments, 'predicate':PyJs_predicate_158_}, var)
                                    var.registers(['key'])
                                    return var.get('iteratee')(var.get('iterable').get(var.get('key')), var.get('key'), var.get('iterable'))
                                PyJs_predicate_158_._set_name('predicate')
                                var.put('predicate', PyJs_predicate_158_)
                            var.put('index', var.get('findIndexFunc')(var.get('collection'), var.get('predicate'), var.get('fromIndex')))
                            return (var.get('iterable').get((var.get('collection').get(var.get('index')) if var.get('iteratee') else var.get('index'))) if (var.get('index')>(-Js(1.0))) else var.get('undefined'))
                        PyJs_anonymous_157_._set_name('anonymous')
                        return PyJs_anonymous_157_
                    PyJsHoisted_createFind_.func_name = 'createFind'
                    var.put('createFind', PyJsHoisted_createFind_)
                    @Js
                    def PyJsHoisted_createFlow_(fromRight, this, arguments, var=var):
                        var = Scope({'fromRight':fromRight, 'this':this, 'arguments':arguments}, var)
                        var.registers(['fromRight'])
                        @Js
                        def PyJs_anonymous_159_(funcs, this, arguments, var=var):
                            var = Scope({'funcs':funcs, 'this':this, 'arguments':arguments}, var)
                            var.registers(['funcName', 'funcs', 'func', 'data', 'prereq', 'length', 'wrapper', 'index'])
                            var.put('length', var.get('funcs').get('length'))
                            var.put('index', var.get('length'))
                            var.put('prereq', var.get('LodashWrapper').get('prototype').get('thru'))
                            if var.get('fromRight'):
                                var.get('funcs').callprop('reverse')
                            while (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)):
                                var.put('func', var.get('funcs').get(var.get('index')))
                                if (var.get('func',throw=False).typeof()!=Js('function')):
                                    PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                                    raise PyJsTempException
                                if ((var.get('prereq') and var.get('wrapper').neg()) and (var.get('getFuncName')(var.get('func'))==Js('wrapper'))):
                                    var.put('wrapper', var.get('LodashWrapper').create(Js([]), Js(True)))
                            var.put('index', (var.get('index') if var.get('wrapper') else var.get('length')))
                            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                                var.put('func', var.get('funcs').get(var.get('index')))
                                var.put('funcName', var.get('getFuncName')(var.get('func')))
                                var.put('data', (var.get('getData')(var.get('func')) if (var.get('funcName')==Js('wrapper')) else var.get('undefined')))
                                if ((((var.get('data') and var.get('isLaziable')(var.get('data').get('0'))) and (var.get('data').get('1')==(((var.get('WRAP_ARY_FLAG')|var.get('WRAP_CURRY_FLAG'))|var.get('WRAP_PARTIAL_FLAG'))|var.get('WRAP_REARG_FLAG')))) and var.get('data').get('4').get('length').neg()) and (var.get('data').get('9')==Js(1.0))):
                                    var.put('wrapper', var.get('wrapper').get(var.get('getFuncName')(var.get('data').get('0'))).callprop('apply', var.get('wrapper'), var.get('data').get('3')))
                                else:
                                    var.put('wrapper', (var.get('wrapper').callprop(var.get('funcName')) if ((var.get('func').get('length')==Js(1.0)) and var.get('isLaziable')(var.get('func'))) else var.get('wrapper').callprop('thru', var.get('func'))))
                            @Js
                            def PyJs_anonymous_160_(this, arguments, var=var):
                                var = Scope({'this':this, 'arguments':arguments}, var)
                                var.registers(['result', 'args', 'index', 'value'])
                                var.put('args', var.get('arguments'))
                                var.put('value', var.get('args').get('0'))
                                if ((var.get('wrapper') and (var.get('args').get('length')==Js(1.0))) and var.get('isArray')(var.get('value'))):
                                    return var.get('wrapper').callprop('plant', var.get('value')).callprop('value')
                                var.put('index', Js(0.0))
                                var.put('result', (var.get('funcs').get(var.get('index')).callprop('apply', var.get(u"this"), var.get('args')) if var.get('length') else var.get('value')))
                                while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                                    var.put('result', var.get('funcs').get(var.get('index')).callprop('call', var.get(u"this"), var.get('result')))
                                return var.get('result')
                            PyJs_anonymous_160_._set_name('anonymous')
                            return PyJs_anonymous_160_
                        PyJs_anonymous_159_._set_name('anonymous')
                        return var.get('flatRest')(PyJs_anonymous_159_)
                    PyJsHoisted_createFlow_.func_name = 'createFlow'
                    var.put('createFlow', PyJsHoisted_createFlow_)
                    @Js
                    def PyJsHoisted_createHybrid_(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity, this, arguments, var=var):
                        var = Scope({'func':func, 'bitmask':bitmask, 'thisArg':thisArg, 'partials':partials, 'holders':holders, 'partialsRight':partialsRight, 'holdersRight':holdersRight, 'argPos':argPos, 'ary':ary, 'arity':arity, 'this':this, 'arguments':arguments}, var)
                        var.registers(['partialsRight', 'argPos', 'arity', 'thisArg', 'partials', 'isBind', 'func', 'isBindKey', 'isAry', 'holders', 'ary', 'bitmask', 'Ctor', 'isFlip', 'wrapper', 'isCurried', 'holdersRight'])
                        @Js
                        def PyJsHoisted_wrapper_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['holdersCount', 'newHolders', 'args', 'placeholder', 'thisBinding', 'fn', 'length', 'index'])
                            var.put('length', var.get('arguments').get('length'))
                            var.put('args', var.get('Array')(var.get('length')))
                            var.put('index', var.get('length'))
                            while (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)):
                                var.get('args').put(var.get('index'), var.get('arguments').get(var.get('index')))
                            if var.get('isCurried'):
                                var.put('placeholder', var.get('getHolder')(var.get('wrapper')))
                                var.put('holdersCount', var.get('countHolders')(var.get('args'), var.get('placeholder')))
                            if var.get('partials'):
                                var.put('args', var.get('composeArgs')(var.get('args'), var.get('partials'), var.get('holders'), var.get('isCurried')))
                            if var.get('partialsRight'):
                                var.put('args', var.get('composeArgsRight')(var.get('args'), var.get('partialsRight'), var.get('holdersRight'), var.get('isCurried')))
                            var.put('length', var.get('holdersCount'), '-')
                            if (var.get('isCurried') and (var.get('length')<var.get('arity'))):
                                var.put('newHolders', var.get('replaceHolders')(var.get('args'), var.get('placeholder')))
                                return var.get('createRecurry')(var.get('func'), var.get('bitmask'), var.get('createHybrid'), var.get('wrapper').get('placeholder'), var.get('thisArg'), var.get('args'), var.get('newHolders'), var.get('argPos'), var.get('ary'), (var.get('arity')-var.get('length')))
                            var.put('thisBinding', (var.get('thisArg') if var.get('isBind') else var.get(u"this")))
                            var.put('fn', (var.get('thisBinding').get(var.get('func')) if var.get('isBindKey') else var.get('func')))
                            var.put('length', var.get('args').get('length'))
                            if var.get('argPos'):
                                var.put('args', var.get('reorder')(var.get('args'), var.get('argPos')))
                            else:
                                if (var.get('isFlip') and (var.get('length')>Js(1.0))):
                                    var.get('args').callprop('reverse')
                            if (var.get('isAry') and (var.get('ary')<var.get('length'))):
                                var.get('args').put('length', var.get('ary'))
                            if ((var.get(u"this") and PyJsStrictNeq(var.get(u"this"),var.get('root'))) and var.get(u"this").instanceof(var.get('wrapper'))):
                                var.put('fn', (var.get('Ctor') or var.get('createCtor')(var.get('fn'))))
                            return var.get('fn').callprop('apply', var.get('thisBinding'), var.get('args'))
                        PyJsHoisted_wrapper_.func_name = 'wrapper'
                        var.put('wrapper', PyJsHoisted_wrapper_)
                        var.put('isAry', (var.get('bitmask')&var.get('WRAP_ARY_FLAG')))
                        var.put('isBind', (var.get('bitmask')&var.get('WRAP_BIND_FLAG')))
                        var.put('isBindKey', (var.get('bitmask')&var.get('WRAP_BIND_KEY_FLAG')))
                        var.put('isCurried', (var.get('bitmask')&(var.get('WRAP_CURRY_FLAG')|var.get('WRAP_CURRY_RIGHT_FLAG'))))
                        var.put('isFlip', (var.get('bitmask')&var.get('WRAP_FLIP_FLAG')))
                        var.put('Ctor', (var.get('undefined') if var.get('isBindKey') else var.get('createCtor')(var.get('func'))))
                        pass
                        return var.get('wrapper')
                    PyJsHoisted_createHybrid_.func_name = 'createHybrid'
                    var.put('createHybrid', PyJsHoisted_createHybrid_)
                    @Js
                    def PyJsHoisted_createInverter_(setter, toIteratee, this, arguments, var=var):
                        var = Scope({'setter':setter, 'toIteratee':toIteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['setter', 'toIteratee'])
                        @Js
                        def PyJs_anonymous_161_(object, iteratee, this, arguments, var=var):
                            var = Scope({'object':object, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object', 'iteratee'])
                            return var.get('baseInverter')(var.get('object'), var.get('setter'), var.get('toIteratee')(var.get('iteratee')), Js({}))
                        PyJs_anonymous_161_._set_name('anonymous')
                        return PyJs_anonymous_161_
                    PyJsHoisted_createInverter_.func_name = 'createInverter'
                    var.put('createInverter', PyJsHoisted_createInverter_)
                    @Js
                    def PyJsHoisted_createMathOperation_(operator, defaultValue, this, arguments, var=var):
                        var = Scope({'operator':operator, 'defaultValue':defaultValue, 'this':this, 'arguments':arguments}, var)
                        var.registers(['defaultValue', 'operator'])
                        @Js
                        def PyJs_anonymous_162_(value, other, this, arguments, var=var):
                            var = Scope({'value':value, 'other':other, 'this':this, 'arguments':arguments}, var)
                            var.registers(['result', 'other', 'value'])
                            pass
                            if (PyJsStrictEq(var.get('value'),var.get('undefined')) and PyJsStrictEq(var.get('other'),var.get('undefined'))):
                                return var.get('defaultValue')
                            if PyJsStrictNeq(var.get('value'),var.get('undefined')):
                                var.put('result', var.get('value'))
                            if PyJsStrictNeq(var.get('other'),var.get('undefined')):
                                if PyJsStrictEq(var.get('result'),var.get('undefined')):
                                    return var.get('other')
                                if ((var.get('value',throw=False).typeof()==Js('string')) or (var.get('other',throw=False).typeof()==Js('string'))):
                                    var.put('value', var.get('baseToString')(var.get('value')))
                                    var.put('other', var.get('baseToString')(var.get('other')))
                                else:
                                    var.put('value', var.get('baseToNumber')(var.get('value')))
                                    var.put('other', var.get('baseToNumber')(var.get('other')))
                                var.put('result', var.get('operator')(var.get('value'), var.get('other')))
                            return var.get('result')
                        PyJs_anonymous_162_._set_name('anonymous')
                        return PyJs_anonymous_162_
                    PyJsHoisted_createMathOperation_.func_name = 'createMathOperation'
                    var.put('createMathOperation', PyJsHoisted_createMathOperation_)
                    @Js
                    def PyJsHoisted_createOver_(arrayFunc, this, arguments, var=var):
                        var = Scope({'arrayFunc':arrayFunc, 'this':this, 'arguments':arguments}, var)
                        var.registers(['arrayFunc'])
                        @Js
                        def PyJs_anonymous_163_(iteratees, this, arguments, var=var):
                            var = Scope({'iteratees':iteratees, 'this':this, 'arguments':arguments}, var)
                            var.registers(['iteratees'])
                            var.put('iteratees', var.get('arrayMap')(var.get('iteratees'), var.get('baseUnary')(var.get('getIteratee')())))
                            @Js
                            def PyJs_anonymous_164_(args, this, arguments, var=var):
                                var = Scope({'args':args, 'this':this, 'arguments':arguments}, var)
                                var.registers(['args', 'thisArg'])
                                var.put('thisArg', var.get(u"this"))
                                @Js
                                def PyJs_anonymous_165_(iteratee, this, arguments, var=var):
                                    var = Scope({'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['iteratee'])
                                    return var.get('apply')(var.get('iteratee'), var.get('thisArg'), var.get('args'))
                                PyJs_anonymous_165_._set_name('anonymous')
                                return var.get('arrayFunc')(var.get('iteratees'), PyJs_anonymous_165_)
                            PyJs_anonymous_164_._set_name('anonymous')
                            return var.get('baseRest')(PyJs_anonymous_164_)
                        PyJs_anonymous_163_._set_name('anonymous')
                        return var.get('flatRest')(PyJs_anonymous_163_)
                    PyJsHoisted_createOver_.func_name = 'createOver'
                    var.put('createOver', PyJsHoisted_createOver_)
                    @Js
                    def PyJsHoisted_createPadding_(length, chars, this, arguments, var=var):
                        var = Scope({'length':length, 'chars':chars, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'result', 'charsLength', 'chars'])
                        var.put('chars', (Js(' ') if PyJsStrictEq(var.get('chars'),var.get('undefined')) else var.get('baseToString')(var.get('chars'))))
                        var.put('charsLength', var.get('chars').get('length'))
                        if (var.get('charsLength')<Js(2.0)):
                            return (var.get('baseRepeat')(var.get('chars'), var.get('length')) if var.get('charsLength') else var.get('chars'))
                        var.put('result', var.get('baseRepeat')(var.get('chars'), var.get('nativeCeil')((var.get('length')/var.get('stringSize')(var.get('chars'))))))
                        return (var.get('castSlice')(var.get('stringToArray')(var.get('result')), Js(0.0), var.get('length')).callprop('join', Js('')) if var.get('hasUnicode')(var.get('chars')) else var.get('result').callprop('slice', Js(0.0), var.get('length')))
                    PyJsHoisted_createPadding_.func_name = 'createPadding'
                    var.put('createPadding', PyJsHoisted_createPadding_)
                    @Js
                    def PyJsHoisted_createPartial_(func, bitmask, thisArg, partials, this, arguments, var=var):
                        var = Scope({'func':func, 'bitmask':bitmask, 'thisArg':thisArg, 'partials':partials, 'this':this, 'arguments':arguments}, var)
                        var.registers(['thisArg', 'partials', 'isBind', 'func', 'bitmask', 'Ctor', 'wrapper'])
                        @Js
                        def PyJsHoisted_wrapper_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['leftIndex', 'leftLength', 'args', 'argsIndex', 'argsLength', 'fn'])
                            var.put('argsIndex', (-Js(1.0)))
                            var.put('argsLength', var.get('arguments').get('length'))
                            var.put('leftIndex', (-Js(1.0)))
                            var.put('leftLength', var.get('partials').get('length'))
                            var.put('args', var.get('Array')((var.get('leftLength')+var.get('argsLength'))))
                            var.put('fn', (var.get('Ctor') if ((var.get(u"this") and PyJsStrictNeq(var.get(u"this"),var.get('root'))) and var.get(u"this").instanceof(var.get('wrapper'))) else var.get('func')))
                            while (var.put('leftIndex',Js(var.get('leftIndex').to_number())+Js(1))<var.get('leftLength')):
                                var.get('args').put(var.get('leftIndex'), var.get('partials').get(var.get('leftIndex')))
                            while (var.put('argsLength',Js(var.get('argsLength').to_number())-Js(1))+Js(1)):
                                var.get('args').put((var.put('leftIndex',Js(var.get('leftIndex').to_number())+Js(1))-Js(1)), var.get('arguments').get(var.put('argsIndex',Js(var.get('argsIndex').to_number())+Js(1))))
                            return var.get('apply')(var.get('fn'), (var.get('thisArg') if var.get('isBind') else var.get(u"this")), var.get('args'))
                        PyJsHoisted_wrapper_.func_name = 'wrapper'
                        var.put('wrapper', PyJsHoisted_wrapper_)
                        var.put('isBind', (var.get('bitmask')&var.get('WRAP_BIND_FLAG')))
                        var.put('Ctor', var.get('createCtor')(var.get('func')))
                        pass
                        return var.get('wrapper')
                    PyJsHoisted_createPartial_.func_name = 'createPartial'
                    var.put('createPartial', PyJsHoisted_createPartial_)
                    @Js
                    def PyJsHoisted_createRange_(fromRight, this, arguments, var=var):
                        var = Scope({'fromRight':fromRight, 'this':this, 'arguments':arguments}, var)
                        var.registers(['fromRight'])
                        @Js
                        def PyJs_anonymous_166_(start, end, step, this, arguments, var=var):
                            var = Scope({'start':start, 'end':end, 'step':step, 'this':this, 'arguments':arguments}, var)
                            var.registers(['end', 'step', 'start'])
                            if ((var.get('step') and (var.get('step',throw=False).typeof()!=Js('number'))) and var.get('isIterateeCall')(var.get('start'), var.get('end'), var.get('step'))):
                                var.put('end', var.put('step', var.get('undefined')))
                            var.put('start', var.get('toFinite')(var.get('start')))
                            if PyJsStrictEq(var.get('end'),var.get('undefined')):
                                var.put('end', var.get('start'))
                                var.put('start', Js(0.0))
                            else:
                                var.put('end', var.get('toFinite')(var.get('end')))
                            var.put('step', ((Js(1.0) if (var.get('start')<var.get('end')) else (-Js(1.0))) if PyJsStrictEq(var.get('step'),var.get('undefined')) else var.get('toFinite')(var.get('step'))))
                            return var.get('baseRange')(var.get('start'), var.get('end'), var.get('step'), var.get('fromRight'))
                        PyJs_anonymous_166_._set_name('anonymous')
                        return PyJs_anonymous_166_
                    PyJsHoisted_createRange_.func_name = 'createRange'
                    var.put('createRange', PyJsHoisted_createRange_)
                    @Js
                    def PyJsHoisted_createRelationalOperation_(operator, this, arguments, var=var):
                        var = Scope({'operator':operator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['operator'])
                        @Js
                        def PyJs_anonymous_167_(value, other, this, arguments, var=var):
                            var = Scope({'value':value, 'other':other, 'this':this, 'arguments':arguments}, var)
                            var.registers(['other', 'value'])
                            if ((var.get('value',throw=False).typeof()==Js('string')) and (var.get('other',throw=False).typeof()==Js('string'))).neg():
                                var.put('value', var.get('toNumber')(var.get('value')))
                                var.put('other', var.get('toNumber')(var.get('other')))
                            return var.get('operator')(var.get('value'), var.get('other'))
                        PyJs_anonymous_167_._set_name('anonymous')
                        return PyJs_anonymous_167_
                    PyJsHoisted_createRelationalOperation_.func_name = 'createRelationalOperation'
                    var.put('createRelationalOperation', PyJsHoisted_createRelationalOperation_)
                    @Js
                    def PyJsHoisted_createRecurry_(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity, this, arguments, var=var):
                        var = Scope({'func':func, 'bitmask':bitmask, 'wrapFunc':wrapFunc, 'placeholder':placeholder, 'thisArg':thisArg, 'partials':partials, 'holders':holders, 'argPos':argPos, 'ary':ary, 'arity':arity, 'this':this, 'arguments':arguments}, var)
                        var.registers(['newData', 'argPos', 'isCurry', 'wrapFunc', 'arity', 'newHolders', 'newPartialsRight', 'newPartials', 'thisArg', 'placeholder', 'partials', 'func', 'newHoldersRight', 'result', 'holders', 'ary', 'bitmask'])
                        var.put('isCurry', (var.get('bitmask')&var.get('WRAP_CURRY_FLAG')))
                        var.put('newHolders', (var.get('holders') if var.get('isCurry') else var.get('undefined')))
                        var.put('newHoldersRight', (var.get('undefined') if var.get('isCurry') else var.get('holders')))
                        var.put('newPartials', (var.get('partials') if var.get('isCurry') else var.get('undefined')))
                        var.put('newPartialsRight', (var.get('undefined') if var.get('isCurry') else var.get('partials')))
                        var.put('bitmask', (var.get('WRAP_PARTIAL_FLAG') if var.get('isCurry') else var.get('WRAP_PARTIAL_RIGHT_FLAG')), '|')
                        var.put('bitmask', (~(var.get('WRAP_PARTIAL_RIGHT_FLAG') if var.get('isCurry') else var.get('WRAP_PARTIAL_FLAG'))), '&')
                        if (var.get('bitmask')&var.get('WRAP_CURRY_BOUND_FLAG')).neg():
                            var.put('bitmask', (~(var.get('WRAP_BIND_FLAG')|var.get('WRAP_BIND_KEY_FLAG'))), '&')
                        var.put('newData', Js([var.get('func'), var.get('bitmask'), var.get('thisArg'), var.get('newPartials'), var.get('newHolders'), var.get('newPartialsRight'), var.get('newHoldersRight'), var.get('argPos'), var.get('ary'), var.get('arity')]))
                        var.put('result', var.get('wrapFunc').callprop('apply', var.get('undefined'), var.get('newData')))
                        if var.get('isLaziable')(var.get('func')):
                            var.get('setData')(var.get('result'), var.get('newData'))
                        var.get('result').put('placeholder', var.get('placeholder'))
                        return var.get('setWrapToString')(var.get('result'), var.get('func'), var.get('bitmask'))
                    PyJsHoisted_createRecurry_.func_name = 'createRecurry'
                    var.put('createRecurry', PyJsHoisted_createRecurry_)
                    @Js
                    def PyJsHoisted_createRound_(methodName, this, arguments, var=var):
                        var = Scope({'methodName':methodName, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'methodName'])
                        var.put('func', var.get('Math').get(var.get('methodName')))
                        @Js
                        def PyJs_anonymous_168_(number, precision, this, arguments, var=var):
                            var = Scope({'number':number, 'precision':precision, 'this':this, 'arguments':arguments}, var)
                            var.registers(['number', 'precision', 'pair', 'value'])
                            var.put('number', var.get('toNumber')(var.get('number')))
                            var.put('precision', (Js(0.0) if (var.get('precision')==var.get(u"null")) else var.get('nativeMin')(var.get('toInteger')(var.get('precision')), Js(292.0))))
                            if var.get('precision'):
                                var.put('pair', (var.get('toString')(var.get('number'))+Js('e')).callprop('split', Js('e')))
                                var.put('value', var.get('func')(((var.get('pair').get('0')+Js('e'))+((+var.get('pair').get('1'))+var.get('precision')))))
                                var.put('pair', (var.get('toString')(var.get('value'))+Js('e')).callprop('split', Js('e')))
                                return (+((var.get('pair').get('0')+Js('e'))+((+var.get('pair').get('1'))-var.get('precision'))))
                            return var.get('func')(var.get('number'))
                        PyJs_anonymous_168_._set_name('anonymous')
                        return PyJs_anonymous_168_
                    PyJsHoisted_createRound_.func_name = 'createRound'
                    var.put('createRound', PyJsHoisted_createRound_)
                    @Js
                    def PyJsHoisted_createToPairs_(keysFunc, this, arguments, var=var):
                        var = Scope({'keysFunc':keysFunc, 'this':this, 'arguments':arguments}, var)
                        var.registers(['keysFunc'])
                        @Js
                        def PyJs_anonymous_170_(object, this, arguments, var=var):
                            var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['tag', 'object'])
                            var.put('tag', var.get('getTag')(var.get('object')))
                            if (var.get('tag')==var.get('mapTag')):
                                return var.get('mapToArray')(var.get('object'))
                            if (var.get('tag')==var.get('setTag')):
                                return var.get('setToPairs')(var.get('object'))
                            return var.get('baseToPairs')(var.get('object'), var.get('keysFunc')(var.get('object')))
                        PyJs_anonymous_170_._set_name('anonymous')
                        return PyJs_anonymous_170_
                    PyJsHoisted_createToPairs_.func_name = 'createToPairs'
                    var.put('createToPairs', PyJsHoisted_createToPairs_)
                    @Js
                    def PyJsHoisted_createWrap_(func, bitmask, thisArg, partials, holders, argPos, ary, arity, this, arguments, var=var):
                        var = Scope({'func':func, 'bitmask':bitmask, 'thisArg':thisArg, 'partials':partials, 'holders':holders, 'argPos':argPos, 'ary':ary, 'arity':arity, 'this':this, 'arguments':arguments}, var)
                        var.registers(['newData', 'partialsRight', 'argPos', 'arity', 'thisArg', 'partials', 'func', 'result', 'isBindKey', 'holders', 'data', 'ary', 'bitmask', 'setter', 'length', 'holdersRight'])
                        var.put('isBindKey', (var.get('bitmask')&var.get('WRAP_BIND_KEY_FLAG')))
                        if (var.get('isBindKey').neg() and (var.get('func',throw=False).typeof()!=Js('function'))):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                            raise PyJsTempException
                        var.put('length', (var.get('partials').get('length') if var.get('partials') else Js(0.0)))
                        if var.get('length').neg():
                            var.put('bitmask', (~(var.get('WRAP_PARTIAL_FLAG')|var.get('WRAP_PARTIAL_RIGHT_FLAG'))), '&')
                            var.put('partials', var.put('holders', var.get('undefined')))
                        var.put('ary', (var.get('ary') if PyJsStrictEq(var.get('ary'),var.get('undefined')) else var.get('nativeMax')(var.get('toInteger')(var.get('ary')), Js(0.0))))
                        var.put('arity', (var.get('arity') if PyJsStrictEq(var.get('arity'),var.get('undefined')) else var.get('toInteger')(var.get('arity'))))
                        var.put('length', (var.get('holders').get('length') if var.get('holders') else Js(0.0)), '-')
                        if (var.get('bitmask')&var.get('WRAP_PARTIAL_RIGHT_FLAG')):
                            var.put('partialsRight', var.get('partials'))
                            var.put('holdersRight', var.get('holders'))
                            var.put('partials', var.put('holders', var.get('undefined')))
                        var.put('data', (var.get('undefined') if var.get('isBindKey') else var.get('getData')(var.get('func'))))
                        var.put('newData', Js([var.get('func'), var.get('bitmask'), var.get('thisArg'), var.get('partials'), var.get('holders'), var.get('partialsRight'), var.get('holdersRight'), var.get('argPos'), var.get('ary'), var.get('arity')]))
                        if var.get('data'):
                            var.get('mergeData')(var.get('newData'), var.get('data'))
                        var.put('func', var.get('newData').get('0'))
                        var.put('bitmask', var.get('newData').get('1'))
                        var.put('thisArg', var.get('newData').get('2'))
                        var.put('partials', var.get('newData').get('3'))
                        var.put('holders', var.get('newData').get('4'))
                        var.put('arity', var.get('newData').put('9', ((Js(0.0) if var.get('isBindKey') else var.get('func').get('length')) if PyJsStrictEq(var.get('newData').get('9'),var.get('undefined')) else var.get('nativeMax')((var.get('newData').get('9')-var.get('length')), Js(0.0)))))
                        if (var.get('arity').neg() and (var.get('bitmask')&(var.get('WRAP_CURRY_FLAG')|var.get('WRAP_CURRY_RIGHT_FLAG')))):
                            var.put('bitmask', (~(var.get('WRAP_CURRY_FLAG')|var.get('WRAP_CURRY_RIGHT_FLAG'))), '&')
                        if (var.get('bitmask').neg() or (var.get('bitmask')==var.get('WRAP_BIND_FLAG'))):
                            var.put('result', var.get('createBind')(var.get('func'), var.get('bitmask'), var.get('thisArg')))
                        else:
                            if ((var.get('bitmask')==var.get('WRAP_CURRY_FLAG')) or (var.get('bitmask')==var.get('WRAP_CURRY_RIGHT_FLAG'))):
                                var.put('result', var.get('createCurry')(var.get('func'), var.get('bitmask'), var.get('arity')))
                            else:
                                if (((var.get('bitmask')==var.get('WRAP_PARTIAL_FLAG')) or (var.get('bitmask')==(var.get('WRAP_BIND_FLAG')|var.get('WRAP_PARTIAL_FLAG')))) and var.get('holders').get('length').neg()):
                                    var.put('result', var.get('createPartial')(var.get('func'), var.get('bitmask'), var.get('thisArg'), var.get('partials')))
                                else:
                                    var.put('result', var.get('createHybrid').callprop('apply', var.get('undefined'), var.get('newData')))
                        var.put('setter', (var.get('baseSetData') if var.get('data') else var.get('setData')))
                        return var.get('setWrapToString')(var.get('setter')(var.get('result'), var.get('newData')), var.get('func'), var.get('bitmask'))
                    PyJsHoisted_createWrap_.func_name = 'createWrap'
                    var.put('createWrap', PyJsHoisted_createWrap_)
                    @Js
                    def PyJsHoisted_customDefaultsAssignIn_(objValue, srcValue, key, object, this, arguments, var=var):
                        var = Scope({'objValue':objValue, 'srcValue':srcValue, 'key':key, 'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['srcValue', 'object', 'objValue', 'key'])
                        if (PyJsStrictEq(var.get('objValue'),var.get('undefined')) or (var.get('eq')(var.get('objValue'), var.get('objectProto').get(var.get('key'))) and var.get('hasOwnProperty').callprop('call', var.get('object'), var.get('key')).neg())):
                            return var.get('srcValue')
                        return var.get('objValue')
                    PyJsHoisted_customDefaultsAssignIn_.func_name = 'customDefaultsAssignIn'
                    var.put('customDefaultsAssignIn', PyJsHoisted_customDefaultsAssignIn_)
                    @Js
                    def PyJsHoisted_customDefaultsMerge_(objValue, srcValue, key, object, source, stack, this, arguments, var=var):
                        var = Scope({'objValue':objValue, 'srcValue':srcValue, 'key':key, 'object':object, 'source':source, 'stack':stack, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'objValue', 'key', 'srcValue', 'source', 'stack'])
                        if (var.get('isObject')(var.get('objValue')) and var.get('isObject')(var.get('srcValue'))):
                            var.get('stack').callprop('set', var.get('srcValue'), var.get('objValue'))
                            var.get('baseMerge')(var.get('objValue'), var.get('srcValue'), var.get('undefined'), var.get('customDefaultsMerge'), var.get('stack'))
                            var.get('stack').callprop('delete', var.get('srcValue'))
                        return var.get('objValue')
                    PyJsHoisted_customDefaultsMerge_.func_name = 'customDefaultsMerge'
                    var.put('customDefaultsMerge', PyJsHoisted_customDefaultsMerge_)
                    @Js
                    def PyJsHoisted_customOmitClone_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('undefined') if var.get('isPlainObject')(var.get('value')) else var.get('value'))
                    PyJsHoisted_customOmitClone_.func_name = 'customOmitClone'
                    var.put('customOmitClone', PyJsHoisted_customOmitClone_)
                    @Js
                    def PyJsHoisted_equalArrays_(array, other, bitmask, customizer, equalFunc, stack, this, arguments, var=var):
                        var = Scope({'array':array, 'other':other, 'bitmask':bitmask, 'customizer':customizer, 'equalFunc':equalFunc, 'stack':stack, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'isPartial', 'seen', 'arrValue', 'array', 'index', 'equalFunc', 'result', 'othLength', 'stack', 'bitmask', 'arrLength', 'compared', 'other', 'stacked', 'othValue'])
                        var.put('isPartial', (var.get('bitmask')&var.get('COMPARE_PARTIAL_FLAG')))
                        var.put('arrLength', var.get('array').get('length'))
                        var.put('othLength', var.get('other').get('length'))
                        if ((var.get('arrLength')!=var.get('othLength')) and (var.get('isPartial') and (var.get('othLength')>var.get('arrLength'))).neg()):
                            return Js(False)
                        var.put('stacked', var.get('stack').callprop('get', var.get('array')))
                        if (var.get('stacked') and var.get('stack').callprop('get', var.get('other'))):
                            return (var.get('stacked')==var.get('other'))
                        var.put('index', (-Js(1.0)))
                        var.put('result', Js(True))
                        var.put('seen', (var.get('SetCache').create() if (var.get('bitmask')&var.get('COMPARE_UNORDERED_FLAG')) else var.get('undefined')))
                        var.get('stack').callprop('set', var.get('array'), var.get('other'))
                        var.get('stack').callprop('set', var.get('other'), var.get('array'))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('arrLength')):
                            var.put('arrValue', var.get('array').get(var.get('index')))
                            var.put('othValue', var.get('other').get(var.get('index')))
                            if var.get('customizer'):
                                var.put('compared', (var.get('customizer')(var.get('othValue'), var.get('arrValue'), var.get('index'), var.get('other'), var.get('array'), var.get('stack')) if var.get('isPartial') else var.get('customizer')(var.get('arrValue'), var.get('othValue'), var.get('index'), var.get('array'), var.get('other'), var.get('stack'))))
                            if PyJsStrictNeq(var.get('compared'),var.get('undefined')):
                                if var.get('compared'):
                                    continue
                                var.put('result', Js(False))
                                break
                            if var.get('seen'):
                                @Js
                                def PyJs_anonymous_171_(othValue, othIndex, this, arguments, var=var):
                                    var = Scope({'othValue':othValue, 'othIndex':othIndex, 'this':this, 'arguments':arguments}, var)
                                    var.registers(['othIndex', 'othValue'])
                                    if (var.get('cacheHas')(var.get('seen'), var.get('othIndex')).neg() and (PyJsStrictEq(var.get('arrValue'),var.get('othValue')) or var.get('equalFunc')(var.get('arrValue'), var.get('othValue'), var.get('bitmask'), var.get('customizer'), var.get('stack')))):
                                        return var.get('seen').callprop('push', var.get('othIndex'))
                                PyJs_anonymous_171_._set_name('anonymous')
                                if var.get('arraySome')(var.get('other'), PyJs_anonymous_171_).neg():
                                    var.put('result', Js(False))
                                    break
                            else:
                                if (PyJsStrictEq(var.get('arrValue'),var.get('othValue')) or var.get('equalFunc')(var.get('arrValue'), var.get('othValue'), var.get('bitmask'), var.get('customizer'), var.get('stack'))).neg():
                                    var.put('result', Js(False))
                                    break
                        var.get('stack').callprop('delete', var.get('array'))
                        var.get('stack').callprop('delete', var.get('other'))
                        return var.get('result')
                    PyJsHoisted_equalArrays_.func_name = 'equalArrays'
                    var.put('equalArrays', PyJsHoisted_equalArrays_)
                    @Js
                    def PyJsHoisted_equalByTag_(object, other, tag, bitmask, customizer, equalFunc, stack, this, arguments, var=var):
                        var = Scope({'object':object, 'other':other, 'tag':tag, 'bitmask':bitmask, 'customizer':customizer, 'equalFunc':equalFunc, 'stack':stack, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'isPartial', 'object', 'tag', 'equalFunc', 'result', 'bitmask', 'convert', 'other', 'stacked', 'stack'])
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('tag'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('dataViewTag')):
                                SWITCHED = True
                                if ((var.get('object').get('byteLength')!=var.get('other').get('byteLength')) or (var.get('object').get('byteOffset')!=var.get('other').get('byteOffset'))):
                                    return Js(False)
                                var.put('object', var.get('object').get('buffer'))
                                var.put('other', var.get('other').get('buffer'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('arrayBufferTag')):
                                SWITCHED = True
                                if ((var.get('object').get('byteLength')!=var.get('other').get('byteLength')) or var.get('equalFunc')(var.get('Uint8Array').create(var.get('object')), var.get('Uint8Array').create(var.get('other'))).neg()):
                                    return Js(False)
                                return Js(True)
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('boolTag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('dateTag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('numberTag')):
                                SWITCHED = True
                                return var.get('eq')((+var.get('object')), (+var.get('other')))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('errorTag')):
                                SWITCHED = True
                                return ((var.get('object').get('name')==var.get('other').get('name')) and (var.get('object').get('message')==var.get('other').get('message')))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('regexpTag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('stringTag')):
                                SWITCHED = True
                                return (var.get('object')==(var.get('other')+Js('')))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('mapTag')):
                                SWITCHED = True
                                var.put('convert', var.get('mapToArray'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('setTag')):
                                SWITCHED = True
                                var.put('isPartial', (var.get('bitmask')&var.get('COMPARE_PARTIAL_FLAG')))
                                (var.get('convert') or var.put('convert', var.get('setToArray')))
                                if ((var.get('object').get('size')!=var.get('other').get('size')) and var.get('isPartial').neg()):
                                    return Js(False)
                                var.put('stacked', var.get('stack').callprop('get', var.get('object')))
                                if var.get('stacked'):
                                    return (var.get('stacked')==var.get('other'))
                                var.put('bitmask', var.get('COMPARE_UNORDERED_FLAG'), '|')
                                var.get('stack').callprop('set', var.get('object'), var.get('other'))
                                var.put('result', var.get('equalArrays')(var.get('convert')(var.get('object')), var.get('convert')(var.get('other')), var.get('bitmask'), var.get('customizer'), var.get('equalFunc'), var.get('stack')))
                                var.get('stack').callprop('delete', var.get('object'))
                                return var.get('result')
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('symbolTag')):
                                SWITCHED = True
                                if var.get('symbolValueOf'):
                                    return (var.get('symbolValueOf').callprop('call', var.get('object'))==var.get('symbolValueOf').callprop('call', var.get('other')))
                            SWITCHED = True
                            break
                        return Js(False)
                    PyJsHoisted_equalByTag_.func_name = 'equalByTag'
                    var.put('equalByTag', PyJsHoisted_equalByTag_)
                    @Js
                    def PyJsHoisted_equalObjects_(object, other, bitmask, customizer, equalFunc, stack, this, arguments, var=var):
                        var = Scope({'object':object, 'other':other, 'bitmask':bitmask, 'customizer':customizer, 'equalFunc':equalFunc, 'stack':stack, 'this':this, 'arguments':arguments}, var)
                        var.registers(['isPartial', 'othLength', 'customizer', 'skipCtor', 'result', 'key', 'othCtor', 'index', 'stack', 'objCtor', 'object', 'equalFunc', 'objLength', 'objProps', 'compared', 'other', 'objValue', 'bitmask', 'othProps', 'stacked', 'othValue'])
                        var.put('isPartial', (var.get('bitmask')&var.get('COMPARE_PARTIAL_FLAG')))
                        var.put('objProps', var.get('getAllKeys')(var.get('object')))
                        var.put('objLength', var.get('objProps').get('length'))
                        var.put('othProps', var.get('getAllKeys')(var.get('other')))
                        var.put('othLength', var.get('othProps').get('length'))
                        if ((var.get('objLength')!=var.get('othLength')) and var.get('isPartial').neg()):
                            return Js(False)
                        var.put('index', var.get('objLength'))
                        while (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)):
                            var.put('key', var.get('objProps').get(var.get('index')))
                            if (var.get('other').contains(var.get('key')) if var.get('isPartial') else var.get('hasOwnProperty').callprop('call', var.get('other'), var.get('key'))).neg():
                                return Js(False)
                        var.put('stacked', var.get('stack').callprop('get', var.get('object')))
                        if (var.get('stacked') and var.get('stack').callprop('get', var.get('other'))):
                            return (var.get('stacked')==var.get('other'))
                        var.put('result', Js(True))
                        var.get('stack').callprop('set', var.get('object'), var.get('other'))
                        var.get('stack').callprop('set', var.get('other'), var.get('object'))
                        var.put('skipCtor', var.get('isPartial'))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('objLength')):
                            var.put('key', var.get('objProps').get(var.get('index')))
                            var.put('objValue', var.get('object').get(var.get('key')))
                            var.put('othValue', var.get('other').get(var.get('key')))
                            if var.get('customizer'):
                                var.put('compared', (var.get('customizer')(var.get('othValue'), var.get('objValue'), var.get('key'), var.get('other'), var.get('object'), var.get('stack')) if var.get('isPartial') else var.get('customizer')(var.get('objValue'), var.get('othValue'), var.get('key'), var.get('object'), var.get('other'), var.get('stack'))))
                            if ((PyJsStrictEq(var.get('objValue'),var.get('othValue')) or var.get('equalFunc')(var.get('objValue'), var.get('othValue'), var.get('bitmask'), var.get('customizer'), var.get('stack'))) if PyJsStrictEq(var.get('compared'),var.get('undefined')) else var.get('compared')).neg():
                                var.put('result', Js(False))
                                break
                            (var.get('skipCtor') or var.put('skipCtor', (var.get('key')==Js('constructor'))))
                        if (var.get('result') and var.get('skipCtor').neg()):
                            var.put('objCtor', var.get('object').get('constructor'))
                            var.put('othCtor', var.get('other').get('constructor'))
                            if ((((var.get('objCtor')!=var.get('othCtor')) and var.get('object').contains(Js('constructor'))) and var.get('other').contains(Js('constructor'))) and ((((var.get('objCtor',throw=False).typeof()==Js('function')) and var.get('objCtor').instanceof(var.get('objCtor'))) and (var.get('othCtor',throw=False).typeof()==Js('function'))) and var.get('othCtor').instanceof(var.get('othCtor'))).neg()):
                                var.put('result', Js(False))
                        var.get('stack').callprop('delete', var.get('object'))
                        var.get('stack').callprop('delete', var.get('other'))
                        return var.get('result')
                    PyJsHoisted_equalObjects_.func_name = 'equalObjects'
                    var.put('equalObjects', PyJsHoisted_equalObjects_)
                    @Js
                    def PyJsHoisted_flatRest_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func'])
                        return var.get('setToString')(var.get('overRest')(var.get('func'), var.get('undefined'), var.get('flatten')), (var.get('func')+Js('')))
                    PyJsHoisted_flatRest_.func_name = 'flatRest'
                    var.put('flatRest', PyJsHoisted_flatRest_)
                    @Js
                    def PyJsHoisted_getAllKeys_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        return var.get('baseGetAllKeys')(var.get('object'), var.get('keys'), var.get('getSymbols'))
                    PyJsHoisted_getAllKeys_.func_name = 'getAllKeys'
                    var.put('getAllKeys', PyJsHoisted_getAllKeys_)
                    @Js
                    def PyJsHoisted_getAllKeysIn_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        return var.get('baseGetAllKeys')(var.get('object'), var.get('keysIn'), var.get('getSymbolsIn'))
                    PyJsHoisted_getAllKeysIn_.func_name = 'getAllKeysIn'
                    var.put('getAllKeysIn', PyJsHoisted_getAllKeysIn_)
                    @Js
                    def PyJsHoisted_getFuncName_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'func', 'result', 'otherFunc', 'data', 'length'])
                        var.put('result', (var.get('func').get('name')+Js('')))
                        var.put('array', var.get('realNames').get(var.get('result')))
                        var.put('length', (var.get('array').get('length') if var.get('hasOwnProperty').callprop('call', var.get('realNames'), var.get('result')) else Js(0.0)))
                        while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                            var.put('data', var.get('array').get(var.get('length')))
                            var.put('otherFunc', var.get('data').get('func'))
                            if ((var.get('otherFunc')==var.get(u"null")) or (var.get('otherFunc')==var.get('func'))):
                                return var.get('data').get('name')
                        return var.get('result')
                    PyJsHoisted_getFuncName_.func_name = 'getFuncName'
                    var.put('getFuncName', PyJsHoisted_getFuncName_)
                    @Js
                    def PyJsHoisted_getHolder_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'func'])
                        var.put('object', (var.get('lodash') if var.get('hasOwnProperty').callprop('call', var.get('lodash'), Js('placeholder')) else var.get('func')))
                        return var.get('object').get('placeholder')
                    PyJsHoisted_getHolder_.func_name = 'getHolder'
                    var.put('getHolder', PyJsHoisted_getHolder_)
                    @Js
                    def PyJsHoisted_getIteratee_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['result'])
                        var.put('result', (var.get('lodash').get('iteratee') or var.get('iteratee')))
                        var.put('result', (var.get('baseIteratee') if PyJsStrictEq(var.get('result'),var.get('iteratee')) else var.get('result')))
                        return (var.get('result')(var.get('arguments').get('0'), var.get('arguments').get('1')) if var.get('arguments').get('length') else var.get('result'))
                    PyJsHoisted_getIteratee_.func_name = 'getIteratee'
                    var.put('getIteratee', PyJsHoisted_getIteratee_)
                    @Js
                    def PyJsHoisted_getMapData_(map, key, this, arguments, var=var):
                        var = Scope({'map':map, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['data', 'map', 'key'])
                        var.put('data', var.get('map').get('__data__'))
                        return (var.get('data').get((Js('string') if (var.get('key',throw=False).typeof()==Js('string')) else Js('hash'))) if var.get('isKeyable')(var.get('key')) else var.get('data').get('map'))
                    PyJsHoisted_getMapData_.func_name = 'getMapData'
                    var.put('getMapData', PyJsHoisted_getMapData_)
                    @Js
                    def PyJsHoisted_getMatchData_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'object', 'result', 'key', 'length'])
                        var.put('result', var.get('keys')(var.get('object')))
                        var.put('length', var.get('result').get('length'))
                        while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                            var.put('key', var.get('result').get(var.get('length')))
                            var.put('value', var.get('object').get(var.get('key')))
                            var.get('result').put(var.get('length'), Js([var.get('key'), var.get('value'), var.get('isStrictComparable')(var.get('value'))]))
                        return var.get('result')
                    PyJsHoisted_getMatchData_.func_name = 'getMatchData'
                    var.put('getMatchData', PyJsHoisted_getMatchData_)
                    @Js
                    def PyJsHoisted_getNative_(object, key, this, arguments, var=var):
                        var = Scope({'object':object, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'object', 'value'])
                        var.put('value', var.get('getValue')(var.get('object'), var.get('key')))
                        return (var.get('value') if var.get('baseIsNative')(var.get('value')) else var.get('undefined'))
                    PyJsHoisted_getNative_.func_name = 'getNative'
                    var.put('getNative', PyJsHoisted_getNative_)
                    @Js
                    def PyJsHoisted_getRawTag_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'tag', 'result', 'unmasked', 'isOwn'])
                        var.put('isOwn', var.get('hasOwnProperty').callprop('call', var.get('value'), var.get('symToStringTag')))
                        var.put('tag', var.get('value').get(var.get('symToStringTag')))
                        try:
                            var.get('value').put(var.get('symToStringTag'), var.get('undefined'))
                            var.put('unmasked', Js(True))
                        except PyJsException as PyJsTempException:
                            PyJsHolder_65_4916777 = var.own.get('e')
                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                            try:
                                pass
                            finally:
                                if PyJsHolder_65_4916777 is not None:
                                    var.own['e'] = PyJsHolder_65_4916777
                                else:
                                    del var.own['e']
                                del PyJsHolder_65_4916777
                        var.put('result', var.get('nativeObjectToString').callprop('call', var.get('value')))
                        if var.get('unmasked'):
                            if var.get('isOwn'):
                                var.get('value').put(var.get('symToStringTag'), var.get('tag'))
                            else:
                                var.get('value').delete(var.get('symToStringTag'))
                        return var.get('result')
                    PyJsHoisted_getRawTag_.func_name = 'getRawTag'
                    var.put('getRawTag', PyJsHoisted_getRawTag_)
                    @Js
                    def PyJsHoisted_getView_(start, end, transforms, this, arguments, var=var):
                        var = Scope({'start':start, 'end':end, 'transforms':transforms, 'this':this, 'arguments':arguments}, var)
                        var.registers(['transforms', 'start', 'data', 'end', 'length', 'size', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('transforms').get('length'))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('data', var.get('transforms').get(var.get('index')))
                            var.put('size', var.get('data').get('size'))
                            while 1:
                                SWITCHED = False
                                CONDITION = (var.get('data').get('type'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js('drop')):
                                    SWITCHED = True
                                    var.put('start', var.get('size'), '+')
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js('dropRight')):
                                    SWITCHED = True
                                    var.put('end', var.get('size'), '-')
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js('take')):
                                    SWITCHED = True
                                    var.put('end', var.get('nativeMin')(var.get('end'), (var.get('start')+var.get('size'))))
                                    break
                                if SWITCHED or PyJsStrictEq(CONDITION, Js('takeRight')):
                                    SWITCHED = True
                                    var.put('start', var.get('nativeMax')(var.get('start'), (var.get('end')-var.get('size'))))
                                    break
                                SWITCHED = True
                                break
                        return Js({'start':var.get('start'),'end':var.get('end')})
                    PyJsHoisted_getView_.func_name = 'getView'
                    var.put('getView', PyJsHoisted_getView_)
                    @Js
                    def PyJsHoisted_getWrapDetails_(source, this, arguments, var=var):
                        var = Scope({'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['source', 'match'])
                        var.put('match', var.get('source').callprop('match', var.get('reWrapDetails')))
                        return (var.get('match').get('1').callprop('split', var.get('reSplitDetails')) if var.get('match') else Js([]))
                    PyJsHoisted_getWrapDetails_.func_name = 'getWrapDetails'
                    var.put('getWrapDetails', PyJsHoisted_getWrapDetails_)
                    @Js
                    def PyJsHoisted_hasPath_(object, path, hasFunc, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'hasFunc':hasFunc, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'hasFunc', 'path', 'result', 'key', 'length', 'index'])
                        var.put('path', var.get('castPath')(var.get('path'), var.get('object')))
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('path').get('length'))
                        var.put('result', Js(False))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('key', var.get('toKey')(var.get('path').get(var.get('index'))))
                            if var.put('result', ((var.get('object')!=var.get(u"null")) and var.get('hasFunc')(var.get('object'), var.get('key')))).neg():
                                break
                            var.put('object', var.get('object').get(var.get('key')))
                        if (var.get('result') or (var.put('index',Js(var.get('index').to_number())+Js(1))!=var.get('length'))):
                            return var.get('result')
                        var.put('length', (Js(0.0) if (var.get('object')==var.get(u"null")) else var.get('object').get('length')))
                        return (((var.get('length').neg().neg() and var.get('isLength')(var.get('length'))) and var.get('isIndex')(var.get('key'), var.get('length'))) and (var.get('isArray')(var.get('object')) or var.get('isArguments')(var.get('object'))))
                    PyJsHoisted_hasPath_.func_name = 'hasPath'
                    var.put('hasPath', PyJsHoisted_hasPath_)
                    @Js
                    def PyJsHoisted_initCloneArray_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'length', 'array'])
                        var.put('length', var.get('array').get('length'))
                        var.put('result', var.get('array').get('constructor').create(var.get('length')))
                        if ((var.get('length') and (var.get('array').get('0').typeof()==Js('string'))) and var.get('hasOwnProperty').callprop('call', var.get('array'), Js('index'))):
                            var.get('result').put('index', var.get('array').get('index'))
                            var.get('result').put('input', var.get('array').get('input'))
                        return var.get('result')
                    PyJsHoisted_initCloneArray_.func_name = 'initCloneArray'
                    var.put('initCloneArray', PyJsHoisted_initCloneArray_)
                    @Js
                    def PyJsHoisted_initCloneObject_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        return (var.get('baseCreate')(var.get('getPrototype')(var.get('object'))) if ((var.get('object').get('constructor').typeof()==Js('function')) and var.get('isPrototype')(var.get('object')).neg()) else Js({}))
                    PyJsHoisted_initCloneObject_.func_name = 'initCloneObject'
                    var.put('initCloneObject', PyJsHoisted_initCloneObject_)
                    @Js
                    def PyJsHoisted_initCloneByTag_(object, tag, isDeep, this, arguments, var=var):
                        var = Scope({'object':object, 'tag':tag, 'isDeep':isDeep, 'this':this, 'arguments':arguments}, var)
                        var.registers(['isDeep', 'Ctor', 'tag', 'object'])
                        var.put('Ctor', var.get('object').get('constructor'))
                        while 1:
                            SWITCHED = False
                            CONDITION = (var.get('tag'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('arrayBufferTag')):
                                SWITCHED = True
                                return var.get('cloneArrayBuffer')(var.get('object'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('boolTag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('dateTag')):
                                SWITCHED = True
                                return var.get('Ctor').create((+var.get('object')))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('dataViewTag')):
                                SWITCHED = True
                                return var.get('cloneDataView')(var.get('object'), var.get('isDeep'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('float32Tag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('float64Tag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('int8Tag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('int16Tag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('int32Tag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('uint8Tag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('uint8ClampedTag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('uint16Tag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('uint32Tag')):
                                SWITCHED = True
                                return var.get('cloneTypedArray')(var.get('object'), var.get('isDeep'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('mapTag')):
                                SWITCHED = True
                                return var.get('Ctor').create()
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('numberTag')):
                                SWITCHED = True
                                pass
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('stringTag')):
                                SWITCHED = True
                                return var.get('Ctor').create(var.get('object'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('regexpTag')):
                                SWITCHED = True
                                return var.get('cloneRegExp')(var.get('object'))
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('setTag')):
                                SWITCHED = True
                                return var.get('Ctor').create()
                            if SWITCHED or PyJsStrictEq(CONDITION, var.get('symbolTag')):
                                SWITCHED = True
                                return var.get('cloneSymbol')(var.get('object'))
                            SWITCHED = True
                            break
                    PyJsHoisted_initCloneByTag_.func_name = 'initCloneByTag'
                    var.put('initCloneByTag', PyJsHoisted_initCloneByTag_)
                    @Js
                    def PyJsHoisted_insertWrapDetails_(source, details, this, arguments, var=var):
                        var = Scope({'source':source, 'details':details, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'details', 'source', 'lastIndex'])
                        var.put('length', var.get('details').get('length'))
                        if var.get('length').neg():
                            return var.get('source')
                        var.put('lastIndex', (var.get('length')-Js(1.0)))
                        var.get('details').put(var.get('lastIndex'), ((Js('& ') if (var.get('length')>Js(1.0)) else Js(''))+var.get('details').get(var.get('lastIndex'))))
                        var.put('details', var.get('details').callprop('join', (Js(', ') if (var.get('length')>Js(2.0)) else Js(' '))))
                        return var.get('source').callprop('replace', var.get('reWrapComment'), ((Js('{\n/* [wrapped with ')+var.get('details'))+Js('] */\n')))
                    PyJsHoisted_insertWrapDetails_.func_name = 'insertWrapDetails'
                    var.put('insertWrapDetails', PyJsHoisted_insertWrapDetails_)
                    @Js
                    def PyJsHoisted_isFlattenable_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('isArray')(var.get('value')) or var.get('isArguments')(var.get('value'))) or ((var.get('spreadableSymbol') and var.get('value')) and var.get('value').get(var.get('spreadableSymbol'))).neg().neg())
                    PyJsHoisted_isFlattenable_.func_name = 'isFlattenable'
                    var.put('isFlattenable', PyJsHoisted_isFlattenable_)
                    @Js
                    def PyJsHoisted_isIndex_(value, length, this, arguments, var=var):
                        var = Scope({'value':value, 'length':length, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'type', 'value'])
                        var.put('type', (Js('undefined') if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value'))))
                        var.put('length', (var.get('MAX_SAFE_INTEGER') if (var.get('length')==var.get(u"null")) else var.get('length')))
                        return ((((var.get('length').neg().neg() and ((var.get('type')==Js('number')) or ((var.get('type')!=Js('symbol')) and var.get('reIsUint').callprop('test', var.get('value'))))) and (var.get('value')>(-Js(1.0)))) and ((var.get('value')%Js(1.0))==Js(0.0))) and (var.get('value')<var.get('length')))
                    PyJsHoisted_isIndex_.func_name = 'isIndex'
                    var.put('isIndex', PyJsHoisted_isIndex_)
                    @Js
                    def PyJsHoisted_isIterateeCall_(value, index, object, this, arguments, var=var):
                        var = Scope({'value':value, 'index':index, 'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'type', 'index', 'value'])
                        if var.get('isObject')(var.get('object')).neg():
                            return Js(False)
                        var.put('type', (Js('undefined') if PyJsStrictEq(var.get('index',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('index'))))
                        if ((var.get('isArrayLike')(var.get('object')) and var.get('isIndex')(var.get('index'), var.get('object').get('length'))) if (var.get('type')==Js('number')) else ((var.get('type')==Js('string')) and var.get('object').contains(var.get('index')))):
                            return var.get('eq')(var.get('object').get(var.get('index')), var.get('value'))
                        return Js(False)
                    PyJsHoisted_isIterateeCall_.func_name = 'isIterateeCall'
                    var.put('isIterateeCall', PyJsHoisted_isIterateeCall_)
                    @Js
                    def PyJsHoisted_isKey_(value, object, this, arguments, var=var):
                        var = Scope({'value':value, 'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'type', 'value'])
                        if var.get('isArray')(var.get('value')):
                            return Js(False)
                        var.put('type', (Js('undefined') if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value'))))
                        if (((((var.get('type')==Js('number')) or (var.get('type')==Js('symbol'))) or (var.get('type')==Js('boolean'))) or (var.get('value')==var.get(u"null"))) or var.get('isSymbol')(var.get('value'))):
                            return Js(True)
                        return ((var.get('reIsPlainProp').callprop('test', var.get('value')) or var.get('reIsDeepProp').callprop('test', var.get('value')).neg()) or ((var.get('object')!=var.get(u"null")) and var.get('Object')(var.get('object')).contains(var.get('value'))))
                    PyJsHoisted_isKey_.func_name = 'isKey'
                    var.put('isKey', PyJsHoisted_isKey_)
                    @Js
                    def PyJsHoisted_isKeyable_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['type', 'value'])
                        var.put('type', (Js('undefined') if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value'))))
                        return (PyJsStrictNeq(var.get('value'),Js('__proto__')) if ((((var.get('type')==Js('string')) or (var.get('type')==Js('number'))) or (var.get('type')==Js('symbol'))) or (var.get('type')==Js('boolean'))) else PyJsStrictEq(var.get('value'),var.get(u"null")))
                    PyJsHoisted_isKeyable_.func_name = 'isKeyable'
                    var.put('isKeyable', PyJsHoisted_isKeyable_)
                    @Js
                    def PyJsHoisted_isLaziable_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'funcName', 'other', 'data'])
                        var.put('funcName', var.get('getFuncName')(var.get('func')))
                        var.put('other', var.get('lodash').get(var.get('funcName')))
                        if ((var.get('other',throw=False).typeof()!=Js('function')) or var.get('LazyWrapper').get('prototype').contains(var.get('funcName')).neg()):
                            return Js(False)
                        if PyJsStrictEq(var.get('func'),var.get('other')):
                            return Js(True)
                        var.put('data', var.get('getData')(var.get('other')))
                        return (var.get('data').neg().neg() and PyJsStrictEq(var.get('func'),var.get('data').get('0')))
                    PyJsHoisted_isLaziable_.func_name = 'isLaziable'
                    var.put('isLaziable', PyJsHoisted_isLaziable_)
                    @Js
                    def PyJsHoisted_isMasked_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func'])
                        return (var.get('maskSrcKey').neg().neg() and var.get('func').contains(var.get('maskSrcKey')))
                    PyJsHoisted_isMasked_.func_name = 'isMasked'
                    var.put('isMasked', PyJsHoisted_isMasked_)
                    @Js
                    def PyJsHoisted_isPrototype_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['Ctor', 'value', 'proto'])
                        var.put('Ctor', (var.get('value') and var.get('value').get('constructor')))
                        var.put('proto', (((var.get('Ctor',throw=False).typeof()==Js('function')) and var.get('Ctor').get('prototype')) or var.get('objectProto')))
                        return PyJsStrictEq(var.get('value'),var.get('proto'))
                    PyJsHoisted_isPrototype_.func_name = 'isPrototype'
                    var.put('isPrototype', PyJsHoisted_isPrototype_)
                    @Js
                    def PyJsHoisted_isStrictComparable_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (PyJsStrictEq(var.get('value'),var.get('value')) and var.get('isObject')(var.get('value')).neg())
                    PyJsHoisted_isStrictComparable_.func_name = 'isStrictComparable'
                    var.put('isStrictComparable', PyJsHoisted_isStrictComparable_)
                    @Js
                    def PyJsHoisted_matchesStrictComparable_(key, srcValue, this, arguments, var=var):
                        var = Scope({'key':key, 'srcValue':srcValue, 'this':this, 'arguments':arguments}, var)
                        var.registers(['srcValue', 'key'])
                        @Js
                        def PyJs_anonymous_178_(object, this, arguments, var=var):
                            var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object'])
                            if (var.get('object')==var.get(u"null")):
                                return Js(False)
                            return (PyJsStrictEq(var.get('object').get(var.get('key')),var.get('srcValue')) and (PyJsStrictNeq(var.get('srcValue'),var.get('undefined')) or var.get('Object')(var.get('object')).contains(var.get('key'))))
                        PyJs_anonymous_178_._set_name('anonymous')
                        return PyJs_anonymous_178_
                    PyJsHoisted_matchesStrictComparable_.func_name = 'matchesStrictComparable'
                    var.put('matchesStrictComparable', PyJsHoisted_matchesStrictComparable_)
                    @Js
                    def PyJsHoisted_memoizeCapped_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'result', 'cache'])
                        @Js
                        def PyJs_anonymous_179_(key, this, arguments, var=var):
                            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key'])
                            if PyJsStrictEq(var.get('cache').get('size'),var.get('MAX_MEMOIZE_SIZE')):
                                var.get('cache').callprop('clear')
                            return var.get('key')
                        PyJs_anonymous_179_._set_name('anonymous')
                        var.put('result', var.get('memoize')(var.get('func'), PyJs_anonymous_179_))
                        var.put('cache', var.get('result').get('cache'))
                        return var.get('result')
                    PyJsHoisted_memoizeCapped_.func_name = 'memoizeCapped'
                    var.put('memoizeCapped', PyJsHoisted_memoizeCapped_)
                    @Js
                    def PyJsHoisted_mergeData_(data, source, this, arguments, var=var):
                        var = Scope({'data':data, 'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['isCommon', 'newBitmask', 'value', 'partials', 'isCombo', 'data', 'bitmask', 'srcBitmask', 'source'])
                        var.put('bitmask', var.get('data').get('1'))
                        var.put('srcBitmask', var.get('source').get('1'))
                        var.put('newBitmask', (var.get('bitmask')|var.get('srcBitmask')))
                        var.put('isCommon', (var.get('newBitmask')<((var.get('WRAP_BIND_FLAG')|var.get('WRAP_BIND_KEY_FLAG'))|var.get('WRAP_ARY_FLAG'))))
                        def PyJs_LONG_180_(var=var):
                            return ((((var.get('srcBitmask')==var.get('WRAP_ARY_FLAG')) and (var.get('bitmask')==var.get('WRAP_CURRY_FLAG'))) or (((var.get('srcBitmask')==var.get('WRAP_ARY_FLAG')) and (var.get('bitmask')==var.get('WRAP_REARG_FLAG'))) and (var.get('data').get('7').get('length')<=var.get('source').get('8')))) or (((var.get('srcBitmask')==(var.get('WRAP_ARY_FLAG')|var.get('WRAP_REARG_FLAG'))) and (var.get('source').get('7').get('length')<=var.get('source').get('8'))) and (var.get('bitmask')==var.get('WRAP_CURRY_FLAG'))))
                        var.put('isCombo', PyJs_LONG_180_())
                        if (var.get('isCommon') or var.get('isCombo')).neg():
                            return var.get('data')
                        if (var.get('srcBitmask')&var.get('WRAP_BIND_FLAG')):
                            var.get('data').put('2', var.get('source').get('2'))
                            var.put('newBitmask', (Js(0.0) if (var.get('bitmask')&var.get('WRAP_BIND_FLAG')) else var.get('WRAP_CURRY_BOUND_FLAG')), '|')
                        var.put('value', var.get('source').get('3'))
                        if var.get('value'):
                            var.put('partials', var.get('data').get('3'))
                            var.get('data').put('3', (var.get('composeArgs')(var.get('partials'), var.get('value'), var.get('source').get('4')) if var.get('partials') else var.get('value')))
                            var.get('data').put('4', (var.get('replaceHolders')(var.get('data').get('3'), var.get('PLACEHOLDER')) if var.get('partials') else var.get('source').get('4')))
                        var.put('value', var.get('source').get('5'))
                        if var.get('value'):
                            var.put('partials', var.get('data').get('5'))
                            var.get('data').put('5', (var.get('composeArgsRight')(var.get('partials'), var.get('value'), var.get('source').get('6')) if var.get('partials') else var.get('value')))
                            var.get('data').put('6', (var.get('replaceHolders')(var.get('data').get('5'), var.get('PLACEHOLDER')) if var.get('partials') else var.get('source').get('6')))
                        var.put('value', var.get('source').get('7'))
                        if var.get('value'):
                            var.get('data').put('7', var.get('value'))
                        if (var.get('srcBitmask')&var.get('WRAP_ARY_FLAG')):
                            var.get('data').put('8', (var.get('source').get('8') if (var.get('data').get('8')==var.get(u"null")) else var.get('nativeMin')(var.get('data').get('8'), var.get('source').get('8'))))
                        if (var.get('data').get('9')==var.get(u"null")):
                            var.get('data').put('9', var.get('source').get('9'))
                        var.get('data').put('0', var.get('source').get('0'))
                        var.get('data').put('1', var.get('newBitmask'))
                        return var.get('data')
                    PyJsHoisted_mergeData_.func_name = 'mergeData'
                    var.put('mergeData', PyJsHoisted_mergeData_)
                    @Js
                    def PyJsHoisted_nativeKeysIn_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'result', 'key'])
                        var.put('result', Js([]))
                        if (var.get('object')!=var.get(u"null")):
                            for PyJsTemp in var.get('Object')(var.get('object')):
                                var.put('key', PyJsTemp)
                                var.get('result').callprop('push', var.get('key'))
                        return var.get('result')
                    PyJsHoisted_nativeKeysIn_.func_name = 'nativeKeysIn'
                    var.put('nativeKeysIn', PyJsHoisted_nativeKeysIn_)
                    @Js
                    def PyJsHoisted_objectToString_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return var.get('nativeObjectToString').callprop('call', var.get('value'))
                    PyJsHoisted_objectToString_.func_name = 'objectToString'
                    var.put('objectToString', PyJsHoisted_objectToString_)
                    @Js
                    def PyJsHoisted_overRest_(func, start, transform, this, arguments, var=var):
                        var = Scope({'func':func, 'start':start, 'transform':transform, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'start', 'transform'])
                        var.put('start', var.get('nativeMax')(((var.get('func').get('length')-Js(1.0)) if PyJsStrictEq(var.get('start'),var.get('undefined')) else var.get('start')), Js(0.0)))
                        @Js
                        def PyJs_anonymous_181_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['otherArgs', 'args', 'array', 'length', 'index'])
                            var.put('args', var.get('arguments'))
                            var.put('index', (-Js(1.0)))
                            var.put('length', var.get('nativeMax')((var.get('args').get('length')-var.get('start')), Js(0.0)))
                            var.put('array', var.get('Array')(var.get('length')))
                            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                                var.get('array').put(var.get('index'), var.get('args').get((var.get('start')+var.get('index'))))
                            var.put('index', (-Js(1.0)))
                            var.put('otherArgs', var.get('Array')((var.get('start')+Js(1.0))))
                            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('start')):
                                var.get('otherArgs').put(var.get('index'), var.get('args').get(var.get('index')))
                            var.get('otherArgs').put(var.get('start'), var.get('transform')(var.get('array')))
                            return var.get('apply')(var.get('func'), var.get(u"this"), var.get('otherArgs'))
                        PyJs_anonymous_181_._set_name('anonymous')
                        return PyJs_anonymous_181_
                    PyJsHoisted_overRest_.func_name = 'overRest'
                    var.put('overRest', PyJsHoisted_overRest_)
                    @Js
                    def PyJsHoisted_parent_(object, path, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'object'])
                        return (var.get('object') if (var.get('path').get('length')<Js(2.0)) else var.get('baseGet')(var.get('object'), var.get('baseSlice')(var.get('path'), Js(0.0), (-Js(1.0)))))
                    PyJsHoisted_parent_.func_name = 'parent'
                    var.put('parent', PyJsHoisted_parent_)
                    @Js
                    def PyJsHoisted_reorder_(array, indexes, this, arguments, var=var):
                        var = Scope({'array':array, 'indexes':indexes, 'this':this, 'arguments':arguments}, var)
                        var.registers(['oldArray', 'array', 'indexes', 'arrLength', 'length', 'index'])
                        var.put('arrLength', var.get('array').get('length'))
                        var.put('length', var.get('nativeMin')(var.get('indexes').get('length'), var.get('arrLength')))
                        var.put('oldArray', var.get('copyArray')(var.get('array')))
                        while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                            var.put('index', var.get('indexes').get(var.get('length')))
                            var.get('array').put(var.get('length'), (var.get('oldArray').get(var.get('index')) if var.get('isIndex')(var.get('index'), var.get('arrLength')) else var.get('undefined')))
                        return var.get('array')
                    PyJsHoisted_reorder_.func_name = 'reorder'
                    var.put('reorder', PyJsHoisted_reorder_)
                    @Js
                    def PyJsHoisted_safeGet_(object, key, this, arguments, var=var):
                        var = Scope({'object':object, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'key'])
                        if (var.get('key')==Js('__proto__')):
                            return var.get('undefined')
                        return var.get('object').get(var.get('key'))
                    PyJsHoisted_safeGet_.func_name = 'safeGet'
                    var.put('safeGet', PyJsHoisted_safeGet_)
                    @Js
                    def PyJsHoisted_setWrapToString_(wrapper, reference, bitmask, this, arguments, var=var):
                        var = Scope({'wrapper':wrapper, 'reference':reference, 'bitmask':bitmask, 'this':this, 'arguments':arguments}, var)
                        var.registers(['wrapper', 'reference', 'source', 'bitmask'])
                        var.put('source', (var.get('reference')+Js('')))
                        return var.get('setToString')(var.get('wrapper'), var.get('insertWrapDetails')(var.get('source'), var.get('updateWrapDetails')(var.get('getWrapDetails')(var.get('source')), var.get('bitmask'))))
                    PyJsHoisted_setWrapToString_.func_name = 'setWrapToString'
                    var.put('setWrapToString', PyJsHoisted_setWrapToString_)
                    @Js
                    def PyJsHoisted_shortOut_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['lastCalled', 'count', 'func'])
                        var.put('count', Js(0.0))
                        var.put('lastCalled', Js(0.0))
                        @Js
                        def PyJs_anonymous_183_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['remaining', 'stamp'])
                            var.put('stamp', var.get('nativeNow')())
                            var.put('remaining', (var.get('HOT_SPAN')-(var.get('stamp')-var.get('lastCalled'))))
                            var.put('lastCalled', var.get('stamp'))
                            if (var.get('remaining')>Js(0.0)):
                                if (var.put('count',Js(var.get('count').to_number())+Js(1))>=var.get('HOT_COUNT')):
                                    return var.get('arguments').get('0')
                            else:
                                var.put('count', Js(0.0))
                            return var.get('func').callprop('apply', var.get('undefined'), var.get('arguments'))
                        PyJs_anonymous_183_._set_name('anonymous')
                        return PyJs_anonymous_183_
                    PyJsHoisted_shortOut_.func_name = 'shortOut'
                    var.put('shortOut', PyJsHoisted_shortOut_)
                    @Js
                    def PyJsHoisted_shuffleSelf_(array, size, this, arguments, var=var):
                        var = Scope({'array':array, 'size':size, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'array', 'rand', 'lastIndex', 'length', 'size', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('array').get('length'))
                        var.put('lastIndex', (var.get('length')-Js(1.0)))
                        var.put('size', (var.get('length') if PyJsStrictEq(var.get('size'),var.get('undefined')) else var.get('size')))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('size')):
                            var.put('rand', var.get('baseRandom')(var.get('index'), var.get('lastIndex')))
                            var.put('value', var.get('array').get(var.get('rand')))
                            var.get('array').put(var.get('rand'), var.get('array').get(var.get('index')))
                            var.get('array').put(var.get('index'), var.get('value'))
                        var.get('array').put('length', var.get('size'))
                        return var.get('array')
                    PyJsHoisted_shuffleSelf_.func_name = 'shuffleSelf'
                    var.put('shuffleSelf', PyJsHoisted_shuffleSelf_)
                    @Js
                    def PyJsHoisted_toKey_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'value'])
                        if ((var.get('value',throw=False).typeof()==Js('string')) or var.get('isSymbol')(var.get('value'))):
                            return var.get('value')
                        var.put('result', (var.get('value')+Js('')))
                        return (Js('-0') if ((var.get('result')==Js('0')) and ((Js(1.0)/var.get('value'))==(-var.get('INFINITY')))) else var.get('result'))
                    PyJsHoisted_toKey_.func_name = 'toKey'
                    var.put('toKey', PyJsHoisted_toKey_)
                    @Js
                    def PyJsHoisted_toSource_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func'])
                        if (var.get('func')!=var.get(u"null")):
                            try:
                                return var.get('funcToString').callprop('call', var.get('func'))
                            except PyJsException as PyJsTempException:
                                PyJsHolder_65_59085564 = var.own.get('e')
                                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                try:
                                    pass
                                finally:
                                    if PyJsHolder_65_59085564 is not None:
                                        var.own['e'] = PyJsHolder_65_59085564
                                    else:
                                        del var.own['e']
                                    del PyJsHolder_65_59085564
                            try:
                                return (var.get('func')+Js(''))
                            except PyJsException as PyJsTempException:
                                PyJsHolder_65_14550287 = var.own.get('e')
                                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                                try:
                                    pass
                                finally:
                                    if PyJsHolder_65_14550287 is not None:
                                        var.own['e'] = PyJsHolder_65_14550287
                                    else:
                                        del var.own['e']
                                    del PyJsHolder_65_14550287
                        return Js('')
                    PyJsHoisted_toSource_.func_name = 'toSource'
                    var.put('toSource', PyJsHoisted_toSource_)
                    @Js
                    def PyJsHoisted_updateWrapDetails_(details, bitmask, this, arguments, var=var):
                        var = Scope({'details':details, 'bitmask':bitmask, 'this':this, 'arguments':arguments}, var)
                        var.registers(['details', 'bitmask'])
                        @Js
                        def PyJs_anonymous_186_(pair, this, arguments, var=var):
                            var = Scope({'pair':pair, 'this':this, 'arguments':arguments}, var)
                            var.registers(['pair', 'value'])
                            var.put('value', (Js('_.')+var.get('pair').get('0')))
                            if ((var.get('bitmask')&var.get('pair').get('1')) and var.get('arrayIncludes')(var.get('details'), var.get('value')).neg()):
                                var.get('details').callprop('push', var.get('value'))
                        PyJs_anonymous_186_._set_name('anonymous')
                        var.get('arrayEach')(var.get('wrapFlags'), PyJs_anonymous_186_)
                        return var.get('details').callprop('sort')
                    PyJsHoisted_updateWrapDetails_.func_name = 'updateWrapDetails'
                    var.put('updateWrapDetails', PyJsHoisted_updateWrapDetails_)
                    @Js
                    def PyJsHoisted_wrapperClone_(wrapper, this, arguments, var=var):
                        var = Scope({'wrapper':wrapper, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'wrapper'])
                        if var.get('wrapper').instanceof(var.get('LazyWrapper')):
                            return var.get('wrapper').callprop('clone')
                        var.put('result', var.get('LodashWrapper').create(var.get('wrapper').get('__wrapped__'), var.get('wrapper').get('__chain__')))
                        var.get('result').put('__actions__', var.get('copyArray')(var.get('wrapper').get('__actions__')))
                        var.get('result').put('__index__', var.get('wrapper').get('__index__'))
                        var.get('result').put('__values__', var.get('wrapper').get('__values__'))
                        return var.get('result')
                    PyJsHoisted_wrapperClone_.func_name = 'wrapperClone'
                    var.put('wrapperClone', PyJsHoisted_wrapperClone_)
                    @Js
                    def PyJsHoisted_chunk_(array, size, guard, this, arguments, var=var):
                        var = Scope({'array':array, 'size':size, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['guard', 'array', 'result', 'resIndex', 'length', 'size', 'index'])
                        if (var.get('isIterateeCall')(var.get('array'), var.get('size'), var.get('guard')) if var.get('guard') else PyJsStrictEq(var.get('size'),var.get('undefined'))):
                            var.put('size', Js(1.0))
                        else:
                            var.put('size', var.get('nativeMax')(var.get('toInteger')(var.get('size')), Js(0.0)))
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if (var.get('length').neg() or (var.get('size')<Js(1.0))):
                            return Js([])
                        var.put('index', Js(0.0))
                        var.put('resIndex', Js(0.0))
                        var.put('result', var.get('Array')(var.get('nativeCeil')((var.get('length')/var.get('size')))))
                        while (var.get('index')<var.get('length')):
                            var.get('result').put((var.put('resIndex',Js(var.get('resIndex').to_number())+Js(1))-Js(1)), var.get('baseSlice')(var.get('array'), var.get('index'), var.put('index', var.get('size'), '+')))
                        return var.get('result')
                    PyJsHoisted_chunk_.func_name = 'chunk'
                    var.put('chunk', PyJsHoisted_chunk_)
                    @Js
                    def PyJsHoisted_compact_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'array', 'result', 'resIndex', 'length', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        var.put('resIndex', Js(0.0))
                        var.put('result', Js([]))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('value', var.get('array').get(var.get('index')))
                            if var.get('value'):
                                var.get('result').put((var.put('resIndex',Js(var.get('resIndex').to_number())+Js(1))-Js(1)), var.get('value'))
                        return var.get('result')
                    PyJsHoisted_compact_.func_name = 'compact'
                    var.put('compact', PyJsHoisted_compact_)
                    @Js
                    def PyJsHoisted_concat_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'args', 'array', 'index'])
                        var.put('length', var.get('arguments').get('length'))
                        if var.get('length').neg():
                            return Js([])
                        var.put('args', var.get('Array')((var.get('length')-Js(1.0))))
                        var.put('array', var.get('arguments').get('0'))
                        var.put('index', var.get('length'))
                        while (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)):
                            var.get('args').put((var.get('index')-Js(1.0)), var.get('arguments').get(var.get('index')))
                        return var.get('arrayPush')((var.get('copyArray')(var.get('array')) if var.get('isArray')(var.get('array')) else Js([var.get('array')])), var.get('baseFlatten')(var.get('args'), Js(1.0)))
                    PyJsHoisted_concat_.func_name = 'concat'
                    var.put('concat', PyJsHoisted_concat_)
                    @Js
                    def PyJsHoisted_drop_(array, n, guard, this, arguments, var=var):
                        var = Scope({'array':array, 'n':n, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'n', 'array', 'guard'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length').neg():
                            return Js([])
                        var.put('n', (Js(1.0) if (var.get('guard') or PyJsStrictEq(var.get('n'),var.get('undefined'))) else var.get('toInteger')(var.get('n'))))
                        return var.get('baseSlice')(var.get('array'), (Js(0.0) if (var.get('n')<Js(0.0)) else var.get('n')), var.get('length'))
                    PyJsHoisted_drop_.func_name = 'drop'
                    var.put('drop', PyJsHoisted_drop_)
                    @Js
                    def PyJsHoisted_dropRight_(array, n, guard, this, arguments, var=var):
                        var = Scope({'array':array, 'n':n, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'n', 'array', 'guard'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length').neg():
                            return Js([])
                        var.put('n', (Js(1.0) if (var.get('guard') or PyJsStrictEq(var.get('n'),var.get('undefined'))) else var.get('toInteger')(var.get('n'))))
                        var.put('n', (var.get('length')-var.get('n')))
                        return var.get('baseSlice')(var.get('array'), Js(0.0), (Js(0.0) if (var.get('n')<Js(0.0)) else var.get('n')))
                    PyJsHoisted_dropRight_.func_name = 'dropRight'
                    var.put('dropRight', PyJsHoisted_dropRight_)
                    @Js
                    def PyJsHoisted_dropRightWhile_(array, predicate, this, arguments, var=var):
                        var = Scope({'array':array, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate', 'array'])
                        return (var.get('baseWhile')(var.get('array'), var.get('getIteratee')(var.get('predicate'), Js(3.0)), Js(True), Js(True)) if (var.get('array') and var.get('array').get('length')) else Js([]))
                    PyJsHoisted_dropRightWhile_.func_name = 'dropRightWhile'
                    var.put('dropRightWhile', PyJsHoisted_dropRightWhile_)
                    @Js
                    def PyJsHoisted_dropWhile_(array, predicate, this, arguments, var=var):
                        var = Scope({'array':array, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate', 'array'])
                        return (var.get('baseWhile')(var.get('array'), var.get('getIteratee')(var.get('predicate'), Js(3.0)), Js(True)) if (var.get('array') and var.get('array').get('length')) else Js([]))
                    PyJsHoisted_dropWhile_.func_name = 'dropWhile'
                    var.put('dropWhile', PyJsHoisted_dropWhile_)
                    @Js
                    def PyJsHoisted_fill_(array, value, start, end, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'array', 'start', 'end', 'length'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length').neg():
                            return Js([])
                        if ((var.get('start') and (var.get('start',throw=False).typeof()!=Js('number'))) and var.get('isIterateeCall')(var.get('array'), var.get('value'), var.get('start'))):
                            var.put('start', Js(0.0))
                            var.put('end', var.get('length'))
                        return var.get('baseFill')(var.get('array'), var.get('value'), var.get('start'), var.get('end'))
                    PyJsHoisted_fill_.func_name = 'fill'
                    var.put('fill', PyJsHoisted_fill_)
                    @Js
                    def PyJsHoisted_findIndex_(array, predicate, fromIndex, this, arguments, var=var):
                        var = Scope({'array':array, 'predicate':predicate, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'predicate', 'fromIndex', 'length', 'index'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length').neg():
                            return (-Js(1.0))
                        var.put('index', (Js(0.0) if (var.get('fromIndex')==var.get(u"null")) else var.get('toInteger')(var.get('fromIndex'))))
                        if (var.get('index')<Js(0.0)):
                            var.put('index', var.get('nativeMax')((var.get('length')+var.get('index')), Js(0.0)))
                        return var.get('baseFindIndex')(var.get('array'), var.get('getIteratee')(var.get('predicate'), Js(3.0)), var.get('index'))
                    PyJsHoisted_findIndex_.func_name = 'findIndex'
                    var.put('findIndex', PyJsHoisted_findIndex_)
                    @Js
                    def PyJsHoisted_findLastIndex_(array, predicate, fromIndex, this, arguments, var=var):
                        var = Scope({'array':array, 'predicate':predicate, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'predicate', 'fromIndex', 'length', 'index'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length').neg():
                            return (-Js(1.0))
                        var.put('index', (var.get('length')-Js(1.0)))
                        if PyJsStrictNeq(var.get('fromIndex'),var.get('undefined')):
                            var.put('index', var.get('toInteger')(var.get('fromIndex')))
                            var.put('index', (var.get('nativeMax')((var.get('length')+var.get('index')), Js(0.0)) if (var.get('fromIndex')<Js(0.0)) else var.get('nativeMin')(var.get('index'), (var.get('length')-Js(1.0)))))
                        return var.get('baseFindIndex')(var.get('array'), var.get('getIteratee')(var.get('predicate'), Js(3.0)), var.get('index'), Js(True))
                    PyJsHoisted_findLastIndex_.func_name = 'findLastIndex'
                    var.put('findLastIndex', PyJsHoisted_findLastIndex_)
                    @Js
                    def PyJsHoisted_flatten_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'array'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        return (var.get('baseFlatten')(var.get('array'), Js(1.0)) if var.get('length') else Js([]))
                    PyJsHoisted_flatten_.func_name = 'flatten'
                    var.put('flatten', PyJsHoisted_flatten_)
                    @Js
                    def PyJsHoisted_flattenDeep_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'array'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        return (var.get('baseFlatten')(var.get('array'), var.get('INFINITY')) if var.get('length') else Js([]))
                    PyJsHoisted_flattenDeep_.func_name = 'flattenDeep'
                    var.put('flattenDeep', PyJsHoisted_flattenDeep_)
                    @Js
                    def PyJsHoisted_flattenDepth_(array, depth, this, arguments, var=var):
                        var = Scope({'array':array, 'depth':depth, 'this':this, 'arguments':arguments}, var)
                        var.registers(['depth', 'length', 'array'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length').neg():
                            return Js([])
                        var.put('depth', (Js(1.0) if PyJsStrictEq(var.get('depth'),var.get('undefined')) else var.get('toInteger')(var.get('depth'))))
                        return var.get('baseFlatten')(var.get('array'), var.get('depth'))
                    PyJsHoisted_flattenDepth_.func_name = 'flattenDepth'
                    var.put('flattenDepth', PyJsHoisted_flattenDepth_)
                    @Js
                    def PyJsHoisted_fromPairs_(pairs, this, arguments, var=var):
                        var = Scope({'pairs':pairs, 'this':this, 'arguments':arguments}, var)
                        var.registers(['pair', 'result', 'length', 'pairs', 'index'])
                        var.put('index', (-Js(1.0)))
                        var.put('length', (Js(0.0) if (var.get('pairs')==var.get(u"null")) else var.get('pairs').get('length')))
                        var.put('result', Js({}))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('pair', var.get('pairs').get(var.get('index')))
                            var.get('result').put(var.get('pair').get('0'), var.get('pair').get('1'))
                        return var.get('result')
                    PyJsHoisted_fromPairs_.func_name = 'fromPairs'
                    var.put('fromPairs', PyJsHoisted_fromPairs_)
                    @Js
                    def PyJsHoisted_head_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array'])
                        return (var.get('array').get('0') if (var.get('array') and var.get('array').get('length')) else var.get('undefined'))
                    PyJsHoisted_head_.func_name = 'head'
                    var.put('head', PyJsHoisted_head_)
                    @Js
                    def PyJsHoisted_indexOf_(array, value, fromIndex, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'array', 'fromIndex', 'length', 'index'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length').neg():
                            return (-Js(1.0))
                        var.put('index', (Js(0.0) if (var.get('fromIndex')==var.get(u"null")) else var.get('toInteger')(var.get('fromIndex'))))
                        if (var.get('index')<Js(0.0)):
                            var.put('index', var.get('nativeMax')((var.get('length')+var.get('index')), Js(0.0)))
                        return var.get('baseIndexOf')(var.get('array'), var.get('value'), var.get('index'))
                    PyJsHoisted_indexOf_.func_name = 'indexOf'
                    var.put('indexOf', PyJsHoisted_indexOf_)
                    @Js
                    def PyJsHoisted_initial_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'array'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        return (var.get('baseSlice')(var.get('array'), Js(0.0), (-Js(1.0))) if var.get('length') else Js([]))
                    PyJsHoisted_initial_.func_name = 'initial'
                    var.put('initial', PyJsHoisted_initial_)
                    @Js
                    def PyJsHoisted_join_(array, separator, this, arguments, var=var):
                        var = Scope({'array':array, 'separator':separator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['separator', 'array'])
                        return (Js('') if (var.get('array')==var.get(u"null")) else var.get('nativeJoin').callprop('call', var.get('array'), var.get('separator')))
                    PyJsHoisted_join_.func_name = 'join'
                    var.put('join', PyJsHoisted_join_)
                    @Js
                    def PyJsHoisted_last_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'array'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        return (var.get('array').get((var.get('length')-Js(1.0))) if var.get('length') else var.get('undefined'))
                    PyJsHoisted_last_.func_name = 'last'
                    var.put('last', PyJsHoisted_last_)
                    @Js
                    def PyJsHoisted_lastIndexOf_(array, value, fromIndex, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'array', 'fromIndex', 'length', 'index'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length').neg():
                            return (-Js(1.0))
                        var.put('index', var.get('length'))
                        if PyJsStrictNeq(var.get('fromIndex'),var.get('undefined')):
                            var.put('index', var.get('toInteger')(var.get('fromIndex')))
                            var.put('index', (var.get('nativeMax')((var.get('length')+var.get('index')), Js(0.0)) if (var.get('index')<Js(0.0)) else var.get('nativeMin')(var.get('index'), (var.get('length')-Js(1.0)))))
                        return (var.get('strictLastIndexOf')(var.get('array'), var.get('value'), var.get('index')) if PyJsStrictEq(var.get('value'),var.get('value')) else var.get('baseFindIndex')(var.get('array'), var.get('baseIsNaN'), var.get('index'), Js(True)))
                    PyJsHoisted_lastIndexOf_.func_name = 'lastIndexOf'
                    var.put('lastIndexOf', PyJsHoisted_lastIndexOf_)
                    @Js
                    def PyJsHoisted_nth_(array, n, this, arguments, var=var):
                        var = Scope({'array':array, 'n':n, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'array'])
                        return (var.get('baseNth')(var.get('array'), var.get('toInteger')(var.get('n'))) if (var.get('array') and var.get('array').get('length')) else var.get('undefined'))
                    PyJsHoisted_nth_.func_name = 'nth'
                    var.put('nth', PyJsHoisted_nth_)
                    @Js
                    def PyJsHoisted_pullAll_(array, values, this, arguments, var=var):
                        var = Scope({'array':array, 'values':values, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values', 'array'])
                        return (var.get('basePullAll')(var.get('array'), var.get('values')) if (((var.get('array') and var.get('array').get('length')) and var.get('values')) and var.get('values').get('length')) else var.get('array'))
                    PyJsHoisted_pullAll_.func_name = 'pullAll'
                    var.put('pullAll', PyJsHoisted_pullAll_)
                    @Js
                    def PyJsHoisted_pullAllBy_(array, values, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'values':values, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values', 'iteratee', 'array'])
                        return (var.get('basePullAll')(var.get('array'), var.get('values'), var.get('getIteratee')(var.get('iteratee'), Js(2.0))) if (((var.get('array') and var.get('array').get('length')) and var.get('values')) and var.get('values').get('length')) else var.get('array'))
                    PyJsHoisted_pullAllBy_.func_name = 'pullAllBy'
                    var.put('pullAllBy', PyJsHoisted_pullAllBy_)
                    @Js
                    def PyJsHoisted_pullAllWith_(array, values, comparator, this, arguments, var=var):
                        var = Scope({'array':array, 'values':values, 'comparator':comparator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values', 'comparator', 'array'])
                        return (var.get('basePullAll')(var.get('array'), var.get('values'), var.get('undefined'), var.get('comparator')) if (((var.get('array') and var.get('array').get('length')) and var.get('values')) and var.get('values').get('length')) else var.get('array'))
                    PyJsHoisted_pullAllWith_.func_name = 'pullAllWith'
                    var.put('pullAllWith', PyJsHoisted_pullAllWith_)
                    @Js
                    def PyJsHoisted_remove_(array, predicate, this, arguments, var=var):
                        var = Scope({'array':array, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'array', 'indexes', 'predicate', 'result', 'length', 'index'])
                        var.put('result', Js([]))
                        if (var.get('array') and var.get('array').get('length')).neg():
                            return var.get('result')
                        var.put('index', (-Js(1.0)))
                        var.put('indexes', Js([]))
                        var.put('length', var.get('array').get('length'))
                        var.put('predicate', var.get('getIteratee')(var.get('predicate'), Js(3.0)))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('value', var.get('array').get(var.get('index')))
                            if var.get('predicate')(var.get('value'), var.get('index'), var.get('array')):
                                var.get('result').callprop('push', var.get('value'))
                                var.get('indexes').callprop('push', var.get('index'))
                        var.get('basePullAt')(var.get('array'), var.get('indexes'))
                        return var.get('result')
                    PyJsHoisted_remove_.func_name = 'remove'
                    var.put('remove', PyJsHoisted_remove_)
                    @Js
                    def PyJsHoisted_reverse_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array'])
                        return (var.get('array') if (var.get('array')==var.get(u"null")) else var.get('nativeReverse').callprop('call', var.get('array')))
                    PyJsHoisted_reverse_.func_name = 'reverse'
                    var.put('reverse', PyJsHoisted_reverse_)
                    @Js
                    def PyJsHoisted_slice_(array, start, end, this, arguments, var=var):
                        var = Scope({'array':array, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                        var.registers(['end', 'length', 'array', 'start'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length').neg():
                            return Js([])
                        if ((var.get('end') and (var.get('end',throw=False).typeof()!=Js('number'))) and var.get('isIterateeCall')(var.get('array'), var.get('start'), var.get('end'))):
                            var.put('start', Js(0.0))
                            var.put('end', var.get('length'))
                        else:
                            var.put('start', (Js(0.0) if (var.get('start')==var.get(u"null")) else var.get('toInteger')(var.get('start'))))
                            var.put('end', (var.get('length') if PyJsStrictEq(var.get('end'),var.get('undefined')) else var.get('toInteger')(var.get('end'))))
                        return var.get('baseSlice')(var.get('array'), var.get('start'), var.get('end'))
                    PyJsHoisted_slice_.func_name = 'slice'
                    var.put('slice', PyJsHoisted_slice_)
                    @Js
                    def PyJsHoisted_sortedIndex_(array, value, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'value'])
                        return var.get('baseSortedIndex')(var.get('array'), var.get('value'))
                    PyJsHoisted_sortedIndex_.func_name = 'sortedIndex'
                    var.put('sortedIndex', PyJsHoisted_sortedIndex_)
                    @Js
                    def PyJsHoisted_sortedIndexBy_(array, value, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'array', 'value'])
                        return var.get('baseSortedIndexBy')(var.get('array'), var.get('value'), var.get('getIteratee')(var.get('iteratee'), Js(2.0)))
                    PyJsHoisted_sortedIndexBy_.func_name = 'sortedIndexBy'
                    var.put('sortedIndexBy', PyJsHoisted_sortedIndexBy_)
                    @Js
                    def PyJsHoisted_sortedIndexOf_(array, value, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'array', 'index', 'value'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length'):
                            var.put('index', var.get('baseSortedIndex')(var.get('array'), var.get('value')))
                            if ((var.get('index')<var.get('length')) and var.get('eq')(var.get('array').get(var.get('index')), var.get('value'))):
                                return var.get('index')
                        return (-Js(1.0))
                    PyJsHoisted_sortedIndexOf_.func_name = 'sortedIndexOf'
                    var.put('sortedIndexOf', PyJsHoisted_sortedIndexOf_)
                    @Js
                    def PyJsHoisted_sortedLastIndex_(array, value, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array', 'value'])
                        return var.get('baseSortedIndex')(var.get('array'), var.get('value'), Js(True))
                    PyJsHoisted_sortedLastIndex_.func_name = 'sortedLastIndex'
                    var.put('sortedLastIndex', PyJsHoisted_sortedLastIndex_)
                    @Js
                    def PyJsHoisted_sortedLastIndexBy_(array, value, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'array', 'value'])
                        return var.get('baseSortedIndexBy')(var.get('array'), var.get('value'), var.get('getIteratee')(var.get('iteratee'), Js(2.0)), Js(True))
                    PyJsHoisted_sortedLastIndexBy_.func_name = 'sortedLastIndexBy'
                    var.put('sortedLastIndexBy', PyJsHoisted_sortedLastIndexBy_)
                    @Js
                    def PyJsHoisted_sortedLastIndexOf_(array, value, this, arguments, var=var):
                        var = Scope({'array':array, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'array', 'index', 'value'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length'):
                            var.put('index', (var.get('baseSortedIndex')(var.get('array'), var.get('value'), Js(True))-Js(1.0)))
                            if var.get('eq')(var.get('array').get(var.get('index')), var.get('value')):
                                return var.get('index')
                        return (-Js(1.0))
                    PyJsHoisted_sortedLastIndexOf_.func_name = 'sortedLastIndexOf'
                    var.put('sortedLastIndexOf', PyJsHoisted_sortedLastIndexOf_)
                    @Js
                    def PyJsHoisted_sortedUniq_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array'])
                        return (var.get('baseSortedUniq')(var.get('array')) if (var.get('array') and var.get('array').get('length')) else Js([]))
                    PyJsHoisted_sortedUniq_.func_name = 'sortedUniq'
                    var.put('sortedUniq', PyJsHoisted_sortedUniq_)
                    @Js
                    def PyJsHoisted_sortedUniqBy_(array, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'array'])
                        return (var.get('baseSortedUniq')(var.get('array'), var.get('getIteratee')(var.get('iteratee'), Js(2.0))) if (var.get('array') and var.get('array').get('length')) else Js([]))
                    PyJsHoisted_sortedUniqBy_.func_name = 'sortedUniqBy'
                    var.put('sortedUniqBy', PyJsHoisted_sortedUniqBy_)
                    @Js
                    def PyJsHoisted_tail_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'array'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        return (var.get('baseSlice')(var.get('array'), Js(1.0), var.get('length')) if var.get('length') else Js([]))
                    PyJsHoisted_tail_.func_name = 'tail'
                    var.put('tail', PyJsHoisted_tail_)
                    @Js
                    def PyJsHoisted_take_(array, n, guard, this, arguments, var=var):
                        var = Scope({'array':array, 'n':n, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'array', 'guard'])
                        if (var.get('array') and var.get('array').get('length')).neg():
                            return Js([])
                        var.put('n', (Js(1.0) if (var.get('guard') or PyJsStrictEq(var.get('n'),var.get('undefined'))) else var.get('toInteger')(var.get('n'))))
                        return var.get('baseSlice')(var.get('array'), Js(0.0), (Js(0.0) if (var.get('n')<Js(0.0)) else var.get('n')))
                    PyJsHoisted_take_.func_name = 'take'
                    var.put('take', PyJsHoisted_take_)
                    @Js
                    def PyJsHoisted_takeRight_(array, n, guard, this, arguments, var=var):
                        var = Scope({'array':array, 'n':n, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'n', 'array', 'guard'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        if var.get('length').neg():
                            return Js([])
                        var.put('n', (Js(1.0) if (var.get('guard') or PyJsStrictEq(var.get('n'),var.get('undefined'))) else var.get('toInteger')(var.get('n'))))
                        var.put('n', (var.get('length')-var.get('n')))
                        return var.get('baseSlice')(var.get('array'), (Js(0.0) if (var.get('n')<Js(0.0)) else var.get('n')), var.get('length'))
                    PyJsHoisted_takeRight_.func_name = 'takeRight'
                    var.put('takeRight', PyJsHoisted_takeRight_)
                    @Js
                    def PyJsHoisted_takeRightWhile_(array, predicate, this, arguments, var=var):
                        var = Scope({'array':array, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate', 'array'])
                        return (var.get('baseWhile')(var.get('array'), var.get('getIteratee')(var.get('predicate'), Js(3.0)), Js(False), Js(True)) if (var.get('array') and var.get('array').get('length')) else Js([]))
                    PyJsHoisted_takeRightWhile_.func_name = 'takeRightWhile'
                    var.put('takeRightWhile', PyJsHoisted_takeRightWhile_)
                    @Js
                    def PyJsHoisted_takeWhile_(array, predicate, this, arguments, var=var):
                        var = Scope({'array':array, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate', 'array'])
                        return (var.get('baseWhile')(var.get('array'), var.get('getIteratee')(var.get('predicate'), Js(3.0))) if (var.get('array') and var.get('array').get('length')) else Js([]))
                    PyJsHoisted_takeWhile_.func_name = 'takeWhile'
                    var.put('takeWhile', PyJsHoisted_takeWhile_)
                    @Js
                    def PyJsHoisted_uniq_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array'])
                        return (var.get('baseUniq')(var.get('array')) if (var.get('array') and var.get('array').get('length')) else Js([]))
                    PyJsHoisted_uniq_.func_name = 'uniq'
                    var.put('uniq', PyJsHoisted_uniq_)
                    @Js
                    def PyJsHoisted_uniqBy_(array, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'array'])
                        return (var.get('baseUniq')(var.get('array'), var.get('getIteratee')(var.get('iteratee'), Js(2.0))) if (var.get('array') and var.get('array').get('length')) else Js([]))
                    PyJsHoisted_uniqBy_.func_name = 'uniqBy'
                    var.put('uniqBy', PyJsHoisted_uniqBy_)
                    @Js
                    def PyJsHoisted_uniqWith_(array, comparator, this, arguments, var=var):
                        var = Scope({'array':array, 'comparator':comparator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['comparator', 'array'])
                        var.put('comparator', (var.get('comparator') if (var.get('comparator',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        return (var.get('baseUniq')(var.get('array'), var.get('undefined'), var.get('comparator')) if (var.get('array') and var.get('array').get('length')) else Js([]))
                    PyJsHoisted_uniqWith_.func_name = 'uniqWith'
                    var.put('uniqWith', PyJsHoisted_uniqWith_)
                    @Js
                    def PyJsHoisted_unzip_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'array'])
                        if (var.get('array') and var.get('array').get('length')).neg():
                            return Js([])
                        var.put('length', Js(0.0))
                        @Js
                        def PyJs_anonymous_198_(group, this, arguments, var=var):
                            var = Scope({'group':group, 'this':this, 'arguments':arguments}, var)
                            var.registers(['group'])
                            if var.get('isArrayLikeObject')(var.get('group')):
                                var.put('length', var.get('nativeMax')(var.get('group').get('length'), var.get('length')))
                                return Js(True)
                        PyJs_anonymous_198_._set_name('anonymous')
                        var.put('array', var.get('arrayFilter')(var.get('array'), PyJs_anonymous_198_))
                        @Js
                        def PyJs_anonymous_199_(index, this, arguments, var=var):
                            var = Scope({'index':index, 'this':this, 'arguments':arguments}, var)
                            var.registers(['index'])
                            return var.get('arrayMap')(var.get('array'), var.get('baseProperty')(var.get('index')))
                        PyJs_anonymous_199_._set_name('anonymous')
                        return var.get('baseTimes')(var.get('length'), PyJs_anonymous_199_)
                    PyJsHoisted_unzip_.func_name = 'unzip'
                    var.put('unzip', PyJsHoisted_unzip_)
                    @Js
                    def PyJsHoisted_unzipWith_(array, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'iteratee', 'array'])
                        if (var.get('array') and var.get('array').get('length')).neg():
                            return Js([])
                        var.put('result', var.get('unzip')(var.get('array')))
                        if (var.get('iteratee')==var.get(u"null")):
                            return var.get('result')
                        @Js
                        def PyJs_anonymous_200_(group, this, arguments, var=var):
                            var = Scope({'group':group, 'this':this, 'arguments':arguments}, var)
                            var.registers(['group'])
                            return var.get('apply')(var.get('iteratee'), var.get('undefined'), var.get('group'))
                        PyJs_anonymous_200_._set_name('anonymous')
                        return var.get('arrayMap')(var.get('result'), PyJs_anonymous_200_)
                    PyJsHoisted_unzipWith_.func_name = 'unzipWith'
                    var.put('unzipWith', PyJsHoisted_unzipWith_)
                    @Js
                    def PyJsHoisted_zipObject_(props, values, this, arguments, var=var):
                        var = Scope({'props':props, 'values':values, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values', 'props'])
                        return var.get('baseZipObject')((var.get('props') or Js([])), (var.get('values') or Js([])), var.get('assignValue'))
                    PyJsHoisted_zipObject_.func_name = 'zipObject'
                    var.put('zipObject', PyJsHoisted_zipObject_)
                    @Js
                    def PyJsHoisted_zipObjectDeep_(props, values, this, arguments, var=var):
                        var = Scope({'props':props, 'values':values, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values', 'props'])
                        return var.get('baseZipObject')((var.get('props') or Js([])), (var.get('values') or Js([])), var.get('baseSet'))
                    PyJsHoisted_zipObjectDeep_.func_name = 'zipObjectDeep'
                    var.put('zipObjectDeep', PyJsHoisted_zipObjectDeep_)
                    @Js
                    def PyJsHoisted_chain_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'value'])
                        var.put('result', var.get('lodash')(var.get('value')))
                        var.get('result').put('__chain__', Js(True))
                        return var.get('result')
                    PyJsHoisted_chain_.func_name = 'chain'
                    var.put('chain', PyJsHoisted_chain_)
                    @Js
                    def PyJsHoisted_tap_(value, interceptor, this, arguments, var=var):
                        var = Scope({'value':value, 'interceptor':interceptor, 'this':this, 'arguments':arguments}, var)
                        var.registers(['interceptor', 'value'])
                        var.get('interceptor')(var.get('value'))
                        return var.get('value')
                    PyJsHoisted_tap_.func_name = 'tap'
                    var.put('tap', PyJsHoisted_tap_)
                    @Js
                    def PyJsHoisted_thru_(value, interceptor, this, arguments, var=var):
                        var = Scope({'value':value, 'interceptor':interceptor, 'this':this, 'arguments':arguments}, var)
                        var.registers(['interceptor', 'value'])
                        return var.get('interceptor')(var.get('value'))
                    PyJsHoisted_thru_.func_name = 'thru'
                    var.put('thru', PyJsHoisted_thru_)
                    @Js
                    def PyJsHoisted_wrapperChain_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('chain')(var.get(u"this"))
                    PyJsHoisted_wrapperChain_.func_name = 'wrapperChain'
                    var.put('wrapperChain', PyJsHoisted_wrapperChain_)
                    @Js
                    def PyJsHoisted_wrapperCommit_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('LodashWrapper').create(var.get(u"this").callprop('value'), var.get(u"this").get('__chain__'))
                    PyJsHoisted_wrapperCommit_.func_name = 'wrapperCommit'
                    var.put('wrapperCommit', PyJsHoisted_wrapperCommit_)
                    @Js
                    def PyJsHoisted_wrapperNext_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['done', 'value'])
                        if PyJsStrictEq(var.get(u"this").get('__values__'),var.get('undefined')):
                            var.get(u"this").put('__values__', var.get('toArray')(var.get(u"this").callprop('value')))
                        var.put('done', (var.get(u"this").get('__index__')>=var.get(u"this").get('__values__').get('length')))
                        var.put('value', (var.get('undefined') if var.get('done') else var.get(u"this").get('__values__').get((var.get(u"this").put('__index__',Js(var.get(u"this").get('__index__').to_number())+Js(1))-Js(1)))))
                        return Js({'done':var.get('done'),'value':var.get('value')})
                    PyJsHoisted_wrapperNext_.func_name = 'wrapperNext'
                    var.put('wrapperNext', PyJsHoisted_wrapperNext_)
                    @Js
                    def PyJsHoisted_wrapperToIterator_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get(u"this")
                    PyJsHoisted_wrapperToIterator_.func_name = 'wrapperToIterator'
                    var.put('wrapperToIterator', PyJsHoisted_wrapperToIterator_)
                    @Js
                    def PyJsHoisted_wrapperPlant_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['clone', 'value', 'result', 'previous', 'parent'])
                        var.put('parent', var.get(u"this"))
                        while var.get('parent').instanceof(var.get('baseLodash')):
                            var.put('clone', var.get('wrapperClone')(var.get('parent')))
                            var.get('clone').put('__index__', Js(0.0))
                            var.get('clone').put('__values__', var.get('undefined'))
                            if var.get('result'):
                                var.get('previous').put('__wrapped__', var.get('clone'))
                            else:
                                var.put('result', var.get('clone'))
                            var.put('previous', var.get('clone'))
                            var.put('parent', var.get('parent').get('__wrapped__'))
                        var.get('previous').put('__wrapped__', var.get('value'))
                        return var.get('result')
                    PyJsHoisted_wrapperPlant_.func_name = 'wrapperPlant'
                    var.put('wrapperPlant', PyJsHoisted_wrapperPlant_)
                    @Js
                    def PyJsHoisted_wrapperReverse_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['wrapped', 'value'])
                        var.put('value', var.get(u"this").get('__wrapped__'))
                        if var.get('value').instanceof(var.get('LazyWrapper')):
                            var.put('wrapped', var.get('value'))
                            if var.get(u"this").get('__actions__').get('length'):
                                var.put('wrapped', var.get('LazyWrapper').create(var.get(u"this")))
                            var.put('wrapped', var.get('wrapped').callprop('reverse'))
                            var.get('wrapped').get('__actions__').callprop('push', Js({'func':var.get('thru'),'args':Js([var.get('reverse')]),'thisArg':var.get('undefined')}))
                            return var.get('LodashWrapper').create(var.get('wrapped'), var.get(u"this").get('__chain__'))
                        return var.get(u"this").callprop('thru', var.get('reverse'))
                    PyJsHoisted_wrapperReverse_.func_name = 'wrapperReverse'
                    var.put('wrapperReverse', PyJsHoisted_wrapperReverse_)
                    @Js
                    def PyJsHoisted_wrapperValue_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('baseWrapperValue')(var.get(u"this").get('__wrapped__'), var.get(u"this").get('__actions__'))
                    PyJsHoisted_wrapperValue_.func_name = 'wrapperValue'
                    var.put('wrapperValue', PyJsHoisted_wrapperValue_)
                    @Js
                    def PyJsHoisted_every_(collection, predicate, guard, this, arguments, var=var):
                        var = Scope({'collection':collection, 'predicate':predicate, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate', 'func', 'guard', 'collection'])
                        var.put('func', (var.get('arrayEvery') if var.get('isArray')(var.get('collection')) else var.get('baseEvery')))
                        if (var.get('guard') and var.get('isIterateeCall')(var.get('collection'), var.get('predicate'), var.get('guard'))):
                            var.put('predicate', var.get('undefined'))
                        return var.get('func')(var.get('collection'), var.get('getIteratee')(var.get('predicate'), Js(3.0)))
                    PyJsHoisted_every_.func_name = 'every'
                    var.put('every', PyJsHoisted_every_)
                    @Js
                    def PyJsHoisted_filter_(collection, predicate, this, arguments, var=var):
                        var = Scope({'collection':collection, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate', 'func', 'collection'])
                        var.put('func', (var.get('arrayFilter') if var.get('isArray')(var.get('collection')) else var.get('baseFilter')))
                        return var.get('func')(var.get('collection'), var.get('getIteratee')(var.get('predicate'), Js(3.0)))
                    PyJsHoisted_filter_.func_name = 'filter'
                    var.put('filter', PyJsHoisted_filter_)
                    @Js
                    def PyJsHoisted_flatMap_(collection, iteratee, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'collection'])
                        return var.get('baseFlatten')(var.get('map')(var.get('collection'), var.get('iteratee')), Js(1.0))
                    PyJsHoisted_flatMap_.func_name = 'flatMap'
                    var.put('flatMap', PyJsHoisted_flatMap_)
                    @Js
                    def PyJsHoisted_flatMapDeep_(collection, iteratee, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'collection'])
                        return var.get('baseFlatten')(var.get('map')(var.get('collection'), var.get('iteratee')), var.get('INFINITY'))
                    PyJsHoisted_flatMapDeep_.func_name = 'flatMapDeep'
                    var.put('flatMapDeep', PyJsHoisted_flatMapDeep_)
                    @Js
                    def PyJsHoisted_flatMapDepth_(collection, iteratee, depth, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratee':iteratee, 'depth':depth, 'this':this, 'arguments':arguments}, var)
                        var.registers(['depth', 'iteratee', 'collection'])
                        var.put('depth', (Js(1.0) if PyJsStrictEq(var.get('depth'),var.get('undefined')) else var.get('toInteger')(var.get('depth'))))
                        return var.get('baseFlatten')(var.get('map')(var.get('collection'), var.get('iteratee')), var.get('depth'))
                    PyJsHoisted_flatMapDepth_.func_name = 'flatMapDepth'
                    var.put('flatMapDepth', PyJsHoisted_flatMapDepth_)
                    @Js
                    def PyJsHoisted_forEach_(collection, iteratee, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'iteratee', 'collection'])
                        var.put('func', (var.get('arrayEach') if var.get('isArray')(var.get('collection')) else var.get('baseEach')))
                        return var.get('func')(var.get('collection'), var.get('getIteratee')(var.get('iteratee'), Js(3.0)))
                    PyJsHoisted_forEach_.func_name = 'forEach'
                    var.put('forEach', PyJsHoisted_forEach_)
                    @Js
                    def PyJsHoisted_forEachRight_(collection, iteratee, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'iteratee', 'collection'])
                        var.put('func', (var.get('arrayEachRight') if var.get('isArray')(var.get('collection')) else var.get('baseEachRight')))
                        return var.get('func')(var.get('collection'), var.get('getIteratee')(var.get('iteratee'), Js(3.0)))
                    PyJsHoisted_forEachRight_.func_name = 'forEachRight'
                    var.put('forEachRight', PyJsHoisted_forEachRight_)
                    @Js
                    def PyJsHoisted_includes_(collection, value, fromIndex, guard, this, arguments, var=var):
                        var = Scope({'collection':collection, 'value':value, 'fromIndex':fromIndex, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['guard', 'value', 'collection', 'fromIndex', 'length'])
                        var.put('collection', (var.get('collection') if var.get('isArrayLike')(var.get('collection')) else var.get('values')(var.get('collection'))))
                        var.put('fromIndex', (var.get('toInteger')(var.get('fromIndex')) if (var.get('fromIndex') and var.get('guard').neg()) else Js(0.0)))
                        var.put('length', var.get('collection').get('length'))
                        if (var.get('fromIndex')<Js(0.0)):
                            var.put('fromIndex', var.get('nativeMax')((var.get('length')+var.get('fromIndex')), Js(0.0)))
                        return (((var.get('fromIndex')<=var.get('length')) and (var.get('collection').callprop('indexOf', var.get('value'), var.get('fromIndex'))>(-Js(1.0)))) if var.get('isString')(var.get('collection')) else (var.get('length').neg().neg() and (var.get('baseIndexOf')(var.get('collection'), var.get('value'), var.get('fromIndex'))>(-Js(1.0)))))
                    PyJsHoisted_includes_.func_name = 'includes'
                    var.put('includes', PyJsHoisted_includes_)
                    @Js
                    def PyJsHoisted_map_(collection, iteratee, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'iteratee', 'collection'])
                        var.put('func', (var.get('arrayMap') if var.get('isArray')(var.get('collection')) else var.get('baseMap')))
                        return var.get('func')(var.get('collection'), var.get('getIteratee')(var.get('iteratee'), Js(3.0)))
                    PyJsHoisted_map_.func_name = 'map'
                    var.put('map', PyJsHoisted_map_)
                    @Js
                    def PyJsHoisted_orderBy_(collection, iteratees, orders, guard, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratees':iteratees, 'orders':orders, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['orders', 'iteratees', 'guard', 'collection'])
                        if (var.get('collection')==var.get(u"null")):
                            return Js([])
                        if var.get('isArray')(var.get('iteratees')).neg():
                            var.put('iteratees', (Js([]) if (var.get('iteratees')==var.get(u"null")) else Js([var.get('iteratees')])))
                        var.put('orders', (var.get('undefined') if var.get('guard') else var.get('orders')))
                        if var.get('isArray')(var.get('orders')).neg():
                            var.put('orders', (Js([]) if (var.get('orders')==var.get(u"null")) else Js([var.get('orders')])))
                        return var.get('baseOrderBy')(var.get('collection'), var.get('iteratees'), var.get('orders'))
                    PyJsHoisted_orderBy_.func_name = 'orderBy'
                    var.put('orderBy', PyJsHoisted_orderBy_)
                    @Js
                    def PyJsHoisted_reduce_(collection, iteratee, accumulator, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratee':iteratee, 'accumulator':accumulator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'collection', 'initAccum', 'accumulator', 'iteratee'])
                        var.put('func', (var.get('arrayReduce') if var.get('isArray')(var.get('collection')) else var.get('baseReduce')))
                        var.put('initAccum', (var.get('arguments').get('length')<Js(3.0)))
                        return var.get('func')(var.get('collection'), var.get('getIteratee')(var.get('iteratee'), Js(4.0)), var.get('accumulator'), var.get('initAccum'), var.get('baseEach'))
                    PyJsHoisted_reduce_.func_name = 'reduce'
                    var.put('reduce', PyJsHoisted_reduce_)
                    @Js
                    def PyJsHoisted_reduceRight_(collection, iteratee, accumulator, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratee':iteratee, 'accumulator':accumulator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'collection', 'initAccum', 'accumulator', 'iteratee'])
                        var.put('func', (var.get('arrayReduceRight') if var.get('isArray')(var.get('collection')) else var.get('baseReduce')))
                        var.put('initAccum', (var.get('arguments').get('length')<Js(3.0)))
                        return var.get('func')(var.get('collection'), var.get('getIteratee')(var.get('iteratee'), Js(4.0)), var.get('accumulator'), var.get('initAccum'), var.get('baseEachRight'))
                    PyJsHoisted_reduceRight_.func_name = 'reduceRight'
                    var.put('reduceRight', PyJsHoisted_reduceRight_)
                    @Js
                    def PyJsHoisted_reject_(collection, predicate, this, arguments, var=var):
                        var = Scope({'collection':collection, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate', 'func', 'collection'])
                        var.put('func', (var.get('arrayFilter') if var.get('isArray')(var.get('collection')) else var.get('baseFilter')))
                        return var.get('func')(var.get('collection'), var.get('negate')(var.get('getIteratee')(var.get('predicate'), Js(3.0))))
                    PyJsHoisted_reject_.func_name = 'reject'
                    var.put('reject', PyJsHoisted_reject_)
                    @Js
                    def PyJsHoisted_sample_(collection, this, arguments, var=var):
                        var = Scope({'collection':collection, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'collection'])
                        var.put('func', (var.get('arraySample') if var.get('isArray')(var.get('collection')) else var.get('baseSample')))
                        return var.get('func')(var.get('collection'))
                    PyJsHoisted_sample_.func_name = 'sample'
                    var.put('sample', PyJsHoisted_sample_)
                    @Js
                    def PyJsHoisted_sampleSize_(collection, n, guard, this, arguments, var=var):
                        var = Scope({'collection':collection, 'n':n, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'n', 'guard', 'collection'])
                        if (var.get('isIterateeCall')(var.get('collection'), var.get('n'), var.get('guard')) if var.get('guard') else PyJsStrictEq(var.get('n'),var.get('undefined'))):
                            var.put('n', Js(1.0))
                        else:
                            var.put('n', var.get('toInteger')(var.get('n')))
                        var.put('func', (var.get('arraySampleSize') if var.get('isArray')(var.get('collection')) else var.get('baseSampleSize')))
                        return var.get('func')(var.get('collection'), var.get('n'))
                    PyJsHoisted_sampleSize_.func_name = 'sampleSize'
                    var.put('sampleSize', PyJsHoisted_sampleSize_)
                    @Js
                    def PyJsHoisted_shuffle_(collection, this, arguments, var=var):
                        var = Scope({'collection':collection, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'collection'])
                        var.put('func', (var.get('arrayShuffle') if var.get('isArray')(var.get('collection')) else var.get('baseShuffle')))
                        return var.get('func')(var.get('collection'))
                    PyJsHoisted_shuffle_.func_name = 'shuffle'
                    var.put('shuffle', PyJsHoisted_shuffle_)
                    @Js
                    def PyJsHoisted_size_(collection, this, arguments, var=var):
                        var = Scope({'collection':collection, 'this':this, 'arguments':arguments}, var)
                        var.registers(['tag', 'collection'])
                        if (var.get('collection')==var.get(u"null")):
                            return Js(0.0)
                        if var.get('isArrayLike')(var.get('collection')):
                            return (var.get('stringSize')(var.get('collection')) if var.get('isString')(var.get('collection')) else var.get('collection').get('length'))
                        var.put('tag', var.get('getTag')(var.get('collection')))
                        if ((var.get('tag')==var.get('mapTag')) or (var.get('tag')==var.get('setTag'))):
                            return var.get('collection').get('size')
                        return var.get('baseKeys')(var.get('collection')).get('length')
                    PyJsHoisted_size_.func_name = 'size'
                    var.put('size', PyJsHoisted_size_)
                    @Js
                    def PyJsHoisted_some_(collection, predicate, guard, this, arguments, var=var):
                        var = Scope({'collection':collection, 'predicate':predicate, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate', 'func', 'guard', 'collection'])
                        var.put('func', (var.get('arraySome') if var.get('isArray')(var.get('collection')) else var.get('baseSome')))
                        if (var.get('guard') and var.get('isIterateeCall')(var.get('collection'), var.get('predicate'), var.get('guard'))):
                            var.put('predicate', var.get('undefined'))
                        return var.get('func')(var.get('collection'), var.get('getIteratee')(var.get('predicate'), Js(3.0)))
                    PyJsHoisted_some_.func_name = 'some'
                    var.put('some', PyJsHoisted_some_)
                    @Js
                    def PyJsHoisted_after_(n, func, this, arguments, var=var):
                        var = Scope({'n':n, 'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'n'])
                        if (var.get('func',throw=False).typeof()!=Js('function')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                            raise PyJsTempException
                        var.put('n', var.get('toInteger')(var.get('n')))
                        @Js
                        def PyJs_anonymous_218_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            if (var.put('n',Js(var.get('n').to_number())-Js(1))<Js(1.0)):
                                return var.get('func').callprop('apply', var.get(u"this"), var.get('arguments'))
                        PyJs_anonymous_218_._set_name('anonymous')
                        return PyJs_anonymous_218_
                    PyJsHoisted_after_.func_name = 'after'
                    var.put('after', PyJsHoisted_after_)
                    @Js
                    def PyJsHoisted_ary_(func, n, guard, this, arguments, var=var):
                        var = Scope({'func':func, 'n':n, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'n', 'guard'])
                        var.put('n', (var.get('undefined') if var.get('guard') else var.get('n')))
                        var.put('n', (var.get('func').get('length') if (var.get('func') and (var.get('n')==var.get(u"null"))) else var.get('n')))
                        return var.get('createWrap')(var.get('func'), var.get('WRAP_ARY_FLAG'), var.get('undefined'), var.get('undefined'), var.get('undefined'), var.get('undefined'), var.get('n'))
                    PyJsHoisted_ary_.func_name = 'ary'
                    var.put('ary', PyJsHoisted_ary_)
                    @Js
                    def PyJsHoisted_before_(n, func, this, arguments, var=var):
                        var = Scope({'n':n, 'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'result', 'n'])
                        pass
                        if (var.get('func',throw=False).typeof()!=Js('function')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                            raise PyJsTempException
                        var.put('n', var.get('toInteger')(var.get('n')))
                        @Js
                        def PyJs_anonymous_219_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            if (var.put('n',Js(var.get('n').to_number())-Js(1))>Js(0.0)):
                                var.put('result', var.get('func').callprop('apply', var.get(u"this"), var.get('arguments')))
                            if (var.get('n')<=Js(1.0)):
                                var.put('func', var.get('undefined'))
                            return var.get('result')
                        PyJs_anonymous_219_._set_name('anonymous')
                        return PyJs_anonymous_219_
                    PyJsHoisted_before_.func_name = 'before'
                    var.put('before', PyJsHoisted_before_)
                    @Js
                    def PyJsHoisted_curry_(func, arity, guard, this, arguments, var=var):
                        var = Scope({'func':func, 'arity':arity, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'result', 'guard', 'arity'])
                        var.put('arity', (var.get('undefined') if var.get('guard') else var.get('arity')))
                        var.put('result', var.get('createWrap')(var.get('func'), var.get('WRAP_CURRY_FLAG'), var.get('undefined'), var.get('undefined'), var.get('undefined'), var.get('undefined'), var.get('undefined'), var.get('arity')))
                        var.get('result').put('placeholder', var.get('curry').get('placeholder'))
                        return var.get('result')
                    PyJsHoisted_curry_.func_name = 'curry'
                    var.put('curry', PyJsHoisted_curry_)
                    @Js
                    def PyJsHoisted_curryRight_(func, arity, guard, this, arguments, var=var):
                        var = Scope({'func':func, 'arity':arity, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'result', 'guard', 'arity'])
                        var.put('arity', (var.get('undefined') if var.get('guard') else var.get('arity')))
                        var.put('result', var.get('createWrap')(var.get('func'), var.get('WRAP_CURRY_RIGHT_FLAG'), var.get('undefined'), var.get('undefined'), var.get('undefined'), var.get('undefined'), var.get('undefined'), var.get('arity')))
                        var.get('result').put('placeholder', var.get('curryRight').get('placeholder'))
                        return var.get('result')
                    PyJsHoisted_curryRight_.func_name = 'curryRight'
                    var.put('curryRight', PyJsHoisted_curryRight_)
                    @Js
                    def PyJsHoisted_debounce_(func, wait, options, this, arguments, var=var):
                        var = Scope({'func':func, 'wait':wait, 'options':options, 'this':this, 'arguments':arguments}, var)
                        var.registers(['trailingEdge', 'lastCallTime', 'leading', 'maxing', 'trailing', 'remainingWait', 'invokeFunc', 'result', 'options', 'lastInvokeTime', 'leadingEdge', 'debounced', 'timerExpired', 'cancel', 'timerId', 'wait', 'maxWait', 'lastThis', 'shouldInvoke', 'lastArgs', 'flush', 'func'])
                        @Js
                        def PyJsHoisted_invokeFunc_(time, this, arguments, var=var):
                            var = Scope({'time':time, 'this':this, 'arguments':arguments}, var)
                            var.registers(['time', 'args', 'thisArg'])
                            var.put('args', var.get('lastArgs'))
                            var.put('thisArg', var.get('lastThis'))
                            var.put('lastArgs', var.put('lastThis', var.get('undefined')))
                            var.put('lastInvokeTime', var.get('time'))
                            var.put('result', var.get('func').callprop('apply', var.get('thisArg'), var.get('args')))
                            return var.get('result')
                        PyJsHoisted_invokeFunc_.func_name = 'invokeFunc'
                        var.put('invokeFunc', PyJsHoisted_invokeFunc_)
                        @Js
                        def PyJsHoisted_leadingEdge_(time, this, arguments, var=var):
                            var = Scope({'time':time, 'this':this, 'arguments':arguments}, var)
                            var.registers(['time'])
                            var.put('lastInvokeTime', var.get('time'))
                            var.put('timerId', var.get('setTimeout')(var.get('timerExpired'), var.get('wait')))
                            return (var.get('invokeFunc')(var.get('time')) if var.get('leading') else var.get('result'))
                        PyJsHoisted_leadingEdge_.func_name = 'leadingEdge'
                        var.put('leadingEdge', PyJsHoisted_leadingEdge_)
                        @Js
                        def PyJsHoisted_remainingWait_(time, this, arguments, var=var):
                            var = Scope({'time':time, 'this':this, 'arguments':arguments}, var)
                            var.registers(['timeSinceLastCall', 'timeWaiting', 'timeSinceLastInvoke', 'time'])
                            var.put('timeSinceLastCall', (var.get('time')-var.get('lastCallTime')))
                            var.put('timeSinceLastInvoke', (var.get('time')-var.get('lastInvokeTime')))
                            var.put('timeWaiting', (var.get('wait')-var.get('timeSinceLastCall')))
                            return (var.get('nativeMin')(var.get('timeWaiting'), (var.get('maxWait')-var.get('timeSinceLastInvoke'))) if var.get('maxing') else var.get('timeWaiting'))
                        PyJsHoisted_remainingWait_.func_name = 'remainingWait'
                        var.put('remainingWait', PyJsHoisted_remainingWait_)
                        @Js
                        def PyJsHoisted_shouldInvoke_(time, this, arguments, var=var):
                            var = Scope({'time':time, 'this':this, 'arguments':arguments}, var)
                            var.registers(['timeSinceLastCall', 'timeSinceLastInvoke', 'time'])
                            var.put('timeSinceLastCall', (var.get('time')-var.get('lastCallTime')))
                            var.put('timeSinceLastInvoke', (var.get('time')-var.get('lastInvokeTime')))
                            return (((PyJsStrictEq(var.get('lastCallTime'),var.get('undefined')) or (var.get('timeSinceLastCall')>=var.get('wait'))) or (var.get('timeSinceLastCall')<Js(0.0))) or (var.get('maxing') and (var.get('timeSinceLastInvoke')>=var.get('maxWait'))))
                        PyJsHoisted_shouldInvoke_.func_name = 'shouldInvoke'
                        var.put('shouldInvoke', PyJsHoisted_shouldInvoke_)
                        @Js
                        def PyJsHoisted_timerExpired_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['time'])
                            var.put('time', var.get('now')())
                            if var.get('shouldInvoke')(var.get('time')):
                                return var.get('trailingEdge')(var.get('time'))
                            var.put('timerId', var.get('setTimeout')(var.get('timerExpired'), var.get('remainingWait')(var.get('time'))))
                        PyJsHoisted_timerExpired_.func_name = 'timerExpired'
                        var.put('timerExpired', PyJsHoisted_timerExpired_)
                        @Js
                        def PyJsHoisted_trailingEdge_(time, this, arguments, var=var):
                            var = Scope({'time':time, 'this':this, 'arguments':arguments}, var)
                            var.registers(['time'])
                            var.put('timerId', var.get('undefined'))
                            if (var.get('trailing') and var.get('lastArgs')):
                                return var.get('invokeFunc')(var.get('time'))
                            var.put('lastArgs', var.put('lastThis', var.get('undefined')))
                            return var.get('result')
                        PyJsHoisted_trailingEdge_.func_name = 'trailingEdge'
                        var.put('trailingEdge', PyJsHoisted_trailingEdge_)
                        @Js
                        def PyJsHoisted_cancel_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            if PyJsStrictNeq(var.get('timerId'),var.get('undefined')):
                                var.get('clearTimeout')(var.get('timerId'))
                            var.put('lastInvokeTime', Js(0.0))
                            var.put('lastArgs', var.put('lastCallTime', var.put('lastThis', var.put('timerId', var.get('undefined')))))
                        PyJsHoisted_cancel_.func_name = 'cancel'
                        var.put('cancel', PyJsHoisted_cancel_)
                        @Js
                        def PyJsHoisted_flush_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            return (var.get('result') if PyJsStrictEq(var.get('timerId'),var.get('undefined')) else var.get('trailingEdge')(var.get('now')()))
                        PyJsHoisted_flush_.func_name = 'flush'
                        var.put('flush', PyJsHoisted_flush_)
                        @Js
                        def PyJsHoisted_debounced_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['time', 'isInvoking'])
                            var.put('time', var.get('now')())
                            var.put('isInvoking', var.get('shouldInvoke')(var.get('time')))
                            var.put('lastArgs', var.get('arguments'))
                            var.put('lastThis', var.get(u"this"))
                            var.put('lastCallTime', var.get('time'))
                            if var.get('isInvoking'):
                                if PyJsStrictEq(var.get('timerId'),var.get('undefined')):
                                    return var.get('leadingEdge')(var.get('lastCallTime'))
                                if var.get('maxing'):
                                    var.put('timerId', var.get('setTimeout')(var.get('timerExpired'), var.get('wait')))
                                    return var.get('invokeFunc')(var.get('lastCallTime'))
                            if PyJsStrictEq(var.get('timerId'),var.get('undefined')):
                                var.put('timerId', var.get('setTimeout')(var.get('timerExpired'), var.get('wait')))
                            return var.get('result')
                        PyJsHoisted_debounced_.func_name = 'debounced'
                        var.put('debounced', PyJsHoisted_debounced_)
                        var.put('lastInvokeTime', Js(0.0))
                        var.put('leading', Js(False))
                        var.put('maxing', Js(False))
                        var.put('trailing', Js(True))
                        if (var.get('func',throw=False).typeof()!=Js('function')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                            raise PyJsTempException
                        var.put('wait', (var.get('toNumber')(var.get('wait')) or Js(0.0)))
                        if var.get('isObject')(var.get('options')):
                            var.put('leading', var.get('options').get('leading').neg().neg())
                            var.put('maxing', var.get('options').contains(Js('maxWait')))
                            var.put('maxWait', (var.get('nativeMax')((var.get('toNumber')(var.get('options').get('maxWait')) or Js(0.0)), var.get('wait')) if var.get('maxing') else var.get('maxWait')))
                            var.put('trailing', (var.get('options').get('trailing').neg().neg() if var.get('options').contains(Js('trailing')) else var.get('trailing')))
                        pass
                        pass
                        pass
                        pass
                        pass
                        pass
                        pass
                        pass
                        pass
                        var.get('debounced').put('cancel', var.get('cancel'))
                        var.get('debounced').put('flush', var.get('flush'))
                        return var.get('debounced')
                    PyJsHoisted_debounce_.func_name = 'debounce'
                    var.put('debounce', PyJsHoisted_debounce_)
                    @Js
                    def PyJsHoisted_flip_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func'])
                        return var.get('createWrap')(var.get('func'), var.get('WRAP_FLIP_FLAG'))
                    PyJsHoisted_flip_.func_name = 'flip'
                    var.put('flip', PyJsHoisted_flip_)
                    @Js
                    def PyJsHoisted_memoize_(func, resolver, this, arguments, var=var):
                        var = Scope({'func':func, 'resolver':resolver, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'resolver', 'memoized'])
                        if ((var.get('func',throw=False).typeof()!=Js('function')) or ((var.get('resolver')!=var.get(u"null")) and (var.get('resolver',throw=False).typeof()!=Js('function')))):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                            raise PyJsTempException
                        @Js
                        def PyJs_memoized_224_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'memoized':PyJs_memoized_224_}, var)
                            var.registers(['result', 'args', 'cache', 'key'])
                            var.put('args', var.get('arguments'))
                            var.put('key', (var.get('resolver').callprop('apply', var.get(u"this"), var.get('args')) if var.get('resolver') else var.get('args').get('0')))
                            var.put('cache', var.get('memoized').get('cache'))
                            if var.get('cache').callprop('has', var.get('key')):
                                return var.get('cache').callprop('get', var.get('key'))
                            var.put('result', var.get('func').callprop('apply', var.get(u"this"), var.get('args')))
                            var.get('memoized').put('cache', (var.get('cache').callprop('set', var.get('key'), var.get('result')) or var.get('cache')))
                            return var.get('result')
                        PyJs_memoized_224_._set_name('memoized')
                        var.put('memoized', PyJs_memoized_224_)
                        var.get('memoized').put('cache', (var.get('memoize').get('Cache') or var.get('MapCache')).create())
                        return var.get('memoized')
                    PyJsHoisted_memoize_.func_name = 'memoize'
                    var.put('memoize', PyJsHoisted_memoize_)
                    @Js
                    def PyJsHoisted_negate_(predicate, this, arguments, var=var):
                        var = Scope({'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate'])
                        if (var.get('predicate',throw=False).typeof()!=Js('function')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                            raise PyJsTempException
                        @Js
                        def PyJs_anonymous_225_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['args'])
                            var.put('args', var.get('arguments'))
                            while 1:
                                SWITCHED = False
                                CONDITION = (var.get('args').get('length'))
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                                    SWITCHED = True
                                    return var.get('predicate').callprop('call', var.get(u"this")).neg()
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                                    SWITCHED = True
                                    return var.get('predicate').callprop('call', var.get(u"this"), var.get('args').get('0')).neg()
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                                    SWITCHED = True
                                    return var.get('predicate').callprop('call', var.get(u"this"), var.get('args').get('0'), var.get('args').get('1')).neg()
                                if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                                    SWITCHED = True
                                    return var.get('predicate').callprop('call', var.get(u"this"), var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2')).neg()
                                SWITCHED = True
                                break
                            return var.get('predicate').callprop('apply', var.get(u"this"), var.get('args')).neg()
                        PyJs_anonymous_225_._set_name('anonymous')
                        return PyJs_anonymous_225_
                    PyJsHoisted_negate_.func_name = 'negate'
                    var.put('negate', PyJsHoisted_negate_)
                    @Js
                    def PyJsHoisted_once_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func'])
                        return var.get('before')(Js(2.0), var.get('func'))
                    PyJsHoisted_once_.func_name = 'once'
                    var.put('once', PyJsHoisted_once_)
                    @Js
                    def PyJsHoisted_rest_(func, start, this, arguments, var=var):
                        var = Scope({'func':func, 'start':start, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'start'])
                        if (var.get('func',throw=False).typeof()!=Js('function')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                            raise PyJsTempException
                        var.put('start', (var.get('start') if PyJsStrictEq(var.get('start'),var.get('undefined')) else var.get('toInteger')(var.get('start'))))
                        return var.get('baseRest')(var.get('func'), var.get('start'))
                    PyJsHoisted_rest_.func_name = 'rest'
                    var.put('rest', PyJsHoisted_rest_)
                    @Js
                    def PyJsHoisted_spread_(func, start, this, arguments, var=var):
                        var = Scope({'func':func, 'start':start, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'start'])
                        if (var.get('func',throw=False).typeof()!=Js('function')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                            raise PyJsTempException
                        var.put('start', (Js(0.0) if (var.get('start')==var.get(u"null")) else var.get('nativeMax')(var.get('toInteger')(var.get('start')), Js(0.0))))
                        @Js
                        def PyJs_anonymous_231_(args, this, arguments, var=var):
                            var = Scope({'args':args, 'this':this, 'arguments':arguments}, var)
                            var.registers(['otherArgs', 'array', 'args'])
                            var.put('array', var.get('args').get(var.get('start')))
                            var.put('otherArgs', var.get('castSlice')(var.get('args'), Js(0.0), var.get('start')))
                            if var.get('array'):
                                var.get('arrayPush')(var.get('otherArgs'), var.get('array'))
                            return var.get('apply')(var.get('func'), var.get(u"this"), var.get('otherArgs'))
                        PyJs_anonymous_231_._set_name('anonymous')
                        return var.get('baseRest')(PyJs_anonymous_231_)
                    PyJsHoisted_spread_.func_name = 'spread'
                    var.put('spread', PyJsHoisted_spread_)
                    @Js
                    def PyJsHoisted_throttle_(func, wait, options, this, arguments, var=var):
                        var = Scope({'func':func, 'wait':wait, 'options':options, 'this':this, 'arguments':arguments}, var)
                        var.registers(['wait', 'leading', 'trailing', 'func', 'options'])
                        var.put('leading', Js(True))
                        var.put('trailing', Js(True))
                        if (var.get('func',throw=False).typeof()!=Js('function')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                            raise PyJsTempException
                        if var.get('isObject')(var.get('options')):
                            var.put('leading', (var.get('options').get('leading').neg().neg() if var.get('options').contains(Js('leading')) else var.get('leading')))
                            var.put('trailing', (var.get('options').get('trailing').neg().neg() if var.get('options').contains(Js('trailing')) else var.get('trailing')))
                        return var.get('debounce')(var.get('func'), var.get('wait'), Js({'leading':var.get('leading'),'maxWait':var.get('wait'),'trailing':var.get('trailing')}))
                    PyJsHoisted_throttle_.func_name = 'throttle'
                    var.put('throttle', PyJsHoisted_throttle_)
                    @Js
                    def PyJsHoisted_unary_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func'])
                        return var.get('ary')(var.get('func'), Js(1.0))
                    PyJsHoisted_unary_.func_name = 'unary'
                    var.put('unary', PyJsHoisted_unary_)
                    @Js
                    def PyJsHoisted_wrap_(value, wrapper, this, arguments, var=var):
                        var = Scope({'value':value, 'wrapper':wrapper, 'this':this, 'arguments':arguments}, var)
                        var.registers(['wrapper', 'value'])
                        return var.get('partial')(var.get('castFunction')(var.get('wrapper')), var.get('value'))
                    PyJsHoisted_wrap_.func_name = 'wrap'
                    var.put('wrap', PyJsHoisted_wrap_)
                    @Js
                    def PyJsHoisted_castArray_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        if var.get('arguments').get('length').neg():
                            return Js([])
                        var.put('value', var.get('arguments').get('0'))
                        return (var.get('value') if var.get('isArray')(var.get('value')) else Js([var.get('value')]))
                    PyJsHoisted_castArray_.func_name = 'castArray'
                    var.put('castArray', PyJsHoisted_castArray_)
                    @Js
                    def PyJsHoisted_clone_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return var.get('baseClone')(var.get('value'), var.get('CLONE_SYMBOLS_FLAG'))
                    PyJsHoisted_clone_.func_name = 'clone'
                    var.put('clone', PyJsHoisted_clone_)
                    @Js
                    def PyJsHoisted_cloneWith_(value, customizer, this, arguments, var=var):
                        var = Scope({'value':value, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'value'])
                        var.put('customizer', (var.get('customizer') if (var.get('customizer',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        return var.get('baseClone')(var.get('value'), var.get('CLONE_SYMBOLS_FLAG'), var.get('customizer'))
                    PyJsHoisted_cloneWith_.func_name = 'cloneWith'
                    var.put('cloneWith', PyJsHoisted_cloneWith_)
                    @Js
                    def PyJsHoisted_cloneDeep_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return var.get('baseClone')(var.get('value'), (var.get('CLONE_DEEP_FLAG')|var.get('CLONE_SYMBOLS_FLAG')))
                    PyJsHoisted_cloneDeep_.func_name = 'cloneDeep'
                    var.put('cloneDeep', PyJsHoisted_cloneDeep_)
                    @Js
                    def PyJsHoisted_cloneDeepWith_(value, customizer, this, arguments, var=var):
                        var = Scope({'value':value, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'value'])
                        var.put('customizer', (var.get('customizer') if (var.get('customizer',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        return var.get('baseClone')(var.get('value'), (var.get('CLONE_DEEP_FLAG')|var.get('CLONE_SYMBOLS_FLAG')), var.get('customizer'))
                    PyJsHoisted_cloneDeepWith_.func_name = 'cloneDeepWith'
                    var.put('cloneDeepWith', PyJsHoisted_cloneDeepWith_)
                    @Js
                    def PyJsHoisted_conformsTo_(object, source, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'source'])
                        return ((var.get('source')==var.get(u"null")) or var.get('baseConformsTo')(var.get('object'), var.get('source'), var.get('keys')(var.get('source'))))
                    PyJsHoisted_conformsTo_.func_name = 'conformsTo'
                    var.put('conformsTo', PyJsHoisted_conformsTo_)
                    @Js
                    def PyJsHoisted_eq_(value, other, this, arguments, var=var):
                        var = Scope({'value':value, 'other':other, 'this':this, 'arguments':arguments}, var)
                        var.registers(['other', 'value'])
                        return (PyJsStrictEq(var.get('value'),var.get('other')) or (PyJsStrictNeq(var.get('value'),var.get('value')) and PyJsStrictNeq(var.get('other'),var.get('other'))))
                    PyJsHoisted_eq_.func_name = 'eq'
                    var.put('eq', PyJsHoisted_eq_)
                    @Js
                    def PyJsHoisted_isArrayLike_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (((var.get('value')!=var.get(u"null")) and var.get('isLength')(var.get('value').get('length'))) and var.get('isFunction')(var.get('value')).neg())
                    PyJsHoisted_isArrayLike_.func_name = 'isArrayLike'
                    var.put('isArrayLike', PyJsHoisted_isArrayLike_)
                    @Js
                    def PyJsHoisted_isArrayLikeObject_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('isObjectLike')(var.get('value')) and var.get('isArrayLike')(var.get('value')))
                    PyJsHoisted_isArrayLikeObject_.func_name = 'isArrayLikeObject'
                    var.put('isArrayLikeObject', PyJsHoisted_isArrayLikeObject_)
                    @Js
                    def PyJsHoisted_isBoolean_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((PyJsStrictEq(var.get('value'),Js(True)) or PyJsStrictEq(var.get('value'),Js(False))) or (var.get('isObjectLike')(var.get('value')) and (var.get('baseGetTag')(var.get('value'))==var.get('boolTag'))))
                    PyJsHoisted_isBoolean_.func_name = 'isBoolean'
                    var.put('isBoolean', PyJsHoisted_isBoolean_)
                    @Js
                    def PyJsHoisted_isElement_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('isObjectLike')(var.get('value')) and PyJsStrictEq(var.get('value').get('nodeType'),Js(1.0))) and var.get('isPlainObject')(var.get('value')).neg())
                    PyJsHoisted_isElement_.func_name = 'isElement'
                    var.put('isElement', PyJsHoisted_isElement_)
                    @Js
                    def PyJsHoisted_isEmpty_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['tag', 'value', 'key'])
                        if (var.get('value')==var.get(u"null")):
                            return Js(True)
                        if (var.get('isArrayLike')(var.get('value')) and (((((var.get('isArray')(var.get('value')) or (var.get('value',throw=False).typeof()==Js('string'))) or (var.get('value').get('splice').typeof()==Js('function'))) or var.get('isBuffer')(var.get('value'))) or var.get('isTypedArray')(var.get('value'))) or var.get('isArguments')(var.get('value')))):
                            return var.get('value').get('length').neg()
                        var.put('tag', var.get('getTag')(var.get('value')))
                        if ((var.get('tag')==var.get('mapTag')) or (var.get('tag')==var.get('setTag'))):
                            return var.get('value').get('size').neg()
                        if var.get('isPrototype')(var.get('value')):
                            return var.get('baseKeys')(var.get('value')).get('length').neg()
                        for PyJsTemp in var.get('value'):
                            var.put('key', PyJsTemp)
                            if var.get('hasOwnProperty').callprop('call', var.get('value'), var.get('key')):
                                return Js(False)
                        return Js(True)
                    PyJsHoisted_isEmpty_.func_name = 'isEmpty'
                    var.put('isEmpty', PyJsHoisted_isEmpty_)
                    @Js
                    def PyJsHoisted_isEqual_(value, other, this, arguments, var=var):
                        var = Scope({'value':value, 'other':other, 'this':this, 'arguments':arguments}, var)
                        var.registers(['other', 'value'])
                        return var.get('baseIsEqual')(var.get('value'), var.get('other'))
                    PyJsHoisted_isEqual_.func_name = 'isEqual'
                    var.put('isEqual', PyJsHoisted_isEqual_)
                    @Js
                    def PyJsHoisted_isEqualWith_(value, other, customizer, this, arguments, var=var):
                        var = Scope({'value':value, 'other':other, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'result', 'other', 'value'])
                        var.put('customizer', (var.get('customizer') if (var.get('customizer',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        var.put('result', (var.get('customizer')(var.get('value'), var.get('other')) if var.get('customizer') else var.get('undefined')))
                        return (var.get('baseIsEqual')(var.get('value'), var.get('other'), var.get('undefined'), var.get('customizer')) if PyJsStrictEq(var.get('result'),var.get('undefined')) else var.get('result').neg().neg())
                    PyJsHoisted_isEqualWith_.func_name = 'isEqualWith'
                    var.put('isEqualWith', PyJsHoisted_isEqualWith_)
                    @Js
                    def PyJsHoisted_isError_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['tag', 'value'])
                        if var.get('isObjectLike')(var.get('value')).neg():
                            return Js(False)
                        var.put('tag', var.get('baseGetTag')(var.get('value')))
                        return (((var.get('tag')==var.get('errorTag')) or (var.get('tag')==var.get('domExcTag'))) or (((var.get('value').get('message').typeof()==Js('string')) and (var.get('value').get('name').typeof()==Js('string'))) and var.get('isPlainObject')(var.get('value')).neg()))
                    PyJsHoisted_isError_.func_name = 'isError'
                    var.put('isError', PyJsHoisted_isError_)
                    @Js
                    def PyJsHoisted_isFinite_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('value',throw=False).typeof()==Js('number')) and var.get('nativeIsFinite')(var.get('value')))
                    PyJsHoisted_isFinite_.func_name = 'isFinite'
                    var.put('isFinite', PyJsHoisted_isFinite_)
                    @Js
                    def PyJsHoisted_isFunction_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['tag', 'value'])
                        if var.get('isObject')(var.get('value')).neg():
                            return Js(False)
                        var.put('tag', var.get('baseGetTag')(var.get('value')))
                        return ((((var.get('tag')==var.get('funcTag')) or (var.get('tag')==var.get('genTag'))) or (var.get('tag')==var.get('asyncTag'))) or (var.get('tag')==var.get('proxyTag')))
                    PyJsHoisted_isFunction_.func_name = 'isFunction'
                    var.put('isFunction', PyJsHoisted_isFunction_)
                    @Js
                    def PyJsHoisted_isInteger_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('value',throw=False).typeof()==Js('number')) and (var.get('value')==var.get('toInteger')(var.get('value'))))
                    PyJsHoisted_isInteger_.func_name = 'isInteger'
                    var.put('isInteger', PyJsHoisted_isInteger_)
                    @Js
                    def PyJsHoisted_isLength_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((((var.get('value',throw=False).typeof()==Js('number')) and (var.get('value')>(-Js(1.0)))) and ((var.get('value')%Js(1.0))==Js(0.0))) and (var.get('value')<=var.get('MAX_SAFE_INTEGER')))
                    PyJsHoisted_isLength_.func_name = 'isLength'
                    var.put('isLength', PyJsHoisted_isLength_)
                    @Js
                    def PyJsHoisted_isObject_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['type', 'value'])
                        var.put('type', (Js('undefined') if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value'))))
                        return ((var.get('value')!=var.get(u"null")) and ((var.get('type')==Js('object')) or (var.get('type')==Js('function'))))
                    PyJsHoisted_isObject_.func_name = 'isObject'
                    var.put('isObject', PyJsHoisted_isObject_)
                    @Js
                    def PyJsHoisted_isObjectLike_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('value')!=var.get(u"null")) and ((Js('undefined') if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value')))==Js('object')))
                    PyJsHoisted_isObjectLike_.func_name = 'isObjectLike'
                    var.put('isObjectLike', PyJsHoisted_isObjectLike_)
                    @Js
                    def PyJsHoisted_isMatch_(object, source, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'source'])
                        return (PyJsStrictEq(var.get('object'),var.get('source')) or var.get('baseIsMatch')(var.get('object'), var.get('source'), var.get('getMatchData')(var.get('source'))))
                    PyJsHoisted_isMatch_.func_name = 'isMatch'
                    var.put('isMatch', PyJsHoisted_isMatch_)
                    @Js
                    def PyJsHoisted_isMatchWith_(object, source, customizer, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'object', 'source'])
                        var.put('customizer', (var.get('customizer') if (var.get('customizer',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        return var.get('baseIsMatch')(var.get('object'), var.get('source'), var.get('getMatchData')(var.get('source')), var.get('customizer'))
                    PyJsHoisted_isMatchWith_.func_name = 'isMatchWith'
                    var.put('isMatchWith', PyJsHoisted_isMatchWith_)
                    @Js
                    def PyJsHoisted_isNaN_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('isNumber')(var.get('value')) and (var.get('value')!=(+var.get('value'))))
                    PyJsHoisted_isNaN_.func_name = 'isNaN'
                    var.put('isNaN', PyJsHoisted_isNaN_)
                    @Js
                    def PyJsHoisted_isNative_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        if var.get('isMaskable')(var.get('value')):
                            PyJsTempException = JsToPyException(var.get('Error').create(var.get('CORE_ERROR_TEXT')))
                            raise PyJsTempException
                        return var.get('baseIsNative')(var.get('value'))
                    PyJsHoisted_isNative_.func_name = 'isNative'
                    var.put('isNative', PyJsHoisted_isNative_)
                    @Js
                    def PyJsHoisted_isNull_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return PyJsStrictEq(var.get('value'),var.get(u"null"))
                    PyJsHoisted_isNull_.func_name = 'isNull'
                    var.put('isNull', PyJsHoisted_isNull_)
                    @Js
                    def PyJsHoisted_isNil_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('value')==var.get(u"null"))
                    PyJsHoisted_isNil_.func_name = 'isNil'
                    var.put('isNil', PyJsHoisted_isNil_)
                    @Js
                    def PyJsHoisted_isNumber_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('value',throw=False).typeof()==Js('number')) or (var.get('isObjectLike')(var.get('value')) and (var.get('baseGetTag')(var.get('value'))==var.get('numberTag'))))
                    PyJsHoisted_isNumber_.func_name = 'isNumber'
                    var.put('isNumber', PyJsHoisted_isNumber_)
                    @Js
                    def PyJsHoisted_isPlainObject_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['Ctor', 'value', 'proto'])
                        if (var.get('isObjectLike')(var.get('value')).neg() or (var.get('baseGetTag')(var.get('value'))!=var.get('objectTag'))):
                            return Js(False)
                        var.put('proto', var.get('getPrototype')(var.get('value')))
                        if PyJsStrictEq(var.get('proto'),var.get(u"null")):
                            return Js(True)
                        var.put('Ctor', (var.get('hasOwnProperty').callprop('call', var.get('proto'), Js('constructor')) and var.get('proto').get('constructor')))
                        return (((var.get('Ctor',throw=False).typeof()==Js('function')) and var.get('Ctor').instanceof(var.get('Ctor'))) and (var.get('funcToString').callprop('call', var.get('Ctor'))==var.get('objectCtorString')))
                    PyJsHoisted_isPlainObject_.func_name = 'isPlainObject'
                    var.put('isPlainObject', PyJsHoisted_isPlainObject_)
                    @Js
                    def PyJsHoisted_isSafeInteger_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('isInteger')(var.get('value')) and (var.get('value')>=(-var.get('MAX_SAFE_INTEGER')))) and (var.get('value')<=var.get('MAX_SAFE_INTEGER')))
                    PyJsHoisted_isSafeInteger_.func_name = 'isSafeInteger'
                    var.put('isSafeInteger', PyJsHoisted_isSafeInteger_)
                    @Js
                    def PyJsHoisted_isString_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('value',throw=False).typeof()==Js('string')) or ((var.get('isArray')(var.get('value')).neg() and var.get('isObjectLike')(var.get('value'))) and (var.get('baseGetTag')(var.get('value'))==var.get('stringTag'))))
                    PyJsHoisted_isString_.func_name = 'isString'
                    var.put('isString', PyJsHoisted_isString_)
                    @Js
                    def PyJsHoisted_isSymbol_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (((Js('undefined') if PyJsStrictEq(var.get('value',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('value')))==Js('symbol')) or (var.get('isObjectLike')(var.get('value')) and (var.get('baseGetTag')(var.get('value'))==var.get('symbolTag'))))
                    PyJsHoisted_isSymbol_.func_name = 'isSymbol'
                    var.put('isSymbol', PyJsHoisted_isSymbol_)
                    @Js
                    def PyJsHoisted_isUndefined_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return PyJsStrictEq(var.get('value'),var.get('undefined'))
                    PyJsHoisted_isUndefined_.func_name = 'isUndefined'
                    var.put('isUndefined', PyJsHoisted_isUndefined_)
                    @Js
                    def PyJsHoisted_isWeakMap_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('isObjectLike')(var.get('value')) and (var.get('getTag')(var.get('value'))==var.get('weakMapTag')))
                    PyJsHoisted_isWeakMap_.func_name = 'isWeakMap'
                    var.put('isWeakMap', PyJsHoisted_isWeakMap_)
                    @Js
                    def PyJsHoisted_isWeakSet_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('isObjectLike')(var.get('value')) and (var.get('baseGetTag')(var.get('value'))==var.get('weakSetTag')))
                    PyJsHoisted_isWeakSet_.func_name = 'isWeakSet'
                    var.put('isWeakSet', PyJsHoisted_isWeakSet_)
                    @Js
                    def PyJsHoisted_toArray_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['tag', 'func', 'value'])
                        if var.get('value').neg():
                            return Js([])
                        if var.get('isArrayLike')(var.get('value')):
                            return (var.get('stringToArray')(var.get('value')) if var.get('isString')(var.get('value')) else var.get('copyArray')(var.get('value')))
                        if (var.get('symIterator') and var.get('value').get(var.get('symIterator'))):
                            return var.get('iteratorToArray')(var.get('value').callprop(var.get('symIterator')))
                        var.put('tag', var.get('getTag')(var.get('value')))
                        var.put('func', (var.get('mapToArray') if (var.get('tag')==var.get('mapTag')) else (var.get('setToArray') if (var.get('tag')==var.get('setTag')) else var.get('values'))))
                        return var.get('func')(var.get('value'))
                    PyJsHoisted_toArray_.func_name = 'toArray'
                    var.put('toArray', PyJsHoisted_toArray_)
                    @Js
                    def PyJsHoisted_toFinite_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['sign', 'value'])
                        if var.get('value').neg():
                            return (var.get('value') if PyJsStrictEq(var.get('value'),Js(0.0)) else Js(0.0))
                        var.put('value', var.get('toNumber')(var.get('value')))
                        if (PyJsStrictEq(var.get('value'),var.get('INFINITY')) or PyJsStrictEq(var.get('value'),(-var.get('INFINITY')))):
                            var.put('sign', ((-Js(1.0)) if (var.get('value')<Js(0.0)) else Js(1.0)))
                            return (var.get('sign')*var.get('MAX_INTEGER'))
                        return (var.get('value') if PyJsStrictEq(var.get('value'),var.get('value')) else Js(0.0))
                    PyJsHoisted_toFinite_.func_name = 'toFinite'
                    var.put('toFinite', PyJsHoisted_toFinite_)
                    @Js
                    def PyJsHoisted_toInteger_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['remainder', 'result', 'value'])
                        var.put('result', var.get('toFinite')(var.get('value')))
                        var.put('remainder', (var.get('result')%Js(1.0)))
                        return (((var.get('result')-var.get('remainder')) if var.get('remainder') else var.get('result')) if PyJsStrictEq(var.get('result'),var.get('result')) else Js(0.0))
                    PyJsHoisted_toInteger_.func_name = 'toInteger'
                    var.put('toInteger', PyJsHoisted_toInteger_)
                    @Js
                    def PyJsHoisted_toLength_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('baseClamp')(var.get('toInteger')(var.get('value')), Js(0.0), var.get('MAX_ARRAY_LENGTH')) if var.get('value') else Js(0.0))
                    PyJsHoisted_toLength_.func_name = 'toLength'
                    var.put('toLength', PyJsHoisted_toLength_)
                    @Js
                    def PyJsHoisted_toNumber_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['isBinary', 'other', 'value'])
                        if (var.get('value',throw=False).typeof()==Js('number')):
                            return var.get('value')
                        if var.get('isSymbol')(var.get('value')):
                            return var.get('NAN')
                        if var.get('isObject')(var.get('value')):
                            var.put('other', (var.get('value').callprop('valueOf') if (var.get('value').get('valueOf').typeof()==Js('function')) else var.get('value')))
                            var.put('value', ((var.get('other')+Js('')) if var.get('isObject')(var.get('other')) else var.get('other')))
                        if (var.get('value',throw=False).typeof()!=Js('string')):
                            return (var.get('value') if PyJsStrictEq(var.get('value'),Js(0.0)) else (+var.get('value')))
                        var.put('value', var.get('value').callprop('replace', var.get('reTrim'), Js('')))
                        var.put('isBinary', var.get('reIsBinary').callprop('test', var.get('value')))
                        return (var.get('freeParseInt')(var.get('value').callprop('slice', Js(2.0)), (Js(2.0) if var.get('isBinary') else Js(8.0))) if (var.get('isBinary') or var.get('reIsOctal').callprop('test', var.get('value'))) else (var.get('NAN') if var.get('reIsBadHex').callprop('test', var.get('value')) else (+var.get('value'))))
                    PyJsHoisted_toNumber_.func_name = 'toNumber'
                    var.put('toNumber', PyJsHoisted_toNumber_)
                    @Js
                    def PyJsHoisted_toPlainObject_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return var.get('copyObject')(var.get('value'), var.get('keysIn')(var.get('value')))
                    PyJsHoisted_toPlainObject_.func_name = 'toPlainObject'
                    var.put('toPlainObject', PyJsHoisted_toPlainObject_)
                    @Js
                    def PyJsHoisted_toSafeInteger_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (var.get('baseClamp')(var.get('toInteger')(var.get('value')), (-var.get('MAX_SAFE_INTEGER')), var.get('MAX_SAFE_INTEGER')) if var.get('value') else (var.get('value') if PyJsStrictEq(var.get('value'),Js(0.0)) else Js(0.0)))
                    PyJsHoisted_toSafeInteger_.func_name = 'toSafeInteger'
                    var.put('toSafeInteger', PyJsHoisted_toSafeInteger_)
                    @Js
                    def PyJsHoisted_toString_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return (Js('') if (var.get('value')==var.get(u"null")) else var.get('baseToString')(var.get('value')))
                    PyJsHoisted_toString_.func_name = 'toString'
                    var.put('toString', PyJsHoisted_toString_)
                    @Js
                    def PyJsHoisted_create_(prototype, properties, this, arguments, var=var):
                        var = Scope({'prototype':prototype, 'properties':properties, 'this':this, 'arguments':arguments}, var)
                        var.registers(['properties', 'result', 'prototype'])
                        var.put('result', var.get('baseCreate')(var.get('prototype')))
                        return (var.get('result') if (var.get('properties')==var.get(u"null")) else var.get('baseAssign')(var.get('result'), var.get('properties')))
                    PyJsHoisted_create_.func_name = 'create'
                    var.put('create', PyJsHoisted_create_)
                    @Js
                    def PyJsHoisted_findKey_(object, predicate, this, arguments, var=var):
                        var = Scope({'object':object, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate', 'object'])
                        return var.get('baseFindKey')(var.get('object'), var.get('getIteratee')(var.get('predicate'), Js(3.0)), var.get('baseForOwn'))
                    PyJsHoisted_findKey_.func_name = 'findKey'
                    var.put('findKey', PyJsHoisted_findKey_)
                    @Js
                    def PyJsHoisted_findLastKey_(object, predicate, this, arguments, var=var):
                        var = Scope({'object':object, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate', 'object'])
                        return var.get('baseFindKey')(var.get('object'), var.get('getIteratee')(var.get('predicate'), Js(3.0)), var.get('baseForOwnRight'))
                    PyJsHoisted_findLastKey_.func_name = 'findLastKey'
                    var.put('findLastKey', PyJsHoisted_findLastKey_)
                    @Js
                    def PyJsHoisted_forIn_(object, iteratee, this, arguments, var=var):
                        var = Scope({'object':object, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'iteratee'])
                        return (var.get('object') if (var.get('object')==var.get(u"null")) else var.get('baseFor')(var.get('object'), var.get('getIteratee')(var.get('iteratee'), Js(3.0)), var.get('keysIn')))
                    PyJsHoisted_forIn_.func_name = 'forIn'
                    var.put('forIn', PyJsHoisted_forIn_)
                    @Js
                    def PyJsHoisted_forInRight_(object, iteratee, this, arguments, var=var):
                        var = Scope({'object':object, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'iteratee'])
                        return (var.get('object') if (var.get('object')==var.get(u"null")) else var.get('baseForRight')(var.get('object'), var.get('getIteratee')(var.get('iteratee'), Js(3.0)), var.get('keysIn')))
                    PyJsHoisted_forInRight_.func_name = 'forInRight'
                    var.put('forInRight', PyJsHoisted_forInRight_)
                    @Js
                    def PyJsHoisted_forOwn_(object, iteratee, this, arguments, var=var):
                        var = Scope({'object':object, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'iteratee'])
                        return (var.get('object') and var.get('baseForOwn')(var.get('object'), var.get('getIteratee')(var.get('iteratee'), Js(3.0))))
                    PyJsHoisted_forOwn_.func_name = 'forOwn'
                    var.put('forOwn', PyJsHoisted_forOwn_)
                    @Js
                    def PyJsHoisted_forOwnRight_(object, iteratee, this, arguments, var=var):
                        var = Scope({'object':object, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'iteratee'])
                        return (var.get('object') and var.get('baseForOwnRight')(var.get('object'), var.get('getIteratee')(var.get('iteratee'), Js(3.0))))
                    PyJsHoisted_forOwnRight_.func_name = 'forOwnRight'
                    var.put('forOwnRight', PyJsHoisted_forOwnRight_)
                    @Js
                    def PyJsHoisted_functions_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        return (Js([]) if (var.get('object')==var.get(u"null")) else var.get('baseFunctions')(var.get('object'), var.get('keys')(var.get('object'))))
                    PyJsHoisted_functions_.func_name = 'functions'
                    var.put('functions', PyJsHoisted_functions_)
                    @Js
                    def PyJsHoisted_functionsIn_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        return (Js([]) if (var.get('object')==var.get(u"null")) else var.get('baseFunctions')(var.get('object'), var.get('keysIn')(var.get('object'))))
                    PyJsHoisted_functionsIn_.func_name = 'functionsIn'
                    var.put('functionsIn', PyJsHoisted_functionsIn_)
                    @Js
                    def PyJsHoisted_get_(object, path, defaultValue, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'defaultValue':defaultValue, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'object', 'result', 'defaultValue'])
                        var.put('result', (var.get('undefined') if (var.get('object')==var.get(u"null")) else var.get('baseGet')(var.get('object'), var.get('path'))))
                        return (var.get('defaultValue') if PyJsStrictEq(var.get('result'),var.get('undefined')) else var.get('result'))
                    PyJsHoisted_get_.func_name = 'get'
                    var.put('get', PyJsHoisted_get_)
                    @Js
                    def PyJsHoisted_has_(object, path, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'object'])
                        return ((var.get('object')!=var.get(u"null")) and var.get('hasPath')(var.get('object'), var.get('path'), var.get('baseHas')))
                    PyJsHoisted_has_.func_name = 'has'
                    var.put('has', PyJsHoisted_has_)
                    @Js
                    def PyJsHoisted_hasIn_(object, path, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'object'])
                        return ((var.get('object')!=var.get(u"null")) and var.get('hasPath')(var.get('object'), var.get('path'), var.get('baseHasIn')))
                    PyJsHoisted_hasIn_.func_name = 'hasIn'
                    var.put('hasIn', PyJsHoisted_hasIn_)
                    @Js
                    def PyJsHoisted_keys_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        return (var.get('arrayLikeKeys')(var.get('object')) if var.get('isArrayLike')(var.get('object')) else var.get('baseKeys')(var.get('object')))
                    PyJsHoisted_keys_.func_name = 'keys'
                    var.put('keys', PyJsHoisted_keys_)
                    @Js
                    def PyJsHoisted_keysIn_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        return (var.get('arrayLikeKeys')(var.get('object'), Js(True)) if var.get('isArrayLike')(var.get('object')) else var.get('baseKeysIn')(var.get('object')))
                    PyJsHoisted_keysIn_.func_name = 'keysIn'
                    var.put('keysIn', PyJsHoisted_keysIn_)
                    @Js
                    def PyJsHoisted_mapKeys_(object, iteratee, this, arguments, var=var):
                        var = Scope({'object':object, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'result', 'iteratee'])
                        var.put('result', Js({}))
                        var.put('iteratee', var.get('getIteratee')(var.get('iteratee'), Js(3.0)))
                        @Js
                        def PyJs_anonymous_244_(value, key, object, this, arguments, var=var):
                            var = Scope({'value':value, 'key':key, 'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key', 'object', 'value'])
                            var.get('baseAssignValue')(var.get('result'), var.get('iteratee')(var.get('value'), var.get('key'), var.get('object')), var.get('value'))
                        PyJs_anonymous_244_._set_name('anonymous')
                        var.get('baseForOwn')(var.get('object'), PyJs_anonymous_244_)
                        return var.get('result')
                    PyJsHoisted_mapKeys_.func_name = 'mapKeys'
                    var.put('mapKeys', PyJsHoisted_mapKeys_)
                    @Js
                    def PyJsHoisted_mapValues_(object, iteratee, this, arguments, var=var):
                        var = Scope({'object':object, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'result', 'iteratee'])
                        var.put('result', Js({}))
                        var.put('iteratee', var.get('getIteratee')(var.get('iteratee'), Js(3.0)))
                        @Js
                        def PyJs_anonymous_245_(value, key, object, this, arguments, var=var):
                            var = Scope({'value':value, 'key':key, 'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key', 'object', 'value'])
                            var.get('baseAssignValue')(var.get('result'), var.get('key'), var.get('iteratee')(var.get('value'), var.get('key'), var.get('object')))
                        PyJs_anonymous_245_._set_name('anonymous')
                        var.get('baseForOwn')(var.get('object'), PyJs_anonymous_245_)
                        return var.get('result')
                    PyJsHoisted_mapValues_.func_name = 'mapValues'
                    var.put('mapValues', PyJsHoisted_mapValues_)
                    @Js
                    def PyJsHoisted_omitBy_(object, predicate, this, arguments, var=var):
                        var = Scope({'object':object, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate', 'object'])
                        return var.get('pickBy')(var.get('object'), var.get('negate')(var.get('getIteratee')(var.get('predicate'))))
                    PyJsHoisted_omitBy_.func_name = 'omitBy'
                    var.put('omitBy', PyJsHoisted_omitBy_)
                    @Js
                    def PyJsHoisted_pickBy_(object, predicate, this, arguments, var=var):
                        var = Scope({'object':object, 'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate', 'object', 'props'])
                        if (var.get('object')==var.get(u"null")):
                            return Js({})
                        @Js
                        def PyJs_anonymous_251_(prop, this, arguments, var=var):
                            var = Scope({'prop':prop, 'this':this, 'arguments':arguments}, var)
                            var.registers(['prop'])
                            return Js([var.get('prop')])
                        PyJs_anonymous_251_._set_name('anonymous')
                        var.put('props', var.get('arrayMap')(var.get('getAllKeysIn')(var.get('object')), PyJs_anonymous_251_))
                        var.put('predicate', var.get('getIteratee')(var.get('predicate')))
                        @Js
                        def PyJs_anonymous_252_(value, path, this, arguments, var=var):
                            var = Scope({'value':value, 'path':path, 'this':this, 'arguments':arguments}, var)
                            var.registers(['path', 'value'])
                            return var.get('predicate')(var.get('value'), var.get('path').get('0'))
                        PyJs_anonymous_252_._set_name('anonymous')
                        return var.get('basePickBy')(var.get('object'), var.get('props'), PyJs_anonymous_252_)
                    PyJsHoisted_pickBy_.func_name = 'pickBy'
                    var.put('pickBy', PyJsHoisted_pickBy_)
                    @Js
                    def PyJsHoisted_result_(object, path, defaultValue, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'defaultValue':defaultValue, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value', 'object', 'path', 'defaultValue', 'length', 'index'])
                        var.put('path', var.get('castPath')(var.get('path'), var.get('object')))
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('path').get('length'))
                        if var.get('length').neg():
                            var.put('length', Js(1.0))
                            var.put('object', var.get('undefined'))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('value', (var.get('undefined') if (var.get('object')==var.get(u"null")) else var.get('object').get(var.get('toKey')(var.get('path').get(var.get('index'))))))
                            if PyJsStrictEq(var.get('value'),var.get('undefined')):
                                var.put('index', var.get('length'))
                                var.put('value', var.get('defaultValue'))
                            var.put('object', (var.get('value').callprop('call', var.get('object')) if var.get('isFunction')(var.get('value')) else var.get('value')))
                        return var.get('object')
                    PyJsHoisted_result_.func_name = 'result'
                    var.put('result', PyJsHoisted_result_)
                    @Js
                    def PyJsHoisted_set_(object, path, value, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'object', 'value'])
                        return (var.get('object') if (var.get('object')==var.get(u"null")) else var.get('baseSet')(var.get('object'), var.get('path'), var.get('value')))
                    PyJsHoisted_set_.func_name = 'set'
                    var.put('set', PyJsHoisted_set_)
                    @Js
                    def PyJsHoisted_setWith_(object, path, value, customizer, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'value':value, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'object', 'customizer', 'value'])
                        var.put('customizer', (var.get('customizer') if (var.get('customizer',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        return (var.get('object') if (var.get('object')==var.get(u"null")) else var.get('baseSet')(var.get('object'), var.get('path'), var.get('value'), var.get('customizer')))
                    PyJsHoisted_setWith_.func_name = 'setWith'
                    var.put('setWith', PyJsHoisted_setWith_)
                    @Js
                    def PyJsHoisted_transform_(object, iteratee, accumulator, this, arguments, var=var):
                        var = Scope({'object':object, 'iteratee':iteratee, 'accumulator':accumulator, 'this':this, 'arguments':arguments}, var)
                        var.registers(['isArr', 'object', 'accumulator', 'Ctor', 'iteratee', 'isArrLike'])
                        var.put('isArr', var.get('isArray')(var.get('object')))
                        var.put('isArrLike', ((var.get('isArr') or var.get('isBuffer')(var.get('object'))) or var.get('isTypedArray')(var.get('object'))))
                        var.put('iteratee', var.get('getIteratee')(var.get('iteratee'), Js(4.0)))
                        if (var.get('accumulator')==var.get(u"null")):
                            var.put('Ctor', (var.get('object') and var.get('object').get('constructor')))
                            if var.get('isArrLike'):
                                var.put('accumulator', (var.get('Ctor').create() if var.get('isArr') else Js([])))
                            else:
                                if var.get('isObject')(var.get('object')):
                                    var.put('accumulator', (var.get('baseCreate')(var.get('getPrototype')(var.get('object'))) if var.get('isFunction')(var.get('Ctor')) else Js({})))
                                else:
                                    var.put('accumulator', Js({}))
                        @Js
                        def PyJs_anonymous_253_(value, index, object, this, arguments, var=var):
                            var = Scope({'value':value, 'index':index, 'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object', 'index', 'value'])
                            return var.get('iteratee')(var.get('accumulator'), var.get('value'), var.get('index'), var.get('object'))
                        PyJs_anonymous_253_._set_name('anonymous')
                        (var.get('arrayEach') if var.get('isArrLike') else var.get('baseForOwn'))(var.get('object'), PyJs_anonymous_253_)
                        return var.get('accumulator')
                    PyJsHoisted_transform_.func_name = 'transform'
                    var.put('transform', PyJsHoisted_transform_)
                    @Js
                    def PyJsHoisted_unset_(object, path, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'object'])
                        return (Js(True) if (var.get('object')==var.get(u"null")) else var.get('baseUnset')(var.get('object'), var.get('path')))
                    PyJsHoisted_unset_.func_name = 'unset'
                    var.put('unset', PyJsHoisted_unset_)
                    @Js
                    def PyJsHoisted_update_(object, path, updater, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'updater':updater, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'object', 'updater'])
                        return (var.get('object') if (var.get('object')==var.get(u"null")) else var.get('baseUpdate')(var.get('object'), var.get('path'), var.get('castFunction')(var.get('updater'))))
                    PyJsHoisted_update_.func_name = 'update'
                    var.put('update', PyJsHoisted_update_)
                    @Js
                    def PyJsHoisted_updateWith_(object, path, updater, customizer, this, arguments, var=var):
                        var = Scope({'object':object, 'path':path, 'updater':updater, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'object', 'updater', 'customizer'])
                        var.put('customizer', (var.get('customizer') if (var.get('customizer',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        return (var.get('object') if (var.get('object')==var.get(u"null")) else var.get('baseUpdate')(var.get('object'), var.get('path'), var.get('castFunction')(var.get('updater')), var.get('customizer')))
                    PyJsHoisted_updateWith_.func_name = 'updateWith'
                    var.put('updateWith', PyJsHoisted_updateWith_)
                    @Js
                    def PyJsHoisted_values_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        return (Js([]) if (var.get('object')==var.get(u"null")) else var.get('baseValues')(var.get('object'), var.get('keys')(var.get('object'))))
                    PyJsHoisted_values_.func_name = 'values'
                    var.put('values', PyJsHoisted_values_)
                    @Js
                    def PyJsHoisted_valuesIn_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        return (Js([]) if (var.get('object')==var.get(u"null")) else var.get('baseValues')(var.get('object'), var.get('keysIn')(var.get('object'))))
                    PyJsHoisted_valuesIn_.func_name = 'valuesIn'
                    var.put('valuesIn', PyJsHoisted_valuesIn_)
                    @Js
                    def PyJsHoisted_clamp_(number, lower, upper, this, arguments, var=var):
                        var = Scope({'number':number, 'lower':lower, 'upper':upper, 'this':this, 'arguments':arguments}, var)
                        var.registers(['upper', 'number', 'lower'])
                        if PyJsStrictEq(var.get('upper'),var.get('undefined')):
                            var.put('upper', var.get('lower'))
                            var.put('lower', var.get('undefined'))
                        if PyJsStrictNeq(var.get('upper'),var.get('undefined')):
                            var.put('upper', var.get('toNumber')(var.get('upper')))
                            var.put('upper', (var.get('upper') if PyJsStrictEq(var.get('upper'),var.get('upper')) else Js(0.0)))
                        if PyJsStrictNeq(var.get('lower'),var.get('undefined')):
                            var.put('lower', var.get('toNumber')(var.get('lower')))
                            var.put('lower', (var.get('lower') if PyJsStrictEq(var.get('lower'),var.get('lower')) else Js(0.0)))
                        return var.get('baseClamp')(var.get('toNumber')(var.get('number')), var.get('lower'), var.get('upper'))
                    PyJsHoisted_clamp_.func_name = 'clamp'
                    var.put('clamp', PyJsHoisted_clamp_)
                    @Js
                    def PyJsHoisted_inRange_(number, start, end, this, arguments, var=var):
                        var = Scope({'number':number, 'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                        var.registers(['end', 'number', 'start'])
                        var.put('start', var.get('toFinite')(var.get('start')))
                        if PyJsStrictEq(var.get('end'),var.get('undefined')):
                            var.put('end', var.get('start'))
                            var.put('start', Js(0.0))
                        else:
                            var.put('end', var.get('toFinite')(var.get('end')))
                        var.put('number', var.get('toNumber')(var.get('number')))
                        return var.get('baseInRange')(var.get('number'), var.get('start'), var.get('end'))
                    PyJsHoisted_inRange_.func_name = 'inRange'
                    var.put('inRange', PyJsHoisted_inRange_)
                    @Js
                    def PyJsHoisted_random_(lower, upper, floating, this, arguments, var=var):
                        var = Scope({'lower':lower, 'upper':upper, 'floating':floating, 'this':this, 'arguments':arguments}, var)
                        var.registers(['floating', 'temp', 'upper', 'rand', 'lower'])
                        if ((var.get('floating') and (var.get('floating',throw=False).typeof()!=Js('boolean'))) and var.get('isIterateeCall')(var.get('lower'), var.get('upper'), var.get('floating'))):
                            var.put('upper', var.put('floating', var.get('undefined')))
                        if PyJsStrictEq(var.get('floating'),var.get('undefined')):
                            if (var.get('upper',throw=False).typeof()==Js('boolean')):
                                var.put('floating', var.get('upper'))
                                var.put('upper', var.get('undefined'))
                            else:
                                if (var.get('lower',throw=False).typeof()==Js('boolean')):
                                    var.put('floating', var.get('lower'))
                                    var.put('lower', var.get('undefined'))
                        if (PyJsStrictEq(var.get('lower'),var.get('undefined')) and PyJsStrictEq(var.get('upper'),var.get('undefined'))):
                            var.put('lower', Js(0.0))
                            var.put('upper', Js(1.0))
                        else:
                            var.put('lower', var.get('toFinite')(var.get('lower')))
                            if PyJsStrictEq(var.get('upper'),var.get('undefined')):
                                var.put('upper', var.get('lower'))
                                var.put('lower', Js(0.0))
                            else:
                                var.put('upper', var.get('toFinite')(var.get('upper')))
                        if (var.get('lower')>var.get('upper')):
                            var.put('temp', var.get('lower'))
                            var.put('lower', var.get('upper'))
                            var.put('upper', var.get('temp'))
                        if ((var.get('floating') or (var.get('lower')%Js(1.0))) or (var.get('upper')%Js(1.0))):
                            var.put('rand', var.get('nativeRandom')())
                            return var.get('nativeMin')((var.get('lower')+(var.get('rand')*((var.get('upper')-var.get('lower'))+var.get('freeParseFloat')((Js('1e-')+((var.get('rand')+Js('')).get('length')-Js(1.0))))))), var.get('upper'))
                        return var.get('baseRandom')(var.get('lower'), var.get('upper'))
                    PyJsHoisted_random_.func_name = 'random'
                    var.put('random', PyJsHoisted_random_)
                    @Js
                    def PyJsHoisted_capitalize_(string, this, arguments, var=var):
                        var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                        var.registers(['string'])
                        return var.get('upperFirst')(var.get('toString')(var.get('string')).callprop('toLowerCase'))
                    PyJsHoisted_capitalize_.func_name = 'capitalize'
                    var.put('capitalize', PyJsHoisted_capitalize_)
                    @Js
                    def PyJsHoisted_deburr_(string, this, arguments, var=var):
                        var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                        var.registers(['string'])
                        var.put('string', var.get('toString')(var.get('string')))
                        return (var.get('string') and var.get('string').callprop('replace', var.get('reLatin'), var.get('deburrLetter')).callprop('replace', var.get('reComboMark'), Js('')))
                    PyJsHoisted_deburr_.func_name = 'deburr'
                    var.put('deburr', PyJsHoisted_deburr_)
                    @Js
                    def PyJsHoisted_endsWith_(string, target, position, this, arguments, var=var):
                        var = Scope({'string':string, 'target':target, 'position':position, 'this':this, 'arguments':arguments}, var)
                        var.registers(['position', 'target', 'string', 'end', 'length'])
                        var.put('string', var.get('toString')(var.get('string')))
                        var.put('target', var.get('baseToString')(var.get('target')))
                        var.put('length', var.get('string').get('length'))
                        var.put('position', (var.get('length') if PyJsStrictEq(var.get('position'),var.get('undefined')) else var.get('baseClamp')(var.get('toInteger')(var.get('position')), Js(0.0), var.get('length'))))
                        var.put('end', var.get('position'))
                        var.put('position', var.get('target').get('length'), '-')
                        return ((var.get('position')>=Js(0.0)) and (var.get('string').callprop('slice', var.get('position'), var.get('end'))==var.get('target')))
                    PyJsHoisted_endsWith_.func_name = 'endsWith'
                    var.put('endsWith', PyJsHoisted_endsWith_)
                    @Js
                    def PyJsHoisted_escape_(string, this, arguments, var=var):
                        var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                        var.registers(['string'])
                        var.put('string', var.get('toString')(var.get('string')))
                        return (var.get('string').callprop('replace', var.get('reUnescapedHtml'), var.get('escapeHtmlChar')) if (var.get('string') and var.get('reHasUnescapedHtml').callprop('test', var.get('string'))) else var.get('string'))
                    PyJsHoisted_escape_.func_name = 'escape'
                    var.put('escape', PyJsHoisted_escape_)
                    @Js
                    def PyJsHoisted_escapeRegExp_(string, this, arguments, var=var):
                        var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                        var.registers(['string'])
                        var.put('string', var.get('toString')(var.get('string')))
                        return (var.get('string').callprop('replace', var.get('reRegExpChar'), Js('\\$&')) if (var.get('string') and var.get('reHasRegExpChar').callprop('test', var.get('string'))) else var.get('string'))
                    PyJsHoisted_escapeRegExp_.func_name = 'escapeRegExp'
                    var.put('escapeRegExp', PyJsHoisted_escapeRegExp_)
                    @Js
                    def PyJsHoisted_pad_(string, length, chars, this, arguments, var=var):
                        var = Scope({'string':string, 'length':length, 'chars':chars, 'this':this, 'arguments':arguments}, var)
                        var.registers(['chars', 'string', 'strLength', 'mid', 'length'])
                        var.put('string', var.get('toString')(var.get('string')))
                        var.put('length', var.get('toInteger')(var.get('length')))
                        var.put('strLength', (var.get('stringSize')(var.get('string')) if var.get('length') else Js(0.0)))
                        if (var.get('length').neg() or (var.get('strLength')>=var.get('length'))):
                            return var.get('string')
                        var.put('mid', ((var.get('length')-var.get('strLength'))/Js(2.0)))
                        return ((var.get('createPadding')(var.get('nativeFloor')(var.get('mid')), var.get('chars'))+var.get('string'))+var.get('createPadding')(var.get('nativeCeil')(var.get('mid')), var.get('chars')))
                    PyJsHoisted_pad_.func_name = 'pad'
                    var.put('pad', PyJsHoisted_pad_)
                    @Js
                    def PyJsHoisted_padEnd_(string, length, chars, this, arguments, var=var):
                        var = Scope({'string':string, 'length':length, 'chars':chars, 'this':this, 'arguments':arguments}, var)
                        var.registers(['chars', 'length', 'string', 'strLength'])
                        var.put('string', var.get('toString')(var.get('string')))
                        var.put('length', var.get('toInteger')(var.get('length')))
                        var.put('strLength', (var.get('stringSize')(var.get('string')) if var.get('length') else Js(0.0)))
                        return ((var.get('string')+var.get('createPadding')((var.get('length')-var.get('strLength')), var.get('chars'))) if (var.get('length') and (var.get('strLength')<var.get('length'))) else var.get('string'))
                    PyJsHoisted_padEnd_.func_name = 'padEnd'
                    var.put('padEnd', PyJsHoisted_padEnd_)
                    @Js
                    def PyJsHoisted_padStart_(string, length, chars, this, arguments, var=var):
                        var = Scope({'string':string, 'length':length, 'chars':chars, 'this':this, 'arguments':arguments}, var)
                        var.registers(['chars', 'length', 'string', 'strLength'])
                        var.put('string', var.get('toString')(var.get('string')))
                        var.put('length', var.get('toInteger')(var.get('length')))
                        var.put('strLength', (var.get('stringSize')(var.get('string')) if var.get('length') else Js(0.0)))
                        return ((var.get('createPadding')((var.get('length')-var.get('strLength')), var.get('chars'))+var.get('string')) if (var.get('length') and (var.get('strLength')<var.get('length'))) else var.get('string'))
                    PyJsHoisted_padStart_.func_name = 'padStart'
                    var.put('padStart', PyJsHoisted_padStart_)
                    @Js
                    def PyJsHoisted_parseInt_(string, radix, guard, this, arguments, var=var):
                        var = Scope({'string':string, 'radix':radix, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['string', 'guard', 'radix'])
                        if (var.get('guard') or (var.get('radix')==var.get(u"null"))):
                            var.put('radix', Js(0.0))
                        else:
                            if var.get('radix'):
                                var.put('radix', (+var.get('radix')))
                        return var.get('nativeParseInt')(var.get('toString')(var.get('string')).callprop('replace', var.get('reTrimStart'), Js('')), (var.get('radix') or Js(0.0)))
                    PyJsHoisted_parseInt_.func_name = 'parseInt'
                    var.put('parseInt', PyJsHoisted_parseInt_)
                    @Js
                    def PyJsHoisted_repeat_(string, n, guard, this, arguments, var=var):
                        var = Scope({'string':string, 'n':n, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'string', 'guard'])
                        if (var.get('isIterateeCall')(var.get('string'), var.get('n'), var.get('guard')) if var.get('guard') else PyJsStrictEq(var.get('n'),var.get('undefined'))):
                            var.put('n', Js(1.0))
                        else:
                            var.put('n', var.get('toInteger')(var.get('n')))
                        return var.get('baseRepeat')(var.get('toString')(var.get('string')), var.get('n'))
                    PyJsHoisted_repeat_.func_name = 'repeat'
                    var.put('repeat', PyJsHoisted_repeat_)
                    @Js
                    def PyJsHoisted_replace_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['args', 'string'])
                        var.put('args', var.get('arguments'))
                        var.put('string', var.get('toString')(var.get('args').get('0')))
                        return (var.get('string') if (var.get('args').get('length')<Js(3.0)) else var.get('string').callprop('replace', var.get('args').get('1'), var.get('args').get('2')))
                    PyJsHoisted_replace_.func_name = 'replace'
                    var.put('replace', PyJsHoisted_replace_)
                    @Js
                    def PyJsHoisted_split_(string, separator, limit, this, arguments, var=var):
                        var = Scope({'string':string, 'separator':separator, 'limit':limit, 'this':this, 'arguments':arguments}, var)
                        var.registers(['separator', 'limit', 'string'])
                        if ((var.get('limit') and (var.get('limit',throw=False).typeof()!=Js('number'))) and var.get('isIterateeCall')(var.get('string'), var.get('separator'), var.get('limit'))):
                            var.put('separator', var.put('limit', var.get('undefined')))
                        var.put('limit', (var.get('MAX_ARRAY_LENGTH') if PyJsStrictEq(var.get('limit'),var.get('undefined')) else PyJsBshift(var.get('limit'),Js(0.0))))
                        if var.get('limit').neg():
                            return Js([])
                        var.put('string', var.get('toString')(var.get('string')))
                        if (var.get('string') and ((var.get('separator',throw=False).typeof()==Js('string')) or ((var.get('separator')!=var.get(u"null")) and var.get('isRegExp')(var.get('separator')).neg()))):
                            var.put('separator', var.get('baseToString')(var.get('separator')))
                            if (var.get('separator').neg() and var.get('hasUnicode')(var.get('string'))):
                                return var.get('castSlice')(var.get('stringToArray')(var.get('string')), Js(0.0), var.get('limit'))
                        return var.get('string').callprop('split', var.get('separator'), var.get('limit'))
                    PyJsHoisted_split_.func_name = 'split'
                    var.put('split', PyJsHoisted_split_)
                    @Js
                    def PyJsHoisted_startsWith_(string, target, position, this, arguments, var=var):
                        var = Scope({'string':string, 'target':target, 'position':position, 'this':this, 'arguments':arguments}, var)
                        var.registers(['string', 'position', 'target'])
                        var.put('string', var.get('toString')(var.get('string')))
                        var.put('position', (Js(0.0) if (var.get('position')==var.get(u"null")) else var.get('baseClamp')(var.get('toInteger')(var.get('position')), Js(0.0), var.get('string').get('length'))))
                        var.put('target', var.get('baseToString')(var.get('target')))
                        return (var.get('string').callprop('slice', var.get('position'), (var.get('position')+var.get('target').get('length')))==var.get('target'))
                    PyJsHoisted_startsWith_.func_name = 'startsWith'
                    var.put('startsWith', PyJsHoisted_startsWith_)
                    @Js
                    def PyJsHoisted_template_(string, options, guard, this, arguments, var=var):
                        var = Scope({'string':string, 'options':options, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['isEscaping', 'guard', 'imports', 'importsValues', 'sourceURL', 'variable', 'options', 'result', 'string', 'interpolate', 'settings', 'reDelimiters', 'importsKeys', 'isEvaluating', 'source', 'index'])
                        var.put('settings', var.get('lodash').get('templateSettings'))
                        if (var.get('guard') and var.get('isIterateeCall')(var.get('string'), var.get('options'), var.get('guard'))):
                            var.put('options', var.get('undefined'))
                        var.put('string', var.get('toString')(var.get('string')))
                        var.put('options', var.get('assignInWith')(Js({}), var.get('options'), var.get('settings'), var.get('customDefaultsAssignIn')))
                        var.put('imports', var.get('assignInWith')(Js({}), var.get('options').get('imports'), var.get('settings').get('imports'), var.get('customDefaultsAssignIn')))
                        var.put('importsKeys', var.get('keys')(var.get('imports')))
                        var.put('importsValues', var.get('baseValues')(var.get('imports'), var.get('importsKeys')))
                        var.put('index', Js(0.0))
                        var.put('interpolate', (var.get('options').get('interpolate') or var.get('reNoMatch')))
                        var.put('source', Js("__p += '"))
                        var.put('reDelimiters', var.get('RegExp')(((((((((var.get('options').get('escape') or var.get('reNoMatch')).get('source')+Js('|'))+var.get('interpolate').get('source'))+Js('|'))+(var.get('reEsTemplate') if PyJsStrictEq(var.get('interpolate'),var.get('reInterpolate')) else var.get('reNoMatch')).get('source'))+Js('|'))+(var.get('options').get('evaluate') or var.get('reNoMatch')).get('source'))+Js('|$')), Js('g')))
                        var.put('sourceURL', ((Js('//# sourceURL=')+(var.get('options').get('sourceURL') if var.get('options').contains(Js('sourceURL')) else ((Js('lodash.templateSources[')+var.put('templateCounter',Js(var.get('templateCounter').to_number())+Js(1)))+Js(']'))))+Js('\n')))
                        @Js
                        def PyJs_anonymous_259_(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset, this, arguments, var=var):
                            var = Scope({'match':match, 'escapeValue':escapeValue, 'interpolateValue':interpolateValue, 'esTemplateValue':esTemplateValue, 'evaluateValue':evaluateValue, 'offset':offset, 'this':this, 'arguments':arguments}, var)
                            var.registers(['evaluateValue', 'offset', 'interpolateValue', 'esTemplateValue', 'escapeValue', 'match'])
                            (var.get('interpolateValue') or var.put('interpolateValue', var.get('esTemplateValue')))
                            var.put('source', var.get('string').callprop('slice', var.get('index'), var.get('offset')).callprop('replace', var.get('reUnescapedString'), var.get('escapeStringChar')), '+')
                            if var.get('escapeValue'):
                                var.put('isEscaping', Js(True))
                                var.put('source', ((Js("' +\n__e(")+var.get('escapeValue'))+Js(") +\n'")), '+')
                            if var.get('evaluateValue'):
                                var.put('isEvaluating', Js(True))
                                var.put('source', ((Js("';\n")+var.get('evaluateValue'))+Js(";\n__p += '")), '+')
                            if var.get('interpolateValue'):
                                var.put('source', ((Js("' +\n((__t = (")+var.get('interpolateValue'))+Js(")) == null ? '' : __t) +\n'")), '+')
                            var.put('index', (var.get('offset')+var.get('match').get('length')))
                            return var.get('match')
                        PyJs_anonymous_259_._set_name('anonymous')
                        var.get('string').callprop('replace', var.get('reDelimiters'), PyJs_anonymous_259_)
                        var.put('source', Js("';\n"), '+')
                        var.put('variable', var.get('options').get('variable'))
                        if var.get('variable').neg():
                            var.put('source', ((Js('with (obj) {\n')+var.get('source'))+Js('\n}\n')))
                        var.put('source', (var.get('source').callprop('replace', var.get('reEmptyStringLeading'), Js('')) if var.get('isEvaluating') else var.get('source')).callprop('replace', var.get('reEmptyStringMiddle'), Js('$1')).callprop('replace', var.get('reEmptyStringTrailing'), Js('$1;')))
                        def PyJs_LONG_260_(var=var):
                            return ((((((((Js('function(')+(var.get('variable') or Js('obj')))+Js(') {\n'))+(Js('') if var.get('variable') else Js('obj || (obj = {});\n')))+Js("var __t, __p = ''"))+(Js(', __e = _.escape') if var.get('isEscaping') else Js('')))+((Js(', __j = Array.prototype.join;\n')+Js("function print() { __p += __j.call(arguments, '') }\n")) if var.get('isEvaluating') else Js(';\n')))+var.get('source'))+Js('return __p\n}'))
                        var.put('source', PyJs_LONG_260_())
                        @Js
                        def PyJs_anonymous_261_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            return var.get('Function')(var.get('importsKeys'), ((var.get('sourceURL')+Js('return '))+var.get('source'))).callprop('apply', var.get('undefined'), var.get('importsValues'))
                        PyJs_anonymous_261_._set_name('anonymous')
                        var.put('result', var.get('attempt')(PyJs_anonymous_261_))
                        var.get('result').put('source', var.get('source'))
                        if var.get('isError')(var.get('result')):
                            PyJsTempException = JsToPyException(var.get('result'))
                            raise PyJsTempException
                        return var.get('result')
                    PyJsHoisted_template_.func_name = 'template'
                    var.put('template', PyJsHoisted_template_)
                    @Js
                    def PyJsHoisted_toLower_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return var.get('toString')(var.get('value')).callprop('toLowerCase')
                    PyJsHoisted_toLower_.func_name = 'toLower'
                    var.put('toLower', PyJsHoisted_toLower_)
                    @Js
                    def PyJsHoisted_toUpper_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return var.get('toString')(var.get('value')).callprop('toUpperCase')
                    PyJsHoisted_toUpper_.func_name = 'toUpper'
                    var.put('toUpper', PyJsHoisted_toUpper_)
                    @Js
                    def PyJsHoisted_trim_(string, chars, guard, this, arguments, var=var):
                        var = Scope({'string':string, 'chars':chars, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['guard', 'strSymbols', 'chars', 'string', 'start', 'end', 'chrSymbols'])
                        var.put('string', var.get('toString')(var.get('string')))
                        if (var.get('string') and (var.get('guard') or PyJsStrictEq(var.get('chars'),var.get('undefined')))):
                            return var.get('string').callprop('replace', var.get('reTrim'), Js(''))
                        if (var.get('string').neg() or var.put('chars', var.get('baseToString')(var.get('chars'))).neg()):
                            return var.get('string')
                        var.put('strSymbols', var.get('stringToArray')(var.get('string')))
                        var.put('chrSymbols', var.get('stringToArray')(var.get('chars')))
                        var.put('start', var.get('charsStartIndex')(var.get('strSymbols'), var.get('chrSymbols')))
                        var.put('end', (var.get('charsEndIndex')(var.get('strSymbols'), var.get('chrSymbols'))+Js(1.0)))
                        return var.get('castSlice')(var.get('strSymbols'), var.get('start'), var.get('end')).callprop('join', Js(''))
                    PyJsHoisted_trim_.func_name = 'trim'
                    var.put('trim', PyJsHoisted_trim_)
                    @Js
                    def PyJsHoisted_trimEnd_(string, chars, guard, this, arguments, var=var):
                        var = Scope({'string':string, 'chars':chars, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['guard', 'strSymbols', 'chars', 'string', 'end'])
                        var.put('string', var.get('toString')(var.get('string')))
                        if (var.get('string') and (var.get('guard') or PyJsStrictEq(var.get('chars'),var.get('undefined')))):
                            return var.get('string').callprop('replace', var.get('reTrimEnd'), Js(''))
                        if (var.get('string').neg() or var.put('chars', var.get('baseToString')(var.get('chars'))).neg()):
                            return var.get('string')
                        var.put('strSymbols', var.get('stringToArray')(var.get('string')))
                        var.put('end', (var.get('charsEndIndex')(var.get('strSymbols'), var.get('stringToArray')(var.get('chars')))+Js(1.0)))
                        return var.get('castSlice')(var.get('strSymbols'), Js(0.0), var.get('end')).callprop('join', Js(''))
                    PyJsHoisted_trimEnd_.func_name = 'trimEnd'
                    var.put('trimEnd', PyJsHoisted_trimEnd_)
                    @Js
                    def PyJsHoisted_trimStart_(string, chars, guard, this, arguments, var=var):
                        var = Scope({'string':string, 'chars':chars, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['guard', 'strSymbols', 'chars', 'string', 'start'])
                        var.put('string', var.get('toString')(var.get('string')))
                        if (var.get('string') and (var.get('guard') or PyJsStrictEq(var.get('chars'),var.get('undefined')))):
                            return var.get('string').callprop('replace', var.get('reTrimStart'), Js(''))
                        if (var.get('string').neg() or var.put('chars', var.get('baseToString')(var.get('chars'))).neg()):
                            return var.get('string')
                        var.put('strSymbols', var.get('stringToArray')(var.get('string')))
                        var.put('start', var.get('charsStartIndex')(var.get('strSymbols'), var.get('stringToArray')(var.get('chars'))))
                        return var.get('castSlice')(var.get('strSymbols'), var.get('start')).callprop('join', Js(''))
                    PyJsHoisted_trimStart_.func_name = 'trimStart'
                    var.put('trimStart', PyJsHoisted_trimStart_)
                    @Js
                    def PyJsHoisted_truncate_(string, options, this, arguments, var=var):
                        var = Scope({'string':string, 'options':options, 'this':this, 'arguments':arguments}, var)
                        var.registers(['omission', 'newEnd', 'strSymbols', 'separator', 'result', 'substring', 'string', 'strLength', 'match', 'end', 'length', 'options', 'index'])
                        var.put('length', var.get('DEFAULT_TRUNC_LENGTH'))
                        var.put('omission', var.get('DEFAULT_TRUNC_OMISSION'))
                        if var.get('isObject')(var.get('options')):
                            var.put('separator', (var.get('options').get('separator') if var.get('options').contains(Js('separator')) else var.get('separator')))
                            var.put('length', (var.get('toInteger')(var.get('options').get('length')) if var.get('options').contains(Js('length')) else var.get('length')))
                            var.put('omission', (var.get('baseToString')(var.get('options').get('omission')) if var.get('options').contains(Js('omission')) else var.get('omission')))
                        var.put('string', var.get('toString')(var.get('string')))
                        var.put('strLength', var.get('string').get('length'))
                        if var.get('hasUnicode')(var.get('string')):
                            var.put('strSymbols', var.get('stringToArray')(var.get('string')))
                            var.put('strLength', var.get('strSymbols').get('length'))
                        if (var.get('length')>=var.get('strLength')):
                            return var.get('string')
                        var.put('end', (var.get('length')-var.get('stringSize')(var.get('omission'))))
                        if (var.get('end')<Js(1.0)):
                            return var.get('omission')
                        var.put('result', (var.get('castSlice')(var.get('strSymbols'), Js(0.0), var.get('end')).callprop('join', Js('')) if var.get('strSymbols') else var.get('string').callprop('slice', Js(0.0), var.get('end'))))
                        if PyJsStrictEq(var.get('separator'),var.get('undefined')):
                            return (var.get('result')+var.get('omission'))
                        if var.get('strSymbols'):
                            var.put('end', (var.get('result').get('length')-var.get('end')), '+')
                        if var.get('isRegExp')(var.get('separator')):
                            if var.get('string').callprop('slice', var.get('end')).callprop('search', var.get('separator')):
                                var.put('substring', var.get('result'))
                                if var.get('separator').get('global').neg():
                                    var.put('separator', var.get('RegExp')(var.get('separator').get('source'), (var.get('toString')(var.get('reFlags').callprop('exec', var.get('separator')))+Js('g'))))
                                var.get('separator').put('lastIndex', Js(0.0))
                                while var.put('match', var.get('separator').callprop('exec', var.get('substring'))):
                                    var.put('newEnd', var.get('match').get('index'))
                                var.put('result', var.get('result').callprop('slice', Js(0.0), (var.get('end') if PyJsStrictEq(var.get('newEnd'),var.get('undefined')) else var.get('newEnd'))))
                        else:
                            if (var.get('string').callprop('indexOf', var.get('baseToString')(var.get('separator')), var.get('end'))!=var.get('end')):
                                var.put('index', var.get('result').callprop('lastIndexOf', var.get('separator')))
                                if (var.get('index')>(-Js(1.0))):
                                    var.put('result', var.get('result').callprop('slice', Js(0.0), var.get('index')))
                        return (var.get('result')+var.get('omission'))
                    PyJsHoisted_truncate_.func_name = 'truncate'
                    var.put('truncate', PyJsHoisted_truncate_)
                    @Js
                    def PyJsHoisted_unescape_(string, this, arguments, var=var):
                        var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                        var.registers(['string'])
                        var.put('string', var.get('toString')(var.get('string')))
                        return (var.get('string').callprop('replace', var.get('reEscapedHtml'), var.get('unescapeHtmlChar')) if (var.get('string') and var.get('reHasEscapedHtml').callprop('test', var.get('string'))) else var.get('string'))
                    PyJsHoisted_unescape_.func_name = 'unescape'
                    var.put('unescape', PyJsHoisted_unescape_)
                    @Js
                    def PyJsHoisted_words_(string, pattern, guard, this, arguments, var=var):
                        var = Scope({'string':string, 'pattern':pattern, 'guard':guard, 'this':this, 'arguments':arguments}, var)
                        var.registers(['guard', 'string', 'pattern'])
                        var.put('string', var.get('toString')(var.get('string')))
                        var.put('pattern', (var.get('undefined') if var.get('guard') else var.get('pattern')))
                        if PyJsStrictEq(var.get('pattern'),var.get('undefined')):
                            return (var.get('unicodeWords')(var.get('string')) if var.get('hasUnicodeWord')(var.get('string')) else var.get('asciiWords')(var.get('string')))
                        return (var.get('string').callprop('match', var.get('pattern')) or Js([]))
                    PyJsHoisted_words_.func_name = 'words'
                    var.put('words', PyJsHoisted_words_)
                    @Js
                    def PyJsHoisted_cond_(pairs, this, arguments, var=var):
                        var = Scope({'pairs':pairs, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'pairs', 'toIteratee'])
                        var.put('length', (Js(0.0) if (var.get('pairs')==var.get(u"null")) else var.get('pairs').get('length')))
                        var.put('toIteratee', var.get('getIteratee')())
                        @Js
                        def PyJs_anonymous_266_(pair, this, arguments, var=var):
                            var = Scope({'pair':pair, 'this':this, 'arguments':arguments}, var)
                            var.registers(['pair'])
                            if (var.get('pair').get('1').typeof()!=Js('function')):
                                PyJsTempException = JsToPyException(var.get('TypeError').create(var.get('FUNC_ERROR_TEXT')))
                                raise PyJsTempException
                            return Js([var.get('toIteratee')(var.get('pair').get('0')), var.get('pair').get('1')])
                        PyJs_anonymous_266_._set_name('anonymous')
                        var.put('pairs', (Js([]) if var.get('length').neg() else var.get('arrayMap')(var.get('pairs'), PyJs_anonymous_266_)))
                        @Js
                        def PyJs_anonymous_267_(args, this, arguments, var=var):
                            var = Scope({'args':args, 'this':this, 'arguments':arguments}, var)
                            var.registers(['args', 'pair', 'index'])
                            var.put('index', (-Js(1.0)))
                            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                                var.put('pair', var.get('pairs').get(var.get('index')))
                                if var.get('apply')(var.get('pair').get('0'), var.get(u"this"), var.get('args')):
                                    return var.get('apply')(var.get('pair').get('1'), var.get(u"this"), var.get('args'))
                        PyJs_anonymous_267_._set_name('anonymous')
                        return var.get('baseRest')(PyJs_anonymous_267_)
                    PyJsHoisted_cond_.func_name = 'cond'
                    var.put('cond', PyJsHoisted_cond_)
                    @Js
                    def PyJsHoisted_conforms_(source, this, arguments, var=var):
                        var = Scope({'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['source'])
                        return var.get('baseConforms')(var.get('baseClone')(var.get('source'), var.get('CLONE_DEEP_FLAG')))
                    PyJsHoisted_conforms_.func_name = 'conforms'
                    var.put('conforms', PyJsHoisted_conforms_)
                    @Js
                    def PyJsHoisted_constant_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        @Js
                        def PyJs_anonymous_268_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            return var.get('value')
                        PyJs_anonymous_268_._set_name('anonymous')
                        return PyJs_anonymous_268_
                    PyJsHoisted_constant_.func_name = 'constant'
                    var.put('constant', PyJsHoisted_constant_)
                    @Js
                    def PyJsHoisted_defaultTo_(value, defaultValue, this, arguments, var=var):
                        var = Scope({'value':value, 'defaultValue':defaultValue, 'this':this, 'arguments':arguments}, var)
                        var.registers(['defaultValue', 'value'])
                        return (var.get('defaultValue') if ((var.get('value')==var.get(u"null")) or PyJsStrictNeq(var.get('value'),var.get('value'))) else var.get('value'))
                    PyJsHoisted_defaultTo_.func_name = 'defaultTo'
                    var.put('defaultTo', PyJsHoisted_defaultTo_)
                    @Js
                    def PyJsHoisted_identity_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return var.get('value')
                    PyJsHoisted_identity_.func_name = 'identity'
                    var.put('identity', PyJsHoisted_identity_)
                    @Js
                    def PyJsHoisted_iteratee_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func'])
                        return var.get('baseIteratee')((var.get('func') if (var.get('func',throw=False).typeof()==Js('function')) else var.get('baseClone')(var.get('func'), var.get('CLONE_DEEP_FLAG'))))
                    PyJsHoisted_iteratee_.func_name = 'iteratee'
                    var.put('iteratee', PyJsHoisted_iteratee_)
                    @Js
                    def PyJsHoisted_matches_(source, this, arguments, var=var):
                        var = Scope({'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['source'])
                        return var.get('baseMatches')(var.get('baseClone')(var.get('source'), var.get('CLONE_DEEP_FLAG')))
                    PyJsHoisted_matches_.func_name = 'matches'
                    var.put('matches', PyJsHoisted_matches_)
                    @Js
                    def PyJsHoisted_matchesProperty_(path, srcValue, this, arguments, var=var):
                        var = Scope({'path':path, 'srcValue':srcValue, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'srcValue'])
                        return var.get('baseMatchesProperty')(var.get('path'), var.get('baseClone')(var.get('srcValue'), var.get('CLONE_DEEP_FLAG')))
                    PyJsHoisted_matchesProperty_.func_name = 'matchesProperty'
                    var.put('matchesProperty', PyJsHoisted_matchesProperty_)
                    @Js
                    def PyJsHoisted_mixin_(object, source, options, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'options':options, 'this':this, 'arguments':arguments}, var)
                        var.registers(['methodNames', 'object', 'props', 'chain', 'options', 'source', 'isFunc'])
                        var.put('props', var.get('keys')(var.get('source')))
                        var.put('methodNames', var.get('baseFunctions')(var.get('source'), var.get('props')))
                        if ((var.get('options')==var.get(u"null")) and (var.get('isObject')(var.get('source')) and (var.get('methodNames').get('length') or var.get('props').get('length').neg())).neg()):
                            var.put('options', var.get('source'))
                            var.put('source', var.get('object'))
                            var.put('object', var.get(u"this"))
                            var.put('methodNames', var.get('baseFunctions')(var.get('source'), var.get('keys')(var.get('source'))))
                        var.put('chain', ((var.get('isObject')(var.get('options')) and var.get('options').contains(Js('chain'))).neg() or var.get('options').get('chain').neg().neg()))
                        var.put('isFunc', var.get('isFunction')(var.get('object')))
                        @Js
                        def PyJs_anonymous_273_(methodName, this, arguments, var=var):
                            var = Scope({'methodName':methodName, 'this':this, 'arguments':arguments}, var)
                            var.registers(['func', 'methodName'])
                            var.put('func', var.get('source').get(var.get('methodName')))
                            var.get('object').put(var.get('methodName'), var.get('func'))
                            if var.get('isFunc'):
                                @Js
                                def PyJs_anonymous_274_(this, arguments, var=var):
                                    var = Scope({'this':this, 'arguments':arguments}, var)
                                    var.registers(['chainAll', 'result', 'actions'])
                                    var.put('chainAll', var.get(u"this").get('__chain__'))
                                    if (var.get('chain') or var.get('chainAll')):
                                        var.put('result', var.get('object')(var.get(u"this").get('__wrapped__')))
                                        var.put('actions', var.get('result').put('__actions__', var.get('copyArray')(var.get(u"this").get('__actions__'))))
                                        var.get('actions').callprop('push', Js({'func':var.get('func'),'args':var.get('arguments'),'thisArg':var.get('object')}))
                                        var.get('result').put('__chain__', var.get('chainAll'))
                                        return var.get('result')
                                    return var.get('func').callprop('apply', var.get('object'), var.get('arrayPush')(Js([var.get(u"this").callprop('value')]), var.get('arguments')))
                                PyJs_anonymous_274_._set_name('anonymous')
                                var.get('object').get('prototype').put(var.get('methodName'), PyJs_anonymous_274_)
                        PyJs_anonymous_273_._set_name('anonymous')
                        var.get('arrayEach')(var.get('methodNames'), PyJs_anonymous_273_)
                        return var.get('object')
                    PyJsHoisted_mixin_.func_name = 'mixin'
                    var.put('mixin', PyJsHoisted_mixin_)
                    @Js
                    def PyJsHoisted_noConflict_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        if PyJsStrictEq(var.get('root').get('_'),var.get(u"this")):
                            var.get('root').put('_', var.get('oldDash'))
                        return var.get(u"this")
                    PyJsHoisted_noConflict_.func_name = 'noConflict'
                    var.put('noConflict', PyJsHoisted_noConflict_)
                    @Js
                    def PyJsHoisted_noop_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        pass
                    PyJsHoisted_noop_.func_name = 'noop'
                    var.put('noop', PyJsHoisted_noop_)
                    @Js
                    def PyJsHoisted_nthArg_(n, this, arguments, var=var):
                        var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n'])
                        var.put('n', var.get('toInteger')(var.get('n')))
                        @Js
                        def PyJs_anonymous_275_(args, this, arguments, var=var):
                            var = Scope({'args':args, 'this':this, 'arguments':arguments}, var)
                            var.registers(['args'])
                            return var.get('baseNth')(var.get('args'), var.get('n'))
                        PyJs_anonymous_275_._set_name('anonymous')
                        return var.get('baseRest')(PyJs_anonymous_275_)
                    PyJsHoisted_nthArg_.func_name = 'nthArg'
                    var.put('nthArg', PyJsHoisted_nthArg_)
                    @Js
                    def PyJsHoisted_property_(path, this, arguments, var=var):
                        var = Scope({'path':path, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path'])
                        return (var.get('baseProperty')(var.get('toKey')(var.get('path'))) if var.get('isKey')(var.get('path')) else var.get('basePropertyDeep')(var.get('path')))
                    PyJsHoisted_property_.func_name = 'property'
                    var.put('property', PyJsHoisted_property_)
                    @Js
                    def PyJsHoisted_propertyOf_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        @Js
                        def PyJs_anonymous_276_(path, this, arguments, var=var):
                            var = Scope({'path':path, 'this':this, 'arguments':arguments}, var)
                            var.registers(['path'])
                            return (var.get('undefined') if (var.get('object')==var.get(u"null")) else var.get('baseGet')(var.get('object'), var.get('path')))
                        PyJs_anonymous_276_._set_name('anonymous')
                        return PyJs_anonymous_276_
                    PyJsHoisted_propertyOf_.func_name = 'propertyOf'
                    var.put('propertyOf', PyJsHoisted_propertyOf_)
                    @Js
                    def PyJsHoisted_stubArray_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js([])
                    PyJsHoisted_stubArray_.func_name = 'stubArray'
                    var.put('stubArray', PyJsHoisted_stubArray_)
                    @Js
                    def PyJsHoisted_stubFalse_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js(False)
                    PyJsHoisted_stubFalse_.func_name = 'stubFalse'
                    var.put('stubFalse', PyJsHoisted_stubFalse_)
                    @Js
                    def PyJsHoisted_stubObject_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js({})
                    PyJsHoisted_stubObject_.func_name = 'stubObject'
                    var.put('stubObject', PyJsHoisted_stubObject_)
                    @Js
                    def PyJsHoisted_stubString_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js('')
                    PyJsHoisted_stubString_.func_name = 'stubString'
                    var.put('stubString', PyJsHoisted_stubString_)
                    @Js
                    def PyJsHoisted_stubTrue_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js(True)
                    PyJsHoisted_stubTrue_.func_name = 'stubTrue'
                    var.put('stubTrue', PyJsHoisted_stubTrue_)
                    @Js
                    def PyJsHoisted_times_(n, iteratee, this, arguments, var=var):
                        var = Scope({'n':n, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'result', 'length', 'n', 'index'])
                        var.put('n', var.get('toInteger')(var.get('n')))
                        if ((var.get('n')<Js(1.0)) or (var.get('n')>var.get('MAX_SAFE_INTEGER'))):
                            return Js([])
                        var.put('index', var.get('MAX_ARRAY_LENGTH'))
                        var.put('length', var.get('nativeMin')(var.get('n'), var.get('MAX_ARRAY_LENGTH')))
                        var.put('iteratee', var.get('getIteratee')(var.get('iteratee')))
                        var.put('n', var.get('MAX_ARRAY_LENGTH'), '-')
                        var.put('result', var.get('baseTimes')(var.get('length'), var.get('iteratee')))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('n')):
                            var.get('iteratee')(var.get('index'))
                        return var.get('result')
                    PyJsHoisted_times_.func_name = 'times'
                    var.put('times', PyJsHoisted_times_)
                    @Js
                    def PyJsHoisted_toPath_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        if var.get('isArray')(var.get('value')):
                            return var.get('arrayMap')(var.get('value'), var.get('toKey'))
                        return (Js([var.get('value')]) if var.get('isSymbol')(var.get('value')) else var.get('copyArray')(var.get('stringToPath')(var.get('toString')(var.get('value')))))
                    PyJsHoisted_toPath_.func_name = 'toPath'
                    var.put('toPath', PyJsHoisted_toPath_)
                    @Js
                    def PyJsHoisted_uniqueId_(prefix, this, arguments, var=var):
                        var = Scope({'prefix':prefix, 'this':this, 'arguments':arguments}, var)
                        var.registers(['prefix', 'id'])
                        var.put('id', var.put('idCounter',Js(var.get('idCounter').to_number())+Js(1)))
                        return (var.get('toString')(var.get('prefix'))+var.get('id'))
                    PyJsHoisted_uniqueId_.func_name = 'uniqueId'
                    var.put('uniqueId', PyJsHoisted_uniqueId_)
                    @Js
                    def PyJsHoisted_max_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array'])
                        return (var.get('baseExtremum')(var.get('array'), var.get('identity'), var.get('baseGt')) if (var.get('array') and var.get('array').get('length')) else var.get('undefined'))
                    PyJsHoisted_max_.func_name = 'max'
                    var.put('max', PyJsHoisted_max_)
                    @Js
                    def PyJsHoisted_maxBy_(array, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'array'])
                        return (var.get('baseExtremum')(var.get('array'), var.get('getIteratee')(var.get('iteratee'), Js(2.0)), var.get('baseGt')) if (var.get('array') and var.get('array').get('length')) else var.get('undefined'))
                    PyJsHoisted_maxBy_.func_name = 'maxBy'
                    var.put('maxBy', PyJsHoisted_maxBy_)
                    @Js
                    def PyJsHoisted_mean_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array'])
                        return var.get('baseMean')(var.get('array'), var.get('identity'))
                    PyJsHoisted_mean_.func_name = 'mean'
                    var.put('mean', PyJsHoisted_mean_)
                    @Js
                    def PyJsHoisted_meanBy_(array, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'array'])
                        return var.get('baseMean')(var.get('array'), var.get('getIteratee')(var.get('iteratee'), Js(2.0)))
                    PyJsHoisted_meanBy_.func_name = 'meanBy'
                    var.put('meanBy', PyJsHoisted_meanBy_)
                    @Js
                    def PyJsHoisted_min_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array'])
                        return (var.get('baseExtremum')(var.get('array'), var.get('identity'), var.get('baseLt')) if (var.get('array') and var.get('array').get('length')) else var.get('undefined'))
                    PyJsHoisted_min_.func_name = 'min'
                    var.put('min', PyJsHoisted_min_)
                    @Js
                    def PyJsHoisted_minBy_(array, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'array'])
                        return (var.get('baseExtremum')(var.get('array'), var.get('getIteratee')(var.get('iteratee'), Js(2.0)), var.get('baseLt')) if (var.get('array') and var.get('array').get('length')) else var.get('undefined'))
                    PyJsHoisted_minBy_.func_name = 'minBy'
                    var.put('minBy', PyJsHoisted_minBy_)
                    @Js
                    def PyJsHoisted_sum_(array, this, arguments, var=var):
                        var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                        var.registers(['array'])
                        return (var.get('baseSum')(var.get('array'), var.get('identity')) if (var.get('array') and var.get('array').get('length')) else Js(0.0))
                    PyJsHoisted_sum_.func_name = 'sum'
                    var.put('sum', PyJsHoisted_sum_)
                    @Js
                    def PyJsHoisted_sumBy_(array, iteratee, this, arguments, var=var):
                        var = Scope({'array':array, 'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'array'])
                        return (var.get('baseSum')(var.get('array'), var.get('getIteratee')(var.get('iteratee'), Js(2.0))) if (var.get('array') and var.get('array').get('length')) else Js(0.0))
                    PyJsHoisted_sumBy_.func_name = 'sumBy'
                    var.put('sumBy', PyJsHoisted_sumBy_)
                    var.put('context', (var.get('root') if (var.get('context')==var.get(u"null")) else var.get('_').callprop('defaults', var.get('root').callprop('Object'), var.get('context'), var.get('_').callprop('pick', var.get('root'), var.get('contextProps')))))
                    var.put('Array', var.get('context').get('Array'))
                    var.put('Date', var.get('context').get('Date'))
                    var.put('Error', var.get('context').get('Error'))
                    var.put('Function', var.get('context').get('Function'))
                    var.put('Math', var.get('context').get('Math'))
                    var.put('Object', var.get('context').get('Object'))
                    var.put('RegExp', var.get('context').get('RegExp'))
                    var.put('String', var.get('context').get('String'))
                    var.put('TypeError', var.get('context').get('TypeError'))
                    var.put('arrayProto', var.get('Array').get('prototype'))
                    var.put('funcProto', var.get('Function').get('prototype'))
                    var.put('objectProto', var.get('Object').get('prototype'))
                    var.put('coreJsData', var.get('context').get('__core-js_shared__'))
                    var.put('funcToString', var.get('funcProto').get('toString'))
                    var.put('hasOwnProperty', var.get('objectProto').get('hasOwnProperty'))
                    var.put('idCounter', Js(0.0))
                    @Js
                    def PyJs_anonymous_119_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['uid'])
                        var.put('uid', JsRegExp('/[^.]+$/').callprop('exec', (((var.get('coreJsData') and var.get('coreJsData').get('keys')) and var.get('coreJsData').get('keys').get('IE_PROTO')) or Js(''))))
                        return ((Js('Symbol(src)_1.')+var.get('uid')) if var.get('uid') else Js(''))
                    PyJs_anonymous_119_._set_name('anonymous')
                    var.put('maskSrcKey', PyJs_anonymous_119_())
                    var.put('nativeObjectToString', var.get('objectProto').get('toString'))
                    var.put('objectCtorString', var.get('funcToString').callprop('call', var.get('Object')))
                    var.put('oldDash', var.get('root').get('_'))
                    var.put('reIsNative', var.get('RegExp')(((Js('^')+var.get('funcToString').callprop('call', var.get('hasOwnProperty')).callprop('replace', var.get('reRegExpChar'), Js('\\$&')).callprop('replace', JsRegExp('/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g'), Js('$1.*?')))+Js('$'))))
                    var.put('Buffer', (var.get('context').get('Buffer') if var.get('moduleExports') else var.get('undefined')))
                    var.put('_Symbol', var.get('context').get('Symbol'))
                    var.put('Uint8Array', var.get('context').get('Uint8Array'))
                    var.put('allocUnsafe', (var.get('Buffer').get('allocUnsafe') if var.get('Buffer') else var.get('undefined')))
                    var.put('getPrototype', var.get('overArg')(var.get('Object').get('getPrototypeOf'), var.get('Object')))
                    var.put('objectCreate', var.get('Object').get('create'))
                    var.put('propertyIsEnumerable', var.get('objectProto').get('propertyIsEnumerable'))
                    var.put('splice', var.get('arrayProto').get('splice'))
                    var.put('spreadableSymbol', (var.get('_Symbol').get('isConcatSpreadable') if var.get('_Symbol') else var.get('undefined')))
                    var.put('symIterator', (var.get('_Symbol').get('iterator') if var.get('_Symbol') else var.get('undefined')))
                    var.put('symToStringTag', (var.get('_Symbol').get('toStringTag') if var.get('_Symbol') else var.get('undefined')))
                    @Js
                    def PyJs_anonymous_120_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['func'])
                        try:
                            var.put('func', var.get('getNative')(var.get('Object'), Js('defineProperty')))
                            var.get('func')(Js({}), Js(''), Js({}))
                            return var.get('func')
                        except PyJsException as PyJsTempException:
                            PyJsHolder_65_32200557 = var.own.get('e')
                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                            try:
                                pass
                            finally:
                                if PyJsHolder_65_32200557 is not None:
                                    var.own['e'] = PyJsHolder_65_32200557
                                else:
                                    del var.own['e']
                                del PyJsHolder_65_32200557
                    PyJs_anonymous_120_._set_name('anonymous')
                    var.put('defineProperty', PyJs_anonymous_120_())
                    var.put('ctxClearTimeout', (PyJsStrictNeq(var.get('context').get('clearTimeout'),var.get('root').get('clearTimeout')) and var.get('context').get('clearTimeout')))
                    var.put('ctxNow', ((var.get('Date') and PyJsStrictNeq(var.get('Date').get('now'),var.get('root').get('Date').get('now'))) and var.get('Date').get('now')))
                    var.put('ctxSetTimeout', (PyJsStrictNeq(var.get('context').get('setTimeout'),var.get('root').get('setTimeout')) and var.get('context').get('setTimeout')))
                    var.put('nativeCeil', var.get('Math').get('ceil'))
                    var.put('nativeFloor', var.get('Math').get('floor'))
                    var.put('nativeGetSymbols', var.get('Object').get('getOwnPropertySymbols'))
                    var.put('nativeIsBuffer', (var.get('Buffer').get('isBuffer') if var.get('Buffer') else var.get('undefined')))
                    var.put('nativeIsFinite', var.get('context').get('isFinite'))
                    var.put('nativeJoin', var.get('arrayProto').get('join'))
                    var.put('nativeKeys', var.get('overArg')(var.get('Object').get('keys'), var.get('Object')))
                    var.put('nativeMax', var.get('Math').get('max'))
                    var.put('nativeMin', var.get('Math').get('min'))
                    var.put('nativeNow', var.get('Date').get('now'))
                    var.put('nativeParseInt', var.get('context').get('parseInt'))
                    var.put('nativeRandom', var.get('Math').get('random'))
                    var.put('nativeReverse', var.get('arrayProto').get('reverse'))
                    var.put('DataView', var.get('getNative')(var.get('context'), Js('DataView')))
                    var.put('Map', var.get('getNative')(var.get('context'), Js('Map')))
                    var.put('Promise', var.get('getNative')(var.get('context'), Js('Promise')))
                    var.put('Set', var.get('getNative')(var.get('context'), Js('Set')))
                    var.put('WeakMap', var.get('getNative')(var.get('context'), Js('WeakMap')))
                    var.put('nativeCreate', var.get('getNative')(var.get('Object'), Js('create')))
                    var.put('metaMap', (var.get('WeakMap') and var.get('WeakMap').create()))
                    var.put('realNames', Js({}))
                    var.put('dataViewCtorString', var.get('toSource')(var.get('DataView')))
                    var.put('mapCtorString', var.get('toSource')(var.get('Map')))
                    var.put('promiseCtorString', var.get('toSource')(var.get('Promise')))
                    var.put('setCtorString', var.get('toSource')(var.get('Set')))
                    var.put('weakMapCtorString', var.get('toSource')(var.get('WeakMap')))
                    var.put('symbolProto', (var.get('_Symbol').get('prototype') if var.get('_Symbol') else var.get('undefined')))
                    var.put('symbolValueOf', (var.get('symbolProto').get('valueOf') if var.get('symbolProto') else var.get('undefined')))
                    var.put('symbolToString', (var.get('symbolProto').get('toString') if var.get('symbolProto') else var.get('undefined')))
                    pass
                    @Js
                    def PyJs_anonymous_121_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        @Js
                        def PyJsHoisted_object_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            pass
                        PyJsHoisted_object_.func_name = 'object'
                        var.put('object', PyJsHoisted_object_)
                        pass
                        @Js
                        def PyJs_anonymous_122_(proto, this, arguments, var=var):
                            var = Scope({'proto':proto, 'this':this, 'arguments':arguments}, var)
                            var.registers(['result', 'proto'])
                            if var.get('isObject')(var.get('proto')).neg():
                                return Js({})
                            if var.get('objectCreate'):
                                return var.get('objectCreate')(var.get('proto'))
                            var.get('object').put('prototype', var.get('proto'))
                            var.put('result', var.get('object').create())
                            var.get('object').put('prototype', var.get('undefined'))
                            return var.get('result')
                        PyJs_anonymous_122_._set_name('anonymous')
                        return PyJs_anonymous_122_
                    PyJs_anonymous_121_._set_name('anonymous')
                    var.put('baseCreate', PyJs_anonymous_121_())
                    pass
                    pass
                    var.get('lodash').put('templateSettings', Js({'escape':var.get('reEscape'),'evaluate':var.get('reEvaluate'),'interpolate':var.get('reInterpolate'),'variable':Js(''),'imports':Js({'_':var.get('lodash')})}))
                    var.get('lodash').put('prototype', var.get('baseLodash').get('prototype'))
                    var.get('lodash').get('prototype').put('constructor', var.get('lodash'))
                    var.get('LodashWrapper').put('prototype', var.get('baseCreate')(var.get('baseLodash').get('prototype')))
                    var.get('LodashWrapper').get('prototype').put('constructor', var.get('LodashWrapper'))
                    pass
                    pass
                    pass
                    pass
                    var.get('LazyWrapper').put('prototype', var.get('baseCreate')(var.get('baseLodash').get('prototype')))
                    var.get('LazyWrapper').get('prototype').put('constructor', var.get('LazyWrapper'))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.get('Hash').get('prototype').put('clear', var.get('hashClear'))
                    var.get('Hash').get('prototype').put('delete', var.get('hashDelete'))
                    var.get('Hash').get('prototype').put('get', var.get('hashGet'))
                    var.get('Hash').get('prototype').put('has', var.get('hashHas'))
                    var.get('Hash').get('prototype').put('set', var.get('hashSet'))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.get('ListCache').get('prototype').put('clear', var.get('listCacheClear'))
                    var.get('ListCache').get('prototype').put('delete', var.get('listCacheDelete'))
                    var.get('ListCache').get('prototype').put('get', var.get('listCacheGet'))
                    var.get('ListCache').get('prototype').put('has', var.get('listCacheHas'))
                    var.get('ListCache').get('prototype').put('set', var.get('listCacheSet'))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.get('MapCache').get('prototype').put('clear', var.get('mapCacheClear'))
                    var.get('MapCache').get('prototype').put('delete', var.get('mapCacheDelete'))
                    var.get('MapCache').get('prototype').put('get', var.get('mapCacheGet'))
                    var.get('MapCache').get('prototype').put('has', var.get('mapCacheHas'))
                    var.get('MapCache').get('prototype').put('set', var.get('mapCacheSet'))
                    pass
                    pass
                    pass
                    var.get('SetCache').get('prototype').put('add', var.get('SetCache').get('prototype').put('push', var.get('setCacheAdd')))
                    var.get('SetCache').get('prototype').put('has', var.get('setCacheHas'))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.get('Stack').get('prototype').put('clear', var.get('stackClear'))
                    var.get('Stack').get('prototype').put('delete', var.get('stackDelete'))
                    var.get('Stack').get('prototype').put('get', var.get('stackGet'))
                    var.get('Stack').get('prototype').put('has', var.get('stackHas'))
                    var.get('Stack').get('prototype').put('set', var.get('stackSet'))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.put('baseEach', var.get('createBaseEach')(var.get('baseForOwn')))
                    var.put('baseEachRight', var.get('createBaseEach')(var.get('baseForOwnRight'), Js(True)))
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.put('baseFor', var.get('createBaseFor')())
                    var.put('baseForRight', var.get('createBaseFor')(Js(True)))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_143_(func, data, this, arguments, var=var):
                        var = Scope({'func':func, 'data':data, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'data'])
                        var.get('metaMap').callprop('set', var.get('func'), var.get('data'))
                        return var.get('func')
                    PyJs_anonymous_143_._set_name('anonymous')
                    var.put('baseSetData', (var.get('identity') if var.get('metaMap').neg() else PyJs_anonymous_143_))
                    @Js
                    def PyJs_anonymous_144_(func, string, this, arguments, var=var):
                        var = Scope({'func':func, 'string':string, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'string'])
                        return var.get('defineProperty')(var.get('func'), Js('toString'), Js({'configurable':Js(True),'enumerable':Js(False),'value':var.get('constant')(var.get('string')),'writable':Js(True)}))
                    PyJs_anonymous_144_._set_name('anonymous')
                    var.put('baseSetToString', (var.get('identity') if var.get('defineProperty').neg() else PyJs_anonymous_144_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.put('castRest', var.get('baseRest'))
                    pass
                    @Js
                    def PyJs_anonymous_147_(id, this, arguments, var=var):
                        var = Scope({'id':id, 'this':this, 'arguments':arguments}, var)
                        var.registers(['id'])
                        return var.get('root').callprop('clearTimeout', var.get('id'))
                    PyJs_anonymous_147_._set_name('anonymous')
                    var.put('clearTimeout', (var.get('ctxClearTimeout') or PyJs_anonymous_147_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_169_(values, this, arguments, var=var):
                        var = Scope({'values':values, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values'])
                        return var.get('Set').create(var.get('values'))
                    PyJs_anonymous_169_._set_name('anonymous')
                    var.put('createSet', (var.get('noop') if (var.get('Set') and ((Js(1.0)/var.get('setToArray')(var.get('Set').create(Js([None, (-Js(0.0))]))).get('1'))==var.get('INFINITY'))).neg() else PyJs_anonymous_169_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_172_(func, this, arguments, var=var):
                        var = Scope({'func':func, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func'])
                        return var.get('metaMap').callprop('get', var.get('func'))
                    PyJs_anonymous_172_._set_name('anonymous')
                    var.put('getData', (var.get('noop') if var.get('metaMap').neg() else PyJs_anonymous_172_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_173_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object'])
                        if (var.get('object')==var.get(u"null")):
                            return Js([])
                        var.put('object', var.get('Object')(var.get('object')))
                        @Js
                        def PyJs_anonymous_174_(symbol, this, arguments, var=var):
                            var = Scope({'symbol':symbol, 'this':this, 'arguments':arguments}, var)
                            var.registers(['symbol'])
                            return var.get('propertyIsEnumerable').callprop('call', var.get('object'), var.get('symbol'))
                        PyJs_anonymous_174_._set_name('anonymous')
                        return var.get('arrayFilter')(var.get('nativeGetSymbols')(var.get('object')), PyJs_anonymous_174_)
                    PyJs_anonymous_173_._set_name('anonymous')
                    var.put('getSymbols', (var.get('stubArray') if var.get('nativeGetSymbols').neg() else PyJs_anonymous_173_))
                    @Js
                    def PyJs_anonymous_175_(object, this, arguments, var=var):
                        var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'result'])
                        var.put('result', Js([]))
                        while var.get('object'):
                            var.get('arrayPush')(var.get('result'), var.get('getSymbols')(var.get('object')))
                            var.put('object', var.get('getPrototype')(var.get('object')))
                        return var.get('result')
                    PyJs_anonymous_175_._set_name('anonymous')
                    var.put('getSymbolsIn', (var.get('stubArray') if var.get('nativeGetSymbols').neg() else PyJs_anonymous_175_))
                    var.put('getTag', var.get('baseGetTag'))
                    def PyJs_LONG_176_(var=var):
                        return ((((var.get('DataView') and (var.get('getTag')(var.get('DataView').create(var.get('ArrayBuffer').create(Js(1.0))))!=var.get('dataViewTag'))) or (var.get('Map') and (var.get('getTag')(var.get('Map').create())!=var.get('mapTag')))) or (var.get('Promise') and (var.get('getTag')(var.get('Promise').callprop('resolve'))!=var.get('promiseTag')))) or (var.get('Set') and (var.get('getTag')(var.get('Set').create())!=var.get('setTag'))))
                    if (PyJs_LONG_176_() or (var.get('WeakMap') and (var.get('getTag')(var.get('WeakMap').create())!=var.get('weakMapTag')))):
                        @Js
                        def PyJs_getTag_177_(value, this, arguments, var=var):
                            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'getTag':PyJs_getTag_177_}, var)
                            var.registers(['Ctor', 'result', 'ctorString', 'value'])
                            var.put('result', var.get('baseGetTag')(var.get('value')))
                            var.put('Ctor', (var.get('value').get('constructor') if (var.get('result')==var.get('objectTag')) else var.get('undefined')))
                            var.put('ctorString', (var.get('toSource')(var.get('Ctor')) if var.get('Ctor') else Js('')))
                            if var.get('ctorString'):
                                while 1:
                                    SWITCHED = False
                                    CONDITION = (var.get('ctorString'))
                                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('dataViewCtorString')):
                                        SWITCHED = True
                                        return var.get('dataViewTag')
                                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('mapCtorString')):
                                        SWITCHED = True
                                        return var.get('mapTag')
                                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('promiseCtorString')):
                                        SWITCHED = True
                                        return var.get('promiseTag')
                                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('setCtorString')):
                                        SWITCHED = True
                                        return var.get('setTag')
                                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('weakMapCtorString')):
                                        SWITCHED = True
                                        return var.get('weakMapTag')
                                    SWITCHED = True
                                    break
                            return var.get('result')
                        PyJs_getTag_177_._set_name('getTag')
                        var.put('getTag', PyJs_getTag_177_)
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.put('isMaskable', (var.get('isFunction') if var.get('coreJsData') else var.get('stubFalse')))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.put('setData', var.get('shortOut')(var.get('baseSetData')))
                    @Js
                    def PyJs_anonymous_182_(func, wait, this, arguments, var=var):
                        var = Scope({'func':func, 'wait':wait, 'this':this, 'arguments':arguments}, var)
                        var.registers(['wait', 'func'])
                        return var.get('root').callprop('setTimeout', var.get('func'), var.get('wait'))
                    PyJs_anonymous_182_._set_name('anonymous')
                    var.put('setTimeout', (var.get('ctxSetTimeout') or PyJs_anonymous_182_))
                    var.put('setToString', var.get('shortOut')(var.get('baseSetToString')))
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_184_(string, this, arguments, var=var):
                        var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'string'])
                        var.put('result', Js([]))
                        if PyJsStrictEq(var.get('string').callprop('charCodeAt', Js(0.0)),Js(46.0)):
                            var.get('result').callprop('push', Js(''))
                        @Js
                        def PyJs_anonymous_185_(match, number, quote, subString, this, arguments, var=var):
                            var = Scope({'match':match, 'number':number, 'quote':quote, 'subString':subString, 'this':this, 'arguments':arguments}, var)
                            var.registers(['quote', 'subString', 'number', 'match'])
                            var.get('result').callprop('push', (var.get('subString').callprop('replace', var.get('reEscapeChar'), Js('$1')) if var.get('quote') else (var.get('number') or var.get('match'))))
                        PyJs_anonymous_185_._set_name('anonymous')
                        var.get('string').callprop('replace', var.get('rePropName'), PyJs_anonymous_185_)
                        return var.get('result')
                    PyJs_anonymous_184_._set_name('anonymous')
                    var.put('stringToPath', var.get('memoizeCapped')(PyJs_anonymous_184_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_187_(array, values, this, arguments, var=var):
                        var = Scope({'array':array, 'values':values, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values', 'array'])
                        return (var.get('baseDifference')(var.get('array'), var.get('baseFlatten')(var.get('values'), Js(1.0), var.get('isArrayLikeObject'), Js(True))) if var.get('isArrayLikeObject')(var.get('array')) else Js([]))
                    PyJs_anonymous_187_._set_name('anonymous')
                    var.put('difference', var.get('baseRest')(PyJs_anonymous_187_))
                    @Js
                    def PyJs_anonymous_188_(array, values, this, arguments, var=var):
                        var = Scope({'array':array, 'values':values, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values', 'iteratee', 'array'])
                        var.put('iteratee', var.get('last')(var.get('values')))
                        if var.get('isArrayLikeObject')(var.get('iteratee')):
                            var.put('iteratee', var.get('undefined'))
                        return (var.get('baseDifference')(var.get('array'), var.get('baseFlatten')(var.get('values'), Js(1.0), var.get('isArrayLikeObject'), Js(True)), var.get('getIteratee')(var.get('iteratee'), Js(2.0))) if var.get('isArrayLikeObject')(var.get('array')) else Js([]))
                    PyJs_anonymous_188_._set_name('anonymous')
                    var.put('differenceBy', var.get('baseRest')(PyJs_anonymous_188_))
                    @Js
                    def PyJs_anonymous_189_(array, values, this, arguments, var=var):
                        var = Scope({'array':array, 'values':values, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values', 'comparator', 'array'])
                        var.put('comparator', var.get('last')(var.get('values')))
                        if var.get('isArrayLikeObject')(var.get('comparator')):
                            var.put('comparator', var.get('undefined'))
                        return (var.get('baseDifference')(var.get('array'), var.get('baseFlatten')(var.get('values'), Js(1.0), var.get('isArrayLikeObject'), Js(True)), var.get('undefined'), var.get('comparator')) if var.get('isArrayLikeObject')(var.get('array')) else Js([]))
                    PyJs_anonymous_189_._set_name('anonymous')
                    var.put('differenceWith', var.get('baseRest')(PyJs_anonymous_189_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_190_(arrays, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
                        var.registers(['arrays', 'mapped'])
                        var.put('mapped', var.get('arrayMap')(var.get('arrays'), var.get('castArrayLikeObject')))
                        return (var.get('baseIntersection')(var.get('mapped')) if (var.get('mapped').get('length') and PyJsStrictEq(var.get('mapped').get('0'),var.get('arrays').get('0'))) else Js([]))
                    PyJs_anonymous_190_._set_name('anonymous')
                    var.put('intersection', var.get('baseRest')(PyJs_anonymous_190_))
                    @Js
                    def PyJs_anonymous_191_(arrays, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'arrays', 'mapped'])
                        var.put('iteratee', var.get('last')(var.get('arrays')))
                        var.put('mapped', var.get('arrayMap')(var.get('arrays'), var.get('castArrayLikeObject')))
                        if PyJsStrictEq(var.get('iteratee'),var.get('last')(var.get('mapped'))):
                            var.put('iteratee', var.get('undefined'))
                        else:
                            var.get('mapped').callprop('pop')
                        return (var.get('baseIntersection')(var.get('mapped'), var.get('getIteratee')(var.get('iteratee'), Js(2.0))) if (var.get('mapped').get('length') and PyJsStrictEq(var.get('mapped').get('0'),var.get('arrays').get('0'))) else Js([]))
                    PyJs_anonymous_191_._set_name('anonymous')
                    var.put('intersectionBy', var.get('baseRest')(PyJs_anonymous_191_))
                    @Js
                    def PyJs_anonymous_192_(arrays, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
                        var.registers(['comparator', 'arrays', 'mapped'])
                        var.put('comparator', var.get('last')(var.get('arrays')))
                        var.put('mapped', var.get('arrayMap')(var.get('arrays'), var.get('castArrayLikeObject')))
                        var.put('comparator', (var.get('comparator') if (var.get('comparator',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        if var.get('comparator'):
                            var.get('mapped').callprop('pop')
                        return (var.get('baseIntersection')(var.get('mapped'), var.get('undefined'), var.get('comparator')) if (var.get('mapped').get('length') and PyJsStrictEq(var.get('mapped').get('0'),var.get('arrays').get('0'))) else Js([]))
                    PyJs_anonymous_192_._set_name('anonymous')
                    var.put('intersectionWith', var.get('baseRest')(PyJs_anonymous_192_))
                    pass
                    pass
                    pass
                    pass
                    var.put('pull', var.get('baseRest')(var.get('pullAll')))
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_193_(array, indexes, this, arguments, var=var):
                        var = Scope({'array':array, 'indexes':indexes, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'length', 'array', 'indexes'])
                        var.put('length', (Js(0.0) if (var.get('array')==var.get(u"null")) else var.get('array').get('length')))
                        var.put('result', var.get('baseAt')(var.get('array'), var.get('indexes')))
                        @Js
                        def PyJs_anonymous_194_(index, this, arguments, var=var):
                            var = Scope({'index':index, 'this':this, 'arguments':arguments}, var)
                            var.registers(['index'])
                            return ((+var.get('index')) if var.get('isIndex')(var.get('index'), var.get('length')) else var.get('index'))
                        PyJs_anonymous_194_._set_name('anonymous')
                        var.get('basePullAt')(var.get('array'), var.get('arrayMap')(var.get('indexes'), PyJs_anonymous_194_).callprop('sort', var.get('compareAscending')))
                        return var.get('result')
                    PyJs_anonymous_193_._set_name('anonymous')
                    var.put('pullAt', var.get('flatRest')(PyJs_anonymous_193_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_195_(arrays, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
                        var.registers(['arrays'])
                        return var.get('baseUniq')(var.get('baseFlatten')(var.get('arrays'), Js(1.0), var.get('isArrayLikeObject'), Js(True)))
                    PyJs_anonymous_195_._set_name('anonymous')
                    var.put('union', var.get('baseRest')(PyJs_anonymous_195_))
                    @Js
                    def PyJs_anonymous_196_(arrays, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'arrays'])
                        var.put('iteratee', var.get('last')(var.get('arrays')))
                        if var.get('isArrayLikeObject')(var.get('iteratee')):
                            var.put('iteratee', var.get('undefined'))
                        return var.get('baseUniq')(var.get('baseFlatten')(var.get('arrays'), Js(1.0), var.get('isArrayLikeObject'), Js(True)), var.get('getIteratee')(var.get('iteratee'), Js(2.0)))
                    PyJs_anonymous_196_._set_name('anonymous')
                    var.put('unionBy', var.get('baseRest')(PyJs_anonymous_196_))
                    @Js
                    def PyJs_anonymous_197_(arrays, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
                        var.registers(['comparator', 'arrays'])
                        var.put('comparator', var.get('last')(var.get('arrays')))
                        var.put('comparator', (var.get('comparator') if (var.get('comparator',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        return var.get('baseUniq')(var.get('baseFlatten')(var.get('arrays'), Js(1.0), var.get('isArrayLikeObject'), Js(True)), var.get('undefined'), var.get('comparator'))
                    PyJs_anonymous_197_._set_name('anonymous')
                    var.put('unionWith', var.get('baseRest')(PyJs_anonymous_197_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_201_(array, values, this, arguments, var=var):
                        var = Scope({'array':array, 'values':values, 'this':this, 'arguments':arguments}, var)
                        var.registers(['values', 'array'])
                        return (var.get('baseDifference')(var.get('array'), var.get('values')) if var.get('isArrayLikeObject')(var.get('array')) else Js([]))
                    PyJs_anonymous_201_._set_name('anonymous')
                    var.put('without', var.get('baseRest')(PyJs_anonymous_201_))
                    @Js
                    def PyJs_anonymous_202_(arrays, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
                        var.registers(['arrays'])
                        return var.get('baseXor')(var.get('arrayFilter')(var.get('arrays'), var.get('isArrayLikeObject')))
                    PyJs_anonymous_202_._set_name('anonymous')
                    var.put('xor', var.get('baseRest')(PyJs_anonymous_202_))
                    @Js
                    def PyJs_anonymous_203_(arrays, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
                        var.registers(['iteratee', 'arrays'])
                        var.put('iteratee', var.get('last')(var.get('arrays')))
                        if var.get('isArrayLikeObject')(var.get('iteratee')):
                            var.put('iteratee', var.get('undefined'))
                        return var.get('baseXor')(var.get('arrayFilter')(var.get('arrays'), var.get('isArrayLikeObject')), var.get('getIteratee')(var.get('iteratee'), Js(2.0)))
                    PyJs_anonymous_203_._set_name('anonymous')
                    var.put('xorBy', var.get('baseRest')(PyJs_anonymous_203_))
                    @Js
                    def PyJs_anonymous_204_(arrays, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
                        var.registers(['comparator', 'arrays'])
                        var.put('comparator', var.get('last')(var.get('arrays')))
                        var.put('comparator', (var.get('comparator') if (var.get('comparator',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        return var.get('baseXor')(var.get('arrayFilter')(var.get('arrays'), var.get('isArrayLikeObject')), var.get('undefined'), var.get('comparator'))
                    PyJs_anonymous_204_._set_name('anonymous')
                    var.put('xorWith', var.get('baseRest')(PyJs_anonymous_204_))
                    var.put('zip', var.get('baseRest')(var.get('unzip')))
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_205_(arrays, this, arguments, var=var):
                        var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'iteratee', 'arrays'])
                        var.put('length', var.get('arrays').get('length'))
                        var.put('iteratee', (var.get('arrays').get((var.get('length')-Js(1.0))) if (var.get('length')>Js(1.0)) else var.get('undefined')))
                        var.put('iteratee', (PyJsComma(var.get('arrays').callprop('pop'),var.get('iteratee')) if (var.get('iteratee',throw=False).typeof()==Js('function')) else var.get('undefined')))
                        return var.get('unzipWith')(var.get('arrays'), var.get('iteratee'))
                    PyJs_anonymous_205_._set_name('anonymous')
                    var.put('zipWith', var.get('baseRest')(PyJs_anonymous_205_))
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_206_(paths, this, arguments, var=var):
                        var = Scope({'paths':paths, 'this':this, 'arguments':arguments}, var)
                        var.registers(['interceptor', 'value', 'paths', 'start', 'length'])
                        var.put('length', var.get('paths').get('length'))
                        var.put('start', (var.get('paths').get('0') if var.get('length') else Js(0.0)))
                        var.put('value', var.get(u"this").get('__wrapped__'))
                        @Js
                        def PyJs_interceptor_207_(object, this, arguments, var=var):
                            var = Scope({'object':object, 'this':this, 'arguments':arguments, 'interceptor':PyJs_interceptor_207_}, var)
                            var.registers(['object'])
                            return var.get('baseAt')(var.get('object'), var.get('paths'))
                        PyJs_interceptor_207_._set_name('interceptor')
                        var.put('interceptor', PyJs_interceptor_207_)
                        if ((((var.get('length')>Js(1.0)) or var.get(u"this").get('__actions__').get('length')) or var.get('value').instanceof(var.get('LazyWrapper')).neg()) or var.get('isIndex')(var.get('start')).neg()):
                            return var.get(u"this").callprop('thru', var.get('interceptor'))
                        var.put('value', var.get('value').callprop('slice', var.get('start'), ((+var.get('start'))+(Js(1.0) if var.get('length') else Js(0.0)))))
                        var.get('value').get('__actions__').callprop('push', Js({'func':var.get('thru'),'args':Js([var.get('interceptor')]),'thisArg':var.get('undefined')}))
                        @Js
                        def PyJs_anonymous_208_(array, this, arguments, var=var):
                            var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                            var.registers(['array'])
                            if (var.get('length') and var.get('array').get('length').neg()):
                                var.get('array').callprop('push', var.get('undefined'))
                            return var.get('array')
                        PyJs_anonymous_208_._set_name('anonymous')
                        return var.get('LodashWrapper').create(var.get('value'), var.get(u"this").get('__chain__')).callprop('thru', PyJs_anonymous_208_)
                    PyJs_anonymous_206_._set_name('anonymous')
                    var.put('wrapperAt', var.get('flatRest')(PyJs_anonymous_206_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_209_(result, value, key, this, arguments, var=var):
                        var = Scope({'result':result, 'value':value, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'result', 'value'])
                        if var.get('hasOwnProperty').callprop('call', var.get('result'), var.get('key')):
                            var.get('result').put(var.get('key'),Js(var.get('result').get(var.get('key')).to_number())+Js(1))
                        else:
                            var.get('baseAssignValue')(var.get('result'), var.get('key'), Js(1.0))
                    PyJs_anonymous_209_._set_name('anonymous')
                    var.put('countBy', var.get('createAggregator')(PyJs_anonymous_209_))
                    pass
                    pass
                    var.put('find', var.get('createFind')(var.get('findIndex')))
                    var.put('findLast', var.get('createFind')(var.get('findLastIndex')))
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_210_(result, value, key, this, arguments, var=var):
                        var = Scope({'result':result, 'value':value, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'result', 'value'])
                        if var.get('hasOwnProperty').callprop('call', var.get('result'), var.get('key')):
                            var.get('result').get(var.get('key')).callprop('push', var.get('value'))
                        else:
                            var.get('baseAssignValue')(var.get('result'), var.get('key'), Js([var.get('value')]))
                    PyJs_anonymous_210_._set_name('anonymous')
                    var.put('groupBy', var.get('createAggregator')(PyJs_anonymous_210_))
                    pass
                    @Js
                    def PyJs_anonymous_211_(collection, path, args, this, arguments, var=var):
                        var = Scope({'collection':collection, 'path':path, 'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['args', 'path', 'result', 'collection', 'index', 'isFunc'])
                        var.put('index', (-Js(1.0)))
                        var.put('isFunc', (var.get('path',throw=False).typeof()==Js('function')))
                        var.put('result', (var.get('Array')(var.get('collection').get('length')) if var.get('isArrayLike')(var.get('collection')) else Js([])))
                        @Js
                        def PyJs_anonymous_212_(value, this, arguments, var=var):
                            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                            var.registers(['value'])
                            var.get('result').put(var.put('index',Js(var.get('index').to_number())+Js(1)), (var.get('apply')(var.get('path'), var.get('value'), var.get('args')) if var.get('isFunc') else var.get('baseInvoke')(var.get('value'), var.get('path'), var.get('args'))))
                        PyJs_anonymous_212_._set_name('anonymous')
                        var.get('baseEach')(var.get('collection'), PyJs_anonymous_212_)
                        return var.get('result')
                    PyJs_anonymous_211_._set_name('anonymous')
                    var.put('invokeMap', var.get('baseRest')(PyJs_anonymous_211_))
                    @Js
                    def PyJs_anonymous_213_(result, value, key, this, arguments, var=var):
                        var = Scope({'result':result, 'value':value, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'result', 'value'])
                        var.get('baseAssignValue')(var.get('result'), var.get('key'), var.get('value'))
                    PyJs_anonymous_213_._set_name('anonymous')
                    var.put('keyBy', var.get('createAggregator')(PyJs_anonymous_213_))
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_214_(result, value, key, this, arguments, var=var):
                        var = Scope({'result':result, 'value':value, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'result', 'value'])
                        var.get('result').get((Js(0.0) if var.get('key') else Js(1.0))).callprop('push', var.get('value'))
                    PyJs_anonymous_214_._set_name('anonymous')
                    @Js
                    def PyJs_anonymous_215_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return Js([Js([]), Js([])])
                    PyJs_anonymous_215_._set_name('anonymous')
                    var.put('partition', var.get('createAggregator')(PyJs_anonymous_214_, PyJs_anonymous_215_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_216_(collection, iteratees, this, arguments, var=var):
                        var = Scope({'collection':collection, 'iteratees':iteratees, 'this':this, 'arguments':arguments}, var)
                        var.registers(['length', 'iteratees', 'collection'])
                        if (var.get('collection')==var.get(u"null")):
                            return Js([])
                        var.put('length', var.get('iteratees').get('length'))
                        if ((var.get('length')>Js(1.0)) and var.get('isIterateeCall')(var.get('collection'), var.get('iteratees').get('0'), var.get('iteratees').get('1'))):
                            var.put('iteratees', Js([]))
                        else:
                            if ((var.get('length')>Js(2.0)) and var.get('isIterateeCall')(var.get('iteratees').get('0'), var.get('iteratees').get('1'), var.get('iteratees').get('2'))):
                                var.put('iteratees', Js([var.get('iteratees').get('0')]))
                        return var.get('baseOrderBy')(var.get('collection'), var.get('baseFlatten')(var.get('iteratees'), Js(1.0)), Js([]))
                    PyJs_anonymous_216_._set_name('anonymous')
                    var.put('sortBy', var.get('baseRest')(PyJs_anonymous_216_))
                    @Js
                    def PyJs_anonymous_217_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('root').get('Date').callprop('now')
                    PyJs_anonymous_217_._set_name('anonymous')
                    var.put('now', (var.get('ctxNow') or PyJs_anonymous_217_))
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_220_(func, thisArg, partials, this, arguments, var=var):
                        var = Scope({'func':func, 'thisArg':thisArg, 'partials':partials, 'this':this, 'arguments':arguments}, var)
                        var.registers(['bitmask', 'partials', 'func', 'holders', 'thisArg'])
                        var.put('bitmask', var.get('WRAP_BIND_FLAG'))
                        if var.get('partials').get('length'):
                            var.put('holders', var.get('replaceHolders')(var.get('partials'), var.get('getHolder')(var.get('bind'))))
                            var.put('bitmask', var.get('WRAP_PARTIAL_FLAG'), '|')
                        return var.get('createWrap')(var.get('func'), var.get('bitmask'), var.get('thisArg'), var.get('partials'), var.get('holders'))
                    PyJs_anonymous_220_._set_name('anonymous')
                    var.put('bind', var.get('baseRest')(PyJs_anonymous_220_))
                    @Js
                    def PyJs_anonymous_221_(object, key, partials, this, arguments, var=var):
                        var = Scope({'object':object, 'key':key, 'partials':partials, 'this':this, 'arguments':arguments}, var)
                        var.registers(['bitmask', 'object', 'partials', 'holders', 'key'])
                        var.put('bitmask', (var.get('WRAP_BIND_FLAG')|var.get('WRAP_BIND_KEY_FLAG')))
                        if var.get('partials').get('length'):
                            var.put('holders', var.get('replaceHolders')(var.get('partials'), var.get('getHolder')(var.get('bindKey'))))
                            var.put('bitmask', var.get('WRAP_PARTIAL_FLAG'), '|')
                        return var.get('createWrap')(var.get('key'), var.get('bitmask'), var.get('object'), var.get('partials'), var.get('holders'))
                    PyJs_anonymous_221_._set_name('anonymous')
                    var.put('bindKey', var.get('baseRest')(PyJs_anonymous_221_))
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_222_(func, args, this, arguments, var=var):
                        var = Scope({'func':func, 'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'args'])
                        return var.get('baseDelay')(var.get('func'), Js(1.0), var.get('args'))
                    PyJs_anonymous_222_._set_name('anonymous')
                    var.put('defer', var.get('baseRest')(PyJs_anonymous_222_))
                    @Js
                    def PyJs_anonymous_223_(func, wait, args, this, arguments, var=var):
                        var = Scope({'func':func, 'wait':wait, 'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['wait', 'func', 'args'])
                        return var.get('baseDelay')(var.get('func'), (var.get('toNumber')(var.get('wait')) or Js(0.0)), var.get('args'))
                    PyJs_anonymous_223_._set_name('anonymous')
                    var.put('delay', var.get('baseRest')(PyJs_anonymous_223_))
                    pass
                    pass
                    var.get('memoize').put('Cache', var.get('MapCache'))
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_226_(func, transforms, this, arguments, var=var):
                        var = Scope({'func':func, 'transforms':transforms, 'this':this, 'arguments':arguments}, var)
                        var.registers(['funcsLength', 'func', 'transforms'])
                        var.put('transforms', (var.get('arrayMap')(var.get('transforms').get('0'), var.get('baseUnary')(var.get('getIteratee')())) if ((var.get('transforms').get('length')==Js(1.0)) and var.get('isArray')(var.get('transforms').get('0'))) else var.get('arrayMap')(var.get('baseFlatten')(var.get('transforms'), Js(1.0)), var.get('baseUnary')(var.get('getIteratee')()))))
                        var.put('funcsLength', var.get('transforms').get('length'))
                        @Js
                        def PyJs_anonymous_227_(args, this, arguments, var=var):
                            var = Scope({'args':args, 'this':this, 'arguments':arguments}, var)
                            var.registers(['length', 'args', 'index'])
                            var.put('index', (-Js(1.0)))
                            var.put('length', var.get('nativeMin')(var.get('args').get('length'), var.get('funcsLength')))
                            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                                var.get('args').put(var.get('index'), var.get('transforms').get(var.get('index')).callprop('call', var.get(u"this"), var.get('args').get(var.get('index'))))
                            return var.get('apply')(var.get('func'), var.get(u"this"), var.get('args'))
                        PyJs_anonymous_227_._set_name('anonymous')
                        return var.get('baseRest')(PyJs_anonymous_227_)
                    PyJs_anonymous_226_._set_name('anonymous')
                    var.put('overArgs', var.get('castRest')(PyJs_anonymous_226_))
                    @Js
                    def PyJs_anonymous_228_(func, partials, this, arguments, var=var):
                        var = Scope({'func':func, 'partials':partials, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'holders', 'partials'])
                        var.put('holders', var.get('replaceHolders')(var.get('partials'), var.get('getHolder')(var.get('partial'))))
                        return var.get('createWrap')(var.get('func'), var.get('WRAP_PARTIAL_FLAG'), var.get('undefined'), var.get('partials'), var.get('holders'))
                    PyJs_anonymous_228_._set_name('anonymous')
                    var.put('partial', var.get('baseRest')(PyJs_anonymous_228_))
                    @Js
                    def PyJs_anonymous_229_(func, partials, this, arguments, var=var):
                        var = Scope({'func':func, 'partials':partials, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'holders', 'partials'])
                        var.put('holders', var.get('replaceHolders')(var.get('partials'), var.get('getHolder')(var.get('partialRight'))))
                        return var.get('createWrap')(var.get('func'), var.get('WRAP_PARTIAL_RIGHT_FLAG'), var.get('undefined'), var.get('partials'), var.get('holders'))
                    PyJs_anonymous_229_._set_name('anonymous')
                    var.put('partialRight', var.get('baseRest')(PyJs_anonymous_229_))
                    @Js
                    def PyJs_anonymous_230_(func, indexes, this, arguments, var=var):
                        var = Scope({'func':func, 'indexes':indexes, 'this':this, 'arguments':arguments}, var)
                        var.registers(['indexes', 'func'])
                        return var.get('createWrap')(var.get('func'), var.get('WRAP_REARG_FLAG'), var.get('undefined'), var.get('undefined'), var.get('undefined'), var.get('indexes'))
                    PyJs_anonymous_230_._set_name('anonymous')
                    var.put('rearg', var.get('flatRest')(PyJs_anonymous_230_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.put('gt', var.get('createRelationalOperation')(var.get('baseGt')))
                    @Js
                    def PyJs_anonymous_232_(value, other, this, arguments, var=var):
                        var = Scope({'value':value, 'other':other, 'this':this, 'arguments':arguments}, var)
                        var.registers(['other', 'value'])
                        return (var.get('value')>=var.get('other'))
                    PyJs_anonymous_232_._set_name('anonymous')
                    var.put('gte', var.get('createRelationalOperation')(PyJs_anonymous_232_))
                    @Js
                    def PyJs_anonymous_233_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('arguments')
                    PyJs_anonymous_233_._set_name('anonymous')
                    @Js
                    def PyJs_anonymous_234_(value, this, arguments, var=var):
                        var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                        var.registers(['value'])
                        return ((var.get('isObjectLike')(var.get('value')) and var.get('hasOwnProperty').callprop('call', var.get('value'), Js('callee'))) and var.get('propertyIsEnumerable').callprop('call', var.get('value'), Js('callee')).neg())
                    PyJs_anonymous_234_._set_name('anonymous')
                    var.put('isArguments', (var.get('baseIsArguments') if var.get('baseIsArguments')(PyJs_anonymous_233_()) else PyJs_anonymous_234_))
                    var.put('isArray', var.get('Array').get('isArray'))
                    var.put('isArrayBuffer', (var.get('baseUnary')(var.get('nodeIsArrayBuffer')) if var.get('nodeIsArrayBuffer') else var.get('baseIsArrayBuffer')))
                    pass
                    pass
                    pass
                    var.put('isBuffer', (var.get('nativeIsBuffer') or var.get('stubFalse')))
                    var.put('isDate', (var.get('baseUnary')(var.get('nodeIsDate')) if var.get('nodeIsDate') else var.get('baseIsDate')))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.put('isMap', (var.get('baseUnary')(var.get('nodeIsMap')) if var.get('nodeIsMap') else var.get('baseIsMap')))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    var.put('isRegExp', (var.get('baseUnary')(var.get('nodeIsRegExp')) if var.get('nodeIsRegExp') else var.get('baseIsRegExp')))
                    pass
                    var.put('isSet', (var.get('baseUnary')(var.get('nodeIsSet')) if var.get('nodeIsSet') else var.get('baseIsSet')))
                    pass
                    pass
                    var.put('isTypedArray', (var.get('baseUnary')(var.get('nodeIsTypedArray')) if var.get('nodeIsTypedArray') else var.get('baseIsTypedArray')))
                    pass
                    pass
                    pass
                    var.put('lt', var.get('createRelationalOperation')(var.get('baseLt')))
                    @Js
                    def PyJs_anonymous_235_(value, other, this, arguments, var=var):
                        var = Scope({'value':value, 'other':other, 'this':this, 'arguments':arguments}, var)
                        var.registers(['other', 'value'])
                        return (var.get('value')<=var.get('other'))
                    PyJs_anonymous_235_._set_name('anonymous')
                    var.put('lte', var.get('createRelationalOperation')(PyJs_anonymous_235_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_236_(object, source, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'source', 'key'])
                        if (var.get('isPrototype')(var.get('source')) or var.get('isArrayLike')(var.get('source'))):
                            var.get('copyObject')(var.get('source'), var.get('keys')(var.get('source')), var.get('object'))
                            return var.get('undefined')
                        for PyJsTemp in var.get('source'):
                            var.put('key', PyJsTemp)
                            if var.get('hasOwnProperty').callprop('call', var.get('source'), var.get('key')):
                                var.get('assignValue')(var.get('object'), var.get('key'), var.get('source').get(var.get('key')))
                    PyJs_anonymous_236_._set_name('anonymous')
                    var.put('assign', var.get('createAssigner')(PyJs_anonymous_236_))
                    @Js
                    def PyJs_anonymous_237_(object, source, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'source'])
                        var.get('copyObject')(var.get('source'), var.get('keysIn')(var.get('source')), var.get('object'))
                    PyJs_anonymous_237_._set_name('anonymous')
                    var.put('assignIn', var.get('createAssigner')(PyJs_anonymous_237_))
                    @Js
                    def PyJs_anonymous_238_(object, source, srcIndex, customizer, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'srcIndex':srcIndex, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'object', 'srcIndex', 'source'])
                        var.get('copyObject')(var.get('source'), var.get('keysIn')(var.get('source')), var.get('object'), var.get('customizer'))
                    PyJs_anonymous_238_._set_name('anonymous')
                    var.put('assignInWith', var.get('createAssigner')(PyJs_anonymous_238_))
                    @Js
                    def PyJs_anonymous_239_(object, source, srcIndex, customizer, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'srcIndex':srcIndex, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'object', 'srcIndex', 'source'])
                        var.get('copyObject')(var.get('source'), var.get('keys')(var.get('source')), var.get('object'), var.get('customizer'))
                    PyJs_anonymous_239_._set_name('anonymous')
                    var.put('assignWith', var.get('createAssigner')(PyJs_anonymous_239_))
                    var.put('at', var.get('flatRest')(var.get('baseAt')))
                    pass
                    @Js
                    def PyJs_anonymous_240_(object, sources, this, arguments, var=var):
                        var = Scope({'object':object, 'sources':sources, 'this':this, 'arguments':arguments}, var)
                        var.registers(['sources', 'guard', 'value', 'propsIndex', 'key', 'object', 'props', 'propsLength', 'length', 'source', 'index'])
                        var.put('object', var.get('Object')(var.get('object')))
                        var.put('index', (-Js(1.0)))
                        var.put('length', var.get('sources').get('length'))
                        var.put('guard', (var.get('sources').get('2') if (var.get('length')>Js(2.0)) else var.get('undefined')))
                        if (var.get('guard') and var.get('isIterateeCall')(var.get('sources').get('0'), var.get('sources').get('1'), var.get('guard'))):
                            var.put('length', Js(1.0))
                        while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                            var.put('source', var.get('sources').get(var.get('index')))
                            var.put('props', var.get('keysIn')(var.get('source')))
                            var.put('propsIndex', (-Js(1.0)))
                            var.put('propsLength', var.get('props').get('length'))
                            while (var.put('propsIndex',Js(var.get('propsIndex').to_number())+Js(1))<var.get('propsLength')):
                                var.put('key', var.get('props').get(var.get('propsIndex')))
                                var.put('value', var.get('object').get(var.get('key')))
                                if (PyJsStrictEq(var.get('value'),var.get('undefined')) or (var.get('eq')(var.get('value'), var.get('objectProto').get(var.get('key'))) and var.get('hasOwnProperty').callprop('call', var.get('object'), var.get('key')).neg())):
                                    var.get('object').put(var.get('key'), var.get('source').get(var.get('key')))
                        return var.get('object')
                    PyJs_anonymous_240_._set_name('anonymous')
                    var.put('defaults', var.get('baseRest')(PyJs_anonymous_240_))
                    @Js
                    def PyJs_anonymous_241_(args, this, arguments, var=var):
                        var = Scope({'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['args'])
                        var.get('args').callprop('push', var.get('undefined'), var.get('customDefaultsMerge'))
                        return var.get('apply')(var.get('mergeWith'), var.get('undefined'), var.get('args'))
                    PyJs_anonymous_241_._set_name('anonymous')
                    var.put('defaultsDeep', var.get('baseRest')(PyJs_anonymous_241_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_242_(result, value, key, this, arguments, var=var):
                        var = Scope({'result':result, 'value':value, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'result', 'value'])
                        if ((var.get('value')!=var.get(u"null")) and (var.get('value').get('toString').typeof()!=Js('function'))):
                            var.put('value', var.get('nativeObjectToString').callprop('call', var.get('value')))
                        var.get('result').put(var.get('value'), var.get('key'))
                    PyJs_anonymous_242_._set_name('anonymous')
                    var.put('invert', var.get('createInverter')(PyJs_anonymous_242_, var.get('constant')(var.get('identity'))))
                    @Js
                    def PyJs_anonymous_243_(result, value, key, this, arguments, var=var):
                        var = Scope({'result':result, 'value':value, 'key':key, 'this':this, 'arguments':arguments}, var)
                        var.registers(['key', 'result', 'value'])
                        if ((var.get('value')!=var.get(u"null")) and (var.get('value').get('toString').typeof()!=Js('function'))):
                            var.put('value', var.get('nativeObjectToString').callprop('call', var.get('value')))
                        if var.get('hasOwnProperty').callprop('call', var.get('result'), var.get('value')):
                            var.get('result').get(var.get('value')).callprop('push', var.get('key'))
                        else:
                            var.get('result').put(var.get('value'), Js([var.get('key')]))
                    PyJs_anonymous_243_._set_name('anonymous')
                    var.put('invertBy', var.get('createInverter')(PyJs_anonymous_243_, var.get('getIteratee')))
                    var.put('invoke', var.get('baseRest')(var.get('baseInvoke')))
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_246_(object, source, srcIndex, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'srcIndex':srcIndex, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'srcIndex', 'source'])
                        var.get('baseMerge')(var.get('object'), var.get('source'), var.get('srcIndex'))
                    PyJs_anonymous_246_._set_name('anonymous')
                    var.put('merge', var.get('createAssigner')(PyJs_anonymous_246_))
                    @Js
                    def PyJs_anonymous_247_(object, source, srcIndex, customizer, this, arguments, var=var):
                        var = Scope({'object':object, 'source':source, 'srcIndex':srcIndex, 'customizer':customizer, 'this':this, 'arguments':arguments}, var)
                        var.registers(['customizer', 'object', 'srcIndex', 'source'])
                        var.get('baseMerge')(var.get('object'), var.get('source'), var.get('srcIndex'), var.get('customizer'))
                    PyJs_anonymous_247_._set_name('anonymous')
                    var.put('mergeWith', var.get('createAssigner')(PyJs_anonymous_247_))
                    @Js
                    def PyJs_anonymous_248_(object, paths, this, arguments, var=var):
                        var = Scope({'object':object, 'paths':paths, 'this':this, 'arguments':arguments}, var)
                        var.registers(['isDeep', 'object', 'paths', 'result', 'length'])
                        var.put('result', Js({}))
                        if (var.get('object')==var.get(u"null")):
                            return var.get('result')
                        var.put('isDeep', Js(False))
                        @Js
                        def PyJs_anonymous_249_(path, this, arguments, var=var):
                            var = Scope({'path':path, 'this':this, 'arguments':arguments}, var)
                            var.registers(['path'])
                            var.put('path', var.get('castPath')(var.get('path'), var.get('object')))
                            (var.get('isDeep') or var.put('isDeep', (var.get('path').get('length')>Js(1.0))))
                            return var.get('path')
                        PyJs_anonymous_249_._set_name('anonymous')
                        var.put('paths', var.get('arrayMap')(var.get('paths'), PyJs_anonymous_249_))
                        var.get('copyObject')(var.get('object'), var.get('getAllKeysIn')(var.get('object')), var.get('result'))
                        if var.get('isDeep'):
                            var.put('result', var.get('baseClone')(var.get('result'), ((var.get('CLONE_DEEP_FLAG')|var.get('CLONE_FLAT_FLAG'))|var.get('CLONE_SYMBOLS_FLAG')), var.get('customOmitClone')))
                        var.put('length', var.get('paths').get('length'))
                        while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                            var.get('baseUnset')(var.get('result'), var.get('paths').get(var.get('length')))
                        return var.get('result')
                    PyJs_anonymous_248_._set_name('anonymous')
                    var.put('omit', var.get('flatRest')(PyJs_anonymous_248_))
                    pass
                    @Js
                    def PyJs_anonymous_250_(object, paths, this, arguments, var=var):
                        var = Scope({'object':object, 'paths':paths, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'paths'])
                        return (Js({}) if (var.get('object')==var.get(u"null")) else var.get('basePick')(var.get('object'), var.get('paths')))
                    PyJs_anonymous_250_._set_name('anonymous')
                    var.put('pick', var.get('flatRest')(PyJs_anonymous_250_))
                    pass
                    pass
                    pass
                    pass
                    var.put('toPairs', var.get('createToPairs')(var.get('keys')))
                    var.put('toPairsIn', var.get('createToPairs')(var.get('keysIn')))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_254_(result, word, index, this, arguments, var=var):
                        var = Scope({'result':result, 'word':word, 'index':index, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'word', 'index'])
                        var.put('word', var.get('word').callprop('toLowerCase'))
                        return (var.get('result')+(var.get('capitalize')(var.get('word')) if var.get('index') else var.get('word')))
                    PyJs_anonymous_254_._set_name('anonymous')
                    var.put('camelCase', var.get('createCompounder')(PyJs_anonymous_254_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_255_(result, word, index, this, arguments, var=var):
                        var = Scope({'result':result, 'word':word, 'index':index, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'word', 'index'])
                        return ((var.get('result')+(Js('-') if var.get('index') else Js('')))+var.get('word').callprop('toLowerCase'))
                    PyJs_anonymous_255_._set_name('anonymous')
                    var.put('kebabCase', var.get('createCompounder')(PyJs_anonymous_255_))
                    @Js
                    def PyJs_anonymous_256_(result, word, index, this, arguments, var=var):
                        var = Scope({'result':result, 'word':word, 'index':index, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'word', 'index'])
                        return ((var.get('result')+(Js(' ') if var.get('index') else Js('')))+var.get('word').callprop('toLowerCase'))
                    PyJs_anonymous_256_._set_name('anonymous')
                    var.put('lowerCase', var.get('createCompounder')(PyJs_anonymous_256_))
                    var.put('lowerFirst', var.get('createCaseFirst')(Js('toLowerCase')))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_257_(result, word, index, this, arguments, var=var):
                        var = Scope({'result':result, 'word':word, 'index':index, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'word', 'index'])
                        return ((var.get('result')+(Js('_') if var.get('index') else Js('')))+var.get('word').callprop('toLowerCase'))
                    PyJs_anonymous_257_._set_name('anonymous')
                    var.put('snakeCase', var.get('createCompounder')(PyJs_anonymous_257_))
                    pass
                    @Js
                    def PyJs_anonymous_258_(result, word, index, this, arguments, var=var):
                        var = Scope({'result':result, 'word':word, 'index':index, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'word', 'index'])
                        return ((var.get('result')+(Js(' ') if var.get('index') else Js('')))+var.get('upperFirst')(var.get('word')))
                    PyJs_anonymous_258_._set_name('anonymous')
                    var.put('startCase', var.get('createCompounder')(PyJs_anonymous_258_))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_262_(result, word, index, this, arguments, var=var):
                        var = Scope({'result':result, 'word':word, 'index':index, 'this':this, 'arguments':arguments}, var)
                        var.registers(['result', 'word', 'index'])
                        return ((var.get('result')+(Js(' ') if var.get('index') else Js('')))+var.get('word').callprop('toUpperCase'))
                    PyJs_anonymous_262_._set_name('anonymous')
                    var.put('upperCase', var.get('createCompounder')(PyJs_anonymous_262_))
                    var.put('upperFirst', var.get('createCaseFirst')(Js('toUpperCase')))
                    pass
                    @Js
                    def PyJs_anonymous_263_(func, args, this, arguments, var=var):
                        var = Scope({'func':func, 'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['func', 'args'])
                        try:
                            return var.get('apply')(var.get('func'), var.get('undefined'), var.get('args'))
                        except PyJsException as PyJsTempException:
                            PyJsHolder_65_55194687 = var.own.get('e')
                            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                            try:
                                return (var.get('e') if var.get('isError')(var.get('e')) else var.get('Error').create(var.get('e')))
                            finally:
                                if PyJsHolder_65_55194687 is not None:
                                    var.own['e'] = PyJsHolder_65_55194687
                                else:
                                    del var.own['e']
                                del PyJsHolder_65_55194687
                    PyJs_anonymous_263_._set_name('anonymous')
                    var.put('attempt', var.get('baseRest')(PyJs_anonymous_263_))
                    @Js
                    def PyJs_anonymous_264_(object, methodNames, this, arguments, var=var):
                        var = Scope({'object':object, 'methodNames':methodNames, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'methodNames'])
                        @Js
                        def PyJs_anonymous_265_(key, this, arguments, var=var):
                            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                            var.registers(['key'])
                            var.put('key', var.get('toKey')(var.get('key')))
                            var.get('baseAssignValue')(var.get('object'), var.get('key'), var.get('bind')(var.get('object').get(var.get('key')), var.get('object')))
                        PyJs_anonymous_265_._set_name('anonymous')
                        var.get('arrayEach')(var.get('methodNames'), PyJs_anonymous_265_)
                        return var.get('object')
                    PyJs_anonymous_264_._set_name('anonymous')
                    var.put('bindAll', var.get('flatRest')(PyJs_anonymous_264_))
                    pass
                    pass
                    pass
                    pass
                    var.put('flow', var.get('createFlow')())
                    var.put('flowRight', var.get('createFlow')(Js(True)))
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_269_(path, args, this, arguments, var=var):
                        var = Scope({'path':path, 'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'args'])
                        @Js
                        def PyJs_anonymous_270_(object, this, arguments, var=var):
                            var = Scope({'object':object, 'this':this, 'arguments':arguments}, var)
                            var.registers(['object'])
                            return var.get('baseInvoke')(var.get('object'), var.get('path'), var.get('args'))
                        PyJs_anonymous_270_._set_name('anonymous')
                        return PyJs_anonymous_270_
                    PyJs_anonymous_269_._set_name('anonymous')
                    var.put('method', var.get('baseRest')(PyJs_anonymous_269_))
                    @Js
                    def PyJs_anonymous_271_(object, args, this, arguments, var=var):
                        var = Scope({'object':object, 'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['object', 'args'])
                        @Js
                        def PyJs_anonymous_272_(path, this, arguments, var=var):
                            var = Scope({'path':path, 'this':this, 'arguments':arguments}, var)
                            var.registers(['path'])
                            return var.get('baseInvoke')(var.get('object'), var.get('path'), var.get('args'))
                        PyJs_anonymous_272_._set_name('anonymous')
                        return PyJs_anonymous_272_
                    PyJs_anonymous_271_._set_name('anonymous')
                    var.put('methodOf', var.get('baseRest')(PyJs_anonymous_271_))
                    pass
                    pass
                    pass
                    pass
                    var.put('over', var.get('createOver')(var.get('arrayMap')))
                    var.put('overEvery', var.get('createOver')(var.get('arrayEvery')))
                    var.put('overSome', var.get('createOver')(var.get('arraySome')))
                    pass
                    pass
                    var.put('range', var.get('createRange')())
                    var.put('rangeRight', var.get('createRange')(Js(True)))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_277_(augend, addend, this, arguments, var=var):
                        var = Scope({'augend':augend, 'addend':addend, 'this':this, 'arguments':arguments}, var)
                        var.registers(['addend', 'augend'])
                        return (var.get('augend')+var.get('addend'))
                    PyJs_anonymous_277_._set_name('anonymous')
                    var.put('add', var.get('createMathOperation')(PyJs_anonymous_277_, Js(0.0)))
                    var.put('ceil', var.get('createRound')(Js('ceil')))
                    @Js
                    def PyJs_anonymous_278_(dividend, divisor, this, arguments, var=var):
                        var = Scope({'dividend':dividend, 'divisor':divisor, 'this':this, 'arguments':arguments}, var)
                        var.registers(['divisor', 'dividend'])
                        return (var.get('dividend')/var.get('divisor'))
                    PyJs_anonymous_278_._set_name('anonymous')
                    var.put('divide', var.get('createMathOperation')(PyJs_anonymous_278_, Js(1.0)))
                    var.put('floor', var.get('createRound')(Js('floor')))
                    pass
                    pass
                    pass
                    pass
                    pass
                    pass
                    @Js
                    def PyJs_anonymous_279_(multiplier, multiplicand, this, arguments, var=var):
                        var = Scope({'multiplier':multiplier, 'multiplicand':multiplicand, 'this':this, 'arguments':arguments}, var)
                        var.registers(['multiplicand', 'multiplier'])
                        return (var.get('multiplier')*var.get('multiplicand'))
                    PyJs_anonymous_279_._set_name('anonymous')
                    var.put('multiply', var.get('createMathOperation')(PyJs_anonymous_279_, Js(1.0)))
                    var.put('round', var.get('createRound')(Js('round')))
                    @Js
                    def PyJs_anonymous_280_(minuend, subtrahend, this, arguments, var=var):
                        var = Scope({'minuend':minuend, 'subtrahend':subtrahend, 'this':this, 'arguments':arguments}, var)
                        var.registers(['subtrahend', 'minuend'])
                        return (var.get('minuend')-var.get('subtrahend'))
                    PyJs_anonymous_280_._set_name('anonymous')
                    var.put('subtract', var.get('createMathOperation')(PyJs_anonymous_280_, Js(0.0)))
                    pass
                    pass
                    var.get('lodash').put('after', var.get('after'))
                    var.get('lodash').put('ary', var.get('ary'))
                    var.get('lodash').put('assign', var.get('assign'))
                    var.get('lodash').put('assignIn', var.get('assignIn'))
                    var.get('lodash').put('assignInWith', var.get('assignInWith'))
                    var.get('lodash').put('assignWith', var.get('assignWith'))
                    var.get('lodash').put('at', var.get('at'))
                    var.get('lodash').put('before', var.get('before'))
                    var.get('lodash').put('bind', var.get('bind'))
                    var.get('lodash').put('bindAll', var.get('bindAll'))
                    var.get('lodash').put('bindKey', var.get('bindKey'))
                    var.get('lodash').put('castArray', var.get('castArray'))
                    var.get('lodash').put('chain', var.get('chain'))
                    var.get('lodash').put('chunk', var.get('chunk'))
                    var.get('lodash').put('compact', var.get('compact'))
                    var.get('lodash').put('concat', var.get('concat'))
                    var.get('lodash').put('cond', var.get('cond'))
                    var.get('lodash').put('conforms', var.get('conforms'))
                    var.get('lodash').put('constant', var.get('constant'))
                    var.get('lodash').put('countBy', var.get('countBy'))
                    var.get('lodash').put('create', var.get('create'))
                    var.get('lodash').put('curry', var.get('curry'))
                    var.get('lodash').put('curryRight', var.get('curryRight'))
                    var.get('lodash').put('debounce', var.get('debounce'))
                    var.get('lodash').put('defaults', var.get('defaults'))
                    var.get('lodash').put('defaultsDeep', var.get('defaultsDeep'))
                    var.get('lodash').put('defer', var.get('defer'))
                    var.get('lodash').put('delay', var.get('delay'))
                    var.get('lodash').put('difference', var.get('difference'))
                    var.get('lodash').put('differenceBy', var.get('differenceBy'))
                    var.get('lodash').put('differenceWith', var.get('differenceWith'))
                    var.get('lodash').put('drop', var.get('drop'))
                    var.get('lodash').put('dropRight', var.get('dropRight'))
                    var.get('lodash').put('dropRightWhile', var.get('dropRightWhile'))
                    var.get('lodash').put('dropWhile', var.get('dropWhile'))
                    var.get('lodash').put('fill', var.get('fill'))
                    var.get('lodash').put('filter', var.get('filter'))
                    var.get('lodash').put('flatMap', var.get('flatMap'))
                    var.get('lodash').put('flatMapDeep', var.get('flatMapDeep'))
                    var.get('lodash').put('flatMapDepth', var.get('flatMapDepth'))
                    var.get('lodash').put('flatten', var.get('flatten'))
                    var.get('lodash').put('flattenDeep', var.get('flattenDeep'))
                    var.get('lodash').put('flattenDepth', var.get('flattenDepth'))
                    var.get('lodash').put('flip', var.get('flip'))
                    var.get('lodash').put('flow', var.get('flow'))
                    var.get('lodash').put('flowRight', var.get('flowRight'))
                    var.get('lodash').put('fromPairs', var.get('fromPairs'))
                    var.get('lodash').put('functions', var.get('functions'))
                    var.get('lodash').put('functionsIn', var.get('functionsIn'))
                    var.get('lodash').put('groupBy', var.get('groupBy'))
                    var.get('lodash').put('initial', var.get('initial'))
                    var.get('lodash').put('intersection', var.get('intersection'))
                    var.get('lodash').put('intersectionBy', var.get('intersectionBy'))
                    var.get('lodash').put('intersectionWith', var.get('intersectionWith'))
                    var.get('lodash').put('invert', var.get('invert'))
                    var.get('lodash').put('invertBy', var.get('invertBy'))
                    var.get('lodash').put('invokeMap', var.get('invokeMap'))
                    var.get('lodash').put('iteratee', var.get('iteratee'))
                    var.get('lodash').put('keyBy', var.get('keyBy'))
                    var.get('lodash').put('keys', var.get('keys'))
                    var.get('lodash').put('keysIn', var.get('keysIn'))
                    var.get('lodash').put('map', var.get('map'))
                    var.get('lodash').put('mapKeys', var.get('mapKeys'))
                    var.get('lodash').put('mapValues', var.get('mapValues'))
                    var.get('lodash').put('matches', var.get('matches'))
                    var.get('lodash').put('matchesProperty', var.get('matchesProperty'))
                    var.get('lodash').put('memoize', var.get('memoize'))
                    var.get('lodash').put('merge', var.get('merge'))
                    var.get('lodash').put('mergeWith', var.get('mergeWith'))
                    var.get('lodash').put('method', var.get('method'))
                    var.get('lodash').put('methodOf', var.get('methodOf'))
                    var.get('lodash').put('mixin', var.get('mixin'))
                    var.get('lodash').put('negate', var.get('negate'))
                    var.get('lodash').put('nthArg', var.get('nthArg'))
                    var.get('lodash').put('omit', var.get('omit'))
                    var.get('lodash').put('omitBy', var.get('omitBy'))
                    var.get('lodash').put('once', var.get('once'))
                    var.get('lodash').put('orderBy', var.get('orderBy'))
                    var.get('lodash').put('over', var.get('over'))
                    var.get('lodash').put('overArgs', var.get('overArgs'))
                    var.get('lodash').put('overEvery', var.get('overEvery'))
                    var.get('lodash').put('overSome', var.get('overSome'))
                    var.get('lodash').put('partial', var.get('partial'))
                    var.get('lodash').put('partialRight', var.get('partialRight'))
                    var.get('lodash').put('partition', var.get('partition'))
                    var.get('lodash').put('pick', var.get('pick'))
                    var.get('lodash').put('pickBy', var.get('pickBy'))
                    var.get('lodash').put('property', var.get('property'))
                    var.get('lodash').put('propertyOf', var.get('propertyOf'))
                    var.get('lodash').put('pull', var.get('pull'))
                    var.get('lodash').put('pullAll', var.get('pullAll'))
                    var.get('lodash').put('pullAllBy', var.get('pullAllBy'))
                    var.get('lodash').put('pullAllWith', var.get('pullAllWith'))
                    var.get('lodash').put('pullAt', var.get('pullAt'))
                    var.get('lodash').put('range', var.get('range'))
                    var.get('lodash').put('rangeRight', var.get('rangeRight'))
                    var.get('lodash').put('rearg', var.get('rearg'))
                    var.get('lodash').put('reject', var.get('reject'))
                    var.get('lodash').put('remove', var.get('remove'))
                    var.get('lodash').put('rest', var.get('rest'))
                    var.get('lodash').put('reverse', var.get('reverse'))
                    var.get('lodash').put('sampleSize', var.get('sampleSize'))
                    var.get('lodash').put('set', var.get('set'))
                    var.get('lodash').put('setWith', var.get('setWith'))
                    var.get('lodash').put('shuffle', var.get('shuffle'))
                    var.get('lodash').put('slice', var.get('slice'))
                    var.get('lodash').put('sortBy', var.get('sortBy'))
                    var.get('lodash').put('sortedUniq', var.get('sortedUniq'))
                    var.get('lodash').put('sortedUniqBy', var.get('sortedUniqBy'))
                    var.get('lodash').put('split', var.get('split'))
                    var.get('lodash').put('spread', var.get('spread'))
                    var.get('lodash').put('tail', var.get('tail'))
                    var.get('lodash').put('take', var.get('take'))
                    var.get('lodash').put('takeRight', var.get('takeRight'))
                    var.get('lodash').put('takeRightWhile', var.get('takeRightWhile'))
                    var.get('lodash').put('takeWhile', var.get('takeWhile'))
                    var.get('lodash').put('tap', var.get('tap'))
                    var.get('lodash').put('throttle', var.get('throttle'))
                    var.get('lodash').put('thru', var.get('thru'))
                    var.get('lodash').put('toArray', var.get('toArray'))
                    var.get('lodash').put('toPairs', var.get('toPairs'))
                    var.get('lodash').put('toPairsIn', var.get('toPairsIn'))
                    var.get('lodash').put('toPath', var.get('toPath'))
                    var.get('lodash').put('toPlainObject', var.get('toPlainObject'))
                    var.get('lodash').put('transform', var.get('transform'))
                    var.get('lodash').put('unary', var.get('unary'))
                    var.get('lodash').put('union', var.get('union'))
                    var.get('lodash').put('unionBy', var.get('unionBy'))
                    var.get('lodash').put('unionWith', var.get('unionWith'))
                    var.get('lodash').put('uniq', var.get('uniq'))
                    var.get('lodash').put('uniqBy', var.get('uniqBy'))
                    var.get('lodash').put('uniqWith', var.get('uniqWith'))
                    var.get('lodash').put('unset', var.get('unset'))
                    var.get('lodash').put('unzip', var.get('unzip'))
                    var.get('lodash').put('unzipWith', var.get('unzipWith'))
                    var.get('lodash').put('update', var.get('update'))
                    var.get('lodash').put('updateWith', var.get('updateWith'))
                    var.get('lodash').put('values', var.get('values'))
                    var.get('lodash').put('valuesIn', var.get('valuesIn'))
                    var.get('lodash').put('without', var.get('without'))
                    var.get('lodash').put('words', var.get('words'))
                    var.get('lodash').put('wrap', var.get('wrap'))
                    var.get('lodash').put('xor', var.get('xor'))
                    var.get('lodash').put('xorBy', var.get('xorBy'))
                    var.get('lodash').put('xorWith', var.get('xorWith'))
                    var.get('lodash').put('zip', var.get('zip'))
                    var.get('lodash').put('zipObject', var.get('zipObject'))
                    var.get('lodash').put('zipObjectDeep', var.get('zipObjectDeep'))
                    var.get('lodash').put('zipWith', var.get('zipWith'))
                    var.get('lodash').put('entries', var.get('toPairs'))
                    var.get('lodash').put('entriesIn', var.get('toPairsIn'))
                    var.get('lodash').put('extend', var.get('assignIn'))
                    var.get('lodash').put('extendWith', var.get('assignInWith'))
                    var.get('mixin')(var.get('lodash'), var.get('lodash'))
                    var.get('lodash').put('add', var.get('add'))
                    var.get('lodash').put('attempt', var.get('attempt'))
                    var.get('lodash').put('camelCase', var.get('camelCase'))
                    var.get('lodash').put('capitalize', var.get('capitalize'))
                    var.get('lodash').put('ceil', var.get('ceil'))
                    var.get('lodash').put('clamp', var.get('clamp'))
                    var.get('lodash').put('clone', var.get('clone'))
                    var.get('lodash').put('cloneDeep', var.get('cloneDeep'))
                    var.get('lodash').put('cloneDeepWith', var.get('cloneDeepWith'))
                    var.get('lodash').put('cloneWith', var.get('cloneWith'))
                    var.get('lodash').put('conformsTo', var.get('conformsTo'))
                    var.get('lodash').put('deburr', var.get('deburr'))
                    var.get('lodash').put('defaultTo', var.get('defaultTo'))
                    var.get('lodash').put('divide', var.get('divide'))
                    var.get('lodash').put('endsWith', var.get('endsWith'))
                    var.get('lodash').put('eq', var.get('eq'))
                    var.get('lodash').put('escape', var.get('escape'))
                    var.get('lodash').put('escapeRegExp', var.get('escapeRegExp'))
                    var.get('lodash').put('every', var.get('every'))
                    var.get('lodash').put('find', var.get('find'))
                    var.get('lodash').put('findIndex', var.get('findIndex'))
                    var.get('lodash').put('findKey', var.get('findKey'))
                    var.get('lodash').put('findLast', var.get('findLast'))
                    var.get('lodash').put('findLastIndex', var.get('findLastIndex'))
                    var.get('lodash').put('findLastKey', var.get('findLastKey'))
                    var.get('lodash').put('floor', var.get('floor'))
                    var.get('lodash').put('forEach', var.get('forEach'))
                    var.get('lodash').put('forEachRight', var.get('forEachRight'))
                    var.get('lodash').put('forIn', var.get('forIn'))
                    var.get('lodash').put('forInRight', var.get('forInRight'))
                    var.get('lodash').put('forOwn', var.get('forOwn'))
                    var.get('lodash').put('forOwnRight', var.get('forOwnRight'))
                    var.get('lodash').put('get', var.get('get'))
                    var.get('lodash').put('gt', var.get('gt'))
                    var.get('lodash').put('gte', var.get('gte'))
                    var.get('lodash').put('has', var.get('has'))
                    var.get('lodash').put('hasIn', var.get('hasIn'))
                    var.get('lodash').put('head', var.get('head'))
                    var.get('lodash').put('identity', var.get('identity'))
                    var.get('lodash').put('includes', var.get('includes'))
                    var.get('lodash').put('indexOf', var.get('indexOf'))
                    var.get('lodash').put('inRange', var.get('inRange'))
                    var.get('lodash').put('invoke', var.get('invoke'))
                    var.get('lodash').put('isArguments', var.get('isArguments'))
                    var.get('lodash').put('isArray', var.get('isArray'))
                    var.get('lodash').put('isArrayBuffer', var.get('isArrayBuffer'))
                    var.get('lodash').put('isArrayLike', var.get('isArrayLike'))
                    var.get('lodash').put('isArrayLikeObject', var.get('isArrayLikeObject'))
                    var.get('lodash').put('isBoolean', var.get('isBoolean'))
                    var.get('lodash').put('isBuffer', var.get('isBuffer'))
                    var.get('lodash').put('isDate', var.get('isDate'))
                    var.get('lodash').put('isElement', var.get('isElement'))
                    var.get('lodash').put('isEmpty', var.get('isEmpty'))
                    var.get('lodash').put('isEqual', var.get('isEqual'))
                    var.get('lodash').put('isEqualWith', var.get('isEqualWith'))
                    var.get('lodash').put('isError', var.get('isError'))
                    var.get('lodash').put('isFinite', var.get('isFinite'))
                    var.get('lodash').put('isFunction', var.get('isFunction'))
                    var.get('lodash').put('isInteger', var.get('isInteger'))
                    var.get('lodash').put('isLength', var.get('isLength'))
                    var.get('lodash').put('isMap', var.get('isMap'))
                    var.get('lodash').put('isMatch', var.get('isMatch'))
                    var.get('lodash').put('isMatchWith', var.get('isMatchWith'))
                    var.get('lodash').put('isNaN', var.get('isNaN'))
                    var.get('lodash').put('isNative', var.get('isNative'))
                    var.get('lodash').put('isNil', var.get('isNil'))
                    var.get('lodash').put('isNull', var.get('isNull'))
                    var.get('lodash').put('isNumber', var.get('isNumber'))
                    var.get('lodash').put('isObject', var.get('isObject'))
                    var.get('lodash').put('isObjectLike', var.get('isObjectLike'))
                    var.get('lodash').put('isPlainObject', var.get('isPlainObject'))
                    var.get('lodash').put('isRegExp', var.get('isRegExp'))
                    var.get('lodash').put('isSafeInteger', var.get('isSafeInteger'))
                    var.get('lodash').put('isSet', var.get('isSet'))
                    var.get('lodash').put('isString', var.get('isString'))
                    var.get('lodash').put('isSymbol', var.get('isSymbol'))
                    var.get('lodash').put('isTypedArray', var.get('isTypedArray'))
                    var.get('lodash').put('isUndefined', var.get('isUndefined'))
                    var.get('lodash').put('isWeakMap', var.get('isWeakMap'))
                    var.get('lodash').put('isWeakSet', var.get('isWeakSet'))
                    var.get('lodash').put('join', var.get('join'))
                    var.get('lodash').put('kebabCase', var.get('kebabCase'))
                    var.get('lodash').put('last', var.get('last'))
                    var.get('lodash').put('lastIndexOf', var.get('lastIndexOf'))
                    var.get('lodash').put('lowerCase', var.get('lowerCase'))
                    var.get('lodash').put('lowerFirst', var.get('lowerFirst'))
                    var.get('lodash').put('lt', var.get('lt'))
                    var.get('lodash').put('lte', var.get('lte'))
                    var.get('lodash').put('max', var.get('max'))
                    var.get('lodash').put('maxBy', var.get('maxBy'))
                    var.get('lodash').put('mean', var.get('mean'))
                    var.get('lodash').put('meanBy', var.get('meanBy'))
                    var.get('lodash').put('min', var.get('min'))
                    var.get('lodash').put('minBy', var.get('minBy'))
                    var.get('lodash').put('stubArray', var.get('stubArray'))
                    var.get('lodash').put('stubFalse', var.get('stubFalse'))
                    var.get('lodash').put('stubObject', var.get('stubObject'))
                    var.get('lodash').put('stubString', var.get('stubString'))
                    var.get('lodash').put('stubTrue', var.get('stubTrue'))
                    var.get('lodash').put('multiply', var.get('multiply'))
                    var.get('lodash').put('nth', var.get('nth'))
                    var.get('lodash').put('noConflict', var.get('noConflict'))
                    var.get('lodash').put('noop', var.get('noop'))
                    var.get('lodash').put('now', var.get('now'))
                    var.get('lodash').put('pad', var.get('pad'))
                    var.get('lodash').put('padEnd', var.get('padEnd'))
                    var.get('lodash').put('padStart', var.get('padStart'))
                    var.get('lodash').put('parseInt', var.get('parseInt'))
                    var.get('lodash').put('random', var.get('random'))
                    var.get('lodash').put('reduce', var.get('reduce'))
                    var.get('lodash').put('reduceRight', var.get('reduceRight'))
                    var.get('lodash').put('repeat', var.get('repeat'))
                    var.get('lodash').put('replace', var.get('replace'))
                    var.get('lodash').put('result', var.get('result'))
                    var.get('lodash').put('round', var.get('round'))
                    var.get('lodash').put('runInContext', var.get('runInContext'))
                    var.get('lodash').put('sample', var.get('sample'))
                    var.get('lodash').put('size', var.get('size'))
                    var.get('lodash').put('snakeCase', var.get('snakeCase'))
                    var.get('lodash').put('some', var.get('some'))
                    var.get('lodash').put('sortedIndex', var.get('sortedIndex'))
                    var.get('lodash').put('sortedIndexBy', var.get('sortedIndexBy'))
                    var.get('lodash').put('sortedIndexOf', var.get('sortedIndexOf'))
                    var.get('lodash').put('sortedLastIndex', var.get('sortedLastIndex'))
                    var.get('lodash').put('sortedLastIndexBy', var.get('sortedLastIndexBy'))
                    var.get('lodash').put('sortedLastIndexOf', var.get('sortedLastIndexOf'))
                    var.get('lodash').put('startCase', var.get('startCase'))
                    var.get('lodash').put('startsWith', var.get('startsWith'))
                    var.get('lodash').put('subtract', var.get('subtract'))
                    var.get('lodash').put('sum', var.get('sum'))
                    var.get('lodash').put('sumBy', var.get('sumBy'))
                    var.get('lodash').put('template', var.get('template'))
                    var.get('lodash').put('times', var.get('times'))
                    var.get('lodash').put('toFinite', var.get('toFinite'))
                    var.get('lodash').put('toInteger', var.get('toInteger'))
                    var.get('lodash').put('toLength', var.get('toLength'))
                    var.get('lodash').put('toLower', var.get('toLower'))
                    var.get('lodash').put('toNumber', var.get('toNumber'))
                    var.get('lodash').put('toSafeInteger', var.get('toSafeInteger'))
                    var.get('lodash').put('toString', var.get('toString'))
                    var.get('lodash').put('toUpper', var.get('toUpper'))
                    var.get('lodash').put('trim', var.get('trim'))
                    var.get('lodash').put('trimEnd', var.get('trimEnd'))
                    var.get('lodash').put('trimStart', var.get('trimStart'))
                    var.get('lodash').put('truncate', var.get('truncate'))
                    var.get('lodash').put('unescape', var.get('unescape'))
                    var.get('lodash').put('uniqueId', var.get('uniqueId'))
                    var.get('lodash').put('upperCase', var.get('upperCase'))
                    var.get('lodash').put('upperFirst', var.get('upperFirst'))
                    var.get('lodash').put('each', var.get('forEach'))
                    var.get('lodash').put('eachRight', var.get('forEachRight'))
                    var.get('lodash').put('first', var.get('head'))
                    @Js
                    def PyJs_anonymous_281_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers(['source'])
                        var.put('source', Js({}))
                        @Js
                        def PyJs_anonymous_282_(func, methodName, this, arguments, var=var):
                            var = Scope({'func':func, 'methodName':methodName, 'this':this, 'arguments':arguments}, var)
                            var.registers(['func', 'methodName'])
                            if var.get('hasOwnProperty').callprop('call', var.get('lodash').get('prototype'), var.get('methodName')).neg():
                                var.get('source').put(var.get('methodName'), var.get('func'))
                        PyJs_anonymous_282_._set_name('anonymous')
                        var.get('baseForOwn')(var.get('lodash'), PyJs_anonymous_282_)
                        return var.get('source')
                    PyJs_anonymous_281_._set_name('anonymous')
                    var.get('mixin')(var.get('lodash'), PyJs_anonymous_281_(), Js({'chain':Js(False)}))
                    var.get('lodash').put('VERSION', var.get('VERSION'))
                    @Js
                    def PyJs_anonymous_283_(methodName, this, arguments, var=var):
                        var = Scope({'methodName':methodName, 'this':this, 'arguments':arguments}, var)
                        var.registers(['methodName'])
                        var.get('lodash').get(var.get('methodName')).put('placeholder', var.get('lodash'))
                    PyJs_anonymous_283_._set_name('anonymous')
                    var.get('arrayEach')(Js([Js('bind'), Js('bindKey'), Js('curry'), Js('curryRight'), Js('partial'), Js('partialRight')]), PyJs_anonymous_283_)
                    @Js
                    def PyJs_anonymous_284_(methodName, index, this, arguments, var=var):
                        var = Scope({'methodName':methodName, 'index':index, 'this':this, 'arguments':arguments}, var)
                        var.registers(['methodName', 'index'])
                        @Js
                        def PyJs_anonymous_285_(n, this, arguments, var=var):
                            var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                            var.registers(['result', 'n'])
                            var.put('n', (Js(1.0) if PyJsStrictEq(var.get('n'),var.get('undefined')) else var.get('nativeMax')(var.get('toInteger')(var.get('n')), Js(0.0))))
                            var.put('result', (var.get('LazyWrapper').create(var.get(u"this")) if (var.get(u"this").get('__filtered__') and var.get('index').neg()) else var.get(u"this").callprop('clone')))
                            if var.get('result').get('__filtered__'):
                                var.get('result').put('__takeCount__', var.get('nativeMin')(var.get('n'), var.get('result').get('__takeCount__')))
                            else:
                                var.get('result').get('__views__').callprop('push', Js({'size':var.get('nativeMin')(var.get('n'), var.get('MAX_ARRAY_LENGTH')),'type':(var.get('methodName')+(Js('Right') if (var.get('result').get('__dir__')<Js(0.0)) else Js('')))}))
                            return var.get('result')
                        PyJs_anonymous_285_._set_name('anonymous')
                        var.get('LazyWrapper').get('prototype').put(var.get('methodName'), PyJs_anonymous_285_)
                        @Js
                        def PyJs_anonymous_286_(n, this, arguments, var=var):
                            var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                            var.registers(['n'])
                            return var.get(u"this").callprop('reverse').callprop(var.get('methodName'), var.get('n')).callprop('reverse')
                        PyJs_anonymous_286_._set_name('anonymous')
                        var.get('LazyWrapper').get('prototype').put((var.get('methodName')+Js('Right')), PyJs_anonymous_286_)
                    PyJs_anonymous_284_._set_name('anonymous')
                    var.get('arrayEach')(Js([Js('drop'), Js('take')]), PyJs_anonymous_284_)
                    @Js
                    def PyJs_anonymous_287_(methodName, index, this, arguments, var=var):
                        var = Scope({'methodName':methodName, 'index':index, 'this':this, 'arguments':arguments}, var)
                        var.registers(['type', 'isFilter', 'methodName', 'index'])
                        var.put('type', (var.get('index')+Js(1.0)))
                        var.put('isFilter', ((var.get('type')==var.get('LAZY_FILTER_FLAG')) or (var.get('type')==var.get('LAZY_WHILE_FLAG'))))
                        @Js
                        def PyJs_anonymous_288_(iteratee, this, arguments, var=var):
                            var = Scope({'iteratee':iteratee, 'this':this, 'arguments':arguments}, var)
                            var.registers(['result', 'iteratee'])
                            var.put('result', var.get(u"this").callprop('clone'))
                            var.get('result').get('__iteratees__').callprop('push', Js({'iteratee':var.get('getIteratee')(var.get('iteratee'), Js(3.0)),'type':var.get('type')}))
                            var.get('result').put('__filtered__', (var.get('result').get('__filtered__') or var.get('isFilter')))
                            return var.get('result')
                        PyJs_anonymous_288_._set_name('anonymous')
                        var.get('LazyWrapper').get('prototype').put(var.get('methodName'), PyJs_anonymous_288_)
                    PyJs_anonymous_287_._set_name('anonymous')
                    var.get('arrayEach')(Js([Js('filter'), Js('map'), Js('takeWhile')]), PyJs_anonymous_287_)
                    @Js
                    def PyJs_anonymous_289_(methodName, index, this, arguments, var=var):
                        var = Scope({'methodName':methodName, 'index':index, 'this':this, 'arguments':arguments}, var)
                        var.registers(['takeName', 'methodName', 'index'])
                        var.put('takeName', (Js('take')+(Js('Right') if var.get('index') else Js(''))))
                        @Js
                        def PyJs_anonymous_290_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            return var.get(u"this").callprop(var.get('takeName'), Js(1.0)).callprop('value').get('0')
                        PyJs_anonymous_290_._set_name('anonymous')
                        var.get('LazyWrapper').get('prototype').put(var.get('methodName'), PyJs_anonymous_290_)
                    PyJs_anonymous_289_._set_name('anonymous')
                    var.get('arrayEach')(Js([Js('head'), Js('last')]), PyJs_anonymous_289_)
                    @Js
                    def PyJs_anonymous_291_(methodName, index, this, arguments, var=var):
                        var = Scope({'methodName':methodName, 'index':index, 'this':this, 'arguments':arguments}, var)
                        var.registers(['methodName', 'dropName', 'index'])
                        var.put('dropName', (Js('drop')+(Js('') if var.get('index') else Js('Right'))))
                        @Js
                        def PyJs_anonymous_292_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers([])
                            return (var.get('LazyWrapper').create(var.get(u"this")) if var.get(u"this").get('__filtered__') else var.get(u"this").callprop(var.get('dropName'), Js(1.0)))
                        PyJs_anonymous_292_._set_name('anonymous')
                        var.get('LazyWrapper').get('prototype').put(var.get('methodName'), PyJs_anonymous_292_)
                    PyJs_anonymous_291_._set_name('anonymous')
                    var.get('arrayEach')(Js([Js('initial'), Js('tail')]), PyJs_anonymous_291_)
                    @Js
                    def PyJs_anonymous_293_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get(u"this").callprop('filter', var.get('identity'))
                    PyJs_anonymous_293_._set_name('anonymous')
                    var.get('LazyWrapper').get('prototype').put('compact', PyJs_anonymous_293_)
                    @Js
                    def PyJs_anonymous_294_(predicate, this, arguments, var=var):
                        var = Scope({'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate'])
                        return var.get(u"this").callprop('filter', var.get('predicate')).callprop('head')
                    PyJs_anonymous_294_._set_name('anonymous')
                    var.get('LazyWrapper').get('prototype').put('find', PyJs_anonymous_294_)
                    @Js
                    def PyJs_anonymous_295_(predicate, this, arguments, var=var):
                        var = Scope({'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate'])
                        return var.get(u"this").callprop('reverse').callprop('find', var.get('predicate'))
                    PyJs_anonymous_295_._set_name('anonymous')
                    var.get('LazyWrapper').get('prototype').put('findLast', PyJs_anonymous_295_)
                    @Js
                    def PyJs_anonymous_296_(path, args, this, arguments, var=var):
                        var = Scope({'path':path, 'args':args, 'this':this, 'arguments':arguments}, var)
                        var.registers(['path', 'args'])
                        if (var.get('path',throw=False).typeof()==Js('function')):
                            return var.get('LazyWrapper').create(var.get(u"this"))
                        @Js
                        def PyJs_anonymous_297_(value, this, arguments, var=var):
                            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                            var.registers(['value'])
                            return var.get('baseInvoke')(var.get('value'), var.get('path'), var.get('args'))
                        PyJs_anonymous_297_._set_name('anonymous')
                        return var.get(u"this").callprop('map', PyJs_anonymous_297_)
                    PyJs_anonymous_296_._set_name('anonymous')
                    var.get('LazyWrapper').get('prototype').put('invokeMap', var.get('baseRest')(PyJs_anonymous_296_))
                    @Js
                    def PyJs_anonymous_298_(predicate, this, arguments, var=var):
                        var = Scope({'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate'])
                        return var.get(u"this").callprop('filter', var.get('negate')(var.get('getIteratee')(var.get('predicate'))))
                    PyJs_anonymous_298_._set_name('anonymous')
                    var.get('LazyWrapper').get('prototype').put('reject', PyJs_anonymous_298_)
                    @Js
                    def PyJs_anonymous_299_(start, end, this, arguments, var=var):
                        var = Scope({'start':start, 'end':end, 'this':this, 'arguments':arguments}, var)
                        var.registers(['end', 'result', 'start'])
                        var.put('start', var.get('toInteger')(var.get('start')))
                        var.put('result', var.get(u"this"))
                        if (var.get('result').get('__filtered__') and ((var.get('start')>Js(0.0)) or (var.get('end')<Js(0.0)))):
                            return var.get('LazyWrapper').create(var.get('result'))
                        if (var.get('start')<Js(0.0)):
                            var.put('result', var.get('result').callprop('takeRight', (-var.get('start'))))
                        else:
                            if var.get('start'):
                                var.put('result', var.get('result').callprop('drop', var.get('start')))
                        if PyJsStrictNeq(var.get('end'),var.get('undefined')):
                            var.put('end', var.get('toInteger')(var.get('end')))
                            var.put('result', (var.get('result').callprop('dropRight', (-var.get('end'))) if (var.get('end')<Js(0.0)) else var.get('result').callprop('take', (var.get('end')-var.get('start')))))
                        return var.get('result')
                    PyJs_anonymous_299_._set_name('anonymous')
                    var.get('LazyWrapper').get('prototype').put('slice', PyJs_anonymous_299_)
                    @Js
                    def PyJs_anonymous_300_(predicate, this, arguments, var=var):
                        var = Scope({'predicate':predicate, 'this':this, 'arguments':arguments}, var)
                        var.registers(['predicate'])
                        return var.get(u"this").callprop('reverse').callprop('takeWhile', var.get('predicate')).callprop('reverse')
                    PyJs_anonymous_300_._set_name('anonymous')
                    var.get('LazyWrapper').get('prototype').put('takeRightWhile', PyJs_anonymous_300_)
                    @Js
                    def PyJs_anonymous_301_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get(u"this").callprop('take', var.get('MAX_ARRAY_LENGTH'))
                    PyJs_anonymous_301_._set_name('anonymous')
                    var.get('LazyWrapper').get('prototype').put('toArray', PyJs_anonymous_301_)
                    @Js
                    def PyJs_anonymous_302_(func, methodName, this, arguments, var=var):
                        var = Scope({'func':func, 'methodName':methodName, 'this':this, 'arguments':arguments}, var)
                        var.registers(['retUnwrapped', 'lodashFunc', 'methodName', 'func', 'isTaker', 'checkIteratee'])
                        var.put('checkIteratee', JsRegExp('/^(?:filter|find|map|reject)|While$/').callprop('test', var.get('methodName')))
                        var.put('isTaker', JsRegExp('/^(?:head|last)$/').callprop('test', var.get('methodName')))
                        var.put('lodashFunc', var.get('lodash').get(((Js('take')+(Js('Right') if (var.get('methodName')==Js('last')) else Js(''))) if var.get('isTaker') else var.get('methodName'))))
                        var.put('retUnwrapped', (var.get('isTaker') or JsRegExp('/^find/').callprop('test', var.get('methodName'))))
                        if var.get('lodashFunc').neg():
                            return var.get('undefined')
                        @Js
                        def PyJs_anonymous_303_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['isLazy', 'interceptor', 'value', 'chainAll', 'args', 'useLazy', 'isUnwrapped', 'result', 'isHybrid', 'iteratee', 'onlyLazy'])
                            var.put('value', var.get(u"this").get('__wrapped__'))
                            var.put('args', (Js([Js(1.0)]) if var.get('isTaker') else var.get('arguments')))
                            var.put('isLazy', var.get('value').instanceof(var.get('LazyWrapper')))
                            var.put('iteratee', var.get('args').get('0'))
                            var.put('useLazy', (var.get('isLazy') or var.get('isArray')(var.get('value'))))
                            @Js
                            def PyJs_interceptor_304_(value, this, arguments, var=var):
                                var = Scope({'value':value, 'this':this, 'arguments':arguments, 'interceptor':PyJs_interceptor_304_}, var)
                                var.registers(['result', 'value'])
                                var.put('result', var.get('lodashFunc').callprop('apply', var.get('lodash'), var.get('arrayPush')(Js([var.get('value')]), var.get('args'))))
                                return (var.get('result').get('0') if (var.get('isTaker') and var.get('chainAll')) else var.get('result'))
                            PyJs_interceptor_304_._set_name('interceptor')
                            var.put('interceptor', PyJs_interceptor_304_)
                            if (((var.get('useLazy') and var.get('checkIteratee')) and (var.get('iteratee',throw=False).typeof()==Js('function'))) and (var.get('iteratee').get('length')!=Js(1.0))):
                                var.put('isLazy', var.put('useLazy', Js(False)))
                            var.put('chainAll', var.get(u"this").get('__chain__'))
                            var.put('isHybrid', var.get(u"this").get('__actions__').get('length').neg().neg())
                            var.put('isUnwrapped', (var.get('retUnwrapped') and var.get('chainAll').neg()))
                            var.put('onlyLazy', (var.get('isLazy') and var.get('isHybrid').neg()))
                            if (var.get('retUnwrapped').neg() and var.get('useLazy')):
                                var.put('value', (var.get('value') if var.get('onlyLazy') else var.get('LazyWrapper').create(var.get(u"this"))))
                                var.put('result', var.get('func').callprop('apply', var.get('value'), var.get('args')))
                                var.get('result').get('__actions__').callprop('push', Js({'func':var.get('thru'),'args':Js([var.get('interceptor')]),'thisArg':var.get('undefined')}))
                                return var.get('LodashWrapper').create(var.get('result'), var.get('chainAll'))
                            if (var.get('isUnwrapped') and var.get('onlyLazy')):
                                return var.get('func').callprop('apply', var.get(u"this"), var.get('args'))
                            var.put('result', var.get(u"this").callprop('thru', var.get('interceptor')))
                            return ((var.get('result').callprop('value').get('0') if var.get('isTaker') else var.get('result').callprop('value')) if var.get('isUnwrapped') else var.get('result'))
                        PyJs_anonymous_303_._set_name('anonymous')
                        var.get('lodash').get('prototype').put(var.get('methodName'), PyJs_anonymous_303_)
                    PyJs_anonymous_302_._set_name('anonymous')
                    var.get('baseForOwn')(var.get('LazyWrapper').get('prototype'), PyJs_anonymous_302_)
                    @Js
                    def PyJs_anonymous_305_(methodName, this, arguments, var=var):
                        var = Scope({'methodName':methodName, 'this':this, 'arguments':arguments}, var)
                        var.registers(['methodName', 'func', 'retUnwrapped', 'chainName'])
                        var.put('func', var.get('arrayProto').get(var.get('methodName')))
                        var.put('chainName', (Js('tap') if JsRegExp('/^(?:push|sort|unshift)$/').callprop('test', var.get('methodName')) else Js('thru')))
                        var.put('retUnwrapped', JsRegExp('/^(?:pop|shift)$/').callprop('test', var.get('methodName')))
                        @Js
                        def PyJs_anonymous_306_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments}, var)
                            var.registers(['args', 'value'])
                            var.put('args', var.get('arguments'))
                            if (var.get('retUnwrapped') and var.get(u"this").get('__chain__').neg()):
                                var.put('value', var.get(u"this").callprop('value'))
                                return var.get('func').callprop('apply', (var.get('value') if var.get('isArray')(var.get('value')) else Js([])), var.get('args'))
                            @Js
                            def PyJs_anonymous_307_(value, this, arguments, var=var):
                                var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
                                var.registers(['value'])
                                return var.get('func').callprop('apply', (var.get('value') if var.get('isArray')(var.get('value')) else Js([])), var.get('args'))
                            PyJs_anonymous_307_._set_name('anonymous')
                            return var.get(u"this").callprop(var.get('chainName'), PyJs_anonymous_307_)
                        PyJs_anonymous_306_._set_name('anonymous')
                        var.get('lodash').get('prototype').put(var.get('methodName'), PyJs_anonymous_306_)
                    PyJs_anonymous_305_._set_name('anonymous')
                    var.get('arrayEach')(Js([Js('pop'), Js('push'), Js('shift'), Js('sort'), Js('splice'), Js('unshift')]), PyJs_anonymous_305_)
                    @Js
                    def PyJs_anonymous_308_(func, methodName, this, arguments, var=var):
                        var = Scope({'func':func, 'methodName':methodName, 'this':this, 'arguments':arguments}, var)
                        var.registers(['names', 'lodashFunc', 'methodName', 'func', 'key'])
                        var.put('lodashFunc', var.get('lodash').get(var.get('methodName')))
                        if var.get('lodashFunc'):
                            var.put('key', (var.get('lodashFunc').get('name')+Js('')))
                            var.put('names', (var.get('realNames').get(var.get('key')) or var.get('realNames').put(var.get('key'), Js([]))))
                            var.get('names').callprop('push', Js({'name':var.get('methodName'),'func':var.get('lodashFunc')}))
                    PyJs_anonymous_308_._set_name('anonymous')
                    var.get('baseForOwn')(var.get('LazyWrapper').get('prototype'), PyJs_anonymous_308_)
                    var.get('realNames').put(var.get('createHybrid')(var.get('undefined'), var.get('WRAP_BIND_KEY_FLAG')).get('name'), Js([Js({'name':Js('wrapper'),'func':var.get('undefined')})]))
                    var.get('LazyWrapper').get('prototype').put('clone', var.get('lazyClone'))
                    var.get('LazyWrapper').get('prototype').put('reverse', var.get('lazyReverse'))
                    var.get('LazyWrapper').get('prototype').put('value', var.get('lazyValue'))
                    var.get('lodash').get('prototype').put('at', var.get('wrapperAt'))
                    var.get('lodash').get('prototype').put('chain', var.get('wrapperChain'))
                    var.get('lodash').get('prototype').put('commit', var.get('wrapperCommit'))
                    var.get('lodash').get('prototype').put('next', var.get('wrapperNext'))
                    var.get('lodash').get('prototype').put('plant', var.get('wrapperPlant'))
                    var.get('lodash').get('prototype').put('reverse', var.get('wrapperReverse'))
                    var.get('lodash').get('prototype').put('toJSON', var.get('lodash').get('prototype').put('valueOf', var.get('lodash').get('prototype').put('value', var.get('wrapperValue'))))
                    var.get('lodash').get('prototype').put('first', var.get('lodash').get('prototype').get('head'))
                    if var.get('symIterator'):
                        var.get('lodash').get('prototype').put(var.get('symIterator'), var.get('wrapperToIterator'))
                    return var.get('lodash')
                PyJs_runInContext_118_._set_name('runInContext')
                var.put('runInContext', PyJs_runInContext_118_)
                var.put('_', var.get('runInContext')())
                if (((var.get('define',throw=False).typeof()==Js('function')) and (var.get('_typeof')(var.get('define').get('amd'))==Js('object'))) and var.get('define').get('amd')):
                    var.get('root').put('_', var.get('_'))
                    @Js
                    def PyJs_anonymous_309_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('_')
                    PyJs_anonymous_309_._set_name('anonymous')
                    var.get('define')(PyJs_anonymous_309_)
                else:
                    if var.get('freeModule'):
                        var.get('freeModule').put('exports', var.get('_')).put('_', var.get('_'))
                        var.get('freeExports').put('_', var.get('_'))
                    else:
                        var.get('root').put('_', var.get('_'))
            PyJs_anonymous_100_._set_name('anonymous')
            PyJs_anonymous_100_.callprop('call', var.get(u"this"))
        PyJs_anonymous_99_._set_name('anonymous')
        PyJs_anonymous_99_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_98_._set_name('anonymous')
    @Js
    def PyJs_anonymous_310_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'ndfft', 'ops', 'exports', 'pool', 'ndarray', 'require', 'fftm'])
        @Js
        def PyJsHoisted_ndfft_(dir, x, y, this, arguments, var=var):
            var = Scope({'dir':dir, 'x':x, 'y':y, 'this':this, 'arguments':arguments}, var)
            var.registers(['shape', 's1', 'stride', 'scratch_ptr', 'buf_size', 'buffer', 'tmp', 'pad', 'x2', 'i', 'y1', 'j', 's2', 'x', 'y', 'y2', 'x1', 'dir', 'd', 'n', 'size'])
            var.put('shape', var.get('x').get('shape'))
            var.put('d', var.get('shape').get('length'))
            var.put('size', Js(1.0))
            var.put('stride', var.get('Array').create(var.get('d')))
            var.put('pad', Js(0.0))
            #for JS loop
            var.put('i', (var.get('d')-Js(1.0)))
            while (var.get('i')>=Js(0.0)):
                try:
                    var.get('stride').put(var.get('i'), var.get('size'))
                    var.put('size', var.get('shape').get(var.get('i')), '*')
                    var.put('pad', var.get('Math').callprop('max', var.get('pad'), var.get('fftm').callprop('scratchMemory', var.get('shape').get(var.get('i')))))
                    if PyJsStrictNeq(var.get('x').get('shape').get(var.get('i')),var.get('y').get('shape').get(var.get('i'))):
                        PyJsTempException = JsToPyException(var.get('Error').create(Js('Shape mismatch, real and imaginary arrays must have same size')))
                        raise PyJsTempException
                finally:
                        var.put('i',Js(var.get('i').to_number())-Js(1))
            var.put('buf_size', ((Js(4.0)*var.get('size'))+var.get('pad')))
            pass
            if ((PyJsStrictEq(var.get('x').get('dtype'),Js('array')) or PyJsStrictEq(var.get('x').get('dtype'),Js('float64'))) or PyJsStrictEq(var.get('x').get('dtype'),Js('custom'))):
                var.put('buffer', var.get('pool').callprop('mallocDouble', var.get('buf_size')))
            else:
                var.put('buffer', var.get('pool').callprop('mallocFloat', var.get('buf_size')))
            var.put('x1', var.get('ndarray')(var.get('buffer'), var.get('shape').callprop('slice', Js(0.0)), var.get('stride'), Js(0.0)))
            var.put('y1', var.get('ndarray')(var.get('buffer'), var.get('shape').callprop('slice', Js(0.0)), var.get('stride').callprop('slice', Js(0.0)), var.get('size')))
            var.put('x2', var.get('ndarray')(var.get('buffer'), var.get('shape').callprop('slice', Js(0.0)), var.get('stride').callprop('slice', Js(0.0)), (Js(2.0)*var.get('size'))))
            var.put('y2', var.get('ndarray')(var.get('buffer'), var.get('shape').callprop('slice', Js(0.0)), var.get('stride').callprop('slice', Js(0.0)), (Js(3.0)*var.get('size'))))
            var.put('scratch_ptr', (Js(4.0)*var.get('size')))
            var.get('ops').callprop('assign', var.get('x1'), var.get('x'))
            var.get('ops').callprop('assign', var.get('y1'), var.get('y'))
            #for JS loop
            var.put('i', (var.get('d')-Js(1.0)))
            while (var.get('i')>=Js(0.0)):
                try:
                    var.get('fftm')(var.get('dir'), (var.get('size')/var.get('shape').get(var.get('i'))), var.get('shape').get(var.get('i')), var.get('buffer'), var.get('x1').get('offset'), var.get('y1').get('offset'), var.get('scratch_ptr'))
                    if PyJsStrictEq(var.get('i'),Js(0.0)):
                        break
                    var.put('n', Js(1.0))
                    var.put('s1', var.get('x2').get('stride'))
                    var.put('s2', var.get('y2').get('stride'))
                    #for JS loop
                    var.put('j', (var.get('i')-Js(1.0)))
                    while (var.get('j')<var.get('d')):
                        try:
                            var.get('s2').put(var.get('j'), var.get('s1').put(var.get('j'), var.get('n')))
                            var.put('n', var.get('shape').get(var.get('j')), '*')
                        finally:
                                var.put('j',Js(var.get('j').to_number())+Js(1))
                    #for JS loop
                    var.put('j', (var.get('i')-Js(2.0)))
                    while (var.get('j')>=Js(0.0)):
                        try:
                            var.get('s2').put(var.get('j'), var.get('s1').put(var.get('j'), var.get('n')))
                            var.put('n', var.get('shape').get(var.get('j')), '*')
                        finally:
                                var.put('j',Js(var.get('j').to_number())-Js(1))
                    var.get('ops').callprop('assign', var.get('x2'), var.get('x1'))
                    var.get('ops').callprop('assign', var.get('y2'), var.get('y1'))
                    var.put('tmp', var.get('x1'))
                    var.put('x1', var.get('x2'))
                    var.put('x2', var.get('tmp'))
                    var.put('tmp', var.get('y1'))
                    var.put('y1', var.get('y2'))
                    var.put('y2', var.get('tmp'))
                finally:
                        var.put('i',Js(var.get('i').to_number())-Js(1))
            var.get('ops').callprop('assign', var.get('x'), var.get('x1'))
            var.get('ops').callprop('assign', var.get('y'), var.get('y1'))
            var.get('pool').callprop('free', var.get('buffer'))
        PyJsHoisted_ndfft_.func_name = 'ndfft'
        var.put('ndfft', PyJsHoisted_ndfft_)
        Js('use strict')
        var.put('ops', var.get('require')(Js('ndarray-ops')))
        var.put('ndarray', var.get('require')(Js('ndarray')))
        var.put('pool', var.get('require')(Js('typedarray-pool')))
        var.put('fftm', var.get('require')(Js('./lib/fft-matrix.js')))
        pass
        var.get('module').put('exports', var.get('ndfft'))
    PyJs_anonymous_310_._set_name('anonymous')
    @Js
    def PyJs_anonymous_311_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'bits', 'fftRadix2', 'exports', 'fftBluestein', 'require', 'fft', 'scratchMemory'])
        @Js
        def PyJsHoisted_fft_(dir, nrows, ncols, buffer, x_ptr, y_ptr, scratch_ptr, this, arguments, var=var):
            var = Scope({'dir':dir, 'nrows':nrows, 'ncols':ncols, 'buffer':buffer, 'x_ptr':x_ptr, 'y_ptr':y_ptr, 'scratch_ptr':scratch_ptr, 'this':this, 'arguments':arguments}, var)
            var.registers(['y_ptr', 'dir', 'buffer', 'nrows', 'ncols', 'scratch_ptr', 'x_ptr'])
            var.put('dir', Js(0.0), '|')
            var.put('nrows', Js(0.0), '|')
            var.put('ncols', Js(0.0), '|')
            var.put('x_ptr', Js(0.0), '|')
            var.put('y_ptr', Js(0.0), '|')
            if var.get('bits').callprop('isPow2', var.get('ncols')):
                var.get('fftRadix2')(var.get('dir'), var.get('nrows'), var.get('ncols'), var.get('buffer'), var.get('x_ptr'), var.get('y_ptr'))
            else:
                var.get('fftBluestein')(var.get('dir'), var.get('nrows'), var.get('ncols'), var.get('buffer'), var.get('x_ptr'), var.get('y_ptr'), var.get('scratch_ptr'))
        PyJsHoisted_fft_.func_name = 'fft'
        var.put('fft', PyJsHoisted_fft_)
        @Js
        def PyJsHoisted_scratchMemory_(n, this, arguments, var=var):
            var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
            var.registers(['n'])
            if var.get('bits').callprop('isPow2', var.get('n')):
                return Js(0.0)
            return ((Js(2.0)*var.get('n'))+(Js(4.0)*var.get('bits').callprop('nextPow2', ((Js(2.0)*var.get('n'))+Js(1.0)))))
        PyJsHoisted_scratchMemory_.func_name = 'scratchMemory'
        var.put('scratchMemory', PyJsHoisted_scratchMemory_)
        @Js
        def PyJsHoisted_fftRadix2_(dir, nrows, ncols, buffer, x_ptr, y_ptr, this, arguments, var=var):
            var = Scope({'dir':dir, 'nrows':nrows, 'ncols':ncols, 'buffer':buffer, 'x_ptr':x_ptr, 'y_ptr':y_ptr, 'this':this, 'arguments':arguments}, var)
            var.registers(['k3', 'a', 'x_ptr', 'l2', 'm', 't1', 'c', 'u2', 'buffer', 'k2', 't2', 'u1', 'k1', 'y_ptr', 'i', 'nn', 'b', 'c1', 'ncols', 'i2', 'j', 't', 'z', 'l', 'c2', 'scale_f', 'dir', 'row', 'nrows', 'k', 'd', 'i1', 'l1'])
            var.put('dir', Js(0.0), '|')
            var.put('nrows', Js(0.0), '|')
            var.put('ncols', Js(0.0), '|')
            var.put('x_ptr', Js(0.0), '|')
            var.put('y_ptr', Js(0.0), '|')
            pass
            pass
            var.put('nn', var.get('ncols'))
            var.put('m', var.get('bits').callprop('log2', var.get('nn')))
            #for JS loop
            var.put('row', Js(0.0))
            while (var.get('row')<var.get('nrows')):
                try:
                    var.put('i2', (var.get('nn')>>Js(1.0)))
                    var.put('j', Js(0.0))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<(var.get('nn')-Js(1.0))):
                        try:
                            if (var.get('i')<var.get('j')):
                                var.put('t', var.get('buffer').get((var.get('x_ptr')+var.get('i'))))
                                var.get('buffer').put((var.get('x_ptr')+var.get('i')), var.get('buffer').get((var.get('x_ptr')+var.get('j'))))
                                var.get('buffer').put((var.get('x_ptr')+var.get('j')), var.get('t'))
                                var.put('t', var.get('buffer').get((var.get('y_ptr')+var.get('i'))))
                                var.get('buffer').put((var.get('y_ptr')+var.get('i')), var.get('buffer').get((var.get('y_ptr')+var.get('j'))))
                                var.get('buffer').put((var.get('y_ptr')+var.get('j')), var.get('t'))
                            var.put('k', var.get('i2'))
                            while (var.get('k')<=var.get('j')):
                                var.put('j', var.get('k'), '-')
                                var.put('k', Js(1.0), '>>')
                            var.put('j', var.get('k'), '+')
                        finally:
                                (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.put('c1', (-Js(1.0)))
                    var.put('c2', Js(0.0))
                    var.put('l2', Js(1.0))
                    #for JS loop
                    var.put('l', Js(0.0))
                    while (var.get('l')<var.get('m')):
                        try:
                            var.put('l1', var.get('l2'))
                            var.put('l2', Js(1.0), '<<')
                            var.put('u1', Js(1.0))
                            var.put('u2', Js(0.0))
                            #for JS loop
                            var.put('j', Js(0.0))
                            while (var.get('j')<var.get('l1')):
                                try:
                                    #for JS loop
                                    var.put('i', var.get('j'))
                                    while (var.get('i')<var.get('nn')):
                                        try:
                                            var.put('i1', (var.get('i')+var.get('l1')))
                                            var.put('a', var.get('buffer').get((var.get('x_ptr')+var.get('i1'))))
                                            var.put('b', var.get('buffer').get((var.get('y_ptr')+var.get('i1'))))
                                            var.put('c', var.get('buffer').get((var.get('x_ptr')+var.get('i'))))
                                            var.put('d', var.get('buffer').get((var.get('y_ptr')+var.get('i'))))
                                            var.put('k1', (var.get('u1')*(var.get('a')+var.get('b'))))
                                            var.put('k2', (var.get('a')*(var.get('u2')-var.get('u1'))))
                                            var.put('k3', (var.get('b')*(var.get('u1')+var.get('u2'))))
                                            var.put('t1', (var.get('k1')-var.get('k3')))
                                            var.put('t2', (var.get('k1')+var.get('k2')))
                                            var.get('buffer').put((var.get('x_ptr')+var.get('i1')), (var.get('c')-var.get('t1')))
                                            var.get('buffer').put((var.get('y_ptr')+var.get('i1')), (var.get('d')-var.get('t2')))
                                            var.get('buffer').put((var.get('x_ptr')+var.get('i')), var.get('t1'), '+')
                                            var.get('buffer').put((var.get('y_ptr')+var.get('i')), var.get('t2'), '+')
                                        finally:
                                                var.put('i', var.get('l2'), '+')
                                    var.put('k1', (var.get('c1')*(var.get('u1')+var.get('u2'))))
                                    var.put('k2', (var.get('u1')*(var.get('c2')-var.get('c1'))))
                                    var.put('k3', (var.get('u2')*(var.get('c1')+var.get('c2'))))
                                    var.put('u1', (var.get('k1')-var.get('k3')))
                                    var.put('u2', (var.get('k1')+var.get('k2')))
                                finally:
                                        (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                            var.put('c2', var.get('Math').callprop('sqrt', ((Js(1.0)-var.get('c1'))/Js(2.0))))
                            if (var.get('dir')<Js(0.0)):
                                var.put('c2', (-var.get('c2')))
                            var.put('c1', var.get('Math').callprop('sqrt', ((Js(1.0)+var.get('c1'))/Js(2.0))))
                        finally:
                                (var.put('l',Js(var.get('l').to_number())+Js(1))-Js(1))
                    if (var.get('dir')<Js(0.0)):
                        var.put('scale_f', (Js(1.0)/var.get('nn')))
                        #for JS loop
                        var.put('i', Js(0.0))
                        while (var.get('i')<var.get('nn')):
                            try:
                                var.get('buffer').put((var.get('x_ptr')+var.get('i')), var.get('scale_f'), '*')
                                var.get('buffer').put((var.get('y_ptr')+var.get('i')), var.get('scale_f'), '*')
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    var.put('x_ptr', var.get('ncols'), '+')
                    var.put('y_ptr', var.get('ncols'), '+')
                finally:
                        var.put('row',Js(var.get('row').to_number())+Js(1))
        PyJsHoisted_fftRadix2_.func_name = 'fftRadix2'
        var.put('fftRadix2', PyJsHoisted_fftRadix2_)
        @Js
        def PyJsHoisted_fftBluestein_(dir, nrows, ncols, buffer, x_ptr, y_ptr, scratch_ptr, this, arguments, var=var):
            var = Scope({'dir':dir, 'nrows':nrows, 'ncols':ncols, 'buffer':buffer, 'x_ptr':x_ptr, 'y_ptr':y_ptr, 'scratch_ptr':scratch_ptr, 'this':this, 'arguments':arguments}, var)
            var.registers(['cos_ptr', 'xs_ptr', 'k3', 'a', 'w', 'scratch_ptr', 'ys_ptr', 'x_ptr', 'sft_ptr', 'm', 'c', 'buffer', 'k2', 'k1', 'y_ptr', 'i', 'b', 'ncols', 'cft_ptr', 'dir', 'sin_ptr', 'row', 'd', 'nrows'])
            var.put('dir', Js(0.0), '|')
            var.put('nrows', Js(0.0), '|')
            var.put('ncols', Js(0.0), '|')
            var.put('x_ptr', Js(0.0), '|')
            var.put('y_ptr', Js(0.0), '|')
            var.put('scratch_ptr', Js(0.0), '|')
            var.put('m', var.get('bits').callprop('nextPow2', ((Js(2.0)*var.get('ncols'))+Js(1.0))))
            var.put('cos_ptr', var.get('scratch_ptr'))
            var.put('sin_ptr', (var.get('cos_ptr')+var.get('ncols')))
            var.put('xs_ptr', (var.get('sin_ptr')+var.get('ncols')))
            var.put('ys_ptr', (var.get('xs_ptr')+var.get('m')))
            var.put('cft_ptr', (var.get('ys_ptr')+var.get('m')))
            var.put('sft_ptr', (var.get('cft_ptr')+var.get('m')))
            var.put('w', (((-var.get('dir'))*var.get('Math').get('PI'))/var.get('ncols')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('ncols')):
                try:
                    var.put('a', (var.get('w')*((var.get('i')*var.get('i'))%(var.get('ncols')*Js(2.0)))))
                    var.put('c', var.get('Math').callprop('cos', var.get('a')))
                    var.put('d', var.get('Math').callprop('sin', var.get('a')))
                    var.get('buffer').put((var.get('cft_ptr')+(var.get('m')-var.get('i'))), var.get('buffer').put((var.get('cft_ptr')+var.get('i')), var.get('buffer').put((var.get('cos_ptr')+var.get('i')), var.get('c'))))
                    var.get('buffer').put((var.get('sft_ptr')+(var.get('m')-var.get('i'))), var.get('buffer').put((var.get('sft_ptr')+var.get('i')), var.get('buffer').put((var.get('sin_ptr')+var.get('i')), var.get('d'))))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            #for JS loop
            var.put('i', var.get('ncols'))
            while (var.get('i')<=(var.get('m')-var.get('ncols'))):
                try:
                    var.get('buffer').put((var.get('cft_ptr')+var.get('i')), Js(0.0))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            #for JS loop
            var.put('i', var.get('ncols'))
            while (var.get('i')<=(var.get('m')-var.get('ncols'))):
                try:
                    var.get('buffer').put((var.get('sft_ptr')+var.get('i')), Js(0.0))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            var.get('fftRadix2')(Js(1.0), Js(1.0), var.get('m'), var.get('buffer'), var.get('cft_ptr'), var.get('sft_ptr'))
            if (var.get('dir')<Js(0.0)):
                var.put('w', (Js(1.0)/var.get('ncols')))
            else:
                var.put('w', Js(1.0))
            #for JS loop
            var.put('row', Js(0.0))
            while (var.get('row')<var.get('nrows')):
                try:
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('ncols')):
                        try:
                            var.put('a', var.get('buffer').get((var.get('x_ptr')+var.get('i'))))
                            var.put('b', var.get('buffer').get((var.get('y_ptr')+var.get('i'))))
                            var.put('c', var.get('buffer').get((var.get('cos_ptr')+var.get('i'))))
                            var.put('d', (-var.get('buffer').get((var.get('sin_ptr')+var.get('i')))))
                            var.put('k1', (var.get('c')*(var.get('a')+var.get('b'))))
                            var.put('k2', (var.get('a')*(var.get('d')-var.get('c'))))
                            var.put('k3', (var.get('b')*(var.get('c')+var.get('d'))))
                            var.get('buffer').put((var.get('xs_ptr')+var.get('i')), (var.get('k1')-var.get('k3')))
                            var.get('buffer').put((var.get('ys_ptr')+var.get('i')), (var.get('k1')+var.get('k2')))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    #for JS loop
                    var.put('i', var.get('ncols'))
                    while (var.get('i')<var.get('m')):
                        try:
                            var.get('buffer').put((var.get('xs_ptr')+var.get('i')), Js(0.0))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    #for JS loop
                    var.put('i', var.get('ncols'))
                    while (var.get('i')<var.get('m')):
                        try:
                            var.get('buffer').put((var.get('ys_ptr')+var.get('i')), Js(0.0))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    var.get('fftRadix2')(Js(1.0), Js(1.0), var.get('m'), var.get('buffer'), var.get('xs_ptr'), var.get('ys_ptr'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('m')):
                        try:
                            var.put('a', var.get('buffer').get((var.get('xs_ptr')+var.get('i'))))
                            var.put('b', var.get('buffer').get((var.get('ys_ptr')+var.get('i'))))
                            var.put('c', var.get('buffer').get((var.get('cft_ptr')+var.get('i'))))
                            var.put('d', var.get('buffer').get((var.get('sft_ptr')+var.get('i'))))
                            var.put('k1', (var.get('c')*(var.get('a')+var.get('b'))))
                            var.put('k2', (var.get('a')*(var.get('d')-var.get('c'))))
                            var.put('k3', (var.get('b')*(var.get('c')+var.get('d'))))
                            var.get('buffer').put((var.get('xs_ptr')+var.get('i')), (var.get('k1')-var.get('k3')))
                            var.get('buffer').put((var.get('ys_ptr')+var.get('i')), (var.get('k1')+var.get('k2')))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    var.get('fftRadix2')((-Js(1.0)), Js(1.0), var.get('m'), var.get('buffer'), var.get('xs_ptr'), var.get('ys_ptr'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('ncols')):
                        try:
                            var.put('a', var.get('buffer').get((var.get('xs_ptr')+var.get('i'))))
                            var.put('b', var.get('buffer').get((var.get('ys_ptr')+var.get('i'))))
                            var.put('c', var.get('buffer').get((var.get('cos_ptr')+var.get('i'))))
                            var.put('d', (-var.get('buffer').get((var.get('sin_ptr')+var.get('i')))))
                            var.put('k1', (var.get('c')*(var.get('a')+var.get('b'))))
                            var.put('k2', (var.get('a')*(var.get('d')-var.get('c'))))
                            var.put('k3', (var.get('b')*(var.get('c')+var.get('d'))))
                            var.get('buffer').put((var.get('x_ptr')+var.get('i')), (var.get('w')*(var.get('k1')-var.get('k3'))))
                            var.get('buffer').put((var.get('y_ptr')+var.get('i')), (var.get('w')*(var.get('k1')+var.get('k2'))))
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    var.put('x_ptr', var.get('ncols'), '+')
                    var.put('y_ptr', var.get('ncols'), '+')
                finally:
                        var.put('row',Js(var.get('row').to_number())+Js(1))
        PyJsHoisted_fftBluestein_.func_name = 'fftBluestein'
        var.put('fftBluestein', PyJsHoisted_fftBluestein_)
        var.put('bits', var.get('require')(Js('bit-twiddle')))
        pass
        var.get('module').put('exports', var.get('fft'))
        pass
        var.get('module').get('exports').put('scratchMemory', var.get('scratchMemory'))
        pass
        pass
    PyJs_anonymous_311_._set_name('anonymous')
    @Js
    def PyJs_anonymous_312_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'classifyType', 'shape', 'exports', 'generatePlan', 'require', 'CACHE', 'matrixProduct', 'checkShapes'])
        @Js
        def PyJsHoisted_shape_(arr, this, arguments, var=var):
            var = Scope({'arr':arr, 'this':this, 'arguments':arguments}, var)
            var.registers(['arr'])
            if var.get('Array').callprop('isArray', var.get('arr')):
                return Js([var.get('arr').get('length'), var.get('arr').get('0').get('length')])
            else:
                return var.get('arr').get('shape')
        PyJsHoisted_shape_.func_name = 'shape'
        var.put('shape', PyJsHoisted_shape_)
        @Js
        def PyJsHoisted_checkShapes_(out, a, b, this, arguments, var=var):
            var = Scope({'out':out, 'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['as', 'bs', 'b', 'a', 'out', 'os'])
            var.put('os', var.get('shape')(var.get('out')))
            var.put('as', var.get('shape')(var.get('a')))
            var.put('bs', var.get('shape')(var.get('b')))
            if ((PyJsStrictNeq(var.get('os').get('0'),var.get('as').get('0')) or PyJsStrictNeq(var.get('os').get('1'),var.get('bs').get('1'))) or PyJsStrictNeq(var.get('as').get('1'),var.get('bs').get('0'))):
                PyJsTempException = JsToPyException(var.get('Error').create(Js('Mismatched array shapes for matrix product')))
                raise PyJsTempException
        PyJsHoisted_checkShapes_.func_name = 'checkShapes'
        var.put('checkShapes', PyJsHoisted_checkShapes_)
        @Js
        def PyJsHoisted_classifyType_(m, this, arguments, var=var):
            var = Scope({'m':m, 'this':this, 'arguments':arguments}, var)
            var.registers(['m'])
            if var.get('Array').callprop('isArray', var.get('m')):
                if var.get('Array').callprop('isArray', var.get('m')):
                    return Js([Js('r'), Js('native')])
            else:
                if (var.get('m').get('shape') and PyJsStrictEq(var.get('m').get('shape').get('length'),Js(2.0))):
                    if var.get('m').get('order').get('0'):
                        return Js([Js('r'), var.get('m').get('dtype')])
                    else:
                        return Js([Js('c'), var.get('m').get('dtype')])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('Unrecognized data type')))
            raise PyJsTempException
        PyJsHoisted_classifyType_.func_name = 'classifyType'
        var.put('classifyType', PyJsHoisted_classifyType_)
        @Js
        def PyJsHoisted_matrixProduct_(out, a, b, alpha, beta, this, arguments, var=var):
            var = Scope({'out':out, 'a':a, 'b':b, 'alpha':alpha, 'beta':beta, 'this':this, 'arguments':arguments}, var)
            var.registers(['beta', 'outType', 'useAlpha', 'bType', 'typeSig', 'b', 'a', 'proc', 'alpha', 'useBeta', 'out', 'aType'])
            if PyJsStrictEq(var.get('alpha'),var.get('undefined')):
                var.put('alpha', Js(1.0))
            if PyJsStrictEq(var.get('beta'),var.get('undefined')):
                var.put('beta', Js(0.0))
            var.put('useAlpha', PyJsStrictNeq(var.get('alpha'),Js(1.0)))
            var.put('useBeta', PyJsStrictNeq(var.get('beta'),Js(0.0)))
            var.put('outType', var.get('classifyType')(var.get('out')))
            var.put('aType', var.get('classifyType')(var.get('a')))
            var.put('bType', var.get('classifyType')(var.get('b')))
            var.get('checkShapes')(var.get('out'), var.get('a'), var.get('b'))
            var.put('typeSig', Js([var.get('outType'), var.get('aType'), var.get('bType'), var.get('useAlpha'), var.get('useBeta')]).callprop('join', Js(':')))
            var.put('proc', var.get('CACHE').get(var.get('typeSig')))
            if var.get('proc').neg():
                var.put('proc', var.get('CACHE').put(var.get('typeSig'), var.get('generatePlan')(var.get('outType'), var.get('aType'), var.get('bType'), var.get('useAlpha'), var.get('useBeta'))))
            return var.get('proc')(var.get('out'), var.get('a'), var.get('b'), var.get('alpha'), var.get('beta'))
        PyJsHoisted_matrixProduct_.func_name = 'matrixProduct'
        var.put('matrixProduct', PyJsHoisted_matrixProduct_)
        Js('use strict')
        var.get('module').put('exports', var.get('matrixProduct'))
        var.put('generatePlan', var.get('require')(Js('./lib/planner.js')))
        pass
        pass
        pass
        var.put('CACHE', Js({}))
        pass
    PyJs_anonymous_312_._set_name('anonymous')
    @Js
    def PyJs_anonymous_313_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['unpackShape', 'module', 'generateRowColumnLoop', 'exports', 'BLOCK_SIZE', 'generateBlockLoop', 'unpackOrder', 'generateMatrixProduct', 'require', 'start', 'write', 'read', 'walk', 'generateBetaPass'])
        @Js
        def PyJsHoisted_unpackOrder_(order, this, arguments, var=var):
            var = Scope({'order':order, 'this':this, 'arguments':arguments}, var)
            var.registers(['order'])
            return (Js([Js(1.0), Js(0.0)]) if PyJsStrictEq(var.get('order'),Js('r')) else Js([Js(0.0), Js(1.0)]))
        PyJsHoisted_unpackOrder_.func_name = 'unpackOrder'
        var.put('unpackOrder', PyJsHoisted_unpackOrder_)
        @Js
        def PyJsHoisted_unpackShape_(name, type, this, arguments, var=var):
            var = Scope({'name':name, 'type':type, 'this':this, 'arguments':arguments}, var)
            var.registers(['type', 'name'])
            if PyJsStrictEq(var.get('type').get('1'),Js('native')):
                return Js([var.get('name'), Js('d0='), var.get('name'), Js('.length,'), var.get('name'), Js('d1='), var.get('name'), Js('[0].length,')]).callprop('join', Js(''))
            else:
                def PyJs_LONG_314_(var=var):
                    return Js([var.get('name'), Js('d0='), var.get('name'), Js('.shape[0],'), var.get('name'), Js('d1='), var.get('name'), Js('.shape[1],'), var.get('name'), Js('s0='), var.get('name'), Js('.stride[0],'), var.get('name'), Js('s1='), var.get('name'), Js('.stride[1],'), var.get('name'), Js('o='), var.get('name'), Js('.offset,'), var.get('name'), Js('d='), var.get('name'), Js('.data,')]).callprop('join', Js(''))
                return PyJs_LONG_314_()
        PyJsHoisted_unpackShape_.func_name = 'unpackShape'
        var.put('unpackShape', PyJsHoisted_unpackShape_)
        @Js
        def PyJsHoisted_start_(order, name, type, i, j, w, this, arguments, var=var):
            var = Scope({'order':order, 'name':name, 'type':type, 'i':i, 'j':j, 'w':w, 'this':this, 'arguments':arguments}, var)
            var.registers(['w', 'i', 'name', 'type', 'j', 'code', 'order'])
            var.put('code', Js([]))
            if PyJsStrictEq(var.get('type').get('1'),Js('native')):
                if var.get('order').get('0'):
                    if var.get('i'):
                        var.get('code').callprop('push', Js('var '), var.get('name'), Js('p='), var.get('name'), Js('['), var.get('i'), Js('];'))
                    else:
                        var.get('code').callprop('push', Js('var '), var.get('name'), Js('p='), var.get('name'), Js('[0];'))
            else:
                if (var.get('i') and var.get('j')):
                    if var.get('w'):
                        def PyJs_LONG_315_(var=var):
                            return var.get('code').callprop('push', Js('var '), var.get('name'), Js('t0='), var.get('name'), Js('s'), var.get('order').get('0'), Js(','), var.get('name'), Js('t1='), var.get('name'), Js('s'), var.get('order').get('1'), Js('-'), var.get('name'), Js('s'), var.get('order').get('0'), Js('*'), var.get('w'), Js(','), var.get('name'), Js('p='), var.get('name'), Js('o+'), var.get('i'), Js('*'), var.get('name'), Js('s0+'), var.get('j'), Js('*'), var.get('name'), Js('s1;'))
                        PyJs_LONG_315_()
                    else:
                        var.get('code').callprop('push', Js('var '), var.get('name'), Js('t0='), var.get('name'), Js('s'), var.get('order').get('0'), Js(','), var.get('name'), Js('p='), var.get('name'), Js('o+'), var.get('i'), Js('*'), var.get('name'), Js('s0+'), var.get('j'), Js('*'), var.get('name'), Js('s1;'))
                else:
                    if var.get('i'):
                        var.get('code').callprop('push', Js('var '), var.get('name'), Js('t0='), var.get('name'), Js('s'), var.get('order').get('0'), Js(','), var.get('name'), Js('p='), var.get('name'), Js('o+'), var.get('i'), Js('*'), var.get('name'), Js('s0;'))
                    else:
                        if var.get('j'):
                            var.get('code').callprop('push', Js('var '), var.get('name'), Js('t0='), var.get('name'), Js('s'), var.get('order').get('0'), Js(','), var.get('name'), Js('p='), var.get('name'), Js('o+'), var.get('j'), Js('*'), var.get('name'), Js('s1;'))
                        else:
                            def PyJs_LONG_316_(var=var):
                                return var.get('code').callprop('push', Js('var '), var.get('name'), Js('t0='), var.get('name'), Js('s'), var.get('order').get('0'), Js(','), var.get('name'), Js('t1='), var.get('name'), Js('s'), var.get('order').get('1'), Js('-'), var.get('name'), Js('s'), var.get('order').get('0'), Js('*'), var.get('name'), Js('d'), var.get('order').get('0'), Js(','), var.get('name'), Js('p='), var.get('name'), Js('o;'))
                            PyJs_LONG_316_()
            return var.get('code')
        PyJsHoisted_start_.func_name = 'start'
        var.put('start', PyJsHoisted_start_)
        @Js
        def PyJsHoisted_walk_(order, name, type, d, i, this, arguments, var=var):
            var = Scope({'order':order, 'name':name, 'type':type, 'd':d, 'i':i, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'name', 'd', 'type', 'code', 'order'])
            var.put('code', Js([]))
            if PyJsStrictEq(var.get('type').get('1'),Js('native')):
                if (var.get('order').get('0') and PyJsStrictEq(var.get('d'),Js(1.0))):
                    var.get('code').callprop('push', var.get('name'), Js('p='), var.get('name'), Js('['), var.get('i'), Js('+1]'))
            else:
                var.get('code').callprop('push', var.get('name'), Js('p+='), var.get('name'), Js('t'), var.get('d'), Js(';'))
            return var.get('code')
        PyJsHoisted_walk_.func_name = 'walk'
        var.put('walk', PyJsHoisted_walk_)
        @Js
        def PyJsHoisted_write_(order, name, type, i, j, w, this, arguments, var=var):
            var = Scope({'order':order, 'name':name, 'type':type, 'i':i, 'j':j, 'w':w, 'this':this, 'arguments':arguments}, var)
            var.registers(['w', 'i', 'name', 'type', 'j', 'code', 'order'])
            var.put('code', Js([]))
            if PyJsStrictEq(var.get('type').get('1'),Js('native')):
                if var.get('order').get('0'):
                    var.get('code').callprop('push', var.get('name'), Js('p['), var.get('j'), Js(']='), var.get('w'), Js(';'))
                else:
                    var.get('code').callprop('push', var.get('name'), Js('['), var.get('i'), Js(']['), var.get('j'), Js(']='), var.get('w'), Js(';'))
            else:
                if PyJsStrictEq(var.get('type').get('1'),Js('generic')):
                    var.get('code').callprop('push', var.get('name'), Js('d.set('), var.get('name'), Js('p,'), var.get('w'), Js(');'))
                else:
                    var.get('code').callprop('push', var.get('name'), Js('d['), var.get('name'), Js('p]='), var.get('w'), Js(';'))
            return var.get('code')
        PyJsHoisted_write_.func_name = 'write'
        var.put('write', PyJsHoisted_write_)
        @Js
        def PyJsHoisted_read_(order, name, type, i, j, this, arguments, var=var):
            var = Scope({'order':order, 'name':name, 'type':type, 'i':i, 'j':j, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'name', 'type', 'j', 'code', 'order'])
            var.put('code', Js([]))
            if PyJsStrictEq(var.get('type').get('1'),Js('native')):
                if var.get('order').get('0'):
                    var.get('code').callprop('push', var.get('name'), Js('p['), var.get('j'), Js(']'))
                else:
                    var.get('code').callprop('push', var.get('name'), Js('['), var.get('i'), Js(']['), var.get('j'), Js(']'))
            else:
                if PyJsStrictEq(var.get('type').get('1'),Js('generic')):
                    var.get('code').callprop('push', var.get('name'), Js('d.get('), var.get('name'), Js('p)'))
                else:
                    var.get('code').callprop('push', var.get('name'), Js('d['), var.get('name'), Js('p]'))
            return var.get('code').callprop('join', Js(''))
        PyJsHoisted_read_.func_name = 'read'
        var.put('read', PyJsHoisted_read_)
        @Js
        def PyJsHoisted_generateRowColumnLoop_(oType, aType, bType, useAlpha, useBeta, this, arguments, var=var):
            var = Scope({'oType':oType, 'aType':aType, 'bType':bType, 'useAlpha':useAlpha, 'useBeta':useBeta, 'this':this, 'arguments':arguments}, var)
            var.registers(['symbols', 'useAlpha', 'bType', 'bOrd', 'code', 'useBeta', 'aOrd', 'oOrd', 'oType', 'aType'])
            var.put('code', Js([]))
            var.put('oOrd', (Js([Js(1.0), Js(0.0)]) if PyJsStrictEq(var.get('oType').get('0'),Js('r')) else Js([Js(0.0), Js(1.0)])))
            var.put('aOrd', Js([Js(1.0), Js(0.0)]))
            var.put('bOrd', Js([Js(0.0), Js(1.0)]))
            var.put('symbols', Js([Js('i'), Js('j')]))
            var.get('code').get('push').callprop('apply', var.get('code'), var.get('start')(var.get('oOrd'), Js('o'), var.get('oType')))
            if var.get('oOrd').get('1'):
                var.get('code').callprop('push', Js('for(j=0;j<od1;++j){'))
                var.get('code').callprop('push', Js('for(i=0;i<od0;++i){'))
            else:
                var.get('code').callprop('push', Js('for(i=0;i<od0;++i){'))
                var.get('code').callprop('push', Js('for(j=0;j<od1;++j){'))
            var.get('code').get('push').callprop('apply', var.get('code'), var.get('start')(var.get('aOrd'), Js('a'), var.get('aType'), Js('i')))
            var.get('code').get('push').callprop('apply', var.get('code'), var.get('start')(var.get('bOrd'), Js('b'), var.get('bType'), var.get('undefined'), Js('j')))
            var.get('code').callprop('push', Js('var r=0.0;'), Js('for(k=0;k<ad1;++k){'), Js('r+='), var.get('read')(var.get('aOrd'), Js('a'), var.get('aType'), Js('i'), Js('k')), Js('*'), var.get('read')(var.get('bOrd'), Js('b'), var.get('bType'), Js('k'), Js('j')), Js(';'))
            var.get('code').get('push').callprop('apply', var.get('code'), var.get('walk')(var.get('aOrd'), Js('a'), var.get('aType'), Js(0.0), Js('k')))
            var.get('code').get('push').callprop('apply', var.get('code'), var.get('walk')(var.get('bOrd'), Js('b'), var.get('bType'), Js(0.0), Js('k')))
            var.get('code').callprop('push', Js('}'))
            if var.get('useAlpha'):
                var.get('code').callprop('push', Js('r*=A;'))
            if var.get('useBeta'):
                var.get('code').callprop('push', Js('r+=B*'), var.get('read')(var.get('oOrd'), Js('o'), var.get('oType'), Js('i'), Js('j')), Js(';'))
            var.get('code').get('push').callprop('apply', var.get('code'), var.get('write')(var.get('oOrd'), Js('o'), var.get('oType'), Js('i'), Js('j'), Js('r')))
            var.get('code').get('push').callprop('apply', var.get('code'), var.get('walk')(var.get('oOrd'), Js('o'), var.get('oType'), Js(0.0), var.get('symbols').get('1')))
            var.get('code').callprop('push', Js('}'))
            var.get('code').get('push').callprop('apply', var.get('code'), var.get('walk')(var.get('oOrd'), Js('o'), var.get('oType'), Js(1.0), var.get('symbols').get('0')))
            var.get('code').callprop('push', Js('}'))
            return var.get('code')
        PyJsHoisted_generateRowColumnLoop_.func_name = 'generateRowColumnLoop'
        var.put('generateRowColumnLoop', PyJsHoisted_generateRowColumnLoop_)
        @Js
        def PyJsHoisted_generateBetaPass_(oType, useBeta, this, arguments, var=var):
            var = Scope({'oType':oType, 'useBeta':useBeta, 'this':this, 'arguments':arguments}, var)
            var.registers(['symbols', 'oOrd', 'code', 'useBeta', 'oType'])
            var.put('code', Js([]))
            var.put('oOrd', (Js([Js(1.0), Js(0.0)]) if PyJsStrictEq(var.get('oType').get('0'),Js('r')) else Js([Js(0.0), Js(1.0)])))
            if var.get('useBeta'):
                var.get('code').callprop('push', Js('if(B!==1.0){'))
            var.get('code').get('push').callprop('apply', var.get('code'), var.get('start')(var.get('oOrd'), Js('o'), var.get('oType')))
            if var.get('oOrd').get('0'):
                var.get('code').callprop('push', Js('for(i=0;i<od0;++i){for(j=0;j<od1;++j){'))
                var.put('symbols', Js([Js('i'), Js('j')]))
            else:
                var.get('code').callprop('push', Js('for(j=0;j<od1;++j){for(i=0;i<od0;++i){'))
                var.put('symbols', Js([Js('j'), Js('i')]))
            if var.get('useBeta'):
                var.get('code').get('push').callprop('apply', var.get('code'), var.get('write')(var.get('oOrd'), Js('o'), var.get('oType'), Js('i'), Js('j'), (Js('B*')+var.get('read')(var.get('oOrd'), Js('o'), var.get('oType'), Js('i'), Js('j')))))
            else:
                var.get('code').get('push').callprop('apply', var.get('code'), var.get('write')(var.get('oOrd'), Js('o'), var.get('oType'), Js('i'), Js('j'), Js('0')))
            var.get('code').get('push').callprop('apply', var.get('code'), var.get('walk')(var.get('oOrd'), Js('o'), var.get('oType'), Js(0.0), var.get('symbols').get('1')))
            var.get('code').callprop('push', Js('}'))
            var.get('code').get('push').callprop('apply', var.get('code'), var.get('walk')(var.get('oOrd'), Js('o'), var.get('oType'), Js(1.0), var.get('symbols').get('0')))
            var.get('code').callprop('push', Js('}'))
            if var.get('useBeta'):
                var.get('code').callprop('push', Js('}'))
            return var.get('code')
        PyJsHoisted_generateBetaPass_.func_name = 'generateBetaPass'
        var.put('generateBetaPass', PyJsHoisted_generateBetaPass_)
        @Js
        def PyJsHoisted_generateBlockLoop_(oType, aType, bType, useAlpha, useBeta, this, arguments, var=var):
            var = Scope({'oType':oType, 'aType':aType, 'bType':bType, 'useAlpha':useAlpha, 'useBeta':useBeta, 'this':this, 'arguments':arguments}, var)
            var.registers(['aType', 'i', 'sym', 'bType', 'useAlpha', 'bOrd', 'code', 'useBeta', 'aOrd', 'oOrd', 'oType', 'shapes'])
            var.put('code', Js([]))
            var.put('shapes', Js([Js('od0'), Js('od1'), Js('ad1')]))
            var.put('oOrd', Js([Js(1.0), Js(0.0)]))
            var.put('aOrd', Js([Js(1.0), Js(0.0)]))
            var.put('bOrd', Js([Js(0.0), Js(1.0)]))
            var.get('code').get('push').callprop('apply', var.get('code'), var.get('generateBetaPass')(var.get('oType'), var.get('useBeta')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<Js(3.0)):
                try:
                    def PyJs_LONG_317_(var=var):
                        return var.get('code').callprop('push', Js('for(var i'), var.get('i'), Js('='), var.get('shapes').get(var.get('i')), Js(';i'), var.get('i'), Js('>0;){'), Js('var w'), var.get('i'), Js('='), var.get('BLOCK_SIZE'), Js(';'), Js('if(i'), var.get('i'), Js('<'), var.get('BLOCK_SIZE'), Js('){'), Js('w'), var.get('i'), Js('=i'), var.get('i'), Js(';'), Js('i'), var.get('i'), Js('=0;'), Js('}else{'), Js('i'), var.get('i'), Js('-='), var.get('BLOCK_SIZE'), Js(';'), Js('}'))
                    PyJs_LONG_317_()
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            var.get('code').get('push').callprop('apply', var.get('code'), var.get('start')(var.get('oOrd'), Js('o'), var.get('oType'), Js('i0'), Js('i1'), Js('w1')))
            var.get('code').callprop('push', Js('for(i=0;i<w0;++i){for(j=0;j<w1;++j){var r=0.0;'))
            var.get('code').get('push').callprop('apply', var.get('code'), var.get('start')(var.get('aOrd'), Js('a'), var.get('aType'), Js('(i0+i)'), Js('i2')))
            var.get('code').get('push').callprop('apply', var.get('code'), var.get('start')(var.get('bOrd'), Js('b'), var.get('bType'), Js('i2'), Js('(i1+j)')))
            var.get('code').callprop('push', Js('for(k=0;k<w2;++k){'))
            var.get('code').callprop('push', Js('r+='), var.get('read')(var.get('aOrd'), Js('a'), var.get('aType'), Js('(i0+i)'), Js('(i2+k)')), Js('*'), var.get('read')(var.get('bOrd'), Js('b'), var.get('bType'), Js('(i2+k)'), Js('(i1+j)')), Js(';'))
            var.get('code').get('push').callprop('apply', var.get('code'), var.get('walk')(var.get('aOrd'), Js('a'), var.get('aType'), Js(0.0), Js('(i2+k)')))
            var.get('code').get('push').callprop('apply', var.get('code'), var.get('walk')(var.get('bOrd'), Js('b'), var.get('bType'), Js(0.0), Js('(i2+k)')))
            var.get('code').callprop('push', Js('}'))
            var.put('sym', Js('r'))
            if var.get('useAlpha'):
                var.put('sym', Js('A*r'))
            var.get('code').get('push').callprop('apply', var.get('code'), var.get('write')(var.get('oOrd'), Js('o'), var.get('oType'), Js('(i0+i)'), Js('(i1+j)'), ((var.get('sym')+Js('+'))+var.get('read')(var.get('oOrd'), Js('o'), var.get('oType'), Js('(i0+i)'), Js('(i1+j)')))))
            var.get('code').get('push').callprop('apply', var.get('code'), var.get('walk')(var.get('oOrd'), Js('o'), var.get('oType'), Js(0.0), Js('(i1+j)')))
            var.get('code').callprop('push', Js('}'))
            var.get('code').get('push').callprop('apply', var.get('code'), var.get('walk')(var.get('oOrd'), Js('o'), var.get('oType'), Js(1.0), Js('(i0+i)')))
            var.get('code').callprop('push', Js('}}}}'))
            return var.get('code')
        PyJsHoisted_generateBlockLoop_.func_name = 'generateBlockLoop'
        var.put('generateBlockLoop', PyJsHoisted_generateBlockLoop_)
        @Js
        def PyJsHoisted_generateMatrixProduct_(outType, aType, bType, useAlpha, useBeta, this, arguments, var=var):
            var = Scope({'outType':outType, 'aType':aType, 'bType':bType, 'useAlpha':useAlpha, 'useBeta':useBeta, 'this':this, 'arguments':arguments}, var)
            var.registers(['outType', 'useAlpha', 'bType', 'proc', 'code', 'funcName', 'useBeta', 'aType'])
            var.put('funcName', Js([Js('gemm'), var.get('outType').get('0'), var.get('outType').get('1'), Js('a'), var.get('aType').get('0'), var.get('aType').get('1'), Js('b'), var.get('bType').get('0'), var.get('bType').get('1'), (Js('alpha') if var.get('useAlpha') else Js('')), (Js('beta') if var.get('useBeta') else Js(''))]).callprop('join', Js('')))
            var.put('code', Js([Js('function '), var.get('funcName'), Js('(o,a,b,A,B){'), Js('var '), var.get('unpackShape')(Js('o'), var.get('outType')), var.get('unpackShape')(Js('a'), var.get('aType')), var.get('unpackShape')(Js('b'), var.get('bType')), Js('i,j,k;')]))
            if (PyJsStrictEq(var.get('aType').get('0'),Js('r')) and PyJsStrictEq(var.get('bType').get('0'),Js('c'))):
                var.get('code').get('push').callprop('apply', var.get('code'), var.get('generateRowColumnLoop')(var.get('outType'), var.get('aType'), var.get('bType'), var.get('useAlpha'), var.get('useBeta')))
            else:
                var.get('code').get('push').callprop('apply', var.get('code'), var.get('generateBlockLoop')(var.get('outType'), var.get('aType'), var.get('bType'), var.get('useAlpha'), var.get('useBeta')))
            var.get('code').callprop('push', Js('}return '), var.get('funcName'))
            var.put('proc', var.get('Function').create(var.get('code').callprop('join', Js(''))))
            return var.get('proc')()
        PyJsHoisted_generateMatrixProduct_.func_name = 'generateMatrixProduct'
        var.put('generateMatrixProduct', PyJsHoisted_generateMatrixProduct_)
        Js('use strict')
        var.get('module').put('exports', var.get('generateMatrixProduct'))
        var.put('BLOCK_SIZE', Js(32.0))
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
    PyJs_anonymous_313_._set_name('anonymous')
    @Js
    def PyJs_anonymous_318_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'unary_ops', 'math_unary', 'fixup', 'math_noncomm', 'makeOp', 'binary_ops', 'require', 'EmptyProc', 'pcompile', 'compile', 'assign_ops', 'math_comm'])
        @Js
        def PyJsHoisted_fixup_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'a', 'x'])
            if var.get('x').neg():
                return var.get('EmptyProc')
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('x').get('args').get('length')):
                try:
                    var.put('a', var.get('x').get('args').get(var.get('i')))
                    if PyJsStrictEq(var.get('i'),Js(0.0)):
                        var.get('x').get('args').put(var.get('i'), Js({'name':var.get('a'),'lvalue':Js(True),'rvalue':var.get('x').get('rvalue').neg().neg(),'count':(var.get('x').get('count') or Js(1.0))}))
                    else:
                        var.get('x').get('args').put(var.get('i'), Js({'name':var.get('a'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            if var.get('x').get('thisVars').neg():
                var.get('x').put('thisVars', Js([]))
            if var.get('x').get('localVars').neg():
                var.get('x').put('localVars', Js([]))
            return var.get('x')
        PyJsHoisted_fixup_.func_name = 'fixup'
        var.put('fixup', PyJsHoisted_fixup_)
        @Js
        def PyJsHoisted_pcompile_(user_args, this, arguments, var=var):
            var = Scope({'user_args':user_args, 'this':this, 'arguments':arguments}, var)
            var.registers(['user_args'])
            return var.get('compile')(Js({'args':var.get('user_args').get('args'),'pre':var.get('fixup')(var.get('user_args').get('pre')),'body':var.get('fixup')(var.get('user_args').get('body')),'post':var.get('fixup')(var.get('user_args').get('proc')),'funcName':var.get('user_args').get('funcName')}))
        PyJsHoisted_pcompile_.func_name = 'pcompile'
        var.put('pcompile', PyJsHoisted_pcompile_)
        @Js
        def PyJsHoisted_makeOp_(user_args, this, arguments, var=var):
            var = Scope({'user_args':user_args, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'user_args', 'args', 'wrapper'])
            var.put('args', Js([]))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('user_args').get('args').get('length')):
                try:
                    var.get('args').callprop('push', (Js('a')+var.get('i')))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            var.put('wrapper', var.get('Function').create(Js('P'), Js([Js('return function '), var.get('user_args').get('funcName'), Js('_ndarrayops('), var.get('args').callprop('join', Js(',')), Js(') {P('), var.get('args').callprop('join', Js(',')), Js(');return a0}')]).callprop('join', Js(''))))
            return var.get('wrapper')(var.get('pcompile')(var.get('user_args')))
        PyJsHoisted_makeOp_.func_name = 'makeOp'
        var.put('makeOp', PyJsHoisted_makeOp_)
        Js('use strict')
        var.put('compile', var.get('require')(Js('cwise-compiler')))
        var.put('EmptyProc', Js({'body':Js(''),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}))
        pass
        pass
        pass
        var.put('assign_ops', Js({'add':Js('+'),'sub':Js('-'),'mul':Js('*'),'div':Js('/'),'mod':Js('%'),'band':Js('&'),'bor':Js('|'),'bxor':Js('^'),'lshift':Js('<<'),'rshift':Js('>>'),'rrshift':Js('>>>')}))
        @Js
        def PyJs_anonymous_319_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['op', 'id'])
            for PyJsTemp in var.get('assign_ops'):
                var.put('id', PyJsTemp)
                var.put('op', var.get('assign_ops').get(var.get('id')))
                var.get('exports').put(var.get('id'), var.get('makeOp')(Js({'args':Js([Js('array'), Js('array'), Js('array')]),'body':Js({'args':Js([Js('a'), Js('b'), Js('c')]),'body':((Js('a=b')+var.get('op'))+Js('c'))}),'funcName':var.get('id')})))
                var.get('exports').put((var.get('id')+Js('eq')), var.get('makeOp')(Js({'args':Js([Js('array'), Js('array')]),'body':Js({'args':Js([Js('a'), Js('b')]),'body':((Js('a')+var.get('op'))+Js('=b'))}),'rvalue':Js(True),'funcName':(var.get('id')+Js('eq'))})))
                var.get('exports').put((var.get('id')+Js('s')), var.get('makeOp')(Js({'args':Js([Js('array'), Js('array'), Js('scalar')]),'body':Js({'args':Js([Js('a'), Js('b'), Js('s')]),'body':((Js('a=b')+var.get('op'))+Js('s'))}),'funcName':(var.get('id')+Js('s'))})))
                var.get('exports').put((var.get('id')+Js('seq')), var.get('makeOp')(Js({'args':Js([Js('array'), Js('scalar')]),'body':Js({'args':Js([Js('a'), Js('s')]),'body':((Js('a')+var.get('op'))+Js('=s'))}),'rvalue':Js(True),'funcName':(var.get('id')+Js('seq'))})))
        PyJs_anonymous_319_._set_name('anonymous')
        PyJs_anonymous_319_()
        var.put('unary_ops', Js({'not':Js('!'),'bnot':Js('~'),'neg':Js('-'),'recip':Js('1.0/')}))
        @Js
        def PyJs_anonymous_320_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['op', 'id'])
            for PyJsTemp in var.get('unary_ops'):
                var.put('id', PyJsTemp)
                var.put('op', var.get('unary_ops').get(var.get('id')))
                var.get('exports').put(var.get('id'), var.get('makeOp')(Js({'args':Js([Js('array'), Js('array')]),'body':Js({'args':Js([Js('a'), Js('b')]),'body':((Js('a=')+var.get('op'))+Js('b'))}),'funcName':var.get('id')})))
                var.get('exports').put((var.get('id')+Js('eq')), var.get('makeOp')(Js({'args':Js([Js('array')]),'body':Js({'args':Js([Js('a')]),'body':((Js('a=')+var.get('op'))+Js('a'))}),'rvalue':Js(True),'count':Js(2.0),'funcName':(var.get('id')+Js('eq'))})))
        PyJs_anonymous_320_._set_name('anonymous')
        PyJs_anonymous_320_()
        var.put('binary_ops', Js({'and':Js('&&'),'or':Js('||'),'eq':Js('==='),'neq':Js('!=='),'lt':Js('<'),'gt':Js('>'),'leq':Js('<='),'geq':Js('>=')}))
        @Js
        def PyJs_anonymous_321_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['op', 'id'])
            for PyJsTemp in var.get('binary_ops'):
                var.put('id', PyJsTemp)
                var.put('op', var.get('binary_ops').get(var.get('id')))
                var.get('exports').put(var.get('id'), var.get('makeOp')(Js({'args':Js([Js('array'), Js('array'), Js('array')]),'body':Js({'args':Js([Js('a'), Js('b'), Js('c')]),'body':((Js('a=b')+var.get('op'))+Js('c'))}),'funcName':var.get('id')})))
                var.get('exports').put((var.get('id')+Js('s')), var.get('makeOp')(Js({'args':Js([Js('array'), Js('array'), Js('scalar')]),'body':Js({'args':Js([Js('a'), Js('b'), Js('s')]),'body':((Js('a=b')+var.get('op'))+Js('s'))}),'funcName':(var.get('id')+Js('s'))})))
                var.get('exports').put((var.get('id')+Js('eq')), var.get('makeOp')(Js({'args':Js([Js('array'), Js('array')]),'body':Js({'args':Js([Js('a'), Js('b')]),'body':((Js('a=a')+var.get('op'))+Js('b'))}),'rvalue':Js(True),'count':Js(2.0),'funcName':(var.get('id')+Js('eq'))})))
                var.get('exports').put((var.get('id')+Js('seq')), var.get('makeOp')(Js({'args':Js([Js('array'), Js('scalar')]),'body':Js({'args':Js([Js('a'), Js('s')]),'body':((Js('a=a')+var.get('op'))+Js('s'))}),'rvalue':Js(True),'count':Js(2.0),'funcName':(var.get('id')+Js('seq'))})))
        PyJs_anonymous_321_._set_name('anonymous')
        PyJs_anonymous_321_()
        var.put('math_unary', Js([Js('abs'), Js('acos'), Js('asin'), Js('atan'), Js('ceil'), Js('cos'), Js('exp'), Js('floor'), Js('log'), Js('round'), Js('sin'), Js('sqrt'), Js('tan')]))
        @Js
        def PyJs_anonymous_322_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'f'])
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('math_unary').get('length')):
                try:
                    var.put('f', var.get('math_unary').get(var.get('i')))
                    var.get('exports').put(var.get('f'), var.get('makeOp')(Js({'args':Js([Js('array'), Js('array')]),'pre':Js({'args':Js([]),'body':(Js('this_f=Math.')+var.get('f')),'thisVars':Js([Js('this_f')])}),'body':Js({'args':Js([Js('a'), Js('b')]),'body':Js('a=this_f(b)'),'thisVars':Js([Js('this_f')])}),'funcName':var.get('f')})))
                    var.get('exports').put((var.get('f')+Js('eq')), var.get('makeOp')(Js({'args':Js([Js('array')]),'pre':Js({'args':Js([]),'body':(Js('this_f=Math.')+var.get('f')),'thisVars':Js([Js('this_f')])}),'body':Js({'args':Js([Js('a')]),'body':Js('a=this_f(a)'),'thisVars':Js([Js('this_f')])}),'rvalue':Js(True),'count':Js(2.0),'funcName':(var.get('f')+Js('eq'))})))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
        PyJs_anonymous_322_._set_name('anonymous')
        PyJs_anonymous_322_()
        var.put('math_comm', Js([Js('max'), Js('min'), Js('atan2'), Js('pow')]))
        @Js
        def PyJs_anonymous_323_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'f'])
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('math_comm').get('length')):
                try:
                    var.put('f', var.get('math_comm').get(var.get('i')))
                    var.get('exports').put(var.get('f'), var.get('makeOp')(Js({'args':Js([Js('array'), Js('array'), Js('array')]),'pre':Js({'args':Js([]),'body':(Js('this_f=Math.')+var.get('f')),'thisVars':Js([Js('this_f')])}),'body':Js({'args':Js([Js('a'), Js('b'), Js('c')]),'body':Js('a=this_f(b,c)'),'thisVars':Js([Js('this_f')])}),'funcName':var.get('f')})))
                    var.get('exports').put((var.get('f')+Js('s')), var.get('makeOp')(Js({'args':Js([Js('array'), Js('array'), Js('scalar')]),'pre':Js({'args':Js([]),'body':(Js('this_f=Math.')+var.get('f')),'thisVars':Js([Js('this_f')])}),'body':Js({'args':Js([Js('a'), Js('b'), Js('c')]),'body':Js('a=this_f(b,c)'),'thisVars':Js([Js('this_f')])}),'funcName':(var.get('f')+Js('s'))})))
                    var.get('exports').put((var.get('f')+Js('eq')), var.get('makeOp')(Js({'args':Js([Js('array'), Js('array')]),'pre':Js({'args':Js([]),'body':(Js('this_f=Math.')+var.get('f')),'thisVars':Js([Js('this_f')])}),'body':Js({'args':Js([Js('a'), Js('b')]),'body':Js('a=this_f(a,b)'),'thisVars':Js([Js('this_f')])}),'rvalue':Js(True),'count':Js(2.0),'funcName':(var.get('f')+Js('eq'))})))
                    var.get('exports').put((var.get('f')+Js('seq')), var.get('makeOp')(Js({'args':Js([Js('array'), Js('scalar')]),'pre':Js({'args':Js([]),'body':(Js('this_f=Math.')+var.get('f')),'thisVars':Js([Js('this_f')])}),'body':Js({'args':Js([Js('a'), Js('b')]),'body':Js('a=this_f(a,b)'),'thisVars':Js([Js('this_f')])}),'rvalue':Js(True),'count':Js(2.0),'funcName':(var.get('f')+Js('seq'))})))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
        PyJs_anonymous_323_._set_name('anonymous')
        PyJs_anonymous_323_()
        var.put('math_noncomm', Js([Js('atan2'), Js('pow')]))
        @Js
        def PyJs_anonymous_324_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'f'])
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('math_noncomm').get('length')):
                try:
                    var.put('f', var.get('math_noncomm').get(var.get('i')))
                    var.get('exports').put((var.get('f')+Js('op')), var.get('makeOp')(Js({'args':Js([Js('array'), Js('array'), Js('array')]),'pre':Js({'args':Js([]),'body':(Js('this_f=Math.')+var.get('f')),'thisVars':Js([Js('this_f')])}),'body':Js({'args':Js([Js('a'), Js('b'), Js('c')]),'body':Js('a=this_f(c,b)'),'thisVars':Js([Js('this_f')])}),'funcName':(var.get('f')+Js('op'))})))
                    var.get('exports').put((var.get('f')+Js('ops')), var.get('makeOp')(Js({'args':Js([Js('array'), Js('array'), Js('scalar')]),'pre':Js({'args':Js([]),'body':(Js('this_f=Math.')+var.get('f')),'thisVars':Js([Js('this_f')])}),'body':Js({'args':Js([Js('a'), Js('b'), Js('c')]),'body':Js('a=this_f(c,b)'),'thisVars':Js([Js('this_f')])}),'funcName':(var.get('f')+Js('ops'))})))
                    var.get('exports').put((var.get('f')+Js('opeq')), var.get('makeOp')(Js({'args':Js([Js('array'), Js('array')]),'pre':Js({'args':Js([]),'body':(Js('this_f=Math.')+var.get('f')),'thisVars':Js([Js('this_f')])}),'body':Js({'args':Js([Js('a'), Js('b')]),'body':Js('a=this_f(b,a)'),'thisVars':Js([Js('this_f')])}),'rvalue':Js(True),'count':Js(2.0),'funcName':(var.get('f')+Js('opeq'))})))
                    var.get('exports').put((var.get('f')+Js('opseq')), var.get('makeOp')(Js({'args':Js([Js('array'), Js('scalar')]),'pre':Js({'args':Js([]),'body':(Js('this_f=Math.')+var.get('f')),'thisVars':Js([Js('this_f')])}),'body':Js({'args':Js([Js('a'), Js('b')]),'body':Js('a=this_f(b,a)'),'thisVars':Js([Js('this_f')])}),'rvalue':Js(True),'count':Js(2.0),'funcName':(var.get('f')+Js('opseq'))})))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
        PyJs_anonymous_324_._set_name('anonymous')
        PyJs_anonymous_324_()
        var.get('exports').put('any', var.get('compile')(Js({'args':Js([Js('array')]),'pre':var.get('EmptyProc'),'body':Js({'args':Js([Js({'name':Js('a'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)})]),'body':Js('if(a){return true}'),'localVars':Js([]),'thisVars':Js([])}),'post':Js({'args':Js([]),'localVars':Js([]),'thisVars':Js([]),'body':Js('return false')}),'funcName':Js('any')})))
        var.get('exports').put('all', var.get('compile')(Js({'args':Js([Js('array')]),'pre':var.get('EmptyProc'),'body':Js({'args':Js([Js({'name':Js('x'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)})]),'body':Js('if(!x){return false}'),'localVars':Js([]),'thisVars':Js([])}),'post':Js({'args':Js([]),'localVars':Js([]),'thisVars':Js([]),'body':Js('return true')}),'funcName':Js('all')})))
        def PyJs_LONG_325_(var=var):
            return var.get('compile')(Js({'args':Js([Js('array')]),'pre':Js({'args':Js([]),'localVars':Js([]),'thisVars':Js([Js('this_s')]),'body':Js('this_s=0')}),'body':Js({'args':Js([Js({'name':Js('a'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)})]),'body':Js('this_s+=a'),'localVars':Js([]),'thisVars':Js([Js('this_s')])}),'post':Js({'args':Js([]),'localVars':Js([]),'thisVars':Js([Js('this_s')]),'body':Js('return this_s')}),'funcName':Js('sum')}))
        var.get('exports').put('sum', PyJs_LONG_325_())
        def PyJs_LONG_326_(var=var):
            return var.get('compile')(Js({'args':Js([Js('array')]),'pre':Js({'args':Js([]),'localVars':Js([]),'thisVars':Js([Js('this_s')]),'body':Js('this_s=1')}),'body':Js({'args':Js([Js({'name':Js('a'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)})]),'body':Js('this_s*=a'),'localVars':Js([]),'thisVars':Js([Js('this_s')])}),'post':Js({'args':Js([]),'localVars':Js([]),'thisVars':Js([Js('this_s')]),'body':Js('return this_s')}),'funcName':Js('prod')}))
        var.get('exports').put('prod', PyJs_LONG_326_())
        def PyJs_LONG_327_(var=var):
            return var.get('compile')(Js({'args':Js([Js('array')]),'pre':Js({'args':Js([]),'localVars':Js([]),'thisVars':Js([Js('this_s')]),'body':Js('this_s=0')}),'body':Js({'args':Js([Js({'name':Js('a'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)})]),'body':Js('this_s+=a*a'),'localVars':Js([]),'thisVars':Js([Js('this_s')])}),'post':Js({'args':Js([]),'localVars':Js([]),'thisVars':Js([Js('this_s')]),'body':Js('return this_s')}),'funcName':Js('norm2squared')}))
        var.get('exports').put('norm2squared', PyJs_LONG_327_())
        def PyJs_LONG_328_(var=var):
            return var.get('compile')(Js({'args':Js([Js('array')]),'pre':Js({'args':Js([]),'localVars':Js([]),'thisVars':Js([Js('this_s')]),'body':Js('this_s=0')}),'body':Js({'args':Js([Js({'name':Js('a'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)})]),'body':Js('this_s+=a*a'),'localVars':Js([]),'thisVars':Js([Js('this_s')])}),'post':Js({'args':Js([]),'localVars':Js([]),'thisVars':Js([Js('this_s')]),'body':Js('return Math.sqrt(this_s)')}),'funcName':Js('norm2')}))
        var.get('exports').put('norm2', PyJs_LONG_328_())
        def PyJs_LONG_329_(var=var):
            return var.get('compile')(Js({'args':Js([Js('array')]),'pre':Js({'args':Js([]),'localVars':Js([]),'thisVars':Js([Js('this_s')]),'body':Js('this_s=0')}),'body':Js({'args':Js([Js({'name':Js('a'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(4.0)})]),'body':Js('if(-a>this_s){this_s=-a}else if(a>this_s){this_s=a}'),'localVars':Js([]),'thisVars':Js([Js('this_s')])}),'post':Js({'args':Js([]),'localVars':Js([]),'thisVars':Js([Js('this_s')]),'body':Js('return this_s')}),'funcName':Js('norminf')}))
        var.get('exports').put('norminf', PyJs_LONG_329_())
        def PyJs_LONG_330_(var=var):
            return var.get('compile')(Js({'args':Js([Js('array')]),'pre':Js({'args':Js([]),'localVars':Js([]),'thisVars':Js([Js('this_s')]),'body':Js('this_s=0')}),'body':Js({'args':Js([Js({'name':Js('a'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(3.0)})]),'body':Js('this_s+=a<0?-a:a'),'localVars':Js([]),'thisVars':Js([Js('this_s')])}),'post':Js({'args':Js([]),'localVars':Js([]),'thisVars':Js([Js('this_s')]),'body':Js('return this_s')}),'funcName':Js('norm1')}))
        var.get('exports').put('norm1', PyJs_LONG_330_())
        def PyJs_LONG_331_(var=var):
            return var.get('compile')(Js({'args':Js([Js('array')]),'pre':Js({'body':Js('this_h=-Infinity'),'args':Js([]),'thisVars':Js([Js('this_h')]),'localVars':Js([])}),'body':Js({'body':Js('if(_inline_1_arg0_>this_h)this_h=_inline_1_arg0_'),'args':Js([Js({'name':Js('_inline_1_arg0_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)})]),'thisVars':Js([Js('this_h')]),'localVars':Js([])}),'post':Js({'body':Js('return this_h'),'args':Js([]),'thisVars':Js([Js('this_h')]),'localVars':Js([])})}))
        var.get('exports').put('sup', PyJs_LONG_331_())
        def PyJs_LONG_332_(var=var):
            return var.get('compile')(Js({'args':Js([Js('array')]),'pre':Js({'body':Js('this_h=Infinity'),'args':Js([]),'thisVars':Js([Js('this_h')]),'localVars':Js([])}),'body':Js({'body':Js('if(_inline_1_arg0_<this_h)this_h=_inline_1_arg0_'),'args':Js([Js({'name':Js('_inline_1_arg0_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)})]),'thisVars':Js([Js('this_h')]),'localVars':Js([])}),'post':Js({'body':Js('return this_h'),'args':Js([]),'thisVars':Js([Js('this_h')]),'localVars':Js([])})}))
        var.get('exports').put('inf', PyJs_LONG_332_())
        def PyJs_LONG_333_(var=var):
            return var.get('compile')(Js({'args':Js([Js('index'), Js('array'), Js('shape')]),'pre':Js({'body':Js('{this_v=Infinity;this_i=_inline_0_arg2_.slice(0)}'),'args':Js([Js({'name':Js('_inline_0_arg0_'),'lvalue':Js(False),'rvalue':Js(False),'count':Js(0.0)}), Js({'name':Js('_inline_0_arg1_'),'lvalue':Js(False),'rvalue':Js(False),'count':Js(0.0)}), Js({'name':Js('_inline_0_arg2_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)})]),'thisVars':Js([Js('this_i'), Js('this_v')]),'localVars':Js([])}),'body':Js({'body':Js('{if(_inline_1_arg1_<this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}'),'args':Js([Js({'name':Js('_inline_1_arg0_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)}), Js({'name':Js('_inline_1_arg1_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)})]),'thisVars':Js([Js('this_i'), Js('this_v')]),'localVars':Js([Js('_inline_1_k')])}),'post':Js({'body':Js('{return this_i}'),'args':Js([]),'thisVars':Js([Js('this_i')]),'localVars':Js([])})}))
        var.get('exports').put('argmin', PyJs_LONG_333_())
        def PyJs_LONG_334_(var=var):
            return var.get('compile')(Js({'args':Js([Js('index'), Js('array'), Js('shape')]),'pre':Js({'body':Js('{this_v=-Infinity;this_i=_inline_0_arg2_.slice(0)}'),'args':Js([Js({'name':Js('_inline_0_arg0_'),'lvalue':Js(False),'rvalue':Js(False),'count':Js(0.0)}), Js({'name':Js('_inline_0_arg1_'),'lvalue':Js(False),'rvalue':Js(False),'count':Js(0.0)}), Js({'name':Js('_inline_0_arg2_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)})]),'thisVars':Js([Js('this_i'), Js('this_v')]),'localVars':Js([])}),'body':Js({'body':Js('{if(_inline_1_arg1_>this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}'),'args':Js([Js({'name':Js('_inline_1_arg0_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)}), Js({'name':Js('_inline_1_arg1_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)})]),'thisVars':Js([Js('this_i'), Js('this_v')]),'localVars':Js([Js('_inline_1_k')])}),'post':Js({'body':Js('{return this_i}'),'args':Js([]),'thisVars':Js([Js('this_i')]),'localVars':Js([])})}))
        var.get('exports').put('argmax', PyJs_LONG_334_())
        var.get('exports').put('random', var.get('makeOp')(Js({'args':Js([Js('array')]),'pre':Js({'args':Js([]),'body':Js('this_f=Math.random'),'thisVars':Js([Js('this_f')])}),'body':Js({'args':Js([Js('a')]),'body':Js('a=this_f()'),'thisVars':Js([Js('this_f')])}),'funcName':Js('random')})))
        var.get('exports').put('assign', var.get('makeOp')(Js({'args':Js([Js('array'), Js('array')]),'body':Js({'args':Js([Js('a'), Js('b')]),'body':Js('a=b')}),'funcName':Js('assign')})))
        var.get('exports').put('assigns', var.get('makeOp')(Js({'args':Js([Js('array'), Js('scalar')]),'body':Js({'args':Js([Js('a'), Js('b')]),'body':Js('a=b')}),'funcName':Js('assigns')})))
        def PyJs_LONG_335_(var=var):
            return var.get('compile')(Js({'args':Js([Js('array'), Js('array')]),'pre':var.get('EmptyProc'),'body':Js({'args':Js([Js({'name':Js('x'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('y'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)})]),'body':Js('if(x!==y){return false}'),'localVars':Js([]),'thisVars':Js([])}),'post':Js({'args':Js([]),'localVars':Js([]),'thisVars':Js([]),'body':Js('return true')}),'funcName':Js('equals')}))
        var.get('exports').put('equals', PyJs_LONG_335_())
    PyJs_anonymous_318_._set_name('anonymous')
    @Js
    def PyJs_anonymous_336_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['iota', 'isBuffer', 'CACHED_CONSTRUCTORS', 'module', 'arrayDType', 'exports', 'compare1st', 'require', 'compileConstructor', 'wrappedNDArrayCtor', 'order', 'hasTypedArrays'])
        @Js
        def PyJsHoisted_compare1st_(a, b, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'b'])
            return (var.get('a').get('0')-var.get('b').get('0'))
        PyJsHoisted_compare1st_.func_name = 'compare1st'
        var.put('compare1st', PyJsHoisted_compare1st_)
        @Js
        def PyJsHoisted_order_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['stride', 'result', 'terms', 'i'])
            var.put('stride', var.get(u"this").get('stride'))
            var.put('terms', var.get('Array').create(var.get('stride').get('length')))
            pass
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('terms').get('length')):
                try:
                    var.get('terms').put(var.get('i'), Js([var.get('Math').callprop('abs', var.get('stride').get(var.get('i'))), var.get('i')]))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            var.get('terms').callprop('sort', var.get('compare1st'))
            var.put('result', var.get('Array').create(var.get('terms').get('length')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('result').get('length')):
                try:
                    var.get('result').put(var.get('i'), var.get('terms').get(var.get('i')).get('1'))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('result')
        PyJsHoisted_order_.func_name = 'order'
        var.put('order', PyJsHoisted_order_)
        @Js
        def PyJsHoisted_compileConstructor_(dtype, dimension, this, arguments, var=var):
            var = Scope({'dtype':dtype, 'dimension':dimension, 'this':this, 'arguments':arguments}, var)
            var.registers(['c_vars', 'index_str', 'i', 'args', 'procedure', 'a_vars', 'tShape', 'className', 'tStride', 'indices', 'dtype', 'code', 'useGetters', 'dimension', 'shapeArg', 'strideArg'])
            var.put('className', Js([Js('View'), var.get('dimension'), Js('d'), var.get('dtype')]).callprop('join', Js('')))
            if (var.get('dimension')<Js(0.0)):
                var.put('className', (Js('View_Nil')+var.get('dtype')))
            var.put('useGetters', PyJsStrictEq(var.get('dtype'),Js('generic')))
            if PyJsStrictEq(var.get('dimension'),(-Js(1.0))):
                def PyJs_LONG_337_(var=var):
                    return ((((((((Js('function ')+var.get('className'))+Js('(a){this.data=a;};var proto='))+var.get('className'))+Js(".prototype;proto.dtype='"))+var.get('dtype'))+Js("';proto.index=function(){return -1};proto.size=0;proto.dimension=-1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function(){return new "))+var.get('className'))+Js('(this.data);};proto.get=proto.set=function(){};proto.pick=function(){return null};return function construct_'))
                var.put('code', ((((PyJs_LONG_337_()+var.get('className'))+Js('(a){return new '))+var.get('className'))+Js('(a);}')))
                var.put('procedure', var.get('Function').create(var.get('code')))
                return var.get('procedure')()
            else:
                if PyJsStrictEq(var.get('dimension'),Js(0.0)):
                    def PyJs_LONG_339_(var=var):
                        def PyJs_LONG_338_(var=var):
                            return ((((((((Js('function ')+var.get('className'))+Js('(a,d) {this.data = a;this.offset = d};var proto='))+var.get('className'))+Js(".prototype;proto.dtype='"))+var.get('dtype'))+Js("';proto.index=function(){return this.offset};proto.dimension=0;proto.size=1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function "))+var.get('className'))+Js('_copy() {return new '))
                        return ((((((((((PyJs_LONG_338_()+var.get('className'))+Js('(this.data,this.offset)};proto.pick=function '))+var.get('className'))+Js('_pick(){return TrivialArray(this.data);};proto.valueOf=proto.get=function '))+var.get('className'))+Js('_get(){return '))+(Js('this.data.get(this.offset)') if var.get('useGetters') else Js('this.data[this.offset]')))+Js('};proto.set=function '))+var.get('className'))+Js('_set(v){return '))
                    var.put('code', ((((((PyJs_LONG_339_()+(Js('this.data.set(this.offset,v)') if var.get('useGetters') else Js('this.data[this.offset]=v')))+Js('};return function construct_'))+var.get('className'))+Js('(a,b,c,d){return new '))+var.get('className'))+Js('(a,d)}')))
                    var.put('procedure', var.get('Function').create(Js('TrivialArray'), var.get('code')))
                    return var.get('procedure')(var.get('CACHED_CONSTRUCTORS').get(var.get('dtype')).get('0'))
            var.put('code', Js([Js("'use strict'")]))
            var.put('indices', var.get('iota')(var.get('dimension')))
            @Js
            def PyJs_anonymous_340_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return (Js('i')+var.get('i'))
            PyJs_anonymous_340_._set_name('anonymous')
            var.put('args', var.get('indices').callprop('map', PyJs_anonymous_340_))
            @Js
            def PyJs_anonymous_341_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return (((Js('this.stride[')+var.get('i'))+Js(']*i'))+var.get('i'))
            PyJs_anonymous_341_._set_name('anonymous')
            var.put('index_str', (Js('this.offset+')+var.get('indices').callprop('map', PyJs_anonymous_341_).callprop('join', Js('+'))))
            @Js
            def PyJs_anonymous_342_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return (Js('b')+var.get('i'))
            PyJs_anonymous_342_._set_name('anonymous')
            var.put('shapeArg', var.get('indices').callprop('map', PyJs_anonymous_342_).callprop('join', Js(',')))
            @Js
            def PyJs_anonymous_343_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return (Js('c')+var.get('i'))
            PyJs_anonymous_343_._set_name('anonymous')
            var.put('strideArg', var.get('indices').callprop('map', PyJs_anonymous_343_).callprop('join', Js(',')))
            def PyJs_LONG_344_(var=var):
                return var.get('code').callprop('push', ((((((Js('function ')+var.get('className'))+Js('(a,'))+var.get('shapeArg'))+Js(','))+var.get('strideArg'))+Js(',d){this.data=a')), ((Js('this.shape=[')+var.get('shapeArg'))+Js(']')), ((Js('this.stride=[')+var.get('strideArg'))+Js(']')), Js('this.offset=d|0}'), ((Js('var proto=')+var.get('className'))+Js('.prototype')), ((Js("proto.dtype='")+var.get('dtype'))+Js("'")), (Js('proto.dimension=')+var.get('dimension')))
            PyJs_LONG_344_()
            @Js
            def PyJs_anonymous_345_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return ((Js('this.shape[')+var.get('i'))+Js(']'))
            PyJs_anonymous_345_._set_name('anonymous')
            var.get('code').callprop('push', (((Js("Object.defineProperty(proto,'size',{get:function ")+var.get('className'))+Js('_size(){return '))+var.get('indices').callprop('map', PyJs_anonymous_345_).callprop('join', Js('*'))), Js('}})'))
            if PyJsStrictEq(var.get('dimension'),Js(1.0)):
                var.get('code').callprop('push', Js('proto.order=[0]'))
            else:
                var.get('code').callprop('push', Js("Object.defineProperty(proto,'order',{get:"))
                if (var.get('dimension')<Js(4.0)):
                    var.get('code').callprop('push', ((Js('function ')+var.get('className'))+Js('_order(){')))
                    if PyJsStrictEq(var.get('dimension'),Js(2.0)):
                        var.get('code').callprop('push', Js('return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})'))
                    else:
                        if PyJsStrictEq(var.get('dimension'),Js(3.0)):
                            var.get('code').callprop('push', Js('var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);if(s0>s1){if(s1>s2){return [2,1,0];}else if(s0>s2){return [1,2,0];}else{return [1,0,2];}}else if(s0>s2){return [2,0,1];}else if(s2>s1){return [0,1,2];}else{return [0,2,1];}}})'))
                else:
                    var.get('code').callprop('push', Js('ORDER})'))
            var.get('code').callprop('push', ((((Js('proto.set=function ')+var.get('className'))+Js('_set('))+var.get('args').callprop('join', Js(',')))+Js(',v){')))
            if var.get('useGetters'):
                var.get('code').callprop('push', ((Js('return this.data.set(')+var.get('index_str'))+Js(',v)}')))
            else:
                var.get('code').callprop('push', ((Js('return this.data[')+var.get('index_str'))+Js(']=v}')))
            var.get('code').callprop('push', ((((Js('proto.get=function ')+var.get('className'))+Js('_get('))+var.get('args').callprop('join', Js(',')))+Js('){')))
            if var.get('useGetters'):
                var.get('code').callprop('push', ((Js('return this.data.get(')+var.get('index_str'))+Js(')}')))
            else:
                var.get('code').callprop('push', ((Js('return this.data[')+var.get('index_str'))+Js(']}')))
            var.get('code').callprop('push', ((Js('proto.index=function ')+var.get('className'))+Js('_index(')), var.get('args').callprop('join'), ((Js('){return ')+var.get('index_str'))+Js('}')))
            def PyJs_LONG_348_(var=var):
                @Js
                def PyJs_anonymous_346_(i, this, arguments, var=var):
                    var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i'])
                    return Js([Js('(typeof i'), var.get('i'), Js("!=='number'||i"), var.get('i'), Js('<0)?this.shape['), var.get('i'), Js(']:i'), var.get('i'), Js('|0')]).callprop('join', Js(''))
                PyJs_anonymous_346_._set_name('anonymous')
                @Js
                def PyJs_anonymous_347_(i, this, arguments, var=var):
                    var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i'])
                    return ((Js('this.stride[')+var.get('i'))+Js(']'))
                PyJs_anonymous_347_._set_name('anonymous')
                return var.get('code').callprop('push', ((((((((((Js('proto.hi=function ')+var.get('className'))+Js('_hi('))+var.get('args').callprop('join', Js(',')))+Js('){return new '))+var.get('className'))+Js('(this.data,'))+var.get('indices').callprop('map', PyJs_anonymous_346_).callprop('join', Js(',')))+Js(','))+var.get('indices').callprop('map', PyJs_anonymous_347_).callprop('join', Js(',')))+Js(',this.offset)}')))
            PyJs_LONG_348_()
            @Js
            def PyJs_anonymous_349_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return ((((Js('a')+var.get('i'))+Js('=this.shape['))+var.get('i'))+Js(']'))
            PyJs_anonymous_349_._set_name('anonymous')
            var.put('a_vars', var.get('indices').callprop('map', PyJs_anonymous_349_))
            @Js
            def PyJs_anonymous_350_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return ((((Js('c')+var.get('i'))+Js('=this.stride['))+var.get('i'))+Js(']'))
            PyJs_anonymous_350_._set_name('anonymous')
            var.put('c_vars', var.get('indices').callprop('map', PyJs_anonymous_350_))
            var.get('code').callprop('push', (((((((Js('proto.lo=function ')+var.get('className'))+Js('_lo('))+var.get('args').callprop('join', Js(',')))+Js('){var b=this.offset,d=0,'))+var.get('a_vars').callprop('join', Js(',')))+Js(','))+var.get('c_vars').callprop('join', Js(','))))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('dimension')):
                try:
                    var.get('code').callprop('push', ((((((((((Js('if(typeof i')+var.get('i'))+Js("==='number'&&i"))+var.get('i'))+Js('>=0){d=i'))+var.get('i'))+Js('|0;b+=c'))+var.get('i'))+Js('*d;a'))+var.get('i'))+Js('-=d}')))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            @Js
            def PyJs_anonymous_351_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return (Js('a')+var.get('i'))
            PyJs_anonymous_351_._set_name('anonymous')
            @Js
            def PyJs_anonymous_352_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return (Js('c')+var.get('i'))
            PyJs_anonymous_352_._set_name('anonymous')
            var.get('code').callprop('push', ((((((Js('return new ')+var.get('className'))+Js('(this.data,'))+var.get('indices').callprop('map', PyJs_anonymous_351_).callprop('join', Js(',')))+Js(','))+var.get('indices').callprop('map', PyJs_anonymous_352_).callprop('join', Js(',')))+Js(',b)}')))
            @Js
            def PyJs_anonymous_353_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return ((((Js('a')+var.get('i'))+Js('=this.shape['))+var.get('i'))+Js(']'))
            PyJs_anonymous_353_._set_name('anonymous')
            @Js
            def PyJs_anonymous_354_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return ((((Js('b')+var.get('i'))+Js('=this.stride['))+var.get('i'))+Js(']'))
            PyJs_anonymous_354_._set_name('anonymous')
            var.get('code').callprop('push', ((((((((Js('proto.step=function ')+var.get('className'))+Js('_step('))+var.get('args').callprop('join', Js(',')))+Js('){var '))+var.get('indices').callprop('map', PyJs_anonymous_353_).callprop('join', Js(',')))+Js(','))+var.get('indices').callprop('map', PyJs_anonymous_354_).callprop('join', Js(',')))+Js(',c=this.offset,d=0,ceil=Math.ceil')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('dimension')):
                try:
                    var.get('code').callprop('push', ((((((((((((((((((Js('if(typeof i')+var.get('i'))+Js("==='number'){d=i"))+var.get('i'))+Js('|0;if(d<0){c+=b'))+var.get('i'))+Js('*(a'))+var.get('i'))+Js('-1);a'))+var.get('i'))+Js('=ceil(-a'))+var.get('i'))+Js('/d)}else{a'))+var.get('i'))+Js('=ceil(a'))+var.get('i'))+Js('/d)}b'))+var.get('i'))+Js('*=d}')))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            @Js
            def PyJs_anonymous_355_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return (Js('a')+var.get('i'))
            PyJs_anonymous_355_._set_name('anonymous')
            @Js
            def PyJs_anonymous_356_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return (Js('b')+var.get('i'))
            PyJs_anonymous_356_._set_name('anonymous')
            var.get('code').callprop('push', ((((((Js('return new ')+var.get('className'))+Js('(this.data,'))+var.get('indices').callprop('map', PyJs_anonymous_355_).callprop('join', Js(',')))+Js(','))+var.get('indices').callprop('map', PyJs_anonymous_356_).callprop('join', Js(',')))+Js(',c)}')))
            var.put('tShape', var.get('Array').create(var.get('dimension')))
            var.put('tStride', var.get('Array').create(var.get('dimension')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('dimension')):
                try:
                    var.get('tShape').put(var.get('i'), ((Js('a[i')+var.get('i'))+Js(']')))
                    var.get('tStride').put(var.get('i'), ((Js('b[i')+var.get('i'))+Js(']')))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            def PyJs_LONG_358_(var=var):
                @Js
                def PyJs_anonymous_357_(n, idx, this, arguments, var=var):
                    var = Scope({'n':n, 'idx':idx, 'this':this, 'arguments':arguments}, var)
                    var.registers(['n', 'idx'])
                    return (((((((var.get('n')+Js('=('))+var.get('n'))+Js('===undefined?'))+var.get('idx'))+Js(':'))+var.get('n'))+Js('|0)'))
                PyJs_anonymous_357_._set_name('anonymous')
                return var.get('code').callprop('push', (((((Js('proto.transpose=function ')+var.get('className'))+Js('_transpose('))+var.get('args'))+Js('){'))+var.get('args').callprop('map', PyJs_anonymous_357_).callprop('join', Js(';'))), ((((((Js('var a=this.shape,b=this.stride;return new ')+var.get('className'))+Js('(this.data,'))+var.get('tShape').callprop('join', Js(',')))+Js(','))+var.get('tStride').callprop('join', Js(',')))+Js(',this.offset)}')))
            PyJs_LONG_358_()
            var.get('code').callprop('push', ((((Js('proto.pick=function ')+var.get('className'))+Js('_pick('))+var.get('args'))+Js('){var a=[],b=[],c=this.offset')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('dimension')):
                try:
                    var.get('code').callprop('push', ((((((((((((Js('if(typeof i')+var.get('i'))+Js("==='number'&&i"))+var.get('i'))+Js('>=0){c=(c+this.stride['))+var.get('i'))+Js(']*i'))+var.get('i'))+Js(')|0}else{a.push(this.shape['))+var.get('i'))+Js(']);b.push(this.stride['))+var.get('i'))+Js('])}')))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            var.get('code').callprop('push', Js('var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}'))
            @Js
            def PyJs_anonymous_359_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return ((Js('shape[')+var.get('i'))+Js(']'))
            PyJs_anonymous_359_._set_name('anonymous')
            @Js
            def PyJs_anonymous_360_(i, this, arguments, var=var):
                var = Scope({'i':i, 'this':this, 'arguments':arguments}, var)
                var.registers(['i'])
                return ((Js('stride[')+var.get('i'))+Js(']'))
            PyJs_anonymous_360_._set_name('anonymous')
            var.get('code').callprop('push', ((((((((Js('return function construct_')+var.get('className'))+Js('(data,shape,stride,offset){return new '))+var.get('className'))+Js('(data,'))+var.get('indices').callprop('map', PyJs_anonymous_359_).callprop('join', Js(',')))+Js(','))+var.get('indices').callprop('map', PyJs_anonymous_360_).callprop('join', Js(',')))+Js(',offset)}')))
            var.put('procedure', var.get('Function').create(Js('CTOR_LIST'), Js('ORDER'), var.get('code').callprop('join', Js('\n'))))
            return var.get('procedure')(var.get('CACHED_CONSTRUCTORS').get(var.get('dtype')), var.get('order'))
        PyJsHoisted_compileConstructor_.func_name = 'compileConstructor'
        var.put('compileConstructor', PyJsHoisted_compileConstructor_)
        @Js
        def PyJsHoisted_arrayDType_(data, this, arguments, var=var):
            var = Scope({'data':data, 'this':this, 'arguments':arguments}, var)
            var.registers(['data'])
            if var.get('isBuffer')(var.get('data')):
                return Js('buffer')
            if var.get('hasTypedArrays'):
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('Object').get('prototype').get('toString').callprop('call', var.get('data')))
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('[object Float64Array]')):
                        SWITCHED = True
                        return Js('float64')
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('[object Float32Array]')):
                        SWITCHED = True
                        return Js('float32')
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('[object Int8Array]')):
                        SWITCHED = True
                        return Js('int8')
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('[object Int16Array]')):
                        SWITCHED = True
                        return Js('int16')
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('[object Int32Array]')):
                        SWITCHED = True
                        return Js('int32')
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('[object Uint8Array]')):
                        SWITCHED = True
                        return Js('uint8')
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('[object Uint16Array]')):
                        SWITCHED = True
                        return Js('uint16')
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('[object Uint32Array]')):
                        SWITCHED = True
                        return Js('uint32')
                    if SWITCHED or PyJsStrictEq(CONDITION, Js('[object Uint8ClampedArray]')):
                        SWITCHED = True
                        return Js('uint8_clamped')
                    SWITCHED = True
                    break
            if var.get('Array').callprop('isArray', var.get('data')):
                return Js('array')
            return Js('generic')
        PyJsHoisted_arrayDType_.func_name = 'arrayDType'
        var.put('arrayDType', PyJsHoisted_arrayDType_)
        @Js
        def PyJsHoisted_wrappedNDArrayCtor_(data, shape, stride, offset, this, arguments, var=var):
            var = Scope({'data':data, 'shape':shape, 'stride':stride, 'offset':offset, 'this':this, 'arguments':arguments}, var)
            var.registers(['ctor', 'i', 'ctor_list', 'shape', 'offset', 'd', 'dtype', 'data', 'stride', 'sz'])
            if PyJsStrictEq(var.get('data'),var.get('undefined')):
                var.put('ctor', var.get('CACHED_CONSTRUCTORS').get('array').get('0'))
                return var.get('ctor')(Js([]))
            else:
                if PyJsStrictEq(var.get('data',throw=False).typeof(),Js('number')):
                    var.put('data', Js([var.get('data')]))
            if PyJsStrictEq(var.get('shape'),var.get('undefined')):
                var.put('shape', Js([var.get('data').get('length')]))
            var.put('d', var.get('shape').get('length'))
            if PyJsStrictEq(var.get('stride'),var.get('undefined')):
                var.put('stride', var.get('Array').create(var.get('d')))
                #for JS loop
                var.put('i', (var.get('d')-Js(1.0)))
                var.put('sz', Js(1.0))
                while (var.get('i')>=Js(0.0)):
                    try:
                        var.get('stride').put(var.get('i'), var.get('sz'))
                        var.put('sz', var.get('shape').get(var.get('i')), '*')
                    finally:
                            var.put('i',Js(var.get('i').to_number())-Js(1))
            if PyJsStrictEq(var.get('offset'),var.get('undefined')):
                var.put('offset', Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('d')):
                    try:
                        if (var.get('stride').get(var.get('i'))<Js(0.0)):
                            var.put('offset', ((var.get('shape').get(var.get('i'))-Js(1.0))*var.get('stride').get(var.get('i'))), '-')
                    finally:
                            var.put('i',Js(var.get('i').to_number())+Js(1))
            var.put('dtype', var.get('arrayDType')(var.get('data')))
            var.put('ctor_list', var.get('CACHED_CONSTRUCTORS').get(var.get('dtype')))
            while (var.get('ctor_list').get('length')<=(var.get('d')+Js(1.0))):
                var.get('ctor_list').callprop('push', var.get('compileConstructor')(var.get('dtype'), (var.get('ctor_list').get('length')-Js(1.0))))
            var.put('ctor', var.get('ctor_list').get((var.get('d')+Js(1.0))))
            return var.get('ctor')(var.get('data'), var.get('shape'), var.get('stride'), var.get('offset'))
        PyJsHoisted_wrappedNDArrayCtor_.func_name = 'wrappedNDArrayCtor'
        var.put('wrappedNDArrayCtor', PyJsHoisted_wrappedNDArrayCtor_)
        var.put('iota', var.get('require')(Js('iota-array')))
        var.put('isBuffer', var.get('require')(Js('is-buffer')))
        var.put('hasTypedArrays', PyJsStrictNeq(var.get('Float64Array',throw=False).typeof(),Js('undefined')))
        pass
        pass
        pass
        pass
        var.put('CACHED_CONSTRUCTORS', Js({'float32':Js([]),'float64':Js([]),'int8':Js([]),'int16':Js([]),'int32':Js([]),'uint8':Js([]),'uint16':Js([]),'uint32':Js([]),'array':Js([]),'uint8_clamped':Js([]),'buffer':Js([]),'generic':Js([])}))
        @Js
        def PyJs_anonymous_361_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['id'])
            for PyJsTemp in var.get('CACHED_CONSTRUCTORS'):
                var.put('id', PyJsTemp)
                var.get('CACHED_CONSTRUCTORS').get(var.get('id')).callprop('push', var.get('compileConstructor')(var.get('id'), (-Js(1.0))))
        PyJs_anonymous_361_._set_name('anonymous')
        PyJs_anonymous_361_
        pass
        var.get('module').put('exports', var.get('wrappedNDArrayCtor'))
    PyJs_anonymous_336_._set_name('anonymous')
    @Js
    def PyJs_anonymous_362_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        var.get('module').put('exports', Js({'printThreshold':Js(7.0),'nFloatingValues':Js(5.0)}))
    PyJs_anonymous_362_._set_name('anonymous')
    @Js
    def PyJs_anonymous_363_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        var.get('module').put('exports', Js({'int8':var.get('Int8Array'),'int16':var.get('Int16Array'),'int32':var.get('Int32Array'),'uint8':var.get('Uint8Array'),'uint16':var.get('Uint16Array'),'uint32':var.get('Uint32Array'),'float32':var.get('Float32Array'),'float64':var.get('Float64Array'),'array':var.get('Array')}))
    PyJs_anonymous_363_._set_name('anonymous')
    @Js
    def PyJs_anonymous_364_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        @Js
        def PyJs_ValueError_365_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'ValueError':PyJs_ValueError_365_}, var)
            var.registers(['err'])
            var.put('err', var.get('Error').callprop('apply', var.get(u"this"), var.get('arguments')))
            var.get('err').put('name', var.get(u"this").get('constructor').get('name'))
            return var.get('err')
        PyJs_ValueError_365_._set_name('ValueError')
        @Js
        def PyJs_ConfigError_366_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'ConfigError':PyJs_ConfigError_366_}, var)
            var.registers(['err'])
            var.put('err', var.get('Error').callprop('apply', var.get(u"this"), var.get('arguments')))
            var.get('err').put('name', var.get(u"this").get('constructor').get('name'))
            return var.get('err')
        PyJs_ConfigError_366_._set_name('ConfigError')
        @Js
        def PyJs_NotImplementedError_367_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'NotImplementedError':PyJs_NotImplementedError_367_}, var)
            var.registers(['err'])
            var.put('err', var.get('Error').callprop('apply', var.get(u"this"), var.get('arguments')))
            var.get('err').put('name', var.get(u"this").get('constructor').get('name'))
            return var.get('err')
        PyJs_NotImplementedError_367_._set_name('NotImplementedError')
        var.get('module').put('exports', Js({'ValueError':PyJs_ValueError_365_,'ConfigError':PyJs_ConfigError_366_,'NotImplementedError':PyJs_NotImplementedError_367_}))
    PyJs_anonymous_364_._set_name('anonymous')
    @Js
    def PyJs_anonymous_368_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        @Js
        def PyJs_areaSum_369_(h0, w0, H, W, SAT, this, arguments, var=var):
            var = Scope({'h0':h0, 'w0':w0, 'H':H, 'W':W, 'SAT':SAT, 'this':this, 'arguments':arguments, 'areaSum':PyJs_areaSum_369_}, var)
            var.registers(['w0', 'x1', 'h0', 'H', 'y1', 'y0', 'W', 'x0', 'SAT'])
            var.put('x0', (var.get('w0')-Js(1.0)))
            var.put('x1', ((var.get('w0')+var.get('W'))-Js(1.0)))
            var.put('y0', (var.get('h0')-Js(1.0)))
            var.put('y1', ((var.get('h0')+var.get('H'))-Js(1.0)))
            def PyJs_LONG_371_(var=var):
                def PyJs_LONG_370_(var=var):
                    return (((-var.get('SAT').get('selection').callprop('get', var.get('y0'), ((var.get('w0')+var.get('W'))-Js(1.0))))+var.get('SAT').get('selection').callprop('get', ((var.get('h0')+var.get('H'))-Js(1.0)), ((var.get('w0')+var.get('W'))-Js(1.0)))) if PyJsStrictEq(var.get('w0'),Js(0.0)) else ((-var.get('SAT').get('selection').callprop('get', var.get('y1'), var.get('x0')))+var.get('SAT').get('selection').callprop('get', var.get('y1'), var.get('x1'))))
                return ((((var.get('SAT').get('selection').callprop('get', var.get('y0'), var.get('x0'))-var.get('SAT').get('selection').callprop('get', var.get('y1'), var.get('x0')))-var.get('SAT').get('selection').callprop('get', var.get('y0'), var.get('x1')))+var.get('SAT').get('selection').callprop('get', var.get('y1'), var.get('x1'))) if (PyJsStrictNeq(var.get('w0'),Js(0.0)) and PyJsStrictNeq(var.get('h0'),Js(0.0))) else (var.get('SAT').get('selection').callprop('get', ((var.get('h0')+var.get('H'))-Js(1.0)), ((var.get('w0')+var.get('W'))-Js(1.0))) if (PyJsStrictEq(var.get('w0'),Js(0.0)) and PyJsStrictEq(var.get('h0'),Js(0.0))) else PyJs_LONG_370_()))
            return PyJs_LONG_371_()
        PyJs_areaSum_369_._set_name('areaSum')
        var.get('module').put('exports', PyJs_areaSum_369_)
    PyJs_anonymous_368_._set_name('anonymous')
    @Js
    def PyJs_anonymous_372_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'areaSum', 'require', 'module'])
        Js('use strict')
        var.put('areaSum', var.get('require')(Js('./area-sum')))
        @Js
        def PyJs_areaValue_373_(h0, w0, H, W, SAT, this, arguments, var=var):
            var = Scope({'h0':h0, 'w0':w0, 'H':H, 'W':W, 'SAT':SAT, 'this':this, 'arguments':arguments, 'areaValue':PyJs_areaValue_373_}, var)
            var.registers(['w0', 'h0', 'H', 'W', 'SAT'])
            return (var.get('areaSum')(var.get('h0'), var.get('w0'), var.get('H'), var.get('W'), var.get('SAT'))/(var.get('H')*var.get('W')))
        PyJs_areaValue_373_._set_name('areaValue')
        var.get('module').put('exports', PyJs_areaValue_373_)
    PyJs_anonymous_372_._set_name('anonymous')
    @Js
    def PyJs_anonymous_374_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_375_(__dirname, this, arguments, var=var):
            var = Scope({'__dirname':__dirname, 'this':this, 'arguments':arguments}, var)
            var.registers(['DATA_DIR', '__dirname', 'exports', 'path', 'getArray', 'read'])
            @Js
            def PyJsHoisted_getArray_(fileName, this, arguments, var=var):
                var = Scope({'fileName':fileName, 'this':this, 'arguments':arguments}, var)
                var.registers(['fileName'])
                return var.get('read')(var.get('path').callprop('join', var.get('DATA_DIR'), var.get('fileName')))
            PyJsHoisted_getArray_.func_name = 'getArray'
            var.put('getArray', PyJsHoisted_getArray_)
            Js('use strict')
            var.put('path', var.get('require')(Js('path')))
            var.put('read', var.get('require')(Js('./read')))
            var.put('DATA_DIR', var.get('path').callprop('join', var.get('path').callprop('resolve', var.get('__dirname')), Js('../../data')))
            pass
            var.put('exports', Js({}))
            @Js
            def PyJs_get_376_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_376_}, var)
                var.registers([])
                return var.get('getArray')(Js('five.png'))
            PyJs_get_376_._set_name('get')
            var.get('Object').callprop('defineProperty', var.get('exports'), Js('digit'), Js({'get':PyJs_get_376_}))
            @Js
            def PyJs_get_377_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_377_}, var)
                var.registers([])
                return var.get('getArray')(Js('five.png'))
            PyJs_get_377_._set_name('get')
            var.get('Object').callprop('defineProperty', var.get('exports'), Js('five'), Js({'get':PyJs_get_377_}))
            @Js
            def PyJs_get_378_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_378_}, var)
                var.registers([])
                return var.get('getArray')(Js('nodejs.png'))
            PyJs_get_378_._set_name('get')
            var.get('Object').callprop('defineProperty', var.get('exports'), Js('node'), Js({'get':PyJs_get_378_}))
            @Js
            def PyJs_get_379_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_379_}, var)
                var.registers([])
                return var.get('getArray')(Js('lenna.png'))
            PyJs_get_379_._set_name('get')
            var.get('Object').callprop('defineProperty', var.get('exports'), Js('lena'), Js({'get':PyJs_get_379_}))
            @Js
            def PyJs_get_380_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_380_}, var)
                var.registers([])
                return var.get('getArray')(Js('lenna.png'))
            PyJs_get_380_._set_name('get')
            var.get('Object').callprop('defineProperty', var.get('exports'), Js('lenna'), Js({'get':PyJs_get_380_}))
            @Js
            def PyJs_get_381_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_381_}, var)
                var.registers([])
                return var.get('getArray')(Js('moon.jpg'))
            PyJs_get_381_._set_name('get')
            var.get('Object').callprop('defineProperty', var.get('exports'), Js('moon'), Js({'get':PyJs_get_381_}))
            var.get('module').put('exports', var.get('exports'))
        PyJs_anonymous_375_._set_name('anonymous')
        PyJs_anonymous_375_.callprop('call', var.get(u"this"), Js('/../../../node_modules/numjs/src/images'))
    PyJs_anonymous_374_._set_name('anonymous')
    @Js
    def PyJs_anonymous_382_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'NdArray'])
        Js('use strict')
        var.put('NdArray', var.get('require')(Js('../ndarray')))
        @Js
        def PyJs_flipImage_383_(img, this, arguments, var=var):
            var = Scope({'img':img, 'this':this, 'arguments':arguments, 'flipImage':PyJs_flipImage_383_}, var)
            var.registers(['img'])
            return var.get('NdArray').create(var.get('img').get('selection').callprop('step', var.get(u"null"), (-Js(1.0))))
        PyJs_flipImage_383_._set_name('flipImage')
        var.get('module').put('exports', PyJs_flipImage_383_)
    PyJs_anonymous_382_._set_name('anonymous')
    @Js
    def PyJs_anonymous_384_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        Js('use strict')
        def PyJs_LONG_385_(var=var):
            return var.get('module').put('exports', Js({'data':var.get('require')(Js('./data')),'read':var.get('require')(Js('./read')),'save':var.get('require')(Js('./save')),'resize':var.get('require')(Js('./resize')),'sat':var.get('require')(Js('./sat')),'ssat':var.get('require')(Js('./ssat')),'sobel':var.get('require')(Js('./sobel')),'scharr':var.get('require')(Js('./scharr')),'areaSum':var.get('require')(Js('./area-sum')),'areaValue':var.get('require')(Js('./area-value')),'rgb2gray':var.get('require')(Js('./rgb2gray')),'flip':var.get('require')(Js('./flip'))}))
        PyJs_LONG_385_()
    PyJs_anonymous_384_._set_name('anonymous')
    @Js
    def PyJs_anonymous_386_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'doCheckIsGrayscale', 'NdArray', 'require'])
        Js('use strict')
        var.put('NdArray', var.get('require')(Js('../ndarray')))
        def PyJs_LONG_387_(var=var):
            return var.get('require')(Js('cwise/lib/wrapper'))(Js({'args':Js([Js('array'), Js('array'), Js('array')]),'pre':Js({'body':Js('{this_isgray=!0}'),'args':Js([]),'thisVars':Js([Js('this_isgray')]),'localVars':Js([])}),'body':Js({'body':Js('{_inline_40_arg0_===_inline_40_arg1_&&_inline_40_arg1_===_inline_40_arg2_||(this_isgray=!1)}'),'args':Js([Js({'name':Js('_inline_40_arg0_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_40_arg1_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)}), Js({'name':Js('_inline_40_arg2_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)})]),'thisVars':Js([Js('this_isgray')]),'localVars':Js([])}),'post':Js({'body':Js('{return this_isgray}'),'args':Js([]),'thisVars':Js([Js('this_isgray')]),'localVars':Js([])}),'debug':Js(False),'funcName':Js('doCheckIsGrayscaleCwise'),'blockSize':Js(64.0)}))
        var.put('doCheckIsGrayscale', PyJs_LONG_387_())
        @Js
        def PyJs_isGrayscaleImage_388_(arr, this, arguments, var=var):
            var = Scope({'arr':arr, 'this':this, 'arguments':arguments, 'isGrayscaleImage':PyJs_isGrayscaleImage_388_}, var)
            var.registers(['arr', 'aShape'])
            if var.get('arr').instanceof(var.get('NdArray')):
                var.put('arr', var.get('arr').get('selection'))
            var.put('aShape', var.get('arr').get('shape'))
            if PyJsStrictEq(var.get('aShape').get('length'),Js(1.0)):
                return Js(False)
            if (PyJsStrictEq(var.get('aShape').get('length'),Js(2.0)) or (PyJsStrictEq(var.get('aShape').get('length'),Js(3.0)) and PyJsStrictEq(var.get('aShape').get('2'),Js(1.0)))):
                return Js(True)
            else:
                if (PyJsStrictEq(var.get('aShape').get('length'),Js(3.0)) and (PyJsStrictEq(var.get('aShape').get('2'),Js(3.0)) or PyJsStrictEq(var.get('aShape').get('2'),Js(4.0)))):
                    return var.get('doCheckIsGrayscale')(var.get('arr').callprop('pick', var.get(u"null"), var.get(u"null"), Js(0.0)), var.get('arr').callprop('pick', var.get(u"null"), var.get(u"null"), Js(1.0)), var.get('arr').callprop('pick', var.get(u"null"), var.get(u"null"), Js(2.0)))
            return Js(False)
        PyJs_isGrayscaleImage_388_._set_name('isGrayscaleImage')
        var.get('module').put('exports', PyJs_isGrayscaleImage_388_)
    PyJs_anonymous_386_._set_name('anonymous')
    @Js
    def PyJs_anonymous_389_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'processImg', 'exports', 'isGrayscale', 'NdArray', 'ndarray', 'errors', 'require', 'processCanvas'])
        @Js
        def PyJsHoisted_processCanvas_(canvas, this, arguments, var=var):
            var = Scope({'canvas':canvas, 'this':this, 'arguments':arguments}, var)
            var.registers(['pixels', 'shape', 'hxw', 'canvas', 'stride', 'wxh', 'context'])
            var.put('context', var.get('canvas').callprop('getContext', Js('2d')))
            var.put('pixels', var.get('context').callprop('getImageData', Js(0.0), Js(0.0), var.get('canvas').get('width'), var.get('canvas').get('height')))
            var.put('shape', Js([var.get('canvas').get('width'), var.get('canvas').get('height'), Js(4.0)]))
            var.put('stride', Js([Js(4.0), (Js(4.0)*var.get('canvas').get('width')), Js(1.0)]))
            var.put('wxh', var.get('ndarray')(var.get('Uint8Array').create(var.get('pixels').get('data')), var.get('shape'), var.get('stride'), Js(0.0)))
            var.put('hxw', var.get('wxh').callprop('transpose', Js(1.0), Js(0.0)))
            if var.get('isGrayscale')(var.get('hxw')):
                var.put('hxw', var.get('hxw').callprop('pick', var.get(u"null"), var.get(u"null"), Js(0.0)))
            return var.get('NdArray').create(var.get('hxw'))
        PyJsHoisted_processCanvas_.func_name = 'processCanvas'
        var.put('processCanvas', PyJsHoisted_processCanvas_)
        @Js
        def PyJsHoisted_processImg_(img, this, arguments, var=var):
            var = Scope({'img':img, 'this':this, 'arguments':arguments}, var)
            var.registers(['pixels', 'img', 'shape', 'hxw', 'canvas', 'stride', 'wxh', 'context'])
            var.put('canvas', var.get('document').callprop('createElement', Js('canvas')))
            var.get('canvas').put('width', var.get('img').get('width'))
            var.get('canvas').put('height', var.get('img').get('height'))
            var.put('context', var.get('canvas').callprop('getContext', Js('2d')))
            var.get('context').callprop('drawImage', var.get('img'), Js(0.0), Js(0.0))
            var.put('pixels', var.get('context').callprop('getImageData', Js(0.0), Js(0.0), var.get('img').get('width'), var.get('img').get('height')))
            var.put('shape', Js([var.get('img').get('width'), var.get('img').get('height'), Js(4.0)]))
            var.put('stride', Js([Js(4.0), (Js(4.0)*var.get('img').get('width')), Js(1.0)]))
            var.put('wxh', var.get('ndarray')(var.get('Uint8Array').create(var.get('pixels').get('data')), var.get('shape'), var.get('stride'), Js(0.0)))
            var.put('hxw', var.get('wxh').callprop('transpose', Js(1.0), Js(0.0)))
            if var.get('isGrayscale')(var.get('hxw')):
                var.put('hxw', var.get('hxw').callprop('pick', var.get(u"null"), var.get(u"null"), Js(0.0)))
            return var.get('NdArray').create(var.get('hxw'))
        PyJsHoisted_processImg_.func_name = 'processImg'
        var.put('processImg', PyJsHoisted_processImg_)
        Js('use strict')
        var.put('ndarray', var.get('require')(Js('ndarray')))
        var.put('NdArray', var.get('require')(Js('../ndarray')))
        var.put('errors', var.get('require')(Js('../errors')))
        var.put('isGrayscale', var.get('require')(Js('./is-grayscale')))
        @Js
        def PyJs_readImageDom_390_(input, this, arguments, var=var):
            var = Scope({'input':input, 'this':this, 'arguments':arguments, 'readImageDom':PyJs_readImageDom_390_}, var)
            var.registers(['input'])
            if var.get('input').instanceof(var.get('HTMLCanvasElement')):
                return var.get('processCanvas')(var.get('input'))
            else:
                if var.get('input').instanceof(var.get('HTMLImageElement')):
                    return var.get('processImg')(var.get('input'))
                else:
                    PyJsTempException = JsToPyException(var.get('errors').get('ValueError').create(Js('expect input to be either an HTML Canvas or a (loaded) Image')))
                    raise PyJsTempException
        PyJs_readImageDom_390_._set_name('readImageDom')
        var.get('module').put('exports', PyJs_readImageDom_390_)
        pass
        pass
    PyJs_anonymous_389_._set_name('anonymous')
    @Js
    def PyJs_anonymous_391_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', '_', 'exports', 'NdArray', 'ndarray', 'require'])
        Js('use strict')
        var.put('_', var.get('require')(Js('./utils')))
        var.put('ndarray', var.get('require')(Js('ndarray')))
        var.put('NdArray', var.get('require')(Js('../ndarray')))
        @Js
        def PyJs_resizeImageDom_392_(img, height, width, this, arguments, var=var):
            var = Scope({'img':img, 'height':height, 'width':width, 'this':this, 'arguments':arguments, 'resizeImageDom':PyJs_resizeImageDom_392_}, var)
            var.registers(['originalCanvas', 'width', 'img', 'shape', 'cf', 'K', 'cdH', 'stride', 'cW', 'cfH', 'originalCtx', 'resizedImg', 'hxw', 'H', 'cH', 'iShape', 'err', 'height', 'cfW', 'cdW', 'originalImg', 'W', 'wxh'])
            var.put('iShape', var.get('img').get('shape'))
            var.put('H', var.get('iShape').get('0'))
            var.put('W', var.get('iShape').get('1'))
            var.put('K', (var.get('iShape').get('2') or Js(1.0)))
            var.put('originalCanvas', var.get('document').callprop('createElement', Js('canvas')))
            var.get('originalCanvas').put('height', var.get('H'))
            var.get('originalCanvas').put('width', var.get('W'))
            var.put('originalCtx', var.get('originalCanvas').callprop('getContext', Js('2d')))
            var.put('originalImg', var.get('originalCtx').callprop('createImageData', var.get('W'), var.get('H')))
            var.put('err', var.get('_').callprop('setRawData', var.get('img').get('selection'), var.get('originalImg').get('data')))
            if var.get('err'):
                PyJsTempException = JsToPyException(var.get('err'))
                raise PyJsTempException
            var.put('cfH', (var.get('H')/var.get('height')))
            var.put('cfW', (var.get('W')/var.get('width')))
            var.put('cf', var.get('Math').callprop('min', var.get('cfH'), var.get('cfW')))
            var.put('cH', (var.get('height')*var.get('cf')))
            var.put('cW', (var.get('width')*var.get('cf')))
            var.put('cdH', ((var.get('H')-(var.get('cf')*var.get('height')))/Js(2.0)))
            var.put('cdW', ((var.get('W')-(var.get('cf')*var.get('width')))/Js(2.0)))
            var.get('originalCtx').callprop('putImageData', var.get('originalImg'), Js(0.0), Js(0.0))
            var.get('originalCtx').callprop('drawImage', var.get('originalCanvas'), var.get('cdW'), var.get('cdH'), var.get('cW'), var.get('cH'), Js(0.0), Js(0.0), var.get('width'), var.get('height'))
            var.put('resizedImg', var.get('originalCtx').callprop('getImageData', Js(0.0), Js(0.0), var.get('width'), var.get('height')))
            var.put('shape', Js([(var.get('width')|Js(0.0)), (var.get('height')|Js(0.0)), Js(4.0)]))
            var.put('stride', Js([Js(4.0), ((Js(4.0)*var.get('width'))|Js(0.0)), Js(1.0)]))
            var.put('wxh', var.get('ndarray')(var.get('Uint8Array').create(var.get('resizedImg').get('data')), var.get('shape'), var.get('stride'), Js(0.0)))
            var.put('hxw', var.get('wxh').callprop('transpose', Js(1.0), Js(0.0)))
            if PyJsStrictEq(var.get('iShape').get('length'),Js(2.0)):
                var.put('hxw', var.get('hxw').callprop('pick', var.get(u"null"), var.get(u"null"), Js(0.0)))
            else:
                if (PyJsStrictEq(var.get('iShape').get('length'),Js(3.0)) and PyJsStrictEq(var.get('K'),Js(1.0))):
                    var.put('hxw', var.get('hxw').callprop('pick', var.get(u"null"), var.get(u"null"), Js(0.0)))
            return var.get('NdArray').create(var.get('hxw'))
        PyJs_resizeImageDom_392_._set_name('resizeImageDom')
        var.get('module').put('exports', PyJs_resizeImageDom_392_)
    PyJs_anonymous_391_._set_name('anonymous')
    @Js
    def PyJs_anonymous_393_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'NdArray', '__', 'require', 'doRgb2gray'])
        Js('use strict')
        var.put('NdArray', var.get('require')(Js('../ndarray')))
        var.put('__', var.get('require')(Js('../utils')))
        def PyJs_LONG_394_(var=var):
            return var.get('require')(Js('cwise/lib/wrapper'))(Js({'args':Js([Js('array'), Js('array'), Js('array'), Js('array')]),'pre':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'body':Js({'body':Js('{_inline_37_arg0_=4899*_inline_37_arg1_+9617*_inline_37_arg2_+1868*_inline_37_arg3_+8192>>14}'),'args':Js([Js({'name':Js('_inline_37_arg0_'),'lvalue':Js(True),'rvalue':Js(False),'count':Js(1.0)}), Js({'name':Js('_inline_37_arg1_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_37_arg2_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_37_arg3_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)})]),'thisVars':Js([]),'localVars':Js([])}),'post':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'debug':Js(False),'funcName':Js('rgb2grayCwise'),'blockSize':Js(64.0)}))
        var.put('doRgb2gray', PyJs_LONG_394_())
        @Js
        def PyJs_rgb2gray_395_(img, this, arguments, var=var):
            var = Scope({'img':img, 'this':this, 'arguments':arguments, 'rgb2gray':PyJs_rgb2gray_395_}, var)
            var.registers(['img', 'b', 'oShape', 'r', 'h', 'k', 'g', 'w', 'iShape', 'out'])
            if var.get('img').instanceof(var.get('NdArray')).neg():
                var.put('img', var.get('NdArray').create(var.get('img')))
            var.put('iShape', var.get('img').get('shape'))
            var.put('h', var.get('iShape').get('0'))
            var.put('w', var.get('iShape').get('1'))
            var.put('k', (var.get('iShape').get('2') or Js(1.0)))
            if PyJsStrictEq(var.get('k'),Js(1.0)):
                return var.get('img')
            var.put('oShape', Js([var.get('h'), var.get('w')]))
            var.put('out', var.get('NdArray').create(var.get('Uint8Array').create(var.get('__').callprop('shapeSize', var.get('oShape'))), var.get('oShape')))
            var.put('r', var.get('img').get('selection').callprop('pick', var.get(u"null"), var.get(u"null"), Js(0.0)))
            var.put('g', var.get('img').get('selection').callprop('pick', var.get(u"null"), var.get(u"null"), Js(1.0)))
            var.put('b', var.get('img').get('selection').callprop('pick', var.get(u"null"), var.get(u"null"), Js(2.0)))
            var.get('doRgb2gray')(var.get('out').get('selection'), var.get('r'), var.get('g'), var.get('b'))
            return var.get('out')
        PyJs_rgb2gray_395_._set_name('rgb2gray')
        var.get('module').put('exports', PyJs_rgb2gray_395_)
    PyJs_anonymous_393_._set_name('anonymous')
    @Js
    def PyJs_anonymous_396_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'NdArray', 'doIntegrate', 'require', 'rgb2gray'])
        Js('use strict')
        var.put('NdArray', var.get('require')(Js('../ndarray')))
        var.put('rgb2gray', var.get('require')(Js('./rgb2gray')))
        def PyJs_LONG_397_(var=var):
            return var.get('require')(Js('cwise/lib/wrapper'))(Js({'args':Js([Js('array'), Js('array'), Js('index'), Js({'offset':Js([(-Js(1.0)), (-Js(1.0))]),'array':Js(0.0)}), Js({'offset':Js([(-Js(1.0)), Js(0.0)]),'array':Js(0.0)}), Js({'offset':Js([Js(0.0), (-Js(1.0))]),'array':Js(0.0)})]),'pre':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'body':Js({'body':Js('{_inline_25_arg0_=0!==_inline_25_arg2_[0]&&0!==_inline_25_arg2_[1]?_inline_25_arg1_+_inline_25_arg4_+_inline_25_arg5_-_inline_25_arg3_:0===_inline_25_arg2_[0]&&0===_inline_25_arg2_[1]?_inline_25_arg1_:0===_inline_25_arg2_[0]?_inline_25_arg1_+_inline_25_arg5_:_inline_25_arg1_+_inline_25_arg4_}'),'args':Js([Js({'name':Js('_inline_25_arg0_'),'lvalue':Js(True),'rvalue':Js(False),'count':Js(1.0)}), Js({'name':Js('_inline_25_arg1_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(4.0)}), Js({'name':Js('_inline_25_arg2_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(5.0)}), Js({'name':Js('_inline_25_arg3_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_25_arg4_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)}), Js({'name':Js('_inline_25_arg5_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)})]),'thisVars':Js([]),'localVars':Js([])}),'post':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'debug':Js(False),'funcName':Js('doIntegrateBody'),'blockSize':Js(64.0)}))
        var.put('doIntegrate', PyJs_LONG_397_())
        @Js
        def PyJs_computeSumAreaTable_398_(img, this, arguments, var=var):
            var = Scope({'img':img, 'this':this, 'arguments':arguments, 'computeSumAreaTable':PyJs_computeSumAreaTable_398_}, var)
            var.registers(['img', 'iH', 'iShape', 'out', 'gray', 'iW'])
            var.put('gray', var.get('rgb2gray')(var.get('img')))
            var.put('iShape', var.get('gray').get('shape'))
            var.put('iH', var.get('iShape').get('0'))
            var.put('iW', var.get('iShape').get('1'))
            var.put('out', var.get('NdArray').create(var.get('Uint32Array').create((var.get('iH')*var.get('iW'))), Js([var.get('iH'), var.get('iW')])))
            var.get('doIntegrate')(var.get('out').get('selection'), var.get('gray').get('selection'))
            return var.get('out')
        PyJs_computeSumAreaTable_398_._set_name('computeSumAreaTable')
        var.get('module').put('exports', PyJs_computeSumAreaTable_398_)
    PyJs_anonymous_396_._set_name('anonymous')
    @Js
    def PyJs_anonymous_399_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', '_', 'require', 'errors'])
        Js('use strict')
        var.put('_', var.get('require')(Js('./utils')))
        var.put('errors', var.get('require')(Js('../errors')))
        @Js
        def PyJs_saveImageDom_400_(img, dest, this, arguments, var=var):
            var = Scope({'img':img, 'dest':dest, 'this':this, 'arguments':arguments, 'saveImageDom':PyJs_saveImageDom_400_}, var)
            var.registers(['$tmp', 'img', 'dest', 'originalImg', 'tmpCtx', 'iH', 'iShape', 'err', 'iW'])
            var.put('iShape', var.get('img').get('shape'))
            var.put('iH', var.get('iShape').get('0'))
            var.put('iW', var.get('iShape').get('1'))
            if var.get('dest').instanceof(var.get('HTMLCanvasElement')):
                var.put('$tmp', var.get('document').callprop('createElement', Js('canvas')))
                var.get('$tmp').put('height', var.get('iH'))
                var.get('$tmp').put('width', var.get('iW'))
                var.put('tmpCtx', var.get('$tmp').callprop('getContext', Js('2d')))
                var.put('originalImg', var.get('tmpCtx').callprop('createImageData', var.get('iW'), var.get('iH')))
                var.put('err', var.get('_').callprop('setRawData', var.get('img').get('selection'), var.get('originalImg').get('data')))
                if var.get('err'):
                    PyJsTempException = JsToPyException(var.get('err'))
                    raise PyJsTempException
                var.get('tmpCtx').callprop('putImageData', var.get('originalImg'), Js(0.0), Js(0.0))
                var.get('tmpCtx').callprop('drawImage', var.get('$tmp'), var.get('iW'), var.get('iH'))
                var.get('dest').callprop('getContext', Js('2d')).callprop('drawImage', var.get('$tmp'), Js(0.0), Js(0.0), var.get('iW'), var.get('iH'), Js(0.0), Js(0.0), var.get('dest').get('width'), var.get('dest').get('height'))
            else:
                PyJsTempException = JsToPyException(var.get('errors').get('ValueError').create(Js('expect input to be either an HTML Canvas or a (loaded) Image')))
                raise PyJsTempException
        PyJs_saveImageDom_400_._set_name('saveImageDom')
        var.get('module').put('exports', PyJs_saveImageDom_400_)
    PyJs_anonymous_399_._set_name('anonymous')
    @Js
    def PyJs_anonymous_401_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['doScharr', 'module', 'ops', 'exports', 'NdArray', '__', 'require', 'rgb2gray'])
        Js('use strict')
        var.put('ops', var.get('require')(Js('ndarray-ops')))
        var.put('NdArray', var.get('require')(Js('../ndarray')))
        var.put('__', var.get('require')(Js('../utils')))
        var.put('rgb2gray', var.get('require')(Js('./rgb2gray')))
        def PyJs_LONG_402_(var=var):
            return var.get('require')(Js('cwise/lib/wrapper'))(Js({'args':Js([Js('array'), Js('array'), Js({'offset':Js([(-Js(1.0)), (-Js(1.0))]),'array':Js(1.0)}), Js({'offset':Js([(-Js(1.0)), Js(0.0)]),'array':Js(1.0)}), Js({'offset':Js([(-Js(1.0)), Js(1.0)]),'array':Js(1.0)}), Js({'offset':Js([Js(0.0), (-Js(1.0))]),'array':Js(1.0)}), Js({'offset':Js([Js(0.0), Js(1.0)]),'array':Js(1.0)}), Js({'offset':Js([Js(1.0), (-Js(1.0))]),'array':Js(1.0)}), Js({'offset':Js([Js(1.0), Js(0.0)]),'array':Js(1.0)}), Js({'offset':Js([Js(1.0), Js(1.0)]),'array':Js(1.0)})]),'pre':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'body':Js({'body':Js('{var _inline_34_q=3*_inline_34_arg2_+10*_inline_34_arg3_+3*_inline_34_arg4_-3*_inline_34_arg7_-10*_inline_34_arg8_-3*_inline_34_arg9_,_inline_34_s=3*_inline_34_arg2_-3*_inline_34_arg4_+10*_inline_34_arg5_-10*_inline_34_arg6_+3*_inline_34_arg7_-3*_inline_34_arg9_;_inline_34_arg0_=Math.sqrt(_inline_34_s*_inline_34_s+_inline_34_q*_inline_34_q)}'),'args':Js([Js({'name':Js('_inline_34_arg0_'),'lvalue':Js(True),'rvalue':Js(False),'count':Js(1.0)}), Js({'name':Js('_inline_34_arg1_'),'lvalue':Js(False),'rvalue':Js(False),'count':Js(0.0)}), Js({'name':Js('_inline_34_arg2_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)}), Js({'name':Js('_inline_34_arg3_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_34_arg4_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)}), Js({'name':Js('_inline_34_arg5_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_34_arg6_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_34_arg7_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)}), Js({'name':Js('_inline_34_arg8_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_34_arg9_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)})]),'thisVars':Js([]),'localVars':Js([Js('_inline_34_q'), Js('_inline_34_s')])}),'post':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'debug':Js(False),'funcName':Js('doSobelBody'),'blockSize':Js(64.0)}))
        var.put('doScharr', PyJs_LONG_402_())
        @Js
        def PyJs_computeScharr_403_(img, this, arguments, var=var):
            var = Scope({'img':img, 'this':this, 'arguments':arguments, 'computeScharr':PyJs_computeScharr_403_}, var)
            var.registers(['img', 'iH', 'iShape', 'out', 'gray', 'iW'])
            var.put('gray', var.get('rgb2gray')(var.get('img')))
            var.put('iShape', var.get('gray').get('shape'))
            var.put('iH', var.get('iShape').get('0'))
            var.put('iW', var.get('iShape').get('1'))
            var.put('out', var.get('NdArray').create(var.get('Float32Array').create(var.get('__').callprop('shapeSize', var.get('iShape'))), var.get('iShape')))
            var.get('doScharr')(var.get('out').get('selection'), var.get('gray').get('selection'))
            var.get('ops').callprop('assigns', var.get('out').get('selection').callprop('pick', Js(0.0), var.get(u"null")), Js(0.0))
            var.get('ops').callprop('assigns', var.get('out').get('selection').callprop('pick', var.get(u"null"), Js(0.0)), Js(0.0))
            var.get('ops').callprop('assigns', var.get('out').get('selection').callprop('pick', (var.get('iH')-Js(1.0)), var.get(u"null")), Js(0.0))
            var.get('ops').callprop('assigns', var.get('out').get('selection').callprop('pick', var.get(u"null"), (var.get('iW')-Js(1.0))), Js(0.0))
            return var.get('out').callprop('divide', (Js(16.0)*var.get('Math').callprop('sqrt', Js(2.0))), Js(False))
        PyJs_computeScharr_403_._set_name('computeScharr')
        var.get('module').put('exports', PyJs_computeScharr_403_)
    PyJs_anonymous_401_._set_name('anonymous')
    @Js
    def PyJs_anonymous_404_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'ops', 'exports', 'doSobel', 'NdArray', '__', 'require', 'rgb2gray'])
        Js('use strict')
        var.put('ops', var.get('require')(Js('ndarray-ops')))
        var.put('NdArray', var.get('require')(Js('../ndarray')))
        var.put('__', var.get('require')(Js('../utils')))
        var.put('rgb2gray', var.get('require')(Js('./rgb2gray')))
        def PyJs_LONG_405_(var=var):
            return var.get('require')(Js('cwise/lib/wrapper'))(Js({'args':Js([Js('array'), Js('array'), Js({'offset':Js([(-Js(1.0)), (-Js(1.0))]),'array':Js(1.0)}), Js({'offset':Js([(-Js(1.0)), Js(0.0)]),'array':Js(1.0)}), Js({'offset':Js([(-Js(1.0)), Js(1.0)]),'array':Js(1.0)}), Js({'offset':Js([Js(0.0), (-Js(1.0))]),'array':Js(1.0)}), Js({'offset':Js([Js(0.0), Js(1.0)]),'array':Js(1.0)}), Js({'offset':Js([Js(1.0), (-Js(1.0))]),'array':Js(1.0)}), Js({'offset':Js([Js(1.0), Js(0.0)]),'array':Js(1.0)}), Js({'offset':Js([Js(1.0), Js(1.0)]),'array':Js(1.0)})]),'pre':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'body':Js({'body':Js('{var _inline_31_q=_inline_31_arg2_+2*_inline_31_arg3_+_inline_31_arg4_-_inline_31_arg7_-2*_inline_31_arg8_-_inline_31_arg9_,_inline_31_s=_inline_31_arg2_-_inline_31_arg4_+2*_inline_31_arg5_-2*_inline_31_arg6_+_inline_31_arg7_-_inline_31_arg9_;_inline_31_arg0_=Math.sqrt(_inline_31_s*_inline_31_s+_inline_31_q*_inline_31_q)}'),'args':Js([Js({'name':Js('_inline_31_arg0_'),'lvalue':Js(True),'rvalue':Js(False),'count':Js(1.0)}), Js({'name':Js('_inline_31_arg1_'),'lvalue':Js(False),'rvalue':Js(False),'count':Js(0.0)}), Js({'name':Js('_inline_31_arg2_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)}), Js({'name':Js('_inline_31_arg3_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_31_arg4_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)}), Js({'name':Js('_inline_31_arg5_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_31_arg6_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_31_arg7_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)}), Js({'name':Js('_inline_31_arg8_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_31_arg9_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)})]),'thisVars':Js([]),'localVars':Js([Js('_inline_31_q'), Js('_inline_31_s')])}),'post':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'debug':Js(False),'funcName':Js('doSobelBody'),'blockSize':Js(64.0)}))
        var.put('doSobel', PyJs_LONG_405_())
        @Js
        def PyJs_computeSobel_406_(img, this, arguments, var=var):
            var = Scope({'img':img, 'this':this, 'arguments':arguments, 'computeSobel':PyJs_computeSobel_406_}, var)
            var.registers(['img', 'iH', 'iShape', 'out', 'gray', 'iW'])
            var.put('gray', var.get('rgb2gray')(var.get('img')))
            var.put('iShape', var.get('gray').get('shape'))
            var.put('iH', var.get('iShape').get('0'))
            var.put('iW', var.get('iShape').get('1'))
            var.put('out', var.get('NdArray').create(var.get('Float32Array').create(var.get('__').callprop('shapeSize', var.get('iShape'))), var.get('iShape')))
            var.get('doSobel')(var.get('out').get('selection'), var.get('gray').get('selection'))
            var.get('ops').callprop('assigns', var.get('out').get('selection').callprop('pick', Js(0.0), var.get(u"null")), Js(0.0))
            var.get('ops').callprop('assigns', var.get('out').get('selection').callprop('pick', var.get(u"null"), Js(0.0)), Js(0.0))
            var.get('ops').callprop('assigns', var.get('out').get('selection').callprop('pick', (var.get('iH')-Js(1.0)), var.get(u"null")), Js(0.0))
            var.get('ops').callprop('assigns', var.get('out').get('selection').callprop('pick', var.get(u"null"), (var.get('iW')-Js(1.0))), Js(0.0))
            return var.get('out').callprop('divide', (Js(4.0)*var.get('Math').callprop('sqrt', Js(2.0))), Js(False))
        PyJs_computeSobel_406_._set_name('computeSobel')
        var.get('module').put('exports', PyJs_computeSobel_406_)
    PyJs_anonymous_404_._set_name('anonymous')
    @Js
    def PyJs_anonymous_407_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'NdArray', 'doIntegrate', 'require', 'rgb2gray'])
        Js('use strict')
        var.put('NdArray', var.get('require')(Js('../ndarray')))
        var.put('rgb2gray', var.get('require')(Js('./rgb2gray')))
        def PyJs_LONG_408_(var=var):
            return var.get('require')(Js('cwise/lib/wrapper'))(Js({'args':Js([Js('array'), Js('array'), Js('index'), Js({'offset':Js([(-Js(1.0)), (-Js(1.0))]),'array':Js(0.0)}), Js({'offset':Js([(-Js(1.0)), Js(0.0)]),'array':Js(0.0)}), Js({'offset':Js([Js(0.0), (-Js(1.0))]),'array':Js(0.0)})]),'pre':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'body':Js({'body':Js('{_inline_28_arg0_=0!==_inline_28_arg2_[0]&&0!==_inline_28_arg2_[1]?_inline_28_arg1_*_inline_28_arg1_+_inline_28_arg4_+_inline_28_arg5_-_inline_28_arg3_:0===_inline_28_arg2_[0]&&0===_inline_28_arg2_[1]?_inline_28_arg1_*_inline_28_arg1_:0===_inline_28_arg2_[0]?_inline_28_arg1_*_inline_28_arg1_+_inline_28_arg5_:_inline_28_arg1_*_inline_28_arg1_+_inline_28_arg4_}'),'args':Js([Js({'name':Js('_inline_28_arg0_'),'lvalue':Js(True),'rvalue':Js(False),'count':Js(1.0)}), Js({'name':Js('_inline_28_arg1_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(8.0)}), Js({'name':Js('_inline_28_arg2_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(5.0)}), Js({'name':Js('_inline_28_arg3_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_28_arg4_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)}), Js({'name':Js('_inline_28_arg5_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)})]),'thisVars':Js([]),'localVars':Js([])}),'post':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'debug':Js(False),'funcName':Js('doIntegrateBody'),'blockSize':Js(64.0)}))
        var.put('doIntegrate', PyJs_LONG_408_())
        @Js
        def PyJs_computeSquaredSumAreaTable_409_(img, this, arguments, var=var):
            var = Scope({'img':img, 'this':this, 'arguments':arguments, 'computeSquaredSumAreaTable':PyJs_computeSquaredSumAreaTable_409_}, var)
            var.registers(['img', 'iH', 'iShape', 'out', 'gray', 'iW'])
            var.put('gray', var.get('rgb2gray')(var.get('img')))
            var.put('iShape', var.get('gray').get('shape'))
            var.put('iH', var.get('iShape').get('0'))
            var.put('iW', var.get('iShape').get('1'))
            var.put('out', var.get('NdArray').create(var.get('Uint32Array').create((var.get('iH')*var.get('iW'))), Js([var.get('iH'), var.get('iW')])))
            var.get('doIntegrate')(var.get('out').get('selection'), var.get('gray').get('selection'))
            return var.get('out')
        PyJs_computeSquaredSumAreaTable_409_._set_name('computeSquaredSumAreaTable')
        var.get('module').put('exports', PyJs_computeSquaredSumAreaTable_409_)
    PyJs_anonymous_407_._set_name('anonymous')
    @Js
    def PyJs_anonymous_410_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module', 'NdArray'])
        Js('use strict')
        var.put('NdArray', var.get('require')(Js('../ndarray')))
        @Js
        def PyJs_getRawData_411_(array, this, arguments, var=var):
            var = Scope({'array':array, 'this':this, 'arguments':arguments, 'getRawData':PyJs_getRawData_411_}, var)
            var.registers(['ptr', 'aShape', 'array', 'H', 'K', 'h', 'data', 'w', 'W'])
            if var.get('array').instanceof(var.get('NdArray')):
                var.put('array', var.get('array').get('selection'))
            pass
            pass
            var.put('ptr', Js(0.0))
            var.put('aShape', var.get('array').get('shape'))
            var.put('H', var.get('aShape').get('0'))
            var.put('W', var.get('aShape').get('1'))
            var.put('K', (var.get('aShape').get('2') or Js(1.0)))
            var.put('data', var.get('Uint8Array').create(((var.get('H')*var.get('W'))*var.get('K'))))
            if PyJsStrictEq(var.get('array').get('shape').get('length'),Js(3.0)):
                if PyJsStrictEq(var.get('K'),Js(3.0)):
                    #for JS loop
                    var.put('h', Js(0.0))
                    while (var.get('h')<var.get('H')):
                        try:
                            #for JS loop
                            var.put('w', Js(0.0))
                            while (var.get('w')<var.get('W')):
                                try:
                                    var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('array').callprop('get', var.get('h'), var.get('w'), Js(0.0)))
                                    var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('array').callprop('get', var.get('h'), var.get('w'), Js(1.0)))
                                    var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('array').callprop('get', var.get('h'), var.get('w'), Js(2.0)))
                                finally:
                                        var.put('w',Js(var.get('w').to_number())+Js(1))
                        finally:
                                var.put('h',Js(var.get('h').to_number())+Js(1))
                else:
                    if PyJsStrictEq(var.get('K'),Js(4.0)):
                        #for JS loop
                        var.put('h', Js(0.0))
                        while (var.get('h')<var.get('H')):
                            try:
                                #for JS loop
                                var.put('w', Js(0.0))
                                while (var.get('w')<var.get('W')):
                                    try:
                                        var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('array').callprop('get', var.get('h'), var.get('w'), Js(0.0)))
                                        var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('array').callprop('get', var.get('h'), var.get('w'), Js(1.0)))
                                        var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('array').callprop('get', var.get('h'), var.get('w'), Js(2.0)))
                                        var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('array').callprop('get', var.get('h'), var.get('w'), Js(3.0)))
                                    finally:
                                            var.put('w',Js(var.get('w').to_number())+Js(1))
                            finally:
                                    var.put('h',Js(var.get('h').to_number())+Js(1))
                    else:
                        if PyJsStrictEq(var.get('K'),Js(1.0)):
                            #for JS loop
                            var.put('h', Js(0.0))
                            while (var.get('h')<var.get('H')):
                                try:
                                    #for JS loop
                                    var.put('w', Js(0.0))
                                    while (var.get('w')<var.get('W')):
                                        try:
                                            var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('array').callprop('get', var.get('h'), var.get('w'), Js(0.0)))
                                        finally:
                                                var.put('w',Js(var.get('w').to_number())+Js(1))
                                finally:
                                        var.put('h',Js(var.get('h').to_number())+Js(1))
                        else:
                            return var.get('Error').create(Js('Incompatible array shape'))
            else:
                if PyJsStrictEq(var.get('array').get('shape').get('length'),Js(2.0)):
                    #for JS loop
                    var.put('h', Js(0.0))
                    while (var.get('h')<var.get('H')):
                        try:
                            #for JS loop
                            var.put('w', Js(0.0))
                            while (var.get('w')<var.get('W')):
                                try:
                                    var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('array').callprop('get', var.get('h'), var.get('w')))
                                finally:
                                        var.put('w',Js(var.get('w').to_number())+Js(1))
                        finally:
                                var.put('h',Js(var.get('h').to_number())+Js(1))
                else:
                    return var.get('Error').create(Js('Invalid image'))
            return var.get('data')
        PyJs_getRawData_411_._set_name('getRawData')
        var.get('module').get('exports').put('getRawData', PyJs_getRawData_411_)
        @Js
        def PyJs_setRawData_412_(array, data, this, arguments, var=var):
            var = Scope({'array':array, 'data':data, 'this':this, 'arguments':arguments, 'setRawData':PyJs_setRawData_412_}, var)
            var.registers(['c', 'ptr', 'array', 'H', 'K', 'h', 'data', 'w', 'W'])
            pass
            pass
            var.put('ptr', Js(0.0))
            pass
            var.put('H', var.get('array').get('shape').get('0'))
            var.put('W', var.get('array').get('shape').get('1'))
            var.put('K', (var.get('array').get('shape').get('2') or Js(1.0)))
            if PyJsStrictEq(var.get('array').get('shape').get('length'),Js(3.0)):
                if PyJsStrictEq(var.get('K'),Js(3.0)):
                    #for JS loop
                    var.put('h', Js(0.0))
                    while (var.get('h')<var.get('H')):
                        try:
                            #for JS loop
                            var.put('w', Js(0.0))
                            while (var.get('w')<var.get('W')):
                                try:
                                    var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('array').callprop('get', var.get('h'), var.get('w'), Js(0.0)))
                                    var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('array').callprop('get', var.get('h'), var.get('w'), Js(1.0)))
                                    var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('array').callprop('get', var.get('h'), var.get('w'), Js(2.0)))
                                    var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), Js(255.0))
                                finally:
                                        var.put('w',Js(var.get('w').to_number())+Js(1))
                        finally:
                                var.put('h',Js(var.get('h').to_number())+Js(1))
                else:
                    if PyJsStrictEq(var.get('K'),Js(4.0)):
                        #for JS loop
                        var.put('h', Js(0.0))
                        while (var.get('h')<var.get('H')):
                            try:
                                #for JS loop
                                var.put('w', Js(0.0))
                                while (var.get('w')<var.get('W')):
                                    try:
                                        var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('array').callprop('get', var.get('h'), var.get('w'), Js(0.0)))
                                        var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('array').callprop('get', var.get('h'), var.get('w'), Js(1.0)))
                                        var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('array').callprop('get', var.get('h'), var.get('w'), Js(2.0)))
                                        var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('array').callprop('get', var.get('h'), var.get('w'), Js(3.0)))
                                    finally:
                                            var.put('w',Js(var.get('w').to_number())+Js(1))
                            finally:
                                    var.put('h',Js(var.get('h').to_number())+Js(1))
                    else:
                        if PyJsStrictEq(var.get('K'),Js(1.0)):
                            #for JS loop
                            var.put('h', Js(0.0))
                            while (var.get('h')<var.get('H')):
                                try:
                                    #for JS loop
                                    var.put('w', Js(0.0))
                                    while (var.get('w')<var.get('W')):
                                        try:
                                            var.put('c', var.get('array').callprop('get', var.get('h'), var.get('w'), Js(0.0)))
                                            var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('c'))
                                            var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('c'))
                                            var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('c'))
                                            var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), Js(255.0))
                                        finally:
                                                var.put('w',Js(var.get('w').to_number())+Js(1))
                                finally:
                                        var.put('h',Js(var.get('h').to_number())+Js(1))
                        else:
                            return var.get('Error').create(Js('Incompatible array shape'))
            else:
                if PyJsStrictEq(var.get('array').get('shape').get('length'),Js(2.0)):
                    #for JS loop
                    var.put('h', Js(0.0))
                    while (var.get('h')<var.get('H')):
                        try:
                            #for JS loop
                            var.put('w', Js(0.0))
                            while (var.get('w')<var.get('W')):
                                try:
                                    var.put('c', var.get('array').callprop('get', var.get('h'), var.get('w')))
                                    var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('c'))
                                    var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('c'))
                                    var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('c'))
                                    var.get('data').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), Js(255.0))
                                finally:
                                        var.put('w',Js(var.get('w').to_number())+Js(1))
                        finally:
                                var.put('h',Js(var.get('h').to_number())+Js(1))
                else:
                    return var.get('Error').create(Js('Invalid image'))
        PyJs_setRawData_412_._set_name('setRawData')
        var.get('module').get('exports').put('setRawData', PyJs_setRawData_412_)
    PyJs_anonymous_410_._set_name('anonymous')
    @Js
    def PyJs_anonymous_413_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['tanh', 'zeros', 'NdArray', 'CONF', 'abs', 'concatenate', 'broadcast', 'log', 'sum', 'exp', 'identity', 'ones', 'arcsin', 'multiply', 'softmax', 'mean', 'clip', 'arctan', 'arange', 'errors', 'equal', 'ndFFT', 'min', 'doSigmoid', 'transpose', 'arccos', 'round', 'stack', 'max', 'random', 'mod', 'empty', 'leakyRelu', 'convolve', 'exports', 'sigmoid', 'rot90', 'diag', 'require', 'cos', 'power', 'fft', 'sin', 'subtract', 'add', 'divide', 'DTYPES', 'doClip', 'ifft', 'fftconvolve', 'module', 'ops', '_', 'reshape', 'doLeakyRelu', 'tan', 'dot', 'flip', 'ndarray', 'sqrt', 'negative', 'doTanh', 'flatten', 'std'])
        @Js
        def PyJsHoisted_broadcast_(shape1, shape2, this, arguments, var=var):
            var = Scope({'shape1':shape1, 'shape2':shape2, 'this':this, 'arguments':arguments}, var)
            var.registers(['outShape', 'i', 'reversed2', 'maxLength', 'shape2', 'reversed1', 'shape1'])
            if (PyJsStrictEq(var.get('shape1').get('length'),Js(0.0)) or PyJsStrictEq(var.get('shape2').get('length'),Js(0.0))):
                return var.get('undefined')
            var.put('reversed1', var.get('shape1').callprop('slice').callprop('reverse'))
            var.put('reversed2', var.get('shape2').callprop('slice').callprop('reverse'))
            var.put('maxLength', var.get('Math').callprop('max', var.get('shape1').get('length'), var.get('shape2').get('length')))
            var.put('outShape', var.get('Array').create(var.get('maxLength')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('maxLength')):
                try:
                    if (var.get('reversed1').get(var.get('i')).neg() or PyJsStrictEq(var.get('reversed1').get(var.get('i')),Js(1.0))):
                        var.get('outShape').put(var.get('i'), var.get('reversed2').get(var.get('i')))
                    else:
                        if (var.get('reversed2').get(var.get('i')).neg() or PyJsStrictEq(var.get('reversed2').get(var.get('i')),Js(1.0))):
                            var.get('outShape').put(var.get('i'), var.get('reversed1').get(var.get('i')))
                        else:
                            if PyJsStrictEq(var.get('reversed1').get(var.get('i')),var.get('reversed2').get(var.get('i'))):
                                var.get('outShape').put(var.get('i'), var.get('reversed1').get(var.get('i')))
                            else:
                                return var.get('undefined')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('outShape').callprop('reverse')
        PyJsHoisted_broadcast_.func_name = 'broadcast'
        var.put('broadcast', PyJsHoisted_broadcast_)
        @Js
        def PyJsHoisted_add_(a, b, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'b'])
            return var.get('NdArray').callprop('new', var.get('a')).callprop('add', var.get('b'))
        PyJsHoisted_add_.func_name = 'add'
        var.put('add', PyJsHoisted_add_)
        @Js
        def PyJsHoisted_multiply_(a, b, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'b'])
            return var.get('NdArray').callprop('new', var.get('a')).callprop('multiply', var.get('b'))
        PyJsHoisted_multiply_.func_name = 'multiply'
        var.put('multiply', PyJsHoisted_multiply_)
        @Js
        def PyJsHoisted_divide_(a, b, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'b'])
            return var.get('NdArray').callprop('new', var.get('a')).callprop('divide', var.get('b'))
        PyJsHoisted_divide_.func_name = 'divide'
        var.put('divide', PyJsHoisted_divide_)
        @Js
        def PyJsHoisted_subtract_(a, b, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'b'])
            return var.get('NdArray').callprop('new', var.get('a')).callprop('subtract', var.get('b'))
        PyJsHoisted_subtract_.func_name = 'subtract'
        var.put('subtract', PyJsHoisted_subtract_)
        @Js
        def PyJsHoisted_equal_(array1, array2, this, arguments, var=var):
            var = Scope({'array1':array1, 'array2':array2, 'this':this, 'arguments':arguments}, var)
            var.registers(['array1', 'array2'])
            return var.get('NdArray').callprop('new', var.get('array1')).callprop('equal', var.get('array2'))
        PyJsHoisted_equal_.func_name = 'equal'
        var.put('equal', PyJsHoisted_equal_)
        @Js
        def PyJsHoisted_flatten_(array, this, arguments, var=var):
            var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
            var.registers(['array'])
            return var.get('NdArray').callprop('new', var.get('array')).callprop('flatten')
        PyJsHoisted_flatten_.func_name = 'flatten'
        var.put('flatten', PyJsHoisted_flatten_)
        @Js
        def PyJsHoisted_reshape_(array, shape, this, arguments, var=var):
            var = Scope({'array':array, 'shape':shape, 'this':this, 'arguments':arguments}, var)
            var.registers(['shape', 'array'])
            return var.get('NdArray').callprop('new', var.get('array')).callprop('reshape', var.get('shape'))
        PyJsHoisted_reshape_.func_name = 'reshape'
        var.put('reshape', PyJsHoisted_reshape_)
        @Js
        def PyJsHoisted_exp_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return var.get('NdArray').callprop('new', var.get('x')).callprop('exp')
        PyJsHoisted_exp_.func_name = 'exp'
        var.put('exp', PyJsHoisted_exp_)
        @Js
        def PyJsHoisted_log_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return var.get('NdArray').callprop('new', var.get('x')).callprop('log')
        PyJsHoisted_log_.func_name = 'log'
        var.put('log', PyJsHoisted_log_)
        @Js
        def PyJsHoisted_sqrt_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return var.get('NdArray').callprop('new', var.get('x')).callprop('sqrt')
        PyJsHoisted_sqrt_.func_name = 'sqrt'
        var.put('sqrt', PyJsHoisted_sqrt_)
        @Js
        def PyJsHoisted_power_(x1, x2, this, arguments, var=var):
            var = Scope({'x1':x1, 'x2':x2, 'this':this, 'arguments':arguments}, var)
            var.registers(['x2', 'x1'])
            return var.get('NdArray').callprop('new', var.get('x1')).callprop('pow', var.get('x2'))
        PyJsHoisted_power_.func_name = 'power'
        var.put('power', PyJsHoisted_power_)
        @Js
        def PyJsHoisted_sum_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return var.get('NdArray').callprop('new', var.get('x')).callprop('sum')
        PyJsHoisted_sum_.func_name = 'sum'
        var.put('sum', PyJsHoisted_sum_)
        @Js
        def PyJsHoisted_mean_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return var.get('NdArray').callprop('new', var.get('x')).callprop('mean')
        PyJsHoisted_mean_.func_name = 'mean'
        var.put('mean', PyJsHoisted_mean_)
        @Js
        def PyJsHoisted_std_(x, options, this, arguments, var=var):
            var = Scope({'x':x, 'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['options', 'x'])
            return var.get('NdArray').callprop('new', var.get('x')).callprop('std', var.get('options'))
        PyJsHoisted_std_.func_name = 'std'
        var.put('std', PyJsHoisted_std_)
        @Js
        def PyJsHoisted_min_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return var.get('NdArray').callprop('new', var.get('x')).callprop('min')
        PyJsHoisted_min_.func_name = 'min'
        var.put('min', PyJsHoisted_min_)
        @Js
        def PyJsHoisted_max_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return var.get('NdArray').callprop('new', var.get('x')).callprop('max')
        PyJsHoisted_max_.func_name = 'max'
        var.put('max', PyJsHoisted_max_)
        @Js
        def PyJsHoisted_mod_(x1, x2, this, arguments, var=var):
            var = Scope({'x1':x1, 'x2':x2, 'this':this, 'arguments':arguments}, var)
            var.registers(['x2', 'x1'])
            return var.get('NdArray').callprop('new', var.get('x1')).callprop('mod', var.get('x2'))
        PyJsHoisted_mod_.func_name = 'mod'
        var.put('mod', PyJsHoisted_mod_)
        @Js
        def PyJsHoisted_transpose_(x, axes, this, arguments, var=var):
            var = Scope({'x':x, 'axes':axes, 'this':this, 'arguments':arguments}, var)
            var.registers(['axes', 'x'])
            return var.get('NdArray').callprop('new', var.get('x')).callprop('transpose', var.get('axes'))
        PyJsHoisted_transpose_.func_name = 'transpose'
        var.put('transpose', PyJsHoisted_transpose_)
        @Js
        def PyJsHoisted_negative_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return var.get('NdArray').callprop('new', var.get('x')).callprop('negative')
        PyJsHoisted_negative_.func_name = 'negative'
        var.put('negative', PyJsHoisted_negative_)
        @Js
        def PyJsHoisted_arange_(start, stop, step, dtype, this, arguments, var=var):
            var = Scope({'start':start, 'stop':stop, 'step':step, 'dtype':dtype, 'this':this, 'arguments':arguments}, var)
            var.registers(['step', 'i', 'result', 'dtype', 'stop', 'start'])
            if PyJsStrictEq(var.get('arguments').get('length'),Js(1.0)):
                return var.get('arange')(Js(0.0), var.get('start'), Js(1.0), var.get('undefined'))
            else:
                if (PyJsStrictEq(var.get('arguments').get('length'),Js(2.0)) and var.get('_').callprop('isNumber', var.get('stop'))):
                    return var.get('arange')(var.get('start'), var.get('stop'), Js(1.0), var.get('undefined'))
                else:
                    if PyJsStrictEq(var.get('arguments').get('length'),Js(2.0)):
                        return var.get('arange')(Js(0.0), var.get('start'), Js(1.0), var.get('stop'))
                    else:
                        if (PyJsStrictEq(var.get('arguments').get('length'),Js(3.0)) and var.get('_').callprop('isNumber', var.get('step')).neg()):
                            return var.get('arange')(var.get('start'), var.get('stop'), Js(1.0), var.get('step'))
            var.put('result', Js([]))
            var.put('i', Js(0.0))
            while (var.get('start')<var.get('stop')):
                var.get('result').put((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)), var.get('start'))
                var.put('start', var.get('step'), '+')
            return var.get('NdArray').callprop('new', var.get('result'), var.get('dtype'))
        PyJsHoisted_arange_.func_name = 'arange'
        var.put('arange', PyJsHoisted_arange_)
        @Js
        def PyJsHoisted_zeros_(shape, dtype, this, arguments, var=var):
            var = Scope({'shape':shape, 'dtype':dtype, 'this':this, 'arguments':arguments}, var)
            var.registers(['shape', 's', 'T', 'dtype', 'arr'])
            if (var.get('_').callprop('isNumber', var.get('shape')) and (var.get('shape')>=Js(0.0))):
                var.put('shape', Js([var.get('shape')]))
            var.put('s', var.get('_').callprop('shapeSize', var.get('shape')))
            var.put('T', var.get('_').callprop('getType', var.get('dtype')))
            var.put('arr', var.get('NdArray').create(var.get('T').create(var.get('s')), var.get('shape')))
            if PyJsStrictEq(var.get('arr').get('dtype'),Js('array')):
                var.get('ops').callprop('assigns', var.get('arr').get('selection'), Js(0.0))
            return var.get('arr')
        PyJsHoisted_zeros_.func_name = 'zeros'
        var.put('zeros', PyJsHoisted_zeros_)
        @Js
        def PyJsHoisted_ones_(shape, dtype, this, arguments, var=var):
            var = Scope({'shape':shape, 'dtype':dtype, 'this':this, 'arguments':arguments}, var)
            var.registers(['shape', 's', 'T', 'dtype', 'arr'])
            if (var.get('_').callprop('isNumber', var.get('shape')) and (var.get('shape')>=Js(0.0))):
                var.put('shape', Js([var.get('shape')]))
            var.put('s', var.get('_').callprop('shapeSize', var.get('shape')))
            var.put('T', var.get('_').callprop('getType', var.get('dtype')))
            var.put('arr', var.get('NdArray').create(var.get('T').create(var.get('s')), var.get('shape')))
            var.get('ops').callprop('assigns', var.get('arr').get('selection'), Js(1.0))
            return var.get('arr')
        PyJsHoisted_ones_.func_name = 'ones'
        var.put('ones', PyJsHoisted_ones_)
        @Js
        def PyJsHoisted_empty_(shape, dtype, this, arguments, var=var):
            var = Scope({'shape':shape, 'dtype':dtype, 'this':this, 'arguments':arguments}, var)
            var.registers(['shape', 's', 'dtype', 'T'])
            if (var.get('_').callprop('isNumber', var.get('shape')) and (var.get('shape')>=Js(0.0))):
                var.put('shape', Js([var.get('shape')]))
            var.put('s', var.get('_').callprop('shapeSize', var.get('shape')))
            var.put('T', var.get('_').callprop('getType', var.get('dtype')))
            return var.get('NdArray').create(var.get('T').create(var.get('s')), var.get('shape'))
        PyJsHoisted_empty_.func_name = 'empty'
        var.put('empty', PyJsHoisted_empty_)
        @Js
        def PyJsHoisted_random_(shape, this, arguments, var=var):
            var = Scope({'shape':shape, 'this':this, 'arguments':arguments}, var)
            var.registers(['shape', 's', 'arr'])
            if PyJsStrictEq(var.get('arguments').get('length'),Js(0.0)):
                return var.get('NdArray').callprop('new', var.get('Math').callprop('random'))
            else:
                if PyJsStrictEq(var.get('arguments').get('length'),Js(1.0)):
                    var.put('shape', (Js([(var.get('shape')|Js(0.0))]) if var.get('_').callprop('isNumber', var.get('shape')) else var.get('shape')))
                else:
                    var.put('shape', Js([]).get('slice').callprop('call', var.get('arguments')))
            var.put('s', var.get('_').callprop('shapeSize', var.get('shape')))
            var.put('arr', var.get('NdArray').create(var.get('Float64Array').create(var.get('s')), var.get('shape')))
            var.get('ops').callprop('random', var.get('arr').get('selection'))
            return var.get('arr')
        PyJsHoisted_random_.func_name = 'random'
        var.put('random', PyJsHoisted_random_)
        @Js
        def PyJsHoisted_softmax_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['e', 'se', 'x'])
            var.put('e', var.get('NdArray').callprop('new', var.get('x')).callprop('exp'))
            var.put('se', var.get('e').callprop('sum'))
            var.get('ops').callprop('divseq', var.get('e').get('selection'), var.get('se'))
            return var.get('e')
        PyJsHoisted_softmax_.func_name = 'softmax'
        var.put('softmax', PyJsHoisted_softmax_)
        @Js
        def PyJsHoisted_sigmoid_(x, t, this, arguments, var=var):
            var = Scope({'x':x, 't':t, 'this':this, 'arguments':arguments}, var)
            var.registers(['t', 'x'])
            var.put('x', var.get('NdArray').callprop('new', var.get('x')).callprop('clone'))
            var.put('t', (var.get('t') or Js(1.0)))
            var.get('doSigmoid')(var.get('x').get('selection'), var.get('t'))
            return var.get('x')
        PyJsHoisted_sigmoid_.func_name = 'sigmoid'
        var.put('sigmoid', PyJsHoisted_sigmoid_)
        @Js
        def PyJsHoisted_clip_(x, min, max, this, arguments, var=var):
            var = Scope({'x':x, 'min':min, 'max':max, 'this':this, 'arguments':arguments}, var)
            var.registers(['max', 's', 'x', 'min'])
            if PyJsStrictEq(var.get('arguments').get('length'),Js(1.0)):
                var.put('min', Js(0.0))
                var.put('max', Js(1.0))
            else:
                if PyJsStrictEq(var.get('arguments').get('length'),Js(2.0)):
                    var.put('max', Js(1.0))
            var.put('s', (var.get('x').callprop('clone') if var.get('x').instanceof(var.get('NdArray')) else var.get('NdArray').callprop('new', var.get('x'))))
            var.get('doClip')(var.get('s').get('selection'), var.get('min'), var.get('max'))
            return var.get('s')
        PyJsHoisted_clip_.func_name = 'clip'
        var.put('clip', PyJsHoisted_clip_)
        @Js
        def PyJsHoisted_leakyRelu_(x, alpha, this, arguments, var=var):
            var = Scope({'x':x, 'alpha':alpha, 'this':this, 'arguments':arguments}, var)
            var.registers(['s', 'alpha', 'x'])
            var.put('alpha', (var.get('alpha') or Js(0.001)))
            var.put('s', (var.get('x').callprop('clone') if var.get('x').instanceof(var.get('NdArray')) else var.get('NdArray').callprop('new', var.get('x'))))
            var.get('doLeakyRelu')(var.get('s').get('selection'), var.get('alpha'))
            return var.get('s')
        PyJsHoisted_leakyRelu_.func_name = 'leakyRelu'
        var.put('leakyRelu', PyJsHoisted_leakyRelu_)
        @Js
        def PyJsHoisted_tanh_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['s', 'x'])
            var.put('s', (var.get('x').callprop('clone') if var.get('x').instanceof(var.get('NdArray')) else var.get('NdArray').callprop('new', var.get('x'))))
            var.get('doTanh')(var.get('s').get('selection'))
            return var.get('s')
        PyJsHoisted_tanh_.func_name = 'tanh'
        var.put('tanh', PyJsHoisted_tanh_)
        @Js
        def PyJsHoisted_abs_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['s', 'x'])
            var.put('s', (var.get('x').callprop('clone') if var.get('x').instanceof(var.get('NdArray')) else var.get('NdArray').callprop('new', var.get('x'))))
            var.get('ops').callprop('abseq', var.get('s').get('selection'))
            return var.get('s')
        PyJsHoisted_abs_.func_name = 'abs'
        var.put('abs', PyJsHoisted_abs_)
        @Js
        def PyJsHoisted_cos_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['s', 'x'])
            var.put('s', (var.get('x').callprop('clone') if var.get('x').instanceof(var.get('NdArray')) else var.get('NdArray').callprop('new', var.get('x'))))
            var.get('ops').callprop('coseq', var.get('s').get('selection'))
            return var.get('s')
        PyJsHoisted_cos_.func_name = 'cos'
        var.put('cos', PyJsHoisted_cos_)
        @Js
        def PyJsHoisted_arccos_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['s', 'x'])
            var.put('s', (var.get('x').callprop('clone') if var.get('x').instanceof(var.get('NdArray')) else var.get('NdArray').callprop('new', var.get('x'))))
            var.get('ops').callprop('acoseq', var.get('s').get('selection'))
            return var.get('s')
        PyJsHoisted_arccos_.func_name = 'arccos'
        var.put('arccos', PyJsHoisted_arccos_)
        @Js
        def PyJsHoisted_sin_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['s', 'x'])
            var.put('s', (var.get('x').callprop('clone') if var.get('x').instanceof(var.get('NdArray')) else var.get('NdArray').callprop('new', var.get('x'))))
            var.get('ops').callprop('sineq', var.get('s').get('selection'))
            return var.get('s')
        PyJsHoisted_sin_.func_name = 'sin'
        var.put('sin', PyJsHoisted_sin_)
        @Js
        def PyJsHoisted_arcsin_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['s', 'x'])
            var.put('s', (var.get('x').callprop('clone') if var.get('x').instanceof(var.get('NdArray')) else var.get('NdArray').callprop('new', var.get('x'))))
            var.get('ops').callprop('asineq', var.get('s').get('selection'))
            return var.get('s')
        PyJsHoisted_arcsin_.func_name = 'arcsin'
        var.put('arcsin', PyJsHoisted_arcsin_)
        @Js
        def PyJsHoisted_tan_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['s', 'x'])
            var.put('s', (var.get('x').callprop('clone') if var.get('x').instanceof(var.get('NdArray')) else var.get('NdArray').callprop('new', var.get('x'))))
            var.get('ops').callprop('taneq', var.get('s').get('selection'))
            return var.get('s')
        PyJsHoisted_tan_.func_name = 'tan'
        var.put('tan', PyJsHoisted_tan_)
        @Js
        def PyJsHoisted_arctan_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['s', 'x'])
            var.put('s', (var.get('x').callprop('clone') if var.get('x').instanceof(var.get('NdArray')) else var.get('NdArray').callprop('new', var.get('x'))))
            var.get('ops').callprop('ataneq', var.get('s').get('selection'))
            return var.get('s')
        PyJsHoisted_arctan_.func_name = 'arctan'
        var.put('arctan', PyJsHoisted_arctan_)
        @Js
        def PyJsHoisted_dot_(a, b, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'b'])
            return var.get('NdArray').callprop('new', var.get('a')).callprop('dot', var.get('b'))
        PyJsHoisted_dot_.func_name = 'dot'
        var.put('dot', PyJsHoisted_dot_)
        @Js
        def PyJsHoisted_concatenate_(arrays, this, arguments, var=var):
            var = Scope({'arrays':arrays, 'this':this, 'arguments':arguments}, var)
            var.registers(['m', 'rowV', 'mShape', 'i', 'arrays', 'aShape', 'rowI', 'row', 'a', 'colI'])
            if (var.get('arguments').get('length')>Js(1.0)):
                var.put('arrays', Js([]).get('slice').callprop('call', var.get('arguments')))
            pass
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('arrays').get('length')):
                try:
                    var.put('a', var.get('arrays').get(var.get('i')))
                    var.get('arrays').put(var.get('i'), (var.get('a').callprop('tolist') if var.get('a').instanceof(var.get('NdArray')) else (Js([var.get('a')]) if var.get('_').callprop('isNumber', var.get('a')) else var.get('a'))))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.put('m', var.get('arrays').get('0'))
            #for JS loop
            var.put('i', Js(1.0))
            while (var.get('i')<var.get('arrays').get('length')):
                try:
                    var.put('a', var.get('arrays').get(var.get('i')))
                    var.put('mShape', var.get('_').callprop('getShape', var.get('m')))
                    var.put('aShape', var.get('_').callprop('getShape', var.get('a')))
                    if PyJsStrictNeq(var.get('mShape').get('length'),var.get('aShape').get('length')):
                        PyJsTempException = JsToPyException(var.get('errors').get('ValueError').create(Js('all the input arrays must have same number of dimensions')))
                        raise PyJsTempException
                    else:
                        if (PyJsStrictEq(var.get('mShape').get('length'),Js(1.0)) and PyJsStrictEq(var.get('aShape').get('length'),Js(1.0))):
                            var.put('m', var.get('m').callprop('concat', var.get('a')))
                        else:
                            def PyJs_LONG_418_(var=var):
                                return ((((PyJsStrictEq(var.get('mShape').get('length'),Js(2.0)) and PyJsStrictEq(var.get('aShape').get('length'),Js(2.0))) and PyJsStrictEq(var.get('mShape').get('0'),var.get('aShape').get('0'))) or ((PyJsStrictEq(var.get('mShape').get('length'),Js(1.0)) and PyJsStrictEq(var.get('aShape').get('length'),Js(2.0))) and PyJsStrictEq(var.get('mShape').get('0'),var.get('aShape').get('0')))) or ((PyJsStrictEq(var.get('mShape').get('length'),Js(2.0)) and PyJsStrictEq(var.get('aShape').get('length'),Js(1.0))) and PyJsStrictEq(var.get('mShape').get('0'),var.get('aShape').get('0'))))
                            if PyJs_LONG_418_():
                                #for JS loop
                                var.put('row', Js(0.0))
                                while (var.get('row')<var.get('mShape').get('0')):
                                    try:
                                        var.get('m').put(var.get('row'), var.get('m').get(var.get('row')).callprop('concat', var.get('a').get(var.get('row'))))
                                    finally:
                                            (var.put('row',Js(var.get('row').to_number())+Js(1))-Js(1))
                            else:
                                def PyJs_LONG_419_(var=var):
                                    return ((((PyJsStrictEq(var.get('mShape').get('length'),Js(3.0)) and PyJsStrictEq(var.get('aShape').get('length'),Js(3.0))) and PyJsStrictEq(var.get('mShape').get('0'),var.get('aShape').get('0'))) and PyJsStrictEq(var.get('mShape').get('1'),var.get('aShape').get('1'))) or (((PyJsStrictEq(var.get('mShape').get('length'),Js(2.0)) and PyJsStrictEq(var.get('aShape').get('length'),Js(3.0))) and PyJsStrictEq(var.get('mShape').get('0'),var.get('aShape').get('0'))) and PyJsStrictEq(var.get('mShape').get('1'),var.get('aShape').get('1'))))
                                if (PyJs_LONG_419_() or (((PyJsStrictEq(var.get('mShape').get('length'),Js(3.0)) and PyJsStrictEq(var.get('aShape').get('length'),Js(2.0))) and PyJsStrictEq(var.get('mShape').get('0'),var.get('aShape').get('0'))) and PyJsStrictEq(var.get('mShape').get('1'),var.get('aShape').get('1')))):
                                    #for JS loop
                                    var.put('rowI', Js(0.0))
                                    while (var.get('rowI')<var.get('mShape').get('0')):
                                        try:
                                            var.put('rowV', var.get('Array').create(var.get('mShape').get('1')))
                                            #for JS loop
                                            var.put('colI', Js(0.0))
                                            while (var.get('colI')<var.get('mShape').get('1')):
                                                try:
                                                    var.get('rowV').put(var.get('colI'), var.get('m').get(var.get('rowI')).get(var.get('colI')).callprop('concat', var.get('a').get(var.get('rowI')).get(var.get('colI'))))
                                                finally:
                                                        (var.put('colI',Js(var.get('colI').to_number())+Js(1))-Js(1))
                                            var.get('m').put(var.get('rowI'), var.get('rowV'))
                                        finally:
                                                (var.put('rowI',Js(var.get('rowI').to_number())+Js(1))-Js(1))
                                else:
                                    PyJsTempException = JsToPyException(var.get('errors').get('ValueError').create(((((Js('cannot concatenate  "')+var.get('mShape'))+Js('" with "'))+var.get('aShape'))+Js('"'))))
                                    raise PyJsTempException
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('NdArray').callprop('new', var.get('m'), var.get('arrays').get('0').get('dtype'))
        PyJsHoisted_concatenate_.func_name = 'concatenate'
        var.put('concatenate', PyJsHoisted_concatenate_)
        @Js
        def PyJsHoisted_round_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return var.get('NdArray').callprop('new', var.get('x')).callprop('round')
        PyJsHoisted_round_.func_name = 'round'
        var.put('round', PyJsHoisted_round_)
        @Js
        def PyJsHoisted_convolve_(a, b, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'b'])
            return var.get('NdArray').callprop('new', var.get('a')).callprop('convolve', var.get('b'))
        PyJsHoisted_convolve_.func_name = 'convolve'
        var.put('convolve', PyJsHoisted_convolve_)
        @Js
        def PyJsHoisted_fftconvolve_(a, b, this, arguments, var=var):
            var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
            var.registers(['a', 'b'])
            return var.get('NdArray').callprop('new', var.get('a')).callprop('fftconvolve', var.get('b'))
        PyJsHoisted_fftconvolve_.func_name = 'fftconvolve'
        var.put('fftconvolve', PyJsHoisted_fftconvolve_)
        @Js
        def PyJsHoisted_fft_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['rPicker', 'iPicker', 'xShape', 'd', 'x'])
            var.put('x', (var.get('x').callprop('clone') if var.get('x').instanceof(var.get('NdArray')) else var.get('NdArray').callprop('new', var.get('x'))))
            var.put('xShape', var.get('x').get('shape'))
            var.put('d', var.get('xShape').get('length'))
            if PyJsStrictNeq(var.get('xShape').get((var.get('d')-Js(1.0))),Js(2.0)):
                PyJsTempException = JsToPyException(var.get('errors').get('ValueError').create(Js('expect last dimension of the array to have 2 values (for both real and imaginary part)')))
                raise PyJsTempException
            var.put('rPicker', var.get('Array').create(var.get('d')))
            var.put('iPicker', var.get('Array').create(var.get('d')))
            var.get('rPicker').put((var.get('d')-Js(1.0)), Js(0.0))
            var.get('iPicker').put((var.get('d')-Js(1.0)), Js(1.0))
            var.get('ndFFT')(Js(1.0), var.get('x').get('selection').get('pick').callprop('apply', var.get('x').get('selection'), var.get('rPicker')), var.get('x').get('selection').get('pick').callprop('apply', var.get('x').get('selection'), var.get('iPicker')))
            return var.get('x')
        PyJsHoisted_fft_.func_name = 'fft'
        var.put('fft', PyJsHoisted_fft_)
        @Js
        def PyJsHoisted_ifft_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['rPicker', 'iPicker', 'xShape', 'd', 'x'])
            var.put('x', (var.get('x').callprop('clone') if var.get('x').instanceof(var.get('NdArray')) else var.get('NdArray').callprop('new', var.get('x'))))
            var.put('xShape', var.get('x').get('shape'))
            var.put('d', var.get('xShape').get('length'))
            if PyJsStrictNeq(var.get('xShape').get((var.get('d')-Js(1.0))),Js(2.0)):
                PyJsTempException = JsToPyException(var.get('errors').get('ValueError').create(Js('expect last dimension of the array to have 2 values (for both real and imaginary part)')))
                raise PyJsTempException
            var.put('rPicker', var.get('Array').create(var.get('d')))
            var.put('iPicker', var.get('Array').create(var.get('d')))
            var.get('rPicker').put((var.get('d')-Js(1.0)), Js(0.0))
            var.get('iPicker').put((var.get('d')-Js(1.0)), Js(1.0))
            var.get('ndFFT')((-Js(1.0)), var.get('x').get('selection').get('pick').callprop('apply', var.get('x').get('selection'), var.get('rPicker')), var.get('x').get('selection').get('pick').callprop('apply', var.get('x').get('selection'), var.get('iPicker')))
            return var.get('x')
        PyJsHoisted_ifft_.func_name = 'ifft'
        var.put('ifft', PyJsHoisted_ifft_)
        @Js
        def PyJsHoisted_diag_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['x'])
            return var.get('NdArray').callprop('new', var.get('x')).callprop('diag')
        PyJsHoisted_diag_.func_name = 'diag'
        var.put('diag', PyJsHoisted_diag_)
        @Js
        def PyJsHoisted_identity_(n, dtype, this, arguments, var=var):
            var = Scope({'n':n, 'dtype':dtype, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'arr', 'n', 'dtype'])
            var.put('arr', var.get('zeros')(Js([var.get('n'), var.get('n')]), var.get('dtype')))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('n')):
                try:
                    var.get('arr').callprop('set', var.get('i'), var.get('i'), Js(1.0))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('arr')
        PyJsHoisted_identity_.func_name = 'identity'
        var.put('identity', PyJsHoisted_identity_)
        @Js
        def PyJsHoisted_stack_(arrays, axis, this, arguments, var=var):
            var = Scope({'arrays':arrays, 'axis':axis, 'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'axes', 'i', 'expectedShape', 'shape', 'arrays', 'd', 'j', 'axis', 'stacked'])
            var.put('axis', (var.get('axis') or Js(0.0)))
            if (var.get('arrays').neg() or PyJsStrictEq(var.get('arrays').get('length'),Js(0.0))):
                PyJsTempException = JsToPyException(var.get('errors').get('ValueError').create(Js('need at least one array to stack')))
                raise PyJsTempException
            @Js
            def PyJs_anonymous_420_(a, this, arguments, var=var):
                var = Scope({'a':a, 'this':this, 'arguments':arguments}, var)
                var.registers(['a'])
                return (var.get('a') if var.get('_').callprop('isNumber', var.get('a')) else var.get('NdArray').callprop('new', var.get('a')))
            PyJs_anonymous_420_._set_name('anonymous')
            var.put('arrays', var.get('arrays').callprop('map', PyJs_anonymous_420_))
            var.put('expectedShape', (var.get('arrays').get('0').get('shape') or Js([])))
            #for JS loop
            var.put('i', Js(1.0))
            while (var.get('i')<var.get('arrays').get('length')):
                try:
                    var.put('shape', (var.get('arrays').get(var.get('i')).get('shape') or Js([])))
                    var.put('len', var.get('Math').callprop('max', var.get('expectedShape').get('length'), var.get('shape').get('length')))
                    #for JS loop
                    var.put('j', Js(0.0))
                    while (var.get('j')<var.get('len')):
                        try:
                            if PyJsStrictNeq(var.get('expectedShape').get(var.get('j')),var.get('shape').get(var.get('j'))):
                                PyJsTempException = JsToPyException(var.get('errors').get('ValueError').create(Js('all input arrays must have the same shape')))
                                raise PyJsTempException
                        finally:
                                (var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            pass
            if PyJsStrictEq(var.get('expectedShape').get('length'),Js(0.0)):
                var.put('stacked', var.get('concatenate')(var.get('arrays')))
            else:
                var.put('stacked', var.get('zeros')(Js([var.get('arrays').get('length')]).callprop('concat', var.get('expectedShape'))))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('arrays').get('length')):
                    try:
                        var.get('stacked').callprop('pick', var.get('i')).callprop('assign', var.get('arrays').get(var.get('i')), Js(False))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            if var.get('axis'):
                if (var.get('axis')<Js(0.0)):
                    var.put('axis', (var.get('stacked').get('ndim')+var.get('axis')))
                var.put('d', var.get('stacked').get('ndim'))
                var.put('axes', var.get('Array').create(var.get('d')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('d')):
                    try:
                        var.get('axes').put(var.get('i'), ((var.get('i')+Js(1.0)) if (var.get('i')<var.get('axis')) else (Js(0.0) if PyJsStrictEq(var.get('i'),var.get('axis')) else var.get('i'))))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('stacked').callprop('transpose', var.get('axes'))
            return var.get('stacked')
        PyJsHoisted_stack_.func_name = 'stack'
        var.put('stack', PyJsHoisted_stack_)
        @Js
        def PyJsHoisted_flip_(m, axis, this, arguments, var=var):
            var = Scope({'m':m, 'axis':axis, 'this':this, 'arguments':arguments}, var)
            var.registers(['cleanaxis', 'indexer', 'axis', 'm'])
            var.put('m', var.get('NdArray').callprop('new', var.get('m')))
            var.put('indexer', var.get('ones')(var.get('m').get('ndim')).callprop('tolist'))
            var.put('cleanaxis', var.get('axis'))
            while (var.get('cleanaxis')<Js(0.0)):
                var.put('cleanaxis', var.get('m').get('ndim'), '+')
            if PyJsStrictEq(var.get('indexer').get(var.get('cleanaxis')),var.get('undefined')):
                PyJsTempException = JsToPyException(var.get('errors').get('ValueError').create(((((Js('axis=')+var.get('axis'))+Js('invalid for the '))+var.get('m').get('ndim'))+Js('-dimensional input array'))))
                raise PyJsTempException
            var.get('indexer').put(var.get('cleanaxis'), (-Js(1.0)))
            return var.get('m').get('step').callprop('apply', var.get('m'), var.get('indexer'))
        PyJsHoisted_flip_.func_name = 'flip'
        var.put('flip', PyJsHoisted_flip_)
        @Js
        def PyJsHoisted_rot90_(m, k, axes, this, arguments, var=var):
            var = Scope({'m':m, 'k':k, 'axes':axes, 'this':this, 'arguments':arguments}, var)
            var.registers(['m', 'axes', 'axesList', 'keep', 'k'])
            var.put('k', (var.get('k') or Js(1.0)))
            while (var.get('k')<Js(0.0)):
                var.put('k', Js(4.0), '+')
            var.put('k', (var.get('k')%Js(4.0)))
            var.put('m', var.get('NdArray').callprop('new', var.get('m')))
            var.put('axes', var.get('NdArray').callprop('new', (var.get('axes') or Js([Js(0.0), Js(1.0)]))))
            if (PyJsStrictNeq(var.get('axes').get('shape').get('length'),Js(1.0)) or PyJsStrictNeq(var.get('axes').get('shape').get('0'),Js(2.0))):
                PyJsTempException = JsToPyException(var.get('errors').get('ValueError').create(Js('len(axes) must be 2')))
                raise PyJsTempException
            var.put('axes', var.get('axes').callprop('tolist'))
            if (PyJsStrictEq(var.get('axes').get('0'),var.get('axes').get('1')) or PyJsStrictEq(var.get('abs')((var.get('axes').get('0')-var.get('axes').get('1'))),var.get('m').get('ndim'))):
                PyJsTempException = JsToPyException(var.get('errors').get('ValueError').create(Js('Axes must be different.')))
                raise PyJsTempException
            if PyJsStrictEq(var.get('k'),Js(0.0)):
                return var.get('m')
            if PyJsStrictEq(var.get('k'),Js(2.0)):
                return var.get('flip')(var.get('flip')(var.get('m'), var.get('axes').get('0')), var.get('axes').get('1'))
            var.put('axesList', var.get('arange')(var.get('m').get('ndim')).callprop('tolist'))
            var.put('keep', var.get('axesList').get(var.get('axes').get('0')))
            var.get('axesList').put(var.get('axes').get('0'), var.get('axesList').get(var.get('axes').get('1')))
            var.get('axesList').put(var.get('axes').get('1'), var.get('keep'))
            if PyJsStrictEq(var.get('k'),Js(1.0)):
                return var.get('transpose')(var.get('flip')(var.get('m'), var.get('axes').get('1')), var.get('axesList'))
            else:
                return var.get('flip')(var.get('transpose')(var.get('m'), var.get('axesList')), var.get('axes').get('1'))
        PyJsHoisted_rot90_.func_name = 'rot90'
        var.put('rot90', PyJsHoisted_rot90_)
        Js('use strict')
        var.put('ndarray', var.get('require')(Js('ndarray')))
        var.put('ops', var.get('require')(Js('ndarray-ops')))
        var.put('ndFFT', var.get('require')(Js('ndarray-fft')))
        var.put('CONF', var.get('require')(Js('./config')))
        var.put('DTYPES', var.get('require')(Js('./dtypes')))
        var.put('NdArray', var.get('require')(Js('./ndarray')))
        var.put('_', var.get('require')(Js('./utils')))
        var.put('errors', var.get('require')(Js('./errors')))
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        def PyJs_LONG_414_(var=var):
            return var.get('require')(Js('cwise/lib/wrapper'))(Js({'args':Js([Js('array'), Js('scalar')]),'pre':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'body':Js({'body':Js('{_inline_1_arg0_=_inline_1_arg0_<-30?0:_inline_1_arg0_>30?1:1/(1+Math.exp(-1*_inline_1_arg1_*_inline_1_arg0_))}'),'args':Js([Js({'name':Js('_inline_1_arg0_'),'lvalue':Js(True),'rvalue':Js(True),'count':Js(4.0)}), Js({'name':Js('_inline_1_arg1_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)})]),'thisVars':Js([]),'localVars':Js([])}),'post':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'debug':Js(False),'funcName':Js('sigmoidCwise'),'blockSize':Js(64.0)}))
        var.put('doSigmoid', PyJs_LONG_414_())
        pass
        def PyJs_LONG_415_(var=var):
            return var.get('require')(Js('cwise/lib/wrapper'))(Js({'args':Js([Js('array'), Js('scalar'), Js('scalar')]),'pre':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'body':Js({'body':Js('{_inline_4_arg0_=Math.min(Math.max(_inline_4_arg1_,_inline_4_arg0_),_inline_4_arg2_)}'),'args':Js([Js({'name':Js('_inline_4_arg0_'),'lvalue':Js(True),'rvalue':Js(True),'count':Js(2.0)}), Js({'name':Js('_inline_4_arg1_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_4_arg2_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)})]),'thisVars':Js([]),'localVars':Js([])}),'post':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'debug':Js(False),'funcName':Js('clipCwise'),'blockSize':Js(64.0)}))
        var.put('doClip', PyJs_LONG_415_())
        pass
        def PyJs_LONG_416_(var=var):
            return var.get('require')(Js('cwise/lib/wrapper'))(Js({'args':Js([Js('array'), Js('scalar')]),'pre':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'body':Js({'body':Js('{_inline_7_arg0_=Math.max(_inline_7_arg1_*_inline_7_arg0_,_inline_7_arg0_)}'),'args':Js([Js({'name':Js('_inline_7_arg0_'),'lvalue':Js(True),'rvalue':Js(True),'count':Js(3.0)}), Js({'name':Js('_inline_7_arg1_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)})]),'thisVars':Js([]),'localVars':Js([])}),'post':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'debug':Js(False),'funcName':Js('leakyReluCwise'),'blockSize':Js(64.0)}))
        var.put('doLeakyRelu', PyJs_LONG_416_())
        pass
        def PyJs_LONG_417_(var=var):
            return var.get('require')(Js('cwise/lib/wrapper'))(Js({'args':Js([Js('array')]),'pre':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'body':Js({'body':Js('{_inline_10_arg0_=(Math.exp(2*_inline_10_arg0_)-1)/(Math.exp(2*_inline_10_arg0_)+1)}'),'args':Js([Js({'name':Js('_inline_10_arg0_'),'lvalue':Js(True),'rvalue':Js(True),'count':Js(3.0)})]),'thisVars':Js([]),'localVars':Js([])}),'post':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'debug':Js(False),'funcName':Js('tanhCwise'),'blockSize':Js(64.0)}))
        var.put('doTanh', PyJs_LONG_417_())
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        def PyJs_LONG_429_(var=var):
            @Js
            def PyJs_int8_421_(array, this, arguments, var=var):
                var = Scope({'array':array, 'this':this, 'arguments':arguments, 'int8':PyJs_int8_421_}, var)
                var.registers(['array'])
                return var.get('NdArray').callprop('new', var.get('array'), Js('int8'))
            PyJs_int8_421_._set_name('int8')
            @Js
            def PyJs_uint8_422_(array, this, arguments, var=var):
                var = Scope({'array':array, 'this':this, 'arguments':arguments, 'uint8':PyJs_uint8_422_}, var)
                var.registers(['array'])
                return var.get('NdArray').callprop('new', var.get('array'), Js('uint8'))
            PyJs_uint8_422_._set_name('uint8')
            @Js
            def PyJs_int16_423_(array, this, arguments, var=var):
                var = Scope({'array':array, 'this':this, 'arguments':arguments, 'int16':PyJs_int16_423_}, var)
                var.registers(['array'])
                return var.get('NdArray').callprop('new', var.get('array'), Js('int16'))
            PyJs_int16_423_._set_name('int16')
            @Js
            def PyJs_uint16_424_(array, this, arguments, var=var):
                var = Scope({'array':array, 'this':this, 'arguments':arguments, 'uint16':PyJs_uint16_424_}, var)
                var.registers(['array'])
                return var.get('NdArray').callprop('new', var.get('array'), Js('uint16'))
            PyJs_uint16_424_._set_name('uint16')
            @Js
            def PyJs_int32_425_(array, this, arguments, var=var):
                var = Scope({'array':array, 'this':this, 'arguments':arguments, 'int32':PyJs_int32_425_}, var)
                var.registers(['array'])
                return var.get('NdArray').callprop('new', var.get('array'), Js('int32'))
            PyJs_int32_425_._set_name('int32')
            @Js
            def PyJs_uint32_426_(array, this, arguments, var=var):
                var = Scope({'array':array, 'this':this, 'arguments':arguments, 'uint32':PyJs_uint32_426_}, var)
                var.registers(['array'])
                return var.get('NdArray').callprop('new', var.get('array'), Js('uint32'))
            PyJs_uint32_426_._set_name('uint32')
            @Js
            def PyJs_float32_427_(array, this, arguments, var=var):
                var = Scope({'array':array, 'this':this, 'arguments':arguments, 'float32':PyJs_float32_427_}, var)
                var.registers(['array'])
                return var.get('NdArray').callprop('new', var.get('array'), Js('float32'))
            PyJs_float32_427_._set_name('float32')
            @Js
            def PyJs_float64_428_(array, this, arguments, var=var):
                var = Scope({'array':array, 'this':this, 'arguments':arguments, 'float64':PyJs_float64_428_}, var)
                var.registers(['array'])
                return var.get('NdArray').callprop('new', var.get('array'), Js('float64'))
            PyJs_float64_428_._set_name('float64')
            return var.get('module').put('exports', Js({'config':var.get('CONF'),'dtypes':var.get('DTYPES'),'NdArray':var.get('NdArray'),'ndarray':var.get('ndarray'),'array':var.get('NdArray').get('new'),'arange':var.get('arange'),'reshape':var.get('reshape'),'zeros':var.get('zeros'),'ones':var.get('ones'),'empty':var.get('empty'),'flatten':var.get('flatten'),'flip':var.get('flip'),'random':var.get('random'),'softmax':var.get('softmax'),'sigmoid':var.get('sigmoid'),'leakyRelu':var.get('leakyRelu'),'abs':var.get('abs'),'arccos':var.get('arccos'),'arcsin':var.get('arcsin'),'arctan':var.get('arctan'),'cos':var.get('cos'),'sin':var.get('sin'),'tan':var.get('tan'),'tanh':var.get('tanh'),'clip':var.get('clip'),'exp':var.get('exp'),'log':var.get('log'),'sqrt':var.get('sqrt'),'power':var.get('power'),'sum':var.get('sum'),'mean':var.get('mean'),'std':var.get('std'),'dot':var.get('dot'),'add':var.get('add'),'subtract':var.get('subtract'),'multiply':var.get('multiply'),'divide':var.get('divide'),'negative':var.get('negative'),'equal':var.get('equal'),'max':var.get('max'),'min':var.get('min'),'mod':var.get('mod'),'remainder':var.get('mod'),'concatenate':var.get('concatenate'),'transpose':var.get('transpose'),'errors':var.get('errors'),'broadcast':var.get('broadcast'),'round':var.get('round'),'convolve':var.get('convolve'),'fftconvolve':var.get('fftconvolve'),'fft':var.get('fft'),'ifft':var.get('ifft'),'diag':var.get('diag'),'identity':var.get('identity'),'stack':var.get('stack'),'rot90':var.get('rot90'),'int8':PyJs_int8_421_,'uint8':PyJs_uint8_422_,'int16':PyJs_int16_423_,'uint16':PyJs_uint16_424_,'int32':PyJs_int32_425_,'uint32':PyJs_uint32_426_,'float32':PyJs_float32_427_,'float64':PyJs_float64_428_,'images':var.get('require')(Js('./images'))}))
        PyJs_LONG_429_()
    PyJs_anonymous_413_._set_name('anonymous')
    @Js
    def PyJs_anonymous_430_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['doUnpack', 'NdArray', 'CONF', 'doConvolve5x5', 'createArray', 'errors', 'ndFFT', 'doConvolve3x3', 'exports', 'gemm', 'require', 'ndPool', 'initNativeArray', 'formatNumber', 'unpackArray', 'module', 'ops', '_', 'ndarray', 'doConjMuleq'])
        @Js
        def PyJsHoisted_createArray_(arr, dtype, this, arguments, var=var):
            var = Scope({'arr':arr, 'dtype':dtype, 'this':this, 'arguments':arguments}, var)
            var.registers(['shape', 'arr', 'dtype', 'T'])
            if var.get('arr').instanceof(var.get('NdArray')):
                return var.get('arr')
            var.put('T', var.get('_').callprop('getType', var.get('dtype')))
            if var.get('_').callprop('isNumber', var.get('arr')):
                if PyJsStrictNeq(var.get('T'),var.get('Array')):
                    return var.get('NdArray').create(var.get('T').create(Js([var.get('arr')])), Js([Js(1.0)]))
                else:
                    return var.get('NdArray').create(Js([var.get('arr')]), Js([Js(1.0)]))
            var.put('shape', var.get('_').callprop('getShape', var.get('arr')))
            if (var.get('shape').get('length')>Js(1.0)):
                var.put('arr', var.get('_').callprop('flatten', var.get('arr'), Js(True)))
            if var.get('arr').instanceof(var.get('T')).neg():
                var.put('arr', var.get('T').create(var.get('arr')))
            return var.get('NdArray').create(var.get('arr'), var.get('shape'))
        PyJsHoisted_createArray_.func_name = 'createArray'
        var.put('createArray', PyJsHoisted_createArray_)
        @Js
        def PyJsHoisted_initNativeArray_(shape, i, this, arguments, var=var):
            var = Scope({'shape':shape, 'i':i, 'this':this, 'arguments':arguments}, var)
            var.registers(['shape', 'i', 'c', 'result', 'j'])
            var.put('i', (var.get('i') or Js(0.0)))
            var.put('c', (var.get('shape').get(var.get('i'))|Js(0.0)))
            if (var.get('c')<=Js(0.0)):
                return Js([])
            var.put('result', var.get('Array').create(var.get('c')))
            pass
            if PyJsStrictEq(var.get('i'),(var.get('shape').get('length')-Js(1.0))):
                #for JS loop
                var.put('j', Js(0.0))
                while (var.get('j')<var.get('c')):
                    try:
                        var.get('result').put(var.get('j'), Js(0.0))
                    finally:
                            var.put('j',Js(var.get('j').to_number())+Js(1))
            else:
                #for JS loop
                var.put('j', Js(0.0))
                while (var.get('j')<var.get('c')):
                    try:
                        var.get('result').put(var.get('j'), var.get('initNativeArray')(var.get('shape'), (var.get('i')+Js(1.0))))
                    finally:
                            var.put('j',Js(var.get('j').to_number())+Js(1))
            return var.get('result')
        PyJsHoisted_initNativeArray_.func_name = 'initNativeArray'
        var.put('initNativeArray', PyJsHoisted_initNativeArray_)
        @Js
        def PyJsHoisted_unpackArray_(arr, this, arguments, var=var):
            var = Scope({'arr':arr, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'arr'])
            var.put('result', var.get('initNativeArray')(var.get('arr').get('shape'), Js(0.0)))
            var.get('doUnpack')(var.get('arr'), var.get('result'))
            return var.get('result')
        PyJsHoisted_unpackArray_.func_name = 'unpackArray'
        var.put('unpackArray', PyJsHoisted_unpackArray_)
        @Js
        def PyJsHoisted_formatNumber_(v, this, arguments, var=var):
            var = Scope({'v':v, 'this':this, 'arguments':arguments}, var)
            var.registers(['v'])
            return var.get('String')(var.get('Number')((var.get('v') or Js(0.0)).callprop('toFixed', var.get('CONF').get('nFloatingValues'))))
        PyJsHoisted_formatNumber_.func_name = 'formatNumber'
        var.put('formatNumber', PyJsHoisted_formatNumber_)
        Js('use strict')
        var.put('ndarray', var.get('require')(Js('ndarray')))
        var.put('ops', var.get('require')(Js('ndarray-ops')))
        var.put('gemm', var.get('require')(Js('ndarray-gemm')))
        var.put('ndFFT', var.get('require')(Js('ndarray-fft')))
        var.put('ndPool', var.get('require')(Js('typedarray-pool')))
        var.put('CONF', var.get('require')(Js('./config')))
        var.put('errors', var.get('require')(Js('./errors')))
        var.put('_', var.get('require')(Js('./utils')))
        @Js
        def PyJs_NdArray_431_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'NdArray':PyJs_NdArray_431_}, var)
            var.registers([])
            if PyJsStrictEq(var.get('arguments').get('length'),Js(1.0)):
                var.get(u"this").put('selection', var.get('arguments').get('0'))
            else:
                if PyJsStrictEq(var.get('arguments').get('length'),Js(0.0)):
                    PyJsTempException = JsToPyException(var.get('errors').get('ValueError').create(Js("Required argument 'data' not found")))
                    raise PyJsTempException
                else:
                    var.get(u"this").put('selection', var.get('ndarray').callprop('apply', var.get(u"null"), var.get('arguments')))
            @Js
            def PyJs_anonymous_432_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get(u"this").get('selection').get('size')
            PyJs_anonymous_432_._set_name('anonymous')
            var.get('Object').callprop('defineProperty', var.get(u"this"), Js('size'), Js({'get':PyJs_anonymous_432_.callprop('bind', var.get(u"this"))}))
            @Js
            def PyJs_anonymous_433_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get(u"this").get('selection').get('shape')
            PyJs_anonymous_433_._set_name('anonymous')
            var.get('Object').callprop('defineProperty', var.get(u"this"), Js('shape'), Js({'get':PyJs_anonymous_433_.callprop('bind', var.get(u"this"))}))
            @Js
            def PyJs_anonymous_434_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get(u"this").get('selection').get('shape').get('length')
            PyJs_anonymous_434_._set_name('anonymous')
            var.get('Object').callprop('defineProperty', var.get(u"this"), Js('ndim'), Js({'get':PyJs_anonymous_434_.callprop('bind', var.get(u"this"))}))
            @Js
            def PyJs_anonymous_435_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get(u"this").get('selection').get('dtype')
            PyJs_anonymous_435_._set_name('anonymous')
            @Js
            def PyJs_anonymous_436_(dtype, this, arguments, var=var):
                var = Scope({'dtype':dtype, 'this':this, 'arguments':arguments}, var)
                var.registers(['dtype', 'T'])
                var.put('T', var.get('_').callprop('getType', var.get('dtype')))
                if PyJsStrictNeq(var.get('T'),var.get('_').callprop('getType', var.get(u"this").get('dtype'))):
                    var.get(u"this").put('selection', var.get('ndarray')(var.get('T').create(var.get(u"this").get('selection').get('data')), var.get(u"this").get('selection').get('shape'), var.get(u"this").get('selection').get('stride'), var.get(u"this").get('selection').get('offset')))
            PyJs_anonymous_436_._set_name('anonymous')
            var.get('Object').callprop('defineProperty', var.get(u"this"), Js('dtype'), Js({'get':PyJs_anonymous_435_.callprop('bind', var.get(u"this")),'set':PyJs_anonymous_436_.callprop('bind', var.get(u"this"))}))
            @Js
            def PyJs_anonymous_437_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get(u"this").callprop('transpose')
            PyJs_anonymous_437_._set_name('anonymous')
            var.get('Object').callprop('defineProperty', var.get(u"this"), Js('T'), Js({'get':PyJs_anonymous_437_.callprop('bind', var.get(u"this"))}))
        PyJs_NdArray_431_._set_name('NdArray')
        var.put('NdArray', PyJs_NdArray_431_)
        @Js
        def PyJs_anonymous_438_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'n'])
            var.put('n', var.get('arguments').get('length'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('n')):
                try:
                    if (var.get('arguments').get(var.get('i'))<Js(0.0)):
                        var.get('arguments').put(var.get('i'), var.get(u"this").get('shape').get(var.get('i')), '+')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get(u"this").get('selection').get('get').callprop('apply', var.get(u"this").get('selection'), var.get('arguments'))
        PyJs_anonymous_438_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('get', PyJs_anonymous_438_)
        @Js
        def PyJs_anonymous_439_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get(u"this").get('selection').get('set').callprop('apply', var.get(u"this").get('selection'), var.get('arguments'))
        PyJs_anonymous_439_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('set', PyJs_anonymous_439_)
        @Js
        def PyJs_anonymous_440_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['step', 'arg', 'i', 's', 'hi', 'shi', 'tShape', 'slo', 'd', 'sstep', 'start', 'end', 'lo'])
            var.put('d', var.get(u"this").get('ndim'))
            var.put('hi', var.get('Array').create(var.get('d')))
            var.put('lo', var.get('Array').create(var.get('d')))
            var.put('step', var.get('Array').create(var.get('d')))
            var.put('tShape', var.get(u"this").get('shape'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('d')):
                try:
                    var.put('arg', var.get('arguments').get(var.get('i')))
                    if PyJsStrictEq(var.get('arg',throw=False).typeof(),Js('undefined')):
                        break
                    if PyJsStrictEq(var.get('arg'),var.get(u"null")):
                        continue
                    if var.get('_').callprop('isNumber', var.get('arg')):
                        var.get('lo').put(var.get('i'), ((var.get('arg')+var.get('tShape').get(var.get('i'))) if (var.get('arg')<Js(0.0)) else var.get('arg')))
                        var.get('hi').put(var.get('i'), var.get(u"null"))
                        var.get('step').put(var.get('i'), Js(1.0))
                    else:
                        if ((PyJsStrictEq(var.get('arg').get('length'),Js(4.0)) and PyJsStrictEq(var.get('arg').get('1'),var.get(u"null"))) and PyJsStrictEq(var.get('arg').get('2'),var.get(u"null"))):
                            var.put('s', ((var.get('arg').get('0')+var.get('tShape').get(var.get('i'))) if (var.get('arg').get('0')<Js(0.0)) else var.get('arg').get('0')))
                            var.get('lo').put(var.get('i'), var.get('s'))
                            var.get('hi').put(var.get('i'), var.get(u"null"))
                            var.get('step').put(var.get('i'), (var.get('arg').get('3') or Js(1.0)))
                        else:
                            var.put('start', ((var.get('arg').get('0')+var.get('tShape').get(var.get('i'))) if (var.get('arg').get('0')<Js(0.0)) else var.get('arg').get('0')))
                            var.put('end', ((var.get('arg').get('1')+var.get('tShape').get(var.get('i'))) if (var.get('arg').get('1')<Js(0.0)) else var.get('arg').get('1')))
                            var.get('lo').put(var.get('i'), (var.get('start') if var.get('end') else Js(0.0)))
                            var.get('hi').put(var.get('i'), ((var.get('end')-var.get('start')) if var.get('end') else var.get('start')))
                            var.get('step').put(var.get('i'), (var.get('arg').get('2') or Js(1.0)))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.put('slo', var.get(u"this").get('selection').get('lo').callprop('apply', var.get(u"this").get('selection'), var.get('lo')))
            var.put('shi', var.get('slo').get('hi').callprop('apply', var.get('slo'), var.get('hi')))
            var.put('sstep', var.get('shi').get('step').callprop('apply', var.get('shi'), var.get('step')))
            return var.get('NdArray').create(var.get('sstep'))
        PyJs_anonymous_440_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('slice', PyJs_anonymous_440_)
        @Js
        def PyJs_anonymous_441_(axis, this, arguments, var=var):
            var = Scope({'axis':axis, 'this':this, 'arguments':arguments}, var)
            var.registers(['axis'])
            return var.get('NdArray').create(var.get(u"this").get('selection').get('pick').callprop('apply', var.get(u"this").get('selection'), var.get('arguments')))
        PyJs_anonymous_441_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('pick', PyJs_anonymous_441_)
        @Js
        def PyJs_anonymous_442_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('NdArray').create(var.get(u"this").get('selection').get('lo').callprop('apply', var.get(u"this").get('selection'), var.get('arguments')))
        PyJs_anonymous_442_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('lo', PyJs_anonymous_442_)
        @Js
        def PyJs_anonymous_443_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('NdArray').create(var.get(u"this").get('selection').get('hi').callprop('apply', var.get(u"this").get('selection'), var.get('arguments')))
        PyJs_anonymous_443_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('hi', PyJs_anonymous_443_)
        @Js
        def PyJs_anonymous_444_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('NdArray').create(var.get(u"this").get('selection').get('step').callprop('apply', var.get(u"this").get('selection'), var.get('arguments')))
        PyJs_anonymous_444_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('step', PyJs_anonymous_444_)
        @Js
        def PyJs_anonymous_445_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['arr', 'T'])
            if PyJsStrictEq(var.get(u"this").get('ndim'),Js(1.0)):
                return var.get('NdArray').create(var.get(u"this").get('selection'))
            var.put('T', var.get('_').callprop('getType', var.get(u"this").get('dtype')))
            var.put('arr', var.get('_').callprop('flatten', var.get(u"this").callprop('tolist'), Js(True)))
            if var.get('arr').instanceof(var.get('T')).neg():
                var.put('arr', var.get('T').create(var.get('arr')))
            return var.get('NdArray').create(var.get('arr'), Js([var.get(u"this").get('size')]))
        PyJs_anonymous_445_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('flatten', PyJs_anonymous_445_)
        @Js
        def PyJs_anonymous_446_(shape, this, arguments, var=var):
            var = Scope({'shape':shape, 'this':this, 'arguments':arguments}, var)
            var.registers(['selfDim', 'selfStride', 'i', 'stride', 'offset', 'selfShape', 'shape', 'selfOffset', 'd', 'sameShapes', 'currentShapeSize', 'sz', 'areCompatible', 'minDim'])
            if PyJsStrictEq(var.get('arguments').get('length'),Js(0.0)):
                PyJsTempException = JsToPyException(var.get('errors').get('ValueError').create(Js('function takes at least one argument (0 given)')))
                raise PyJsTempException
            if ((PyJsStrictEq(var.get('arguments').get('length'),Js(1.0)) and var.get('_').callprop('isNumber', var.get('shape'))) and PyJsStrictEq(var.get('shape'),(-Js(1.0)))):
                var.put('shape', Js([var.get('_').callprop('shapeSize', var.get(u"this").get('shape'))]))
            if (PyJsStrictEq(var.get('arguments').get('length'),Js(1.0)) and var.get('_').callprop('isNumber', var.get('shape'))):
                var.put('shape', Js([var.get('shape')]))
            if (var.get('arguments').get('length')>Js(1.0)):
                var.put('shape', Js([]).get('slice').callprop('call', var.get('arguments')))
            @Js
            def PyJs_anonymous_447_(s, this, arguments, var=var):
                var = Scope({'s':s, 'this':this, 'arguments':arguments}, var)
                var.registers(['s'])
                return PyJsStrictEq(var.get('s'),(-Js(1.0)))
            PyJs_anonymous_447_._set_name('anonymous')
            if (var.get('shape').callprop('filter', PyJs_anonymous_447_).get('length')>Js(1.0)):
                PyJsTempException = JsToPyException(var.get('errors').get('ValueError').create(Js('can only specify one unknown dimension')))
                raise PyJsTempException
            var.put('currentShapeSize', var.get('_').callprop('shapeSize', var.get('shape')))
            @Js
            def PyJs_anonymous_448_(s, this, arguments, var=var):
                var = Scope({'s':s, 'this':this, 'arguments':arguments}, var)
                var.registers(['s'])
                return ((((-Js(1.0))*var.get(u"this").get('size'))/var.get('currentShapeSize')) if PyJsStrictEq(var.get('s'),(-Js(1.0))) else var.get('s'))
            PyJs_anonymous_448_._set_name('anonymous')
            var.put('shape', var.get('shape').callprop('map', PyJs_anonymous_448_.callprop('bind', var.get(u"this"))))
            if PyJsStrictNeq(var.get(u"this").get('size'),var.get('_').callprop('shapeSize', var.get('shape'))):
                PyJsTempException = JsToPyException(var.get('errors').get('ValueError').create(Js('total size of new array must be unchanged')))
                raise PyJsTempException
            var.put('selfShape', var.get(u"this").get('selection').get('shape'))
            var.put('selfOffset', var.get(u"this").get('selection').get('offset'))
            var.put('selfStride', var.get(u"this").get('selection').get('stride'))
            var.put('selfDim', var.get('selfShape').get('length'))
            var.put('d', var.get('shape').get('length'))
            pass
            pass
            pass
            pass
            if PyJsStrictEq(var.get('selfDim'),var.get('d')):
                var.put('sameShapes', Js(True))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('d')):
                    try:
                        if PyJsStrictNeq(var.get('selfShape').get(var.get('i')),var.get('shape').get(var.get('i'))):
                            var.put('sameShapes', Js(False))
                            break
                    finally:
                            var.put('i',Js(var.get('i').to_number())+Js(1))
                if var.get('sameShapes'):
                    return var.get('NdArray').create(var.get(u"this").get('selection').get('data'), var.get('selfShape'), var.get('selfStride'), var.get('selfOffset'))
            else:
                if PyJsStrictEq(var.get('selfDim'),Js(1.0)):
                    var.put('stride', var.get('Array').create(var.get('d')))
                    #for JS loop
                    PyJsComma(var.put('i', (var.get('d')-Js(1.0))),var.put('sz', Js(1.0)))
                    while (var.get('i')>=Js(0.0)):
                        try:
                            var.get('stride').put(var.get('i'), var.get('sz'))
                            var.put('sz', var.get('shape').get(var.get('i')), '*')
                        finally:
                                var.put('i',Js(var.get('i').to_number())-Js(1))
                    var.put('offset', var.get('selfOffset'))
                    #for JS loop
                    var.put('i', Js(0.0))
                    while (var.get('i')<var.get('d')):
                        try:
                            if (var.get('stride').get(var.get('i'))<Js(0.0)):
                                var.put('offset', ((var.get('shape').get(var.get('i'))-Js(1.0))*var.get('stride').get(var.get('i'))), '-')
                        finally:
                                var.put('i',Js(var.get('i').to_number())+Js(1))
                    return var.get('NdArray').create(var.get(u"this").get('selection').get('data'), var.get('shape'), var.get('stride'), var.get('offset'))
            var.put('minDim', var.get('Math').callprop('min', var.get('selfDim'), var.get('d')))
            var.put('areCompatible', Js(True))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('minDim')):
                try:
                    if PyJsStrictNeq(var.get('selfShape').get(var.get('i')),var.get('shape').get(var.get('i'))):
                        var.put('areCompatible', Js(False))
                        break
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            if var.get('areCompatible'):
                var.put('stride', var.get('Array').create(var.get('d')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('d')):
                    try:
                        var.get('stride').put(var.get('i'), (var.get('selfStride').get(var.get('i')) or Js(1.0)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.put('offset', var.get('selfOffset'))
                return var.get('NdArray').create(var.get(u"this").get('selection').get('data'), var.get('shape'), var.get('stride'), var.get('offset'))
            return var.get(u"this").callprop('flatten').callprop('reshape', var.get('shape'))
        PyJs_anonymous_446_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('reshape', PyJs_anonymous_446_)
        @Js
        def PyJs_anonymous_449_(axes, this, arguments, var=var):
            var = Scope({'axes':axes, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'd', 'axes'])
            if PyJsStrictEq(var.get('arguments').get('length'),Js(0.0)):
                var.put('d', var.get(u"this").get('ndim'))
                var.put('axes', var.get('Array').create(var.get('d')))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('d')):
                    try:
                        var.get('axes').put(var.get('i'), ((var.get('d')-var.get('i'))-Js(1.0)))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            else:
                if (var.get('arguments').get('length')>Js(1.0)):
                    var.put('axes', var.get('arguments'))
            return var.get('NdArray').create(var.get(u"this").get('selection').get('transpose').callprop('apply', var.get(u"this").get('selection'), var.get('axes')))
        PyJs_anonymous_449_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('transpose', PyJs_anonymous_449_)
        @Js
        def PyJs_anonymous_450_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['xShape', 'c', 'tShape', 'T', 'x'])
            var.put('x', (var.get('x') if var.get('x').instanceof(var.get('NdArray')) else var.get('createArray')(var.get('x'), var.get(u"this").get('dtype'))))
            var.put('tShape', var.get(u"this").get('shape'))
            var.put('xShape', var.get('x').get('shape'))
            if ((PyJsStrictEq(var.get('tShape').get('length'),Js(2.0)) and PyJsStrictEq(var.get('xShape').get('length'),Js(2.0))) and PyJsStrictEq(var.get('tShape').get('1'),var.get('xShape').get('0'))):
                var.put('T', var.get('_').callprop('getType', var.get(u"this").get('dtype')))
                var.put('c', var.get('NdArray').create(var.get('T').create((var.get('tShape').get('0')*var.get('xShape').get('1'))), Js([var.get('tShape').get('0'), var.get('xShape').get('1')])))
                var.get('gemm')(var.get('c').get('selection'), var.get(u"this").get('selection'), var.get('x').get('selection'))
                return var.get('c')
            else:
                if ((PyJsStrictEq(var.get('tShape').get('length'),Js(1.0)) and PyJsStrictEq(var.get('xShape').get('length'),Js(2.0))) and PyJsStrictEq(var.get('tShape').get('0'),var.get('xShape').get('0'))):
                    return var.get(u"this").callprop('reshape', Js([var.get('tShape').get('0'), Js(1.0)])).get('T').callprop('dot', var.get('x')).callprop('reshape', var.get('xShape').get('1'))
                else:
                    if ((PyJsStrictEq(var.get('tShape').get('length'),Js(2.0)) and PyJsStrictEq(var.get('xShape').get('length'),Js(1.0))) and PyJsStrictEq(var.get('tShape').get('1'),var.get('xShape').get('0'))):
                        return var.get(u"this").callprop('dot', var.get('x').callprop('reshape', Js([var.get('xShape').get('0'), Js(1.0)]))).callprop('reshape', var.get('tShape').get('0'))
                    else:
                        if ((PyJsStrictEq(var.get('tShape').get('length'),Js(1.0)) and PyJsStrictEq(var.get('xShape').get('length'),Js(1.0))) and PyJsStrictEq(var.get('tShape').get('0'),var.get('xShape').get('0'))):
                            return var.get(u"this").callprop('reshape', Js([var.get('tShape').get('0'), Js(1.0)])).get('T').callprop('dot', var.get('x').callprop('reshape', Js([var.get('xShape').get('0'), Js(1.0)]))).callprop('reshape', Js([Js(1.0)]))
                        else:
                            PyJsTempException = JsToPyException(var.get('errors').get('ValueError').create(Js('cannot compute the matrix product of given arrays')))
                            raise PyJsTempException
        PyJs_anonymous_450_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('dot', PyJs_anonymous_450_)
        @Js
        def PyJs_anonymous_451_(x, copy, this, arguments, var=var):
            var = Scope({'x':x, 'copy':copy, 'this':this, 'arguments':arguments}, var)
            var.registers(['arr', 'copy', 'x'])
            if PyJsStrictEq(var.get('arguments').get('length'),Js(1.0)):
                var.put('copy', Js(True))
            var.put('arr', (var.get(u"this").callprop('clone') if var.get('copy') else var.get(u"this")))
            if var.get('_').callprop('isNumber', var.get('x')):
                var.get('ops').callprop('assigns', var.get('arr').get('selection'), var.get('x'))
                return var.get('arr')
            var.put('x', var.get('createArray')(var.get('x'), var.get(u"this").get('dtype')))
            var.get('ops').callprop('assign', var.get('arr').get('selection'), var.get('x').get('selection'))
            return var.get('arr')
        PyJs_anonymous_451_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('assign', PyJs_anonymous_451_)
        @Js
        def PyJs_anonymous_452_(x, copy, this, arguments, var=var):
            var = Scope({'x':x, 'copy':copy, 'this':this, 'arguments':arguments}, var)
            var.registers(['arr', 'copy', 'x'])
            if PyJsStrictEq(var.get('arguments').get('length'),Js(1.0)):
                var.put('copy', Js(True))
            var.put('arr', (var.get(u"this").callprop('clone') if var.get('copy') else var.get(u"this")))
            if var.get('_').callprop('isNumber', var.get('x')):
                var.get('ops').callprop('addseq', var.get('arr').get('selection'), var.get('x'))
                return var.get('arr')
            var.put('x', var.get('createArray')(var.get('x'), var.get(u"this").get('dtype')))
            var.get('ops').callprop('addeq', var.get('arr').get('selection'), var.get('x').get('selection'))
            return var.get('arr')
        PyJs_anonymous_452_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('add', PyJs_anonymous_452_)
        @Js
        def PyJs_anonymous_453_(x, copy, this, arguments, var=var):
            var = Scope({'x':x, 'copy':copy, 'this':this, 'arguments':arguments}, var)
            var.registers(['arr', 'copy', 'x'])
            if PyJsStrictEq(var.get('arguments').get('length'),Js(1.0)):
                var.put('copy', Js(True))
            var.put('arr', (var.get(u"this").callprop('clone') if var.get('copy') else var.get(u"this")))
            if var.get('_').callprop('isNumber', var.get('x')):
                var.get('ops').callprop('subseq', var.get('arr').get('selection'), var.get('x'))
                return var.get('arr')
            var.put('x', var.get('createArray')(var.get('x'), var.get(u"this").get('dtype')))
            var.get('ops').callprop('subeq', var.get('arr').get('selection'), var.get('x').get('selection'))
            return var.get('arr')
        PyJs_anonymous_453_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('subtract', PyJs_anonymous_453_)
        @Js
        def PyJs_anonymous_454_(x, copy, this, arguments, var=var):
            var = Scope({'x':x, 'copy':copy, 'this':this, 'arguments':arguments}, var)
            var.registers(['arr', 'copy', 'x'])
            if PyJsStrictEq(var.get('arguments').get('length'),Js(1.0)):
                var.put('copy', Js(True))
            var.put('arr', (var.get(u"this").callprop('clone') if var.get('copy') else var.get(u"this")))
            if var.get('_').callprop('isNumber', var.get('x')):
                var.get('ops').callprop('mulseq', var.get('arr').get('selection'), var.get('x'))
                return var.get('arr')
            var.put('x', var.get('createArray')(var.get('x'), var.get(u"this").get('dtype')))
            var.get('ops').callprop('muleq', var.get('arr').get('selection'), var.get('x').get('selection'))
            return var.get('arr')
        PyJs_anonymous_454_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('multiply', PyJs_anonymous_454_)
        @Js
        def PyJs_anonymous_455_(x, copy, this, arguments, var=var):
            var = Scope({'x':x, 'copy':copy, 'this':this, 'arguments':arguments}, var)
            var.registers(['arr', 'copy', 'x'])
            if PyJsStrictEq(var.get('arguments').get('length'),Js(1.0)):
                var.put('copy', Js(True))
            var.put('arr', (var.get(u"this").callprop('clone') if var.get('copy') else var.get(u"this")))
            if var.get('_').callprop('isNumber', var.get('x')):
                var.get('ops').callprop('divseq', var.get('arr').get('selection'), var.get('x'))
                return var.get('arr')
            var.put('x', var.get('createArray')(var.get('x'), var.get(u"this").get('dtype')))
            var.get('ops').callprop('diveq', var.get('arr').get('selection'), var.get('x').get('selection'))
            return var.get('arr')
        PyJs_anonymous_455_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('divide', PyJs_anonymous_455_)
        @Js
        def PyJs_anonymous_456_(x, copy, this, arguments, var=var):
            var = Scope({'x':x, 'copy':copy, 'this':this, 'arguments':arguments}, var)
            var.registers(['arr', 'copy', 'x'])
            if PyJsStrictEq(var.get('arguments').get('length'),Js(1.0)):
                var.put('copy', Js(True))
            var.put('arr', (var.get(u"this").callprop('clone') if var.get('copy') else var.get(u"this")))
            if var.get('_').callprop('isNumber', var.get('x')):
                var.get('ops').callprop('powseq', var.get('arr').get('selection'), var.get('x'))
                return var.get('arr')
            var.put('x', var.get('createArray')(var.get('x'), var.get(u"this").get('dtype')))
            var.get('ops').callprop('poweq', var.get('arr').get('selection'), var.get('x').get('selection'))
            return var.get('arr')
        PyJs_anonymous_456_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('pow', PyJs_anonymous_456_)
        @Js
        def PyJs_anonymous_457_(copy, this, arguments, var=var):
            var = Scope({'copy':copy, 'this':this, 'arguments':arguments}, var)
            var.registers(['arr', 'copy'])
            if PyJsStrictEq(var.get('arguments').get('length'),Js(0.0)):
                var.put('copy', Js(True))
            var.put('arr', (var.get(u"this").callprop('clone') if var.get('copy') else var.get(u"this")))
            var.get('ops').callprop('expeq', var.get('arr').get('selection'))
            return var.get('arr')
        PyJs_anonymous_457_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('exp', PyJs_anonymous_457_)
        @Js
        def PyJs_anonymous_458_(copy, this, arguments, var=var):
            var = Scope({'copy':copy, 'this':this, 'arguments':arguments}, var)
            var.registers(['arr', 'copy'])
            if PyJsStrictEq(var.get('arguments').get('length'),Js(0.0)):
                var.put('copy', Js(True))
            var.put('arr', (var.get(u"this").callprop('clone') if var.get('copy') else var.get(u"this")))
            var.get('ops').callprop('logeq', var.get('arr').get('selection'))
            return var.get('arr')
        PyJs_anonymous_458_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('log', PyJs_anonymous_458_)
        @Js
        def PyJs_anonymous_459_(copy, this, arguments, var=var):
            var = Scope({'copy':copy, 'this':this, 'arguments':arguments}, var)
            var.registers(['arr', 'copy'])
            if PyJsStrictEq(var.get('arguments').get('length'),Js(0.0)):
                var.put('copy', Js(True))
            var.put('arr', (var.get(u"this").callprop('clone') if var.get('copy') else var.get(u"this")))
            var.get('ops').callprop('sqrteq', var.get('arr').get('selection'))
            return var.get('arr')
        PyJs_anonymous_459_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('sqrt', PyJs_anonymous_459_)
        @Js
        def PyJs_anonymous_460_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if PyJsStrictEq(var.get(u"this").get('selection').get('size'),Js(0.0)):
                return var.get(u"null")
            return var.get('ops').callprop('sup', var.get(u"this").get('selection'))
        PyJs_anonymous_460_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('max', PyJs_anonymous_460_)
        @Js
        def PyJs_anonymous_461_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if PyJsStrictEq(var.get(u"this").get('selection').get('size'),Js(0.0)):
                return var.get(u"null")
            return var.get('ops').callprop('inf', var.get(u"this").get('selection'))
        PyJs_anonymous_461_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('min', PyJs_anonymous_461_)
        @Js
        def PyJs_anonymous_462_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('ops').callprop('sum', var.get(u"this").get('selection'))
        PyJs_anonymous_462_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('sum', PyJs_anonymous_462_)
        @Js
        def PyJs_anonymous_463_(options, this, arguments, var=var):
            var = Scope({'options':options, 'this':this, 'arguments':arguments}, var)
            var.registers(['mean', 'squares', 'shapeSize', 'options', 'variance'])
            var.put('options', var.get('_').callprop('defaults', var.get('options'), Js({'ddof':Js(0.0)})))
            var.put('squares', var.get(u"this").callprop('clone'))
            var.get('ops').callprop('powseq', var.get('squares').get('selection'), Js(2.0))
            var.put('mean', var.get(u"this").callprop('mean'))
            var.put('shapeSize', var.get('_').callprop('shapeSize', var.get(u"this").get('shape')))
            var.put('variance', ((var.get('ops').callprop('sum', var.get('squares').get('selection'))/(var.get('shapeSize')-var.get('options').get('ddof')))-(((var.get('mean')*var.get('mean'))*var.get('shapeSize'))/(var.get('shapeSize')-var.get('options').get('ddof')))))
            return (var.get('Math').callprop('sqrt', var.get('Math').callprop('abs', var.get('variance'))) if (var.get('variance')>Js(0.0)) else Js(0.0))
        PyJs_anonymous_463_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('std', PyJs_anonymous_463_)
        @Js
        def PyJs_anonymous_464_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return (var.get('ops').callprop('sum', var.get(u"this").get('selection'))/var.get('_').callprop('shapeSize', var.get(u"this").get('shape')))
        PyJs_anonymous_464_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('mean', PyJs_anonymous_464_)
        @Js
        def PyJs_anonymous_465_(x, copy, this, arguments, var=var):
            var = Scope({'x':x, 'copy':copy, 'this':this, 'arguments':arguments}, var)
            var.registers(['arr', 'copy', 'x'])
            if PyJsStrictEq(var.get('arguments').get('length'),Js(1.0)):
                var.put('copy', Js(True))
            var.put('arr', (var.get(u"this").callprop('clone') if var.get('copy') else var.get(u"this")))
            if var.get('_').callprop('isNumber', var.get('x')):
                var.get('ops').callprop('modseq', var.get('arr').get('selection'), var.get('x'))
                return var.get('arr')
            var.put('x', var.get('createArray')(var.get('x'), var.get(u"this").get('dtype')))
            var.get('ops').callprop('modeq', var.get('arr').get('selection'), var.get('x').get('selection'))
            return var.get('arr')
        PyJs_anonymous_465_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('mod', PyJs_anonymous_465_)
        @Js
        def PyJs_anonymous_466_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('unpackArray')(var.get(u"this").get('selection'))
        PyJs_anonymous_466_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('tolist', PyJs_anonymous_466_)
        @Js
        def PyJs_anonymous_467_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get(u"this").callprop('tolist')
        PyJs_anonymous_467_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('valueOf', PyJs_anonymous_467_)
        @Js
        def PyJs_anonymous_468_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['spacer1', 'spacer3', 'reg1', 'base', 'reg3', 'spacer2', 'nChars', 'reg2', 'formatArray'])
            @Js
            def PyJsHoisted_formatArray_(k, v, this, arguments, var=var):
                var = Scope({'k':k, 'v':v, 'this':this, 'arguments':arguments}, var)
                var.registers(['s', 'hth', 'v', 'k', 'th', 'arr'])
                if var.get('_').callprop('isString', var.get('v')):
                    return var.get('v')
                if var.get('_').callprop('isNumber', var.get('v')):
                    var.put('s', var.get('formatNumber')(var.get('v')))
                    return (var.get('Array').create(var.get('Math').callprop('max', Js(0.0), ((var.get('nChars')-var.get('s').get('length'))+Js(2.0)))).callprop('join', Js(' '))+var.get('s'))
                var.put('k', (var.get('k') or Js(0.0)))
                pass
                var.put('th', var.get('CONF').get('printThreshold'))
                var.put('hth', ((var.get('th')/Js(2.0))|Js(0.0)))
                if (var.get('v').get('length')>var.get('th')):
                    var.put('arr', Js([]).callprop('concat', var.get('v').callprop('slice', Js(0.0), var.get('hth')), Js([Js(' ...')]), var.get('v').callprop('slice', (var.get('v').get('length')-var.get('hth')))))
                else:
                    var.put('arr', var.get('v'))
                @Js
                def PyJs_anonymous_469_(i, ii, this, arguments, var=var):
                    var = Scope({'i':i, 'ii':ii, 'this':this, 'arguments':arguments}, var)
                    var.registers(['i', 'ii'])
                    return var.get('formatArray')((Js(1.0) if (PyJsStrictEq(var.get('ii'),Js(0.0)) and PyJsStrictEq(var.get('k'),Js(0.0))) else (var.get('k')+Js(1.0))), var.get('i'))
                PyJs_anonymous_469_._set_name('anonymous')
                return (((var.get('Array').create((var.get('k')+Js(1.0))).callprop('join', Js(' '))+Js('['))+var.get('arr').callprop('map', PyJs_anonymous_469_).callprop('join', Js(',')))+Js(']'))
            PyJsHoisted_formatArray_.func_name = 'formatArray'
            var.put('formatArray', PyJsHoisted_formatArray_)
            var.put('nChars', var.get('formatNumber')(var.get(u"this").callprop('max')).get('length'))
            var.put('reg1', JsRegExp('/\\]\\,(\\s*)\\[/g'))
            var.put('spacer1', Js('],\n$1      ['))
            var.put('reg3', JsRegExp('/\\]\\,(\\s+)...\\,(\\s+)\\[/g'))
            var.put('spacer3', Js('],\n$2       ...\n$2      ['))
            var.put('reg2', JsRegExp('/\\[\\s+\\[/g'))
            var.put('spacer2', Js('[['))
            pass
            var.put('base', var.get('JSON').callprop('stringify', var.get(u"this").callprop('tolist'), var.get('formatArray')).callprop('replace', var.get('reg1'), var.get('spacer1')).callprop('replace', var.get('reg2'), var.get('spacer2')).callprop('replace', var.get('reg2'), var.get('spacer2')).callprop('replace', var.get('reg3'), var.get('spacer3')).callprop('slice', Js(2.0), (-Js(1.0))))
            while 1:
                SWITCHED = False
                CONDITION = (var.get(u"this").get('dtype'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js('array')):
                    SWITCHED = True
                    return ((Js('array([')+var.get('base'))+Js(')'))
                if True:
                    SWITCHED = True
                    return ((((Js('array([')+var.get('base'))+Js(', dtype='))+var.get(u"this").get('dtype'))+Js(')'))
                SWITCHED = True
                break
        PyJs_anonymous_468_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('toString', PyJs_anonymous_468_)
        var.get('NdArray').get('prototype').put('inspect', var.get('NdArray').get('prototype').get('toString'))
        @Js
        def PyJs_anonymous_470_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('JSON').callprop('stringify', var.get(u"this").callprop('tolist'))
        PyJs_anonymous_470_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('toJSON', PyJs_anonymous_470_)
        @Js
        def PyJs_anonymous_471_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['s'])
            var.put('s', var.get(u"this").get('selection'))
            if PyJsStrictEq(var.get('s').get('data').get('slice').typeof(),Js('undefined')):
                return var.get('NdArray').create(var.get('ndarray')(Js([]).get('slice').callprop('apply', var.get('s').get('data')), var.get('s').get('shape'), var.get('s').get('stride'), var.get('s').get('offset')))
            return var.get('NdArray').create(var.get('ndarray')(var.get('s').get('data').callprop('slice'), var.get('s').get('shape'), var.get('s').get('stride'), var.get('s').get('offset')))
        PyJs_anonymous_471_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('clone', PyJs_anonymous_471_)
        @Js
        def PyJs_anonymous_472_(array, this, arguments, var=var):
            var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'd', 'array'])
            var.put('array', var.get('createArray')(var.get('array')))
            if (PyJsStrictNeq(var.get(u"this").get('size'),var.get('array').get('size')) or PyJsStrictNeq(var.get(u"this").get('ndim'),var.get('array').get('ndim'))):
                return Js(False)
            var.put('d', var.get(u"this").get('ndim'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('d')):
                try:
                    if PyJsStrictNeq(var.get(u"this").get('shape').get(var.get('i')),var.get('array').get('shape').get(var.get('i'))):
                        return Js(False)
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('ops').callprop('all', var.get('ops').callprop('eqeq', var.get(u"this").get('selection'), var.get('array').get('selection')))
        PyJs_anonymous_472_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('equal', PyJs_anonymous_472_)
        @Js
        def PyJs_anonymous_473_(copy, this, arguments, var=var):
            var = Scope({'copy':copy, 'this':this, 'arguments':arguments}, var)
            var.registers(['arr', 'copy'])
            if PyJsStrictEq(var.get('arguments').get('length'),Js(0.0)):
                var.put('copy', Js(True))
            var.put('arr', (var.get(u"this").callprop('clone') if var.get('copy') else var.get(u"this")))
            var.get('ops').callprop('roundeq', var.get('arr').get('selection'))
            return var.get('arr')
        PyJs_anonymous_473_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('round', PyJs_anonymous_473_)
        @Js
        def PyJs_anonymous_474_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['c'])
            var.put('c', var.get(u"this").callprop('clone'))
            var.get('ops').callprop('neg', var.get('c').get('selection'), var.get(u"this").get('selection'))
            return var.get('c')
        PyJs_anonymous_474_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('negative', PyJs_anonymous_474_)
        @Js
        def PyJs_anonymous_475_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['mstride', 'mshape', 'shape', 'i', 'nshape', 'T', 'd', 'arr', 'nstride'])
            var.put('d', var.get(u"this").get('ndim'))
            if PyJsStrictEq(var.get('d'),Js(1.0)):
                var.put('T', var.get('_').callprop('getType', var.get(u"this").get('dtype')))
                var.put('shape', Js([var.get(u"this").get('shape').get('0'), var.get(u"this").get('shape').get('0')]))
                var.put('arr', var.get('NdArray').create(var.get('T').create(var.get('_').callprop('shapeSize', var.get('shape'))), var.get('shape')))
                if PyJsStrictEq(var.get('arr').get('dtype'),Js('array')):
                    var.get('ops').callprop('assigns', var.get('arr').get('selection'), Js(0.0))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get(u"this").get('shape').get('0')):
                    try:
                        var.get('arr').callprop('set', var.get('i'), var.get('i'), var.get(u"this").callprop('get', var.get('i')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('arr')
            var.put('mshape', var.get(u"this").get('shape'))
            var.put('mstride', var.get(u"this").get('selection').get('stride'))
            var.put('nshape', (Js(1.0)<<Js(30.0)))
            var.put('nstride', Js(0.0))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('d')):
                try:
                    var.put('nshape', (var.get('Math').callprop('min', var.get('nshape'), var.get('mshape').get(var.get('i')))|Js(0.0)))
                    var.put('nstride', var.get('mstride').get(var.get('i')), '+')
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            return var.get('NdArray').create(var.get(u"this").get('selection').get('data'), Js([var.get('nshape')]), Js([var.get('nstride')]), var.get(u"this").get('selection').get('offset'))
        PyJs_anonymous_475_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('diag', PyJs_anonymous_475_)
        @Js
        def PyJs_anonymous_476_(axis, cb, this, arguments, var=var):
            var = Scope({'axis':axis, 'cb':cb, 'this':this, 'arguments':arguments}, var)
            var.registers(['subArr', 'cb', 'shape', 'i', 'loc', 'ii', 'axis', 'xi'])
            var.put('shape', var.get(u"this").get('shape'))
            if PyJsStrictEq(var.get('axis'),(-Js(1.0))):
                var.put('axis', (var.get('shape').get('length')-Js(1.0)))
            if ((var.get('axis')<Js(0.0)) or (var.get('axis')>(var.get('shape').get('length')-Js(1.0)))):
                PyJsTempException = JsToPyException(var.get('errors').get('ValueError').create(Js('invalid axis')))
                raise PyJsTempException
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('shape').get(var.get('axis'))):
                try:
                    var.put('loc', var.get('Array').create((var.get('axis')+Js(1.0))))
                    #for JS loop
                    var.put('ii', Js(0.0))
                    while (var.get('ii')<(var.get('axis')+Js(1.0))):
                        try:
                            var.get('loc').put(var.get('ii'), (var.get('i') if PyJsStrictEq(var.get('ii'),var.get('axis')) else var.get(u"null")))
                        finally:
                                (var.put('ii',Js(var.get('ii').to_number())+Js(1))-Js(1))
                    var.put('subArr', var.get(u"this").get('selection').get('pick').callprop('apply', var.get(u"this").get('selection'), var.get('loc')))
                    var.put('xi', var.get('createArray')(var.get('unpackArray')(var.get('subArr')), var.get(u"this").get('dtype')))
                    var.get('cb')(var.get('xi'), var.get('i'))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
        PyJs_anonymous_476_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('iteraxis', PyJs_anonymous_476_)
        def PyJs_LONG_477_(var=var):
            return var.get('require')(Js('cwise/lib/wrapper'))(Js({'args':Js([Js('array'), Js('array'), Js('array'), Js('array')]),'pre':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'body':Js({'body':Js('{var _inline_13_c=_inline_13_arg2_,_inline_13_f=_inline_13_arg3_,_inline_13_i=_inline_13_arg0_,_inline_13_o=_inline_13_arg1_,_inline_13_t=_inline_13_i*(_inline_13_c+_inline_13_f);_inline_13_arg0_=_inline_13_t-_inline_13_f*(_inline_13_i+_inline_13_o),_inline_13_arg1_=_inline_13_t+_inline_13_c*(_inline_13_o-_inline_13_i)}'),'args':Js([Js({'name':Js('_inline_13_arg0_'),'lvalue':Js(True),'rvalue':Js(True),'count':Js(2.0)}), Js({'name':Js('_inline_13_arg1_'),'lvalue':Js(True),'rvalue':Js(True),'count':Js(2.0)}), Js({'name':Js('_inline_13_arg2_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_13_arg3_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)})]),'thisVars':Js([]),'localVars':Js([Js('_inline_13_c'), Js('_inline_13_f'), Js('_inline_13_i'), Js('_inline_13_o'), Js('_inline_13_t')])}),'post':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'debug':Js(False),'funcName':Js('cwise'),'blockSize':Js(64.0)}))
        var.put('doConjMuleq', PyJs_LONG_477_())
        def PyJs_LONG_478_(var=var):
            return var.get('require')(Js('cwise/lib/wrapper'))(Js({'args':Js([Js('array'), Js('array'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js({'offset':Js([(-Js(1.0)), (-Js(1.0))]),'array':Js(1.0)}), Js({'offset':Js([(-Js(1.0)), Js(0.0)]),'array':Js(1.0)}), Js({'offset':Js([(-Js(1.0)), Js(1.0)]),'array':Js(1.0)}), Js({'offset':Js([Js(0.0), (-Js(1.0))]),'array':Js(1.0)}), Js({'offset':Js([Js(0.0), Js(1.0)]),'array':Js(1.0)}), Js({'offset':Js([Js(1.0), (-Js(1.0))]),'array':Js(1.0)}), Js({'offset':Js([Js(1.0), Js(0.0)]),'array':Js(1.0)}), Js({'offset':Js([Js(1.0), Js(1.0)]),'array':Js(1.0)})]),'pre':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'body':Js({'body':Js('{_inline_16_arg0_=_inline_16_arg11_*_inline_16_arg10_+_inline_16_arg12_*_inline_16_arg9_+_inline_16_arg13_*_inline_16_arg8_+_inline_16_arg14_*_inline_16_arg7_+_inline_16_arg1_*_inline_16_arg6_+_inline_16_arg15_*_inline_16_arg5_+_inline_16_arg16_*_inline_16_arg4_+_inline_16_arg17_*_inline_16_arg3_+_inline_16_arg18_*_inline_16_arg2_}'),'args':Js([Js({'name':Js('_inline_16_arg0_'),'lvalue':Js(True),'rvalue':Js(False),'count':Js(1.0)}), Js({'name':Js('_inline_16_arg1_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_16_arg2_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_16_arg3_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_16_arg4_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_16_arg5_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_16_arg6_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_16_arg7_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_16_arg8_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_16_arg9_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_16_arg10_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_16_arg11_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_16_arg12_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_16_arg13_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_16_arg14_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_16_arg15_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_16_arg16_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_16_arg17_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_16_arg18_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)})]),'thisVars':Js([]),'localVars':Js([])}),'post':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'debug':Js(False),'funcName':Js('cwise'),'blockSize':Js(64.0)}))
        var.put('doConvolve3x3', PyJs_LONG_478_())
        def PyJs_LONG_479_(var=var):
            return var.get('require')(Js('cwise/lib/wrapper'))(Js({'args':Js([Js('index'), Js('array'), Js('array'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js('scalar'), Js({'offset':Js([(-Js(2.0)), (-Js(2.0))]),'array':Js(1.0)}), Js({'offset':Js([(-Js(2.0)), (-Js(1.0))]),'array':Js(1.0)}), Js({'offset':Js([(-Js(2.0)), Js(0.0)]),'array':Js(1.0)}), Js({'offset':Js([(-Js(2.0)), Js(1.0)]),'array':Js(1.0)}), Js({'offset':Js([(-Js(2.0)), Js(2.0)]),'array':Js(1.0)}), Js({'offset':Js([(-Js(1.0)), (-Js(2.0))]),'array':Js(1.0)}), Js({'offset':Js([(-Js(1.0)), (-Js(1.0))]),'array':Js(1.0)}), Js({'offset':Js([(-Js(1.0)), Js(0.0)]),'array':Js(1.0)}), Js({'offset':Js([(-Js(1.0)), Js(1.0)]),'array':Js(1.0)}), Js({'offset':Js([(-Js(1.0)), Js(2.0)]),'array':Js(1.0)}), Js({'offset':Js([Js(0.0), (-Js(2.0))]),'array':Js(1.0)}), Js({'offset':Js([Js(0.0), (-Js(1.0))]),'array':Js(1.0)}), Js({'offset':Js([Js(0.0), Js(1.0)]),'array':Js(1.0)}), Js({'offset':Js([Js(0.0), Js(2.0)]),'array':Js(1.0)}), Js({'offset':Js([Js(1.0), (-Js(2.0))]),'array':Js(1.0)}), Js({'offset':Js([Js(1.0), (-Js(1.0))]),'array':Js(1.0)}), Js({'offset':Js([Js(1.0), Js(0.0)]),'array':Js(1.0)}), Js({'offset':Js([Js(1.0), Js(1.0)]),'array':Js(1.0)}), Js({'offset':Js([Js(1.0), Js(2.0)]),'array':Js(1.0)}), Js({'offset':Js([Js(2.0), (-Js(2.0))]),'array':Js(1.0)}), Js({'offset':Js([Js(2.0), (-Js(1.0))]),'array':Js(1.0)}), Js({'offset':Js([Js(2.0), Js(0.0)]),'array':Js(1.0)}), Js({'offset':Js([Js(2.0), Js(1.0)]),'array':Js(1.0)}), Js({'offset':Js([Js(2.0), Js(2.0)]),'array':Js(1.0)})]),'pre':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'body':Js({'body':Js('{_inline_19_arg1_=_inline_19_arg0_[0]<2||_inline_19_arg0_[1]<2?0:_inline_19_arg28_*_inline_19_arg27_+_inline_19_arg29_*_inline_19_arg26_+_inline_19_arg30_*_inline_19_arg25_+_inline_19_arg31_*_inline_19_arg24_+_inline_19_arg32_*_inline_19_arg23_+_inline_19_arg33_*_inline_19_arg22_+_inline_19_arg34_*_inline_19_arg21_+_inline_19_arg35_*_inline_19_arg20_+_inline_19_arg36_*_inline_19_arg19_+_inline_19_arg37_*_inline_19_arg18_+_inline_19_arg38_*_inline_19_arg17_+_inline_19_arg39_*_inline_19_arg16_+_inline_19_arg2_*_inline_19_arg15_+_inline_19_arg40_*_inline_19_arg14_+_inline_19_arg41_*_inline_19_arg13_+_inline_19_arg42_*_inline_19_arg12_+_inline_19_arg43_*_inline_19_arg11_+_inline_19_arg44_*_inline_19_arg10_+_inline_19_arg45_*_inline_19_arg9_+_inline_19_arg46_*_inline_19_arg8_+_inline_19_arg47_*_inline_19_arg7_+_inline_19_arg48_*_inline_19_arg6_+_inline_19_arg49_*_inline_19_arg5_+_inline_19_arg50_*_inline_19_arg4_+_inline_19_arg51_*_inline_19_arg3_}'),'args':Js([Js({'name':Js('_inline_19_arg0_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(2.0)}), Js({'name':Js('_inline_19_arg1_'),'lvalue':Js(True),'rvalue':Js(False),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg2_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg3_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg4_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg5_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg6_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg7_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg8_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg9_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg10_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg11_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg12_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg13_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg14_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg15_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg16_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg17_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg18_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg19_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg20_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg21_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg22_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg23_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg24_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg25_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg26_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg27_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg28_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg29_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg30_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg31_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg32_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg33_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg34_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg35_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg36_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg37_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg38_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg39_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg40_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg41_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg42_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg43_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg44_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg45_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg46_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg47_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg48_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg49_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg50_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_19_arg51_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)})]),'thisVars':Js([]),'localVars':Js([])}),'post':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'debug':Js(False),'funcName':Js('cwise'),'blockSize':Js(64.0)}))
        var.put('doConvolve5x5', PyJs_LONG_479_())
        @Js
        def PyJs_anonymous_480_(filter, this, arguments, var=var):
            var = Scope({'filter':filter, 'this':this, 'arguments':arguments}, var)
            var.registers(['outShape', 'step', 'fShape', 'out3x3', 'filter', 'out5x5x1', 'ndim', 'i', 'l', 'tShape', 'out3x3x1', 'ts', 'fs', 'out5x5'])
            var.put('filter', var.get('NdArray').callprop('new', var.get('filter')))
            var.put('ndim', var.get(u"this").get('ndim'))
            if PyJsStrictNeq(var.get('ndim'),var.get('filter').get('ndim')):
                PyJsTempException = JsToPyException(var.get('errors').get('ValueError').create(Js('arrays must have the same dimensions')))
                raise PyJsTempException
            var.put('outShape', var.get('Array').create(var.get('ndim')))
            var.put('step', var.get('Array').create(var.get('ndim')))
            var.put('ts', var.get(u"this").get('selection'))
            var.put('tShape', var.get(u"this").get('shape'))
            var.put('fs', var.get('filter').get('selection'))
            var.put('fShape', var.get('filter').get('shape'))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('ndim')):
                try:
                    var.put('l', ((var.get('tShape').get(var.get('i'))-var.get('fShape').get(var.get('i')))+Js(1.0)))
                    if (var.get('l')<Js(0.0)):
                        PyJsTempException = JsToPyException(var.get('errors').get('ValueError').create(Js('filter cannot be greater than the array')))
                        raise PyJsTempException
                    var.get('outShape').put(var.get('i'), var.get('l'))
                    var.get('step').put(var.get('i'), (-Js(1.0)))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            if ((PyJsStrictEq(var.get('ndim'),Js(2.0)) and PyJsStrictEq(var.get('fShape').get('0'),Js(3.0))) and PyJsStrictEq(var.get('fShape').get('1'),Js(3.0))):
                var.put('out3x3', var.get('NdArray').create(var.get('Float32Array').create(var.get('_').callprop('shapeSize', var.get('tShape'))), var.get('tShape')))
                def PyJs_LONG_481_(var=var):
                    return var.get('doConvolve3x3')(var.get('out3x3').get('selection'), var.get('ts'), var.get('fs').callprop('get', Js(0.0), Js(0.0)), var.get('fs').callprop('get', Js(0.0), Js(1.0)), var.get('fs').callprop('get', Js(0.0), Js(2.0)), var.get('fs').callprop('get', Js(1.0), Js(0.0)), var.get('fs').callprop('get', Js(1.0), Js(1.0)), var.get('fs').callprop('get', Js(1.0), Js(2.0)), var.get('fs').callprop('get', Js(2.0), Js(0.0)), var.get('fs').callprop('get', Js(2.0), Js(1.0)), var.get('fs').callprop('get', Js(2.0), Js(2.0)))
                PyJs_LONG_481_()
                return var.get('out3x3').callprop('lo', Js(1.0), Js(1.0)).callprop('hi', var.get('outShape').get('0'), var.get('outShape').get('1'))
            else:
                if ((((PyJsStrictEq(var.get('ndim'),Js(3.0)) and PyJsStrictEq(var.get('fShape').get('2'),Js(1.0))) and PyJsStrictEq(var.get('tShape').get('2'),Js(1.0))) and PyJsStrictEq(var.get('fShape').get('0'),Js(3.0))) and PyJsStrictEq(var.get('fShape').get('1'),Js(3.0))):
                    var.put('out3x3x1', var.get('NdArray').create(var.get('Float32Array').create(var.get('_').callprop('shapeSize', var.get('tShape'))), var.get('tShape')))
                    def PyJs_LONG_482_(var=var):
                        return var.get('doConvolve3x3')(var.get('out3x3x1').get('selection').callprop('pick', var.get(u"null"), var.get(u"null"), Js(0.0)), var.get('ts').callprop('pick', var.get(u"null"), var.get(u"null"), Js(0.0)), var.get('fs').callprop('get', Js(0.0), Js(0.0), Js(0.0)), var.get('fs').callprop('get', Js(0.0), Js(1.0), Js(0.0)), var.get('fs').callprop('get', Js(0.0), Js(2.0), Js(0.0)), var.get('fs').callprop('get', Js(1.0), Js(0.0), Js(0.0)), var.get('fs').callprop('get', Js(1.0), Js(1.0), Js(0.0)), var.get('fs').callprop('get', Js(1.0), Js(2.0), Js(0.0)), var.get('fs').callprop('get', Js(2.0), Js(0.0), Js(0.0)), var.get('fs').callprop('get', Js(2.0), Js(1.0), Js(0.0)), var.get('fs').callprop('get', Js(2.0), Js(2.0), Js(0.0)))
                    PyJs_LONG_482_()
                    return var.get('out3x3x1').callprop('lo', Js(1.0), Js(1.0)).callprop('hi', var.get('outShape').get('0'), var.get('outShape').get('1'))
                else:
                    if ((PyJsStrictEq(var.get('ndim'),Js(2.0)) and PyJsStrictEq(var.get('fShape').get('0'),Js(5.0))) and PyJsStrictEq(var.get('fShape').get('1'),Js(5.0))):
                        var.put('out5x5', var.get('NdArray').create(var.get('Float32Array').create(var.get('_').callprop('shapeSize', var.get('tShape'))), var.get('tShape')))
                        def PyJs_LONG_483_(var=var):
                            return var.get('doConvolve5x5')(var.get('out5x5').get('selection'), var.get('ts'), var.get('fs').callprop('get', Js(0.0), Js(0.0)), var.get('fs').callprop('get', Js(0.0), Js(1.0)), var.get('fs').callprop('get', Js(0.0), Js(2.0)), var.get('fs').callprop('get', Js(0.0), Js(3.0)), var.get('fs').callprop('get', Js(0.0), Js(4.0)), var.get('fs').callprop('get', Js(1.0), Js(0.0)), var.get('fs').callprop('get', Js(1.0), Js(1.0)), var.get('fs').callprop('get', Js(1.0), Js(2.0)), var.get('fs').callprop('get', Js(1.0), Js(3.0)), var.get('fs').callprop('get', Js(1.0), Js(4.0)), var.get('fs').callprop('get', Js(2.0), Js(0.0)), var.get('fs').callprop('get', Js(2.0), Js(1.0)), var.get('fs').callprop('get', Js(2.0), Js(2.0)), var.get('fs').callprop('get', Js(2.0), Js(3.0)), var.get('fs').callprop('get', Js(2.0), Js(4.0)), var.get('fs').callprop('get', Js(3.0), Js(0.0)), var.get('fs').callprop('get', Js(3.0), Js(1.0)), var.get('fs').callprop('get', Js(3.0), Js(2.0)), var.get('fs').callprop('get', Js(3.0), Js(3.0)), var.get('fs').callprop('get', Js(3.0), Js(4.0)), var.get('fs').callprop('get', Js(4.0), Js(0.0)), var.get('fs').callprop('get', Js(4.0), Js(1.0)), var.get('fs').callprop('get', Js(4.0), Js(2.0)), var.get('fs').callprop('get', Js(4.0), Js(3.0)), var.get('fs').callprop('get', Js(4.0), Js(4.0)))
                        PyJs_LONG_483_()
                        return var.get('out5x5').callprop('lo', Js(2.0), Js(2.0)).callprop('hi', var.get('outShape').get('0'), var.get('outShape').get('1'))
                    else:
                        if ((((PyJsStrictEq(var.get('ndim'),Js(3.0)) and PyJsStrictEq(var.get('fShape').get('2'),Js(1.0))) and PyJsStrictEq(var.get('tShape').get('2'),Js(1.0))) and PyJsStrictEq(var.get('fShape').get('0'),Js(5.0))) and PyJsStrictEq(var.get('fShape').get('1'),Js(5.0))):
                            var.put('out5x5x1', var.get('NdArray').create(var.get('Float32Array').create(var.get('_').callprop('shapeSize', var.get('tShape'))), var.get('tShape')))
                            def PyJs_LONG_484_(var=var):
                                return var.get('doConvolve5x5')(var.get('out5x5x1').get('selection'), var.get('ts'), var.get('fs').callprop('get', Js(0.0), Js(0.0), Js(0.0)), var.get('fs').callprop('get', Js(0.0), Js(1.0), Js(0.0)), var.get('fs').callprop('get', Js(0.0), Js(2.0), Js(0.0)), var.get('fs').callprop('get', Js(0.0), Js(3.0), Js(0.0)), var.get('fs').callprop('get', Js(0.0), Js(4.0), Js(0.0)), var.get('fs').callprop('get', Js(1.0), Js(0.0), Js(0.0)), var.get('fs').callprop('get', Js(1.0), Js(1.0), Js(0.0)), var.get('fs').callprop('get', Js(1.0), Js(2.0), Js(0.0)), var.get('fs').callprop('get', Js(1.0), Js(3.0), Js(0.0)), var.get('fs').callprop('get', Js(1.0), Js(4.0), Js(0.0)), var.get('fs').callprop('get', Js(2.0), Js(0.0), Js(0.0)), var.get('fs').callprop('get', Js(2.0), Js(1.0), Js(0.0)), var.get('fs').callprop('get', Js(2.0), Js(2.0), Js(0.0)), var.get('fs').callprop('get', Js(2.0), Js(3.0), Js(0.0)), var.get('fs').callprop('get', Js(2.0), Js(4.0), Js(0.0)), var.get('fs').callprop('get', Js(3.0), Js(0.0), Js(0.0)), var.get('fs').callprop('get', Js(3.0), Js(1.0), Js(0.0)), var.get('fs').callprop('get', Js(3.0), Js(2.0), Js(0.0)), var.get('fs').callprop('get', Js(3.0), Js(3.0), Js(0.0)), var.get('fs').callprop('get', Js(3.0), Js(4.0), Js(0.0)), var.get('fs').callprop('get', Js(4.0), Js(0.0), Js(0.0)), var.get('fs').callprop('get', Js(4.0), Js(1.0), Js(0.0)), var.get('fs').callprop('get', Js(4.0), Js(2.0), Js(0.0)), var.get('fs').callprop('get', Js(4.0), Js(3.0), Js(0.0)), var.get('fs').callprop('get', Js(4.0), Js(4.0), Js(0.0)))
                            PyJs_LONG_484_()
                            return var.get('out5x5x1').callprop('lo', Js(2.0), Js(2.0)).callprop('hi', var.get('outShape').get('0'), var.get('outShape').get('1'))
                        else:
                            return var.get(u"this").callprop('fftconvolve', var.get('filter'))
        PyJs_anonymous_480_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('convolve', PyJs_anonymous_480_)
        @Js
        def PyJs_anonymous_485_(filter, this, arguments, var=var):
            var = Scope({'filter':filter, 'this':this, 'arguments':arguments}, var)
            var.registers(['as', 'uT', 'T', 'v', 'oshape', 'vT', 'out', 'nshape', 'bs', 'outs', 'outShape', 'outOffset', 'filter', 'croppedX', 'needZeroFill', 'i', 'yT', 'nsize', 'u', 'nstride', 'y', 'x', 'd', 'xT'])
            var.put('filter', var.get('NdArray').callprop('new', var.get('filter')))
            if PyJsStrictNeq(var.get(u"this").get('ndim'),var.get('filter').get('ndim')):
                PyJsTempException = JsToPyException(var.get('errors').get('ValueError').create(Js('arrays must have the same dimensions')))
                raise PyJsTempException
            var.put('as', var.get(u"this").get('selection'))
            var.put('bs', var.get('filter').get('selection'))
            var.put('d', var.get(u"this").get('ndim'))
            var.put('nsize', Js(1.0))
            var.put('nstride', var.get('Array').create(var.get('d')))
            var.put('nshape', var.get('Array').create(var.get('d')))
            var.put('oshape', var.get('Array').create(var.get('d')))
            pass
            #for JS loop
            var.put('i', (var.get('d')-Js(1.0)))
            while (var.get('i')>=Js(0.0)):
                try:
                    var.get('nshape').put(var.get('i'), var.get('as').get('shape').get(var.get('i')))
                    var.get('nstride').put(var.get('i'), var.get('nsize'))
                    var.put('nsize', var.get('nshape').get(var.get('i')), '*')
                    var.get('oshape').put(var.get('i'), ((var.get('as').get('shape').get(var.get('i'))-var.get('bs').get('shape').get(var.get('i')))+Js(1.0)))
                finally:
                        var.put('i',Js(var.get('i').to_number())-Js(1))
            var.put('T', var.get('_').callprop('getType', var.get('as').get('dtype')))
            var.put('out', var.get('NdArray').create(var.get('T').create(var.get('_').callprop('shapeSize', var.get('oshape'))), var.get('oshape')))
            var.put('outs', var.get('out').get('selection'))
            var.put('xT', var.get('ndPool').callprop('mallocDouble', var.get('nsize')))
            var.put('x', var.get('ndarray')(var.get('xT'), var.get('nshape'), var.get('nstride'), Js(0.0)))
            var.get('ops').callprop('assigns', var.get('x'), Js(0.0))
            var.get('ops').callprop('assign', var.get('x').get('hi').callprop('apply', var.get('x'), var.get('as').get('shape')), var.get('as'))
            var.put('yT', var.get('ndPool').callprop('mallocDouble', var.get('nsize')))
            var.put('y', var.get('ndarray')(var.get('yT'), var.get('nshape'), var.get('nstride'), Js(0.0)))
            var.get('ops').callprop('assigns', var.get('y'), Js(0.0))
            var.get('ndFFT')(Js(1.0), var.get('x'), var.get('y'))
            var.put('uT', var.get('ndPool').callprop('mallocDouble', var.get('nsize')))
            var.put('u', var.get('ndarray')(var.get('uT'), var.get('nshape'), var.get('nstride'), Js(0.0)))
            var.get('ops').callprop('assigns', var.get('u'), Js(0.0))
            var.get('ops').callprop('assign', var.get('u').get('hi').callprop('apply', var.get('u'), var.get('bs').get('shape')), var.get('bs'))
            var.put('vT', var.get('ndPool').callprop('mallocDouble', var.get('nsize')))
            var.put('v', var.get('ndarray')(var.get('vT'), var.get('nshape'), var.get('nstride'), Js(0.0)))
            var.get('ops').callprop('assigns', var.get('v'), Js(0.0))
            var.get('ndFFT')(Js(1.0), var.get('u'), var.get('v'))
            var.get('doConjMuleq')(var.get('x'), var.get('y'), var.get('u'), var.get('v'))
            var.get('ndFFT')((-Js(1.0)), var.get('x'), var.get('y'))
            var.put('outShape', var.get('Array').create(var.get('d')))
            var.put('outOffset', var.get('Array').create(var.get('d')))
            var.put('needZeroFill', Js(False))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('d')):
                try:
                    if (var.get('outs').get('shape').get(var.get('i'))>var.get('nshape').get(var.get('i'))):
                        var.put('needZeroFill', Js(True))
                    var.get('outOffset').put(var.get('i'), (var.get('bs').get('shape').get(var.get('i'))-Js(1.0)))
                    var.get('outShape').put(var.get('i'), var.get('Math').callprop('min', var.get('outs').get('shape').get(var.get('i')), (var.get('nshape').get(var.get('i'))-var.get('outOffset').get(var.get('i')))))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            pass
            if var.get('needZeroFill'):
                var.get('ops').callprop('assign', var.get('outs'), Js(0.0))
            var.put('croppedX', var.get('x').get('lo').callprop('apply', var.get('x'), var.get('outOffset')))
            var.put('croppedX', var.get('croppedX').get('hi').callprop('apply', var.get('croppedX'), var.get('outShape')))
            var.get('ops').callprop('assign', var.get('outs').get('hi').callprop('apply', var.get('outs'), var.get('outShape')), var.get('croppedX'))
            var.get('ndPool').callprop('freeDouble', var.get('xT'))
            var.get('ndPool').callprop('freeDouble', var.get('yT'))
            var.get('ndPool').callprop('freeDouble', var.get('uT'))
            var.get('ndPool').callprop('freeDouble', var.get('vT'))
            return var.get('out')
        PyJs_anonymous_485_._set_name('anonymous')
        var.get('NdArray').get('prototype').put('fftconvolve', PyJs_anonymous_485_)
        pass
        var.get('NdArray').put('new', var.get('createArray'))
        var.get('module').put('exports', var.get('NdArray'))
        pass
        def PyJs_LONG_486_(var=var):
            return var.get('require')(Js('cwise/lib/wrapper'))(Js({'args':Js([Js('array'), Js('scalar'), Js('index')]),'pre':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'body':Js({'body':Js('{var _inline_22_a,_inline_22_e=_inline_22_arg1_;for(_inline_22_a=0;_inline_22_a<_inline_22_arg2_.length-1;++_inline_22_a)_inline_22_e=_inline_22_e[_inline_22_arg2_[_inline_22_a]];_inline_22_e[_inline_22_arg2_[_inline_22_arg2_.length-1]]=_inline_22_arg0_}'),'args':Js([Js({'name':Js('_inline_22_arg0_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_22_arg1_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(1.0)}), Js({'name':Js('_inline_22_arg2_'),'lvalue':Js(False),'rvalue':Js(True),'count':Js(4.0)})]),'thisVars':Js([]),'localVars':Js([Js('_inline_22_a'), Js('_inline_22_e')])}),'post':Js({'body':Js('{}'),'args':Js([]),'thisVars':Js([]),'localVars':Js([])}),'debug':Js(False),'funcName':Js('unpackCwise'),'blockSize':Js(64.0)}))
        var.put('doUnpack', PyJs_LONG_486_())
        pass
        pass
    PyJs_anonymous_430_._set_name('anonymous')
    @Js
    def PyJs_anonymous_487_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['DTYPES', 'module', '_', 'exports', 'isString', 'shapeSize', 'getType', 'getShape', '_dim', 'require', 'isNumber', 'isFunction', 'baseFlatten'])
        @Js
        def PyJsHoisted_isNumber_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('value',throw=False).typeof(),Js('number'))
        PyJsHoisted_isNumber_.func_name = 'isNumber'
        var.put('isNumber', PyJsHoisted_isNumber_)
        @Js
        def PyJsHoisted_isString_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('value',throw=False).typeof(),Js('string'))
        PyJsHoisted_isString_.func_name = 'isString'
        var.put('isString', PyJsHoisted_isString_)
        @Js
        def PyJsHoisted_isFunction_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value'])
            return PyJsStrictEq(var.get('value',throw=False).typeof(),Js('function'))
        PyJsHoisted_isFunction_.func_name = 'isFunction'
        var.put('isFunction', PyJsHoisted_isFunction_)
        @Js
        def PyJsHoisted_baseFlatten_(array, isDeep, result, this, arguments, var=var):
            var = Scope({'array':array, 'isDeep':isDeep, 'result':result, 'this':this, 'arguments':arguments}, var)
            var.registers(['value', 'isDeep', 'array', 'result', 'length', 'index'])
            var.put('result', (var.get('result') or Js([])))
            var.put('index', (-Js(1.0)))
            var.put('length', var.get('array').get('length'))
            while (var.put('index',Js(var.get('index').to_number())+Js(1))<var.get('length')):
                var.put('value', var.get('array').get(var.get('index')))
                if var.get('isNumber')(var.get('value')):
                    var.get('result').put(var.get('result').get('length'), var.get('value'))
                else:
                    if var.get('isDeep'):
                        var.get('baseFlatten')(var.get('value'), var.get('isDeep'), var.get('result'))
                    else:
                        var.get('result').callprop('push', var.get('value'))
            return var.get('result')
        PyJsHoisted_baseFlatten_.func_name = 'baseFlatten'
        var.put('baseFlatten', PyJsHoisted_baseFlatten_)
        @Js
        def PyJsHoisted_shapeSize_(shape, this, arguments, var=var):
            var = Scope({'shape':shape, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 's', 'shape'])
            var.put('s', Js(1.0))
            #for JS loop
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('shape').get('length')):
                try:
                    var.put('s', var.get('shape').get(var.get('i')), '*')
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('s')
        PyJsHoisted_shapeSize_.func_name = 'shapeSize'
        var.put('shapeSize', PyJsHoisted_shapeSize_)
        @Js
        def PyJsHoisted_getType_(dtype, this, arguments, var=var):
            var = Scope({'dtype':dtype, 'this':this, 'arguments':arguments}, var)
            var.registers(['dtype'])
            return (var.get('dtype') if var.get('isFunction')(var.get('dtype')) else (var.get('DTYPES').get(var.get('dtype')) or var.get('Array')))
        PyJsHoisted_getType_.func_name = 'getType'
        var.put('getType', PyJsHoisted_getType_)
        @Js
        def PyJsHoisted__dim_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['ret', 'x'])
            var.put('ret', Js([]))
            while PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('x',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('x'))),Js('object')):
                var.get('ret').callprop('push', var.get('x').get('length'))
                var.put('x', var.get('x').get('0'))
            return var.get('ret')
        PyJsHoisted__dim_.func_name = '_dim'
        var.put('_dim', PyJsHoisted__dim_)
        @Js
        def PyJsHoisted_getShape_(array, this, arguments, var=var):
            var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
            var.registers(['z', 'array', 'y'])
            pass
            if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('array',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('array'))),Js('object')):
                var.put('y', var.get('array').get('0'))
                if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('y',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('y'))),Js('object')):
                    var.put('z', var.get('y').get('0'))
                    if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('z',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('z'))),Js('object')):
                        return var.get('_dim')(var.get('array'))
                    return Js([var.get('array').get('length'), var.get('y').get('length')])
                return Js([var.get('array').get('length')])
            return Js([])
        PyJsHoisted_getShape_.func_name = 'getShape'
        var.put('getShape', PyJsHoisted_getShape_)
        Js('use strict')
        var.put('DTYPES', var.get('require')(Js('./dtypes')))
        var.put('_', var.get('require')(Js('lodash')))
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        pass
        var.get('module').put('exports', Js({'isNumber':var.get('isNumber'),'isString':var.get('isString'),'isFunction':var.get('isFunction'),'flatten':var.get('baseFlatten'),'shapeSize':var.get('shapeSize'),'getType':var.get('getType'),'getShape':var.get('getShape'),'defaults':var.get('_').get('defaults')}))
    PyJs_anonymous_487_._set_name('anonymous')
    @Js
    def PyJs_anonymous_488_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_489_(process, this, arguments, var=var):
            var = Scope({'process':process, 'this':this, 'arguments':arguments}, var)
            var.registers(['filter', 'basename', 'normalizeArray', 'process', 'substr'])
            @Js
            def PyJsHoisted_normalizeArray_(parts, allowAboveRoot, this, arguments, var=var):
                var = Scope({'parts':parts, 'allowAboveRoot':allowAboveRoot, 'this':this, 'arguments':arguments}, var)
                var.registers(['i', 'allowAboveRoot', 'last', 'up', 'parts'])
                var.put('up', Js(0.0))
                #for JS loop
                var.put('i', (var.get('parts').get('length')-Js(1.0)))
                while (var.get('i')>=Js(0.0)):
                    try:
                        var.put('last', var.get('parts').get(var.get('i')))
                        if PyJsStrictEq(var.get('last'),Js('.')):
                            var.get('parts').callprop('splice', var.get('i'), Js(1.0))
                        else:
                            if PyJsStrictEq(var.get('last'),Js('..')):
                                var.get('parts').callprop('splice', var.get('i'), Js(1.0))
                                (var.put('up',Js(var.get('up').to_number())+Js(1))-Js(1))
                            else:
                                if var.get('up'):
                                    var.get('parts').callprop('splice', var.get('i'), Js(1.0))
                                    (var.put('up',Js(var.get('up').to_number())-Js(1))+Js(1))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                if var.get('allowAboveRoot'):
                    #for JS loop
                    
                    while (var.put('up',Js(var.get('up').to_number())-Js(1))+Js(1)):
                        try:
                            var.get('parts').callprop('unshift', Js('..'))
                        finally:
                                var.get('up')
                return var.get('parts')
            PyJsHoisted_normalizeArray_.func_name = 'normalizeArray'
            var.put('normalizeArray', PyJsHoisted_normalizeArray_)
            @Js
            def PyJsHoisted_basename_(path, this, arguments, var=var):
                var = Scope({'path':path, 'this':this, 'arguments':arguments}, var)
                var.registers(['i', 'path', 'start', 'matchedSlash', 'end'])
                if PyJsStrictNeq(var.get('path',throw=False).typeof(),Js('string')):
                    var.put('path', (var.get('path')+Js('')))
                var.put('start', Js(0.0))
                var.put('end', (-Js(1.0)))
                var.put('matchedSlash', Js(True))
                pass
                #for JS loop
                var.put('i', (var.get('path').get('length')-Js(1.0)))
                while (var.get('i')>=Js(0.0)):
                    try:
                        if PyJsStrictEq(var.get('path').callprop('charCodeAt', var.get('i')),Js(47.0)):
                            if var.get('matchedSlash').neg():
                                var.put('start', (var.get('i')+Js(1.0)))
                                break
                        else:
                            if PyJsStrictEq(var.get('end'),(-Js(1.0))):
                                var.put('matchedSlash', Js(False))
                                var.put('end', (var.get('i')+Js(1.0)))
                    finally:
                            var.put('i',Js(var.get('i').to_number())-Js(1))
                if PyJsStrictEq(var.get('end'),(-Js(1.0))):
                    return Js('')
                return var.get('path').callprop('slice', var.get('start'), var.get('end'))
            PyJsHoisted_basename_.func_name = 'basename'
            var.put('basename', PyJsHoisted_basename_)
            @Js
            def PyJsHoisted_filter_(xs, f, this, arguments, var=var):
                var = Scope({'xs':xs, 'f':f, 'this':this, 'arguments':arguments}, var)
                var.registers(['i', 'f', 'xs', 'res'])
                if var.get('xs').get('filter'):
                    return var.get('xs').callprop('filter', var.get('f'))
                var.put('res', Js([]))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('xs').get('length')):
                    try:
                        if var.get('f')(var.get('xs').get(var.get('i')), var.get('i'), var.get('xs')):
                            var.get('res').callprop('push', var.get('xs').get(var.get('i')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                return var.get('res')
            PyJsHoisted_filter_.func_name = 'filter'
            var.put('filter', PyJsHoisted_filter_)
            pass
            @Js
            def PyJs_anonymous_490_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['resolvedPath', 'path', 'resolvedAbsolute', 'i'])
                var.put('resolvedPath', Js(''))
                var.put('resolvedAbsolute', Js(False))
                #for JS loop
                var.put('i', (var.get('arguments').get('length')-Js(1.0)))
                while ((var.get('i')>=(-Js(1.0))) and var.get('resolvedAbsolute').neg()):
                    try:
                        var.put('path', (var.get('arguments').get(var.get('i')) if (var.get('i')>=Js(0.0)) else var.get('process').callprop('cwd')))
                        if PyJsStrictNeq(var.get('path',throw=False).typeof(),Js('string')):
                            PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Arguments to path.resolve must be strings')))
                            raise PyJsTempException
                        else:
                            if var.get('path').neg():
                                continue
                        var.put('resolvedPath', ((var.get('path')+Js('/'))+var.get('resolvedPath')))
                        var.put('resolvedAbsolute', PyJsStrictEq(var.get('path').callprop('charAt', Js(0.0)),Js('/')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1))
                @Js
                def PyJs_anonymous_491_(p, this, arguments, var=var):
                    var = Scope({'p':p, 'this':this, 'arguments':arguments}, var)
                    var.registers(['p'])
                    return var.get('p').neg().neg()
                PyJs_anonymous_491_._set_name('anonymous')
                var.put('resolvedPath', var.get('normalizeArray')(var.get('filter')(var.get('resolvedPath').callprop('split', Js('/')), PyJs_anonymous_491_), var.get('resolvedAbsolute').neg()).callprop('join', Js('/')))
                return (((Js('/') if var.get('resolvedAbsolute') else Js(''))+var.get('resolvedPath')) or Js('.'))
            PyJs_anonymous_490_._set_name('anonymous')
            var.get('exports').put('resolve', PyJs_anonymous_490_)
            @Js
            def PyJs_anonymous_492_(path, this, arguments, var=var):
                var = Scope({'path':path, 'this':this, 'arguments':arguments}, var)
                var.registers(['path', 'isAbsolute', 'trailingSlash'])
                var.put('isAbsolute', var.get('exports').callprop('isAbsolute', var.get('path')))
                var.put('trailingSlash', PyJsStrictEq(var.get('substr')(var.get('path'), (-Js(1.0))),Js('/')))
                @Js
                def PyJs_anonymous_493_(p, this, arguments, var=var):
                    var = Scope({'p':p, 'this':this, 'arguments':arguments}, var)
                    var.registers(['p'])
                    return var.get('p').neg().neg()
                PyJs_anonymous_493_._set_name('anonymous')
                var.put('path', var.get('normalizeArray')(var.get('filter')(var.get('path').callprop('split', Js('/')), PyJs_anonymous_493_), var.get('isAbsolute').neg()).callprop('join', Js('/')))
                if (var.get('path').neg() and var.get('isAbsolute').neg()):
                    var.put('path', Js('.'))
                if (var.get('path') and var.get('trailingSlash')):
                    var.put('path', Js('/'), '+')
                return ((Js('/') if var.get('isAbsolute') else Js(''))+var.get('path'))
            PyJs_anonymous_492_._set_name('anonymous')
            var.get('exports').put('normalize', PyJs_anonymous_492_)
            @Js
            def PyJs_anonymous_494_(path, this, arguments, var=var):
                var = Scope({'path':path, 'this':this, 'arguments':arguments}, var)
                var.registers(['path'])
                return PyJsStrictEq(var.get('path').callprop('charAt', Js(0.0)),Js('/'))
            PyJs_anonymous_494_._set_name('anonymous')
            var.get('exports').put('isAbsolute', PyJs_anonymous_494_)
            @Js
            def PyJs_anonymous_495_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['paths'])
                var.put('paths', var.get('Array').get('prototype').get('slice').callprop('call', var.get('arguments'), Js(0.0)))
                @Js
                def PyJs_anonymous_496_(p, index, this, arguments, var=var):
                    var = Scope({'p':p, 'index':index, 'this':this, 'arguments':arguments}, var)
                    var.registers(['index', 'p'])
                    if PyJsStrictNeq(var.get('p',throw=False).typeof(),Js('string')):
                        PyJsTempException = JsToPyException(var.get('TypeError').create(Js('Arguments to path.join must be strings')))
                        raise PyJsTempException
                    return var.get('p')
                PyJs_anonymous_496_._set_name('anonymous')
                return var.get('exports').callprop('normalize', var.get('filter')(var.get('paths'), PyJs_anonymous_496_).callprop('join', Js('/')))
            PyJs_anonymous_495_._set_name('anonymous')
            var.get('exports').put('join', PyJs_anonymous_495_)
            @Js
            def PyJs_anonymous_497_(PyJsArg_66726f6d_, to, this, arguments, var=var):
                var = Scope({'from':PyJsArg_66726f6d_, 'to':to, 'this':this, 'arguments':arguments}, var)
                var.registers(['outputParts', 'fromParts', 'from', 'i', 'trim', 'to', 'samePartsLength', 'toParts', 'length'])
                @Js
                def PyJsHoisted_trim_(arr, this, arguments, var=var):
                    var = Scope({'arr':arr, 'this':this, 'arguments':arguments}, var)
                    var.registers(['end', 'arr', 'start'])
                    var.put('start', Js(0.0))
                    #for JS loop
                    
                    while (var.get('start')<var.get('arr').get('length')):
                        try:
                            if PyJsStrictNeq(var.get('arr').get(var.get('start')),Js('')):
                                break
                        finally:
                                (var.put('start',Js(var.get('start').to_number())+Js(1))-Js(1))
                    var.put('end', (var.get('arr').get('length')-Js(1.0)))
                    #for JS loop
                    
                    while (var.get('end')>=Js(0.0)):
                        try:
                            if PyJsStrictNeq(var.get('arr').get(var.get('end')),Js('')):
                                break
                        finally:
                                (var.put('end',Js(var.get('end').to_number())-Js(1))+Js(1))
                    if (var.get('start')>var.get('end')):
                        return Js([])
                    return var.get('arr').callprop('slice', var.get('start'), ((var.get('end')-var.get('start'))+Js(1.0)))
                PyJsHoisted_trim_.func_name = 'trim'
                var.put('trim', PyJsHoisted_trim_)
                var.put('from', var.get('exports').callprop('resolve', var.get('from')).callprop('substr', Js(1.0)))
                var.put('to', var.get('exports').callprop('resolve', var.get('to')).callprop('substr', Js(1.0)))
                pass
                var.put('fromParts', var.get('trim')(var.get('from').callprop('split', Js('/'))))
                var.put('toParts', var.get('trim')(var.get('to').callprop('split', Js('/'))))
                var.put('length', var.get('Math').callprop('min', var.get('fromParts').get('length'), var.get('toParts').get('length')))
                var.put('samePartsLength', var.get('length'))
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('length')):
                    try:
                        if PyJsStrictNeq(var.get('fromParts').get(var.get('i')),var.get('toParts').get(var.get('i'))):
                            var.put('samePartsLength', var.get('i'))
                            break
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.put('outputParts', Js([]))
                #for JS loop
                var.put('i', var.get('samePartsLength'))
                while (var.get('i')<var.get('fromParts').get('length')):
                    try:
                        var.get('outputParts').callprop('push', Js('..'))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.put('outputParts', var.get('outputParts').callprop('concat', var.get('toParts').callprop('slice', var.get('samePartsLength'))))
                return var.get('outputParts').callprop('join', Js('/'))
            PyJs_anonymous_497_._set_name('anonymous')
            var.get('exports').put('relative', PyJs_anonymous_497_)
            var.get('exports').put('sep', Js('/'))
            var.get('exports').put('delimiter', Js(':'))
            @Js
            def PyJs_anonymous_498_(path, this, arguments, var=var):
                var = Scope({'path':path, 'this':this, 'arguments':arguments}, var)
                var.registers(['i', 'code', 'path', 'hasRoot', 'matchedSlash', 'end'])
                if PyJsStrictNeq(var.get('path',throw=False).typeof(),Js('string')):
                    var.put('path', (var.get('path')+Js('')))
                if PyJsStrictEq(var.get('path').get('length'),Js(0.0)):
                    return Js('.')
                var.put('code', var.get('path').callprop('charCodeAt', Js(0.0)))
                var.put('hasRoot', PyJsStrictEq(var.get('code'),Js(47.0)))
                var.put('end', (-Js(1.0)))
                var.put('matchedSlash', Js(True))
                #for JS loop
                var.put('i', (var.get('path').get('length')-Js(1.0)))
                while (var.get('i')>=Js(1.0)):
                    try:
                        var.put('code', var.get('path').callprop('charCodeAt', var.get('i')))
                        if PyJsStrictEq(var.get('code'),Js(47.0)):
                            if var.get('matchedSlash').neg():
                                var.put('end', var.get('i'))
                                break
                        else:
                            var.put('matchedSlash', Js(False))
                    finally:
                            var.put('i',Js(var.get('i').to_number())-Js(1))
                if PyJsStrictEq(var.get('end'),(-Js(1.0))):
                    return (Js('/') if var.get('hasRoot') else Js('.'))
                if (var.get('hasRoot') and PyJsStrictEq(var.get('end'),Js(1.0))):
                    return Js('/')
                return var.get('path').callprop('slice', Js(0.0), var.get('end'))
            PyJs_anonymous_498_._set_name('anonymous')
            var.get('exports').put('dirname', PyJs_anonymous_498_)
            pass
            @Js
            def PyJs_anonymous_499_(path, ext, this, arguments, var=var):
                var = Scope({'path':path, 'ext':ext, 'this':this, 'arguments':arguments}, var)
                var.registers(['path', 'f', 'ext'])
                var.put('f', var.get('basename')(var.get('path')))
                if (var.get('ext') and PyJsStrictEq(var.get('f').callprop('substr', ((-Js(1.0))*var.get('ext').get('length'))),var.get('ext'))):
                    var.put('f', var.get('f').callprop('substr', Js(0.0), (var.get('f').get('length')-var.get('ext').get('length'))))
                return var.get('f')
            PyJs_anonymous_499_._set_name('anonymous')
            var.get('exports').put('basename', PyJs_anonymous_499_)
            @Js
            def PyJs_anonymous_500_(path, this, arguments, var=var):
                var = Scope({'path':path, 'this':this, 'arguments':arguments}, var)
                var.registers(['startDot', 'i', 'startPart', 'code', 'path', 'preDotState', 'matchedSlash', 'end'])
                if PyJsStrictNeq(var.get('path',throw=False).typeof(),Js('string')):
                    var.put('path', (var.get('path')+Js('')))
                var.put('startDot', (-Js(1.0)))
                var.put('startPart', Js(0.0))
                var.put('end', (-Js(1.0)))
                var.put('matchedSlash', Js(True))
                var.put('preDotState', Js(0.0))
                #for JS loop
                var.put('i', (var.get('path').get('length')-Js(1.0)))
                while (var.get('i')>=Js(0.0)):
                    try:
                        var.put('code', var.get('path').callprop('charCodeAt', var.get('i')))
                        if PyJsStrictEq(var.get('code'),Js(47.0)):
                            if var.get('matchedSlash').neg():
                                var.put('startPart', (var.get('i')+Js(1.0)))
                                break
                            continue
                        if PyJsStrictEq(var.get('end'),(-Js(1.0))):
                            var.put('matchedSlash', Js(False))
                            var.put('end', (var.get('i')+Js(1.0)))
                        if PyJsStrictEq(var.get('code'),Js(46.0)):
                            if PyJsStrictEq(var.get('startDot'),(-Js(1.0))):
                                var.put('startDot', var.get('i'))
                            else:
                                if PyJsStrictNeq(var.get('preDotState'),Js(1.0)):
                                    var.put('preDotState', Js(1.0))
                        else:
                            if PyJsStrictNeq(var.get('startDot'),(-Js(1.0))):
                                var.put('preDotState', (-Js(1.0)))
                    finally:
                            var.put('i',Js(var.get('i').to_number())-Js(1))
                if (((PyJsStrictEq(var.get('startDot'),(-Js(1.0))) or PyJsStrictEq(var.get('end'),(-Js(1.0)))) or PyJsStrictEq(var.get('preDotState'),Js(0.0))) or ((PyJsStrictEq(var.get('preDotState'),Js(1.0)) and PyJsStrictEq(var.get('startDot'),(var.get('end')-Js(1.0)))) and PyJsStrictEq(var.get('startDot'),(var.get('startPart')+Js(1.0))))):
                    return Js('')
                return var.get('path').callprop('slice', var.get('startDot'), var.get('end'))
            PyJs_anonymous_500_._set_name('anonymous')
            var.get('exports').put('extname', PyJs_anonymous_500_)
            pass
            @Js
            def PyJs_anonymous_501_(str, start, len, this, arguments, var=var):
                var = Scope({'str':str, 'start':start, 'len':len, 'this':this, 'arguments':arguments}, var)
                var.registers(['str', 'len', 'start'])
                return var.get('str').callprop('substr', var.get('start'), var.get('len'))
            PyJs_anonymous_501_._set_name('anonymous')
            @Js
            def PyJs_anonymous_502_(str, start, len, this, arguments, var=var):
                var = Scope({'str':str, 'start':start, 'len':len, 'this':this, 'arguments':arguments}, var)
                var.registers(['str', 'len', 'start'])
                if (var.get('start')<Js(0.0)):
                    var.put('start', (var.get('str').get('length')+var.get('start')))
                return var.get('str').callprop('substr', var.get('start'), var.get('len'))
            PyJs_anonymous_502_._set_name('anonymous')
            var.put('substr', (PyJs_anonymous_501_ if PyJsStrictEq(Js('ab').callprop('substr', (-Js(1.0))),Js('b')) else PyJs_anonymous_502_))
        PyJs_anonymous_489_._set_name('anonymous')
        PyJs_anonymous_489_.callprop('call', var.get(u"this"), var.get('require')(Js('_process')))
    PyJs_anonymous_488_._set_name('anonymous')
    @Js
    def PyJs_anonymous_503_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['drainQueue', 'module', 'draining', 'runClearTimeout', 'defaultSetTimout', 'exports', 'queueIndex', 'Item', 'noop', 'runTimeout', 'queue', 'require', 'defaultClearTimeout', 'cachedSetTimeout', 'process', 'currentQueue', 'cachedClearTimeout', 'cleanUpNextTick'])
        @Js
        def PyJsHoisted_defaultSetTimout_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('setTimeout has not been defined')))
            raise PyJsTempException
        PyJsHoisted_defaultSetTimout_.func_name = 'defaultSetTimout'
        var.put('defaultSetTimout', PyJsHoisted_defaultSetTimout_)
        @Js
        def PyJsHoisted_defaultClearTimeout_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('clearTimeout has not been defined')))
            raise PyJsTempException
        PyJsHoisted_defaultClearTimeout_.func_name = 'defaultClearTimeout'
        var.put('defaultClearTimeout', PyJsHoisted_defaultClearTimeout_)
        @Js
        def PyJsHoisted_runTimeout_(fun, this, arguments, var=var):
            var = Scope({'fun':fun, 'this':this, 'arguments':arguments}, var)
            var.registers(['fun'])
            if PyJsStrictEq(var.get('cachedSetTimeout'),var.get('setTimeout')):
                return var.get('setTimeout')(var.get('fun'), Js(0.0))
            if ((PyJsStrictEq(var.get('cachedSetTimeout'),var.get('defaultSetTimout')) or var.get('cachedSetTimeout').neg()) and var.get('setTimeout')):
                var.put('cachedSetTimeout', var.get('setTimeout'))
                return var.get('setTimeout')(var.get('fun'), Js(0.0))
            try:
                return var.get('cachedSetTimeout')(var.get('fun'), Js(0.0))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_86433943 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    try:
                        return var.get('cachedSetTimeout').callprop('call', var.get(u"null"), var.get('fun'), Js(0.0))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_99966339 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            return var.get('cachedSetTimeout').callprop('call', var.get(u"this"), var.get('fun'), Js(0.0))
                        finally:
                            if PyJsHolder_65_99966339 is not None:
                                var.own['e'] = PyJsHolder_65_99966339
                            else:
                                del var.own['e']
                            del PyJsHolder_65_99966339
                finally:
                    if PyJsHolder_65_86433943 is not None:
                        var.own['e'] = PyJsHolder_65_86433943
                    else:
                        del var.own['e']
                    del PyJsHolder_65_86433943
        PyJsHoisted_runTimeout_.func_name = 'runTimeout'
        var.put('runTimeout', PyJsHoisted_runTimeout_)
        @Js
        def PyJsHoisted_runClearTimeout_(marker, this, arguments, var=var):
            var = Scope({'marker':marker, 'this':this, 'arguments':arguments}, var)
            var.registers(['marker'])
            if PyJsStrictEq(var.get('cachedClearTimeout'),var.get('clearTimeout')):
                return var.get('clearTimeout')(var.get('marker'))
            if ((PyJsStrictEq(var.get('cachedClearTimeout'),var.get('defaultClearTimeout')) or var.get('cachedClearTimeout').neg()) and var.get('clearTimeout')):
                var.put('cachedClearTimeout', var.get('clearTimeout'))
                return var.get('clearTimeout')(var.get('marker'))
            try:
                return var.get('cachedClearTimeout')(var.get('marker'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_35864820 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    try:
                        return var.get('cachedClearTimeout').callprop('call', var.get(u"null"), var.get('marker'))
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_1039932 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            return var.get('cachedClearTimeout').callprop('call', var.get(u"this"), var.get('marker'))
                        finally:
                            if PyJsHolder_65_1039932 is not None:
                                var.own['e'] = PyJsHolder_65_1039932
                            else:
                                del var.own['e']
                            del PyJsHolder_65_1039932
                finally:
                    if PyJsHolder_65_35864820 is not None:
                        var.own['e'] = PyJsHolder_65_35864820
                    else:
                        del var.own['e']
                    del PyJsHolder_65_35864820
        PyJsHoisted_runClearTimeout_.func_name = 'runClearTimeout'
        var.put('runClearTimeout', PyJsHoisted_runClearTimeout_)
        @Js
        def PyJsHoisted_cleanUpNextTick_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            if (var.get('draining').neg() or var.get('currentQueue').neg()):
                return var.get('undefined')
            var.put('draining', Js(False))
            if var.get('currentQueue').get('length'):
                var.put('queue', var.get('currentQueue').callprop('concat', var.get('queue')))
            else:
                var.put('queueIndex', (-Js(1.0)))
            if var.get('queue').get('length'):
                var.get('drainQueue')()
        PyJsHoisted_cleanUpNextTick_.func_name = 'cleanUpNextTick'
        var.put('cleanUpNextTick', PyJsHoisted_cleanUpNextTick_)
        @Js
        def PyJsHoisted_drainQueue_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'timeout'])
            if var.get('draining'):
                return var.get('undefined')
            var.put('timeout', var.get('runTimeout')(var.get('cleanUpNextTick')))
            var.put('draining', Js(True))
            var.put('len', var.get('queue').get('length'))
            while var.get('len'):
                var.put('currentQueue', var.get('queue'))
                var.put('queue', Js([]))
                while (var.put('queueIndex',Js(var.get('queueIndex').to_number())+Js(1))<var.get('len')):
                    if var.get('currentQueue'):
                        var.get('currentQueue').get(var.get('queueIndex')).callprop('run')
                var.put('queueIndex', (-Js(1.0)))
                var.put('len', var.get('queue').get('length'))
            var.put('currentQueue', var.get(u"null"))
            var.put('draining', Js(False))
            var.get('runClearTimeout')(var.get('timeout'))
        PyJsHoisted_drainQueue_.func_name = 'drainQueue'
        var.put('drainQueue', PyJsHoisted_drainQueue_)
        @Js
        def PyJsHoisted_Item_(fun, array, this, arguments, var=var):
            var = Scope({'fun':fun, 'array':array, 'this':this, 'arguments':arguments}, var)
            var.registers(['fun', 'array'])
            var.get(u"this").put('fun', var.get('fun'))
            var.get(u"this").put('array', var.get('array'))
        PyJsHoisted_Item_.func_name = 'Item'
        var.put('Item', PyJsHoisted_Item_)
        @Js
        def PyJsHoisted_noop_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            pass
        PyJsHoisted_noop_.func_name = 'noop'
        var.put('noop', PyJsHoisted_noop_)
        var.put('process', var.get('module').put('exports', Js({})))
        pass
        pass
        pass
        pass
        @Js
        def PyJs_anonymous_504_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            try:
                if PyJsStrictEq(var.get('setTimeout',throw=False).typeof(),Js('function')):
                    var.put('cachedSetTimeout', var.get('setTimeout'))
                else:
                    var.put('cachedSetTimeout', var.get('defaultSetTimout'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_92251323 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('cachedSetTimeout', var.get('defaultSetTimout'))
                finally:
                    if PyJsHolder_65_92251323 is not None:
                        var.own['e'] = PyJsHolder_65_92251323
                    else:
                        del var.own['e']
                    del PyJsHolder_65_92251323
            try:
                if PyJsStrictEq(var.get('clearTimeout',throw=False).typeof(),Js('function')):
                    var.put('cachedClearTimeout', var.get('clearTimeout'))
                else:
                    var.put('cachedClearTimeout', var.get('defaultClearTimeout'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_67767699 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('cachedClearTimeout', var.get('defaultClearTimeout'))
                finally:
                    if PyJsHolder_65_67767699 is not None:
                        var.own['e'] = PyJsHolder_65_67767699
                    else:
                        del var.own['e']
                    del PyJsHolder_65_67767699
        PyJs_anonymous_504_._set_name('anonymous')
        PyJs_anonymous_504_()
        pass
        pass
        var.put('queue', Js([]))
        var.put('draining', Js(False))
        pass
        var.put('queueIndex', (-Js(1.0)))
        pass
        pass
        @Js
        def PyJs_anonymous_505_(fun, this, arguments, var=var):
            var = Scope({'fun':fun, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'fun', 'args'])
            var.put('args', var.get('Array').create((var.get('arguments').get('length')-Js(1.0))))
            if (var.get('arguments').get('length')>Js(1.0)):
                #for JS loop
                var.put('i', Js(1.0))
                while (var.get('i')<var.get('arguments').get('length')):
                    try:
                        var.get('args').put((var.get('i')-Js(1.0)), var.get('arguments').get(var.get('i')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            var.get('queue').callprop('push', var.get('Item').create(var.get('fun'), var.get('args')))
            if (PyJsStrictEq(var.get('queue').get('length'),Js(1.0)) and var.get('draining').neg()):
                var.get('runTimeout')(var.get('drainQueue'))
        PyJs_anonymous_505_._set_name('anonymous')
        var.get('process').put('nextTick', PyJs_anonymous_505_)
        pass
        @Js
        def PyJs_anonymous_506_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get(u"this").get('fun').callprop('apply', var.get(u"null"), var.get(u"this").get('array'))
        PyJs_anonymous_506_._set_name('anonymous')
        var.get('Item').get('prototype').put('run', PyJs_anonymous_506_)
        var.get('process').put('title', Js('browser'))
        var.get('process').put('browser', Js(True))
        var.get('process').put('env', Js({}))
        var.get('process').put('argv', Js([]))
        var.get('process').put('version', Js(''))
        var.get('process').put('versions', Js({}))
        pass
        var.get('process').put('on', var.get('noop'))
        var.get('process').put('addListener', var.get('noop'))
        var.get('process').put('once', var.get('noop'))
        var.get('process').put('off', var.get('noop'))
        var.get('process').put('removeListener', var.get('noop'))
        var.get('process').put('removeAllListeners', var.get('noop'))
        var.get('process').put('emit', var.get('noop'))
        var.get('process').put('prependListener', var.get('noop'))
        var.get('process').put('prependOnceListener', var.get('noop'))
        @Js
        def PyJs_anonymous_507_(name, this, arguments, var=var):
            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name'])
            return Js([])
        PyJs_anonymous_507_._set_name('anonymous')
        var.get('process').put('listeners', PyJs_anonymous_507_)
        @Js
        def PyJs_anonymous_508_(name, this, arguments, var=var):
            var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
            var.registers(['name'])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('process.binding is not supported')))
            raise PyJsTempException
        PyJs_anonymous_508_._set_name('anonymous')
        var.get('process').put('binding', PyJs_anonymous_508_)
        @Js
        def PyJs_anonymous_509_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js('/')
        PyJs_anonymous_509_._set_name('anonymous')
        var.get('process').put('cwd', PyJs_anonymous_509_)
        @Js
        def PyJs_anonymous_510_(dir, this, arguments, var=var):
            var = Scope({'dir':dir, 'this':this, 'arguments':arguments}, var)
            var.registers(['dir'])
            PyJsTempException = JsToPyException(var.get('Error').create(Js('process.chdir is not supported')))
            raise PyJsTempException
        PyJs_anonymous_510_._set_name('anonymous')
        var.get('process').put('chdir', PyJs_anonymous_510_)
        @Js
        def PyJs_anonymous_511_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js(0.0)
        PyJs_anonymous_511_._set_name('anonymous')
        var.get('process').put('umask', PyJs_anonymous_511_)
    PyJs_anonymous_503_._set_name('anonymous')
    @Js
    def PyJs_anonymous_512_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['exports', 'require', 'module'])
        @Js
        def PyJs_anonymous_513_(PyJsArg_676c6f62616c_, Buffer, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'Buffer':Buffer, 'this':this, 'arguments':arguments}, var)
            var.registers(['POOL', 'BUFFER', 'freeArrayBuffer', 'hasUint8C', 'mallocUint16', 'mallocFloat', 'mallocInt16', 'mallocDouble', 'Buffer', 'global', 'bits', 'DATA', 'mallocInt32', 'mallocUint8', 'mallocUint8Clamped', 'freeTypedArray', 'mallocDataView', 'mallocInt8', 'mallocUint32', 'mallocArrayBuffer', 'mallocBuffer', 'dup'])
            @Js
            def PyJsHoisted_freeArrayBuffer_(buffer, this, arguments, var=var):
                var = Scope({'buffer':buffer, 'this':this, 'arguments':arguments}, var)
                var.registers(['log_n', 'n', 'buffer'])
                if var.get('buffer').neg():
                    return var.get('undefined')
                var.put('n', (var.get('buffer').get('length') or var.get('buffer').get('byteLength')))
                var.put('log_n', var.get('bits').callprop('log2', var.get('n')))
                var.get('DATA').get(var.get('log_n')).callprop('push', var.get('buffer'))
            PyJsHoisted_freeArrayBuffer_.func_name = 'freeArrayBuffer'
            var.put('freeArrayBuffer', PyJsHoisted_freeArrayBuffer_)
            @Js
            def PyJsHoisted_freeTypedArray_(array, this, arguments, var=var):
                var = Scope({'array':array, 'this':this, 'arguments':arguments}, var)
                var.registers(['array'])
                var.get('freeArrayBuffer')(var.get('array').get('buffer'))
            PyJsHoisted_freeTypedArray_.func_name = 'freeTypedArray'
            var.put('freeTypedArray', PyJsHoisted_freeTypedArray_)
            @Js
            def PyJsHoisted_mallocArrayBuffer_(n, this, arguments, var=var):
                var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                var.registers(['log_n', 'n', 'd'])
                var.put('n', var.get('bits').callprop('nextPow2', var.get('n')))
                var.put('log_n', var.get('bits').callprop('log2', var.get('n')))
                var.put('d', var.get('DATA').get(var.get('log_n')))
                if (var.get('d').get('length')>Js(0.0)):
                    return var.get('d').callprop('pop')
                return var.get('ArrayBuffer').create(var.get('n'))
            PyJsHoisted_mallocArrayBuffer_.func_name = 'mallocArrayBuffer'
            var.put('mallocArrayBuffer', PyJsHoisted_mallocArrayBuffer_)
            @Js
            def PyJsHoisted_mallocUint8_(n, this, arguments, var=var):
                var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                var.registers(['n'])
                return var.get('Uint8Array').create(var.get('mallocArrayBuffer')(var.get('n')), Js(0.0), var.get('n'))
            PyJsHoisted_mallocUint8_.func_name = 'mallocUint8'
            var.put('mallocUint8', PyJsHoisted_mallocUint8_)
            @Js
            def PyJsHoisted_mallocUint16_(n, this, arguments, var=var):
                var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                var.registers(['n'])
                return var.get('Uint16Array').create(var.get('mallocArrayBuffer')((Js(2.0)*var.get('n'))), Js(0.0), var.get('n'))
            PyJsHoisted_mallocUint16_.func_name = 'mallocUint16'
            var.put('mallocUint16', PyJsHoisted_mallocUint16_)
            @Js
            def PyJsHoisted_mallocUint32_(n, this, arguments, var=var):
                var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                var.registers(['n'])
                return var.get('Uint32Array').create(var.get('mallocArrayBuffer')((Js(4.0)*var.get('n'))), Js(0.0), var.get('n'))
            PyJsHoisted_mallocUint32_.func_name = 'mallocUint32'
            var.put('mallocUint32', PyJsHoisted_mallocUint32_)
            @Js
            def PyJsHoisted_mallocInt8_(n, this, arguments, var=var):
                var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                var.registers(['n'])
                return var.get('Int8Array').create(var.get('mallocArrayBuffer')(var.get('n')), Js(0.0), var.get('n'))
            PyJsHoisted_mallocInt8_.func_name = 'mallocInt8'
            var.put('mallocInt8', PyJsHoisted_mallocInt8_)
            @Js
            def PyJsHoisted_mallocInt16_(n, this, arguments, var=var):
                var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                var.registers(['n'])
                return var.get('Int16Array').create(var.get('mallocArrayBuffer')((Js(2.0)*var.get('n'))), Js(0.0), var.get('n'))
            PyJsHoisted_mallocInt16_.func_name = 'mallocInt16'
            var.put('mallocInt16', PyJsHoisted_mallocInt16_)
            @Js
            def PyJsHoisted_mallocInt32_(n, this, arguments, var=var):
                var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                var.registers(['n'])
                return var.get('Int32Array').create(var.get('mallocArrayBuffer')((Js(4.0)*var.get('n'))), Js(0.0), var.get('n'))
            PyJsHoisted_mallocInt32_.func_name = 'mallocInt32'
            var.put('mallocInt32', PyJsHoisted_mallocInt32_)
            @Js
            def PyJsHoisted_mallocFloat_(n, this, arguments, var=var):
                var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                var.registers(['n'])
                return var.get('Float32Array').create(var.get('mallocArrayBuffer')((Js(4.0)*var.get('n'))), Js(0.0), var.get('n'))
            PyJsHoisted_mallocFloat_.func_name = 'mallocFloat'
            var.put('mallocFloat', PyJsHoisted_mallocFloat_)
            @Js
            def PyJsHoisted_mallocDouble_(n, this, arguments, var=var):
                var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                var.registers(['n'])
                return var.get('Float64Array').create(var.get('mallocArrayBuffer')((Js(8.0)*var.get('n'))), Js(0.0), var.get('n'))
            PyJsHoisted_mallocDouble_.func_name = 'mallocDouble'
            var.put('mallocDouble', PyJsHoisted_mallocDouble_)
            @Js
            def PyJsHoisted_mallocUint8Clamped_(n, this, arguments, var=var):
                var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                var.registers(['n'])
                if var.get('hasUint8C'):
                    return var.get('Uint8ClampedArray').create(var.get('mallocArrayBuffer')(var.get('n')), Js(0.0), var.get('n'))
                else:
                    return var.get('mallocUint8')(var.get('n'))
            PyJsHoisted_mallocUint8Clamped_.func_name = 'mallocUint8Clamped'
            var.put('mallocUint8Clamped', PyJsHoisted_mallocUint8Clamped_)
            @Js
            def PyJsHoisted_mallocDataView_(n, this, arguments, var=var):
                var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                var.registers(['n'])
                return var.get('DataView').create(var.get('mallocArrayBuffer')(var.get('n')), Js(0.0), var.get('n'))
            PyJsHoisted_mallocDataView_.func_name = 'mallocDataView'
            var.put('mallocDataView', PyJsHoisted_mallocDataView_)
            @Js
            def PyJsHoisted_mallocBuffer_(n, this, arguments, var=var):
                var = Scope({'n':n, 'this':this, 'arguments':arguments}, var)
                var.registers(['log_n', 'n', 'cache'])
                var.put('n', var.get('bits').callprop('nextPow2', var.get('n')))
                var.put('log_n', var.get('bits').callprop('log2', var.get('n')))
                var.put('cache', var.get('BUFFER').get(var.get('log_n')))
                if (var.get('cache').get('length')>Js(0.0)):
                    return var.get('cache').callprop('pop')
                return var.get('Buffer').create(var.get('n'))
            PyJsHoisted_mallocBuffer_.func_name = 'mallocBuffer'
            var.put('mallocBuffer', PyJsHoisted_mallocBuffer_)
            Js('use strict')
            var.put('bits', var.get('require')(Js('bit-twiddle')))
            var.put('dup', var.get('require')(Js('dup')))
            if var.get('global').get('__TYPEDARRAY_POOL').neg():
                def PyJs_LONG_514_(var=var):
                    return var.get('global').put('__TYPEDARRAY_POOL', Js({'UINT8':var.get('dup')(Js([Js(32.0), Js(0.0)])),'UINT16':var.get('dup')(Js([Js(32.0), Js(0.0)])),'UINT32':var.get('dup')(Js([Js(32.0), Js(0.0)])),'INT8':var.get('dup')(Js([Js(32.0), Js(0.0)])),'INT16':var.get('dup')(Js([Js(32.0), Js(0.0)])),'INT32':var.get('dup')(Js([Js(32.0), Js(0.0)])),'FLOAT':var.get('dup')(Js([Js(32.0), Js(0.0)])),'DOUBLE':var.get('dup')(Js([Js(32.0), Js(0.0)])),'DATA':var.get('dup')(Js([Js(32.0), Js(0.0)])),'UINT8C':var.get('dup')(Js([Js(32.0), Js(0.0)])),'BUFFER':var.get('dup')(Js([Js(32.0), Js(0.0)]))}))
                PyJs_LONG_514_()
            var.put('hasUint8C', PyJsStrictNeq(var.get('Uint8ClampedArray',throw=False).typeof(),Js('undefined')))
            var.put('POOL', var.get('global').get('__TYPEDARRAY_POOL'))
            if var.get('POOL').get('UINT8C').neg():
                var.get('POOL').put('UINT8C', var.get('dup')(Js([Js(32.0), Js(0.0)])))
            if var.get('POOL').get('BUFFER').neg():
                var.get('POOL').put('BUFFER', var.get('dup')(Js([Js(32.0), Js(0.0)])))
            var.put('DATA', var.get('POOL').get('DATA'))
            var.put('BUFFER', var.get('POOL').get('BUFFER'))
            @Js
            def PyJs_free_515_(array, this, arguments, var=var):
                var = Scope({'array':array, 'this':this, 'arguments':arguments, 'free':PyJs_free_515_}, var)
                var.registers(['log_n', 'n', 'array'])
                if var.get('Buffer').callprop('isBuffer', var.get('array')):
                    var.get('BUFFER').get(var.get('bits').callprop('log2', var.get('array').get('length'))).callprop('push', var.get('array'))
                else:
                    if PyJsStrictNeq(var.get('Object').get('prototype').get('toString').callprop('call', var.get('array')),Js('[object ArrayBuffer]')):
                        var.put('array', var.get('array').get('buffer'))
                    if var.get('array').neg():
                        return var.get('undefined')
                    var.put('n', (var.get('array').get('length') or var.get('array').get('byteLength')))
                    var.put('log_n', (var.get('bits').callprop('log2', var.get('n'))|Js(0.0)))
                    var.get('DATA').get(var.get('log_n')).callprop('push', var.get('array'))
            PyJs_free_515_._set_name('free')
            var.get('exports').put('free', PyJs_free_515_)
            pass
            pass
            def PyJs_LONG_516_(var=var):
                return var.get('exports').put('freeUint32', var.get('exports').put('freeInt8', var.get('exports').put('freeInt16', var.get('exports').put('freeInt32', var.get('exports').put('freeFloat32', var.get('exports').put('freeFloat', var.get('exports').put('freeFloat64', var.get('exports').put('freeDouble', var.get('exports').put('freeUint8Clamped', var.get('exports').put('freeDataView', var.get('freeTypedArray')))))))))))
            var.get('exports').put('freeUint8', var.get('exports').put('freeUint16', PyJs_LONG_516_()))
            var.get('exports').put('freeArrayBuffer', var.get('freeArrayBuffer'))
            @Js
            def PyJs_freeBuffer_517_(array, this, arguments, var=var):
                var = Scope({'array':array, 'this':this, 'arguments':arguments, 'freeBuffer':PyJs_freeBuffer_517_}, var)
                var.registers(['array'])
                var.get('BUFFER').get(var.get('bits').callprop('log2', var.get('array').get('length'))).callprop('push', var.get('array'))
            PyJs_freeBuffer_517_._set_name('freeBuffer')
            var.get('exports').put('freeBuffer', PyJs_freeBuffer_517_)
            @Js
            def PyJs_malloc_518_(n, dtype, this, arguments, var=var):
                var = Scope({'n':n, 'dtype':dtype, 'this':this, 'arguments':arguments, 'malloc':PyJs_malloc_518_}, var)
                var.registers(['dtype', 'n'])
                if (PyJsStrictEq(var.get('dtype'),var.get('undefined')) or PyJsStrictEq(var.get('dtype'),Js('arraybuffer'))):
                    return var.get('mallocArrayBuffer')(var.get('n'))
                else:
                    while 1:
                        SWITCHED = False
                        CONDITION = (var.get('dtype'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('uint8')):
                            SWITCHED = True
                            return var.get('mallocUint8')(var.get('n'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('uint16')):
                            SWITCHED = True
                            return var.get('mallocUint16')(var.get('n'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('uint32')):
                            SWITCHED = True
                            return var.get('mallocUint32')(var.get('n'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('int8')):
                            SWITCHED = True
                            return var.get('mallocInt8')(var.get('n'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('int16')):
                            SWITCHED = True
                            return var.get('mallocInt16')(var.get('n'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('int32')):
                            SWITCHED = True
                            return var.get('mallocInt32')(var.get('n'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('float')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('float32')):
                            SWITCHED = True
                            return var.get('mallocFloat')(var.get('n'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('double')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('float64')):
                            SWITCHED = True
                            return var.get('mallocDouble')(var.get('n'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('uint8_clamped')):
                            SWITCHED = True
                            return var.get('mallocUint8Clamped')(var.get('n'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('buffer')):
                            SWITCHED = True
                            return var.get('mallocBuffer')(var.get('n'))
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('data')):
                            SWITCHED = True
                            pass
                        if SWITCHED or PyJsStrictEq(CONDITION, Js('dataview')):
                            SWITCHED = True
                            return var.get('mallocDataView')(var.get('n'))
                        if True:
                            SWITCHED = True
                            return var.get(u"null")
                        SWITCHED = True
                        break
                return var.get(u"null")
            PyJs_malloc_518_._set_name('malloc')
            var.get('exports').put('malloc', PyJs_malloc_518_)
            pass
            var.get('exports').put('mallocArrayBuffer', var.get('mallocArrayBuffer'))
            pass
            var.get('exports').put('mallocUint8', var.get('mallocUint8'))
            pass
            var.get('exports').put('mallocUint16', var.get('mallocUint16'))
            pass
            var.get('exports').put('mallocUint32', var.get('mallocUint32'))
            pass
            var.get('exports').put('mallocInt8', var.get('mallocInt8'))
            pass
            var.get('exports').put('mallocInt16', var.get('mallocInt16'))
            pass
            var.get('exports').put('mallocInt32', var.get('mallocInt32'))
            pass
            var.get('exports').put('mallocFloat32', var.get('exports').put('mallocFloat', var.get('mallocFloat')))
            pass
            var.get('exports').put('mallocFloat64', var.get('exports').put('mallocDouble', var.get('mallocDouble')))
            pass
            var.get('exports').put('mallocUint8Clamped', var.get('mallocUint8Clamped'))
            pass
            var.get('exports').put('mallocDataView', var.get('mallocDataView'))
            pass
            var.get('exports').put('mallocBuffer', var.get('mallocBuffer'))
            @Js
            def PyJs_clearCache_519_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'clearCache':PyJs_clearCache_519_}, var)
                var.registers(['i'])
                #for JS loop
                var.put('i', Js(0.0))
                while (var.get('i')<Js(32.0)):
                    try:
                        var.get('POOL').get('UINT8').get(var.get('i')).put('length', Js(0.0))
                        var.get('POOL').get('UINT16').get(var.get('i')).put('length', Js(0.0))
                        var.get('POOL').get('UINT32').get(var.get('i')).put('length', Js(0.0))
                        var.get('POOL').get('INT8').get(var.get('i')).put('length', Js(0.0))
                        var.get('POOL').get('INT16').get(var.get('i')).put('length', Js(0.0))
                        var.get('POOL').get('INT32').get(var.get('i')).put('length', Js(0.0))
                        var.get('POOL').get('FLOAT').get(var.get('i')).put('length', Js(0.0))
                        var.get('POOL').get('DOUBLE').get(var.get('i')).put('length', Js(0.0))
                        var.get('POOL').get('UINT8C').get(var.get('i')).put('length', Js(0.0))
                        var.get('DATA').get(var.get('i')).put('length', Js(0.0))
                        var.get('BUFFER').get(var.get('i')).put('length', Js(0.0))
                    finally:
                            var.put('i',Js(var.get('i').to_number())+Js(1))
            PyJs_clearCache_519_._set_name('clearCache')
            var.get('exports').put('clearCache', PyJs_clearCache_519_)
        PyJs_anonymous_513_._set_name('anonymous')
        PyJs_anonymous_513_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))), var.get('require')(Js('buffer')).get('Buffer'))
    PyJs_anonymous_512_._set_name('anonymous')
    @Js
    def PyJs_anonymous_520_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['module', 'exports', 'require', 'unique_eq', 'unique_pred', 'unique'])
        @Js
        def PyJsHoisted_unique_pred_(list, compare, this, arguments, var=var):
            var = Scope({'list':list, 'compare':compare, 'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'i', 'b', 'ptr', 'compare', 'a', 'list'])
            var.put('ptr', Js(1.0))
            var.put('len', var.get('list').get('length'))
            var.put('a', var.get('list').get('0'))
            var.put('b', var.get('list').get('0'))
            #for JS loop
            var.put('i', Js(1.0))
            while (var.get('i')<var.get('len')):
                try:
                    var.put('b', var.get('a'))
                    var.put('a', var.get('list').get(var.get('i')))
                    if var.get('compare')(var.get('a'), var.get('b')):
                        if PyJsStrictEq(var.get('i'),var.get('ptr')):
                            (var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1))
                            continue
                        var.get('list').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('a'))
                finally:
                        var.put('i',Js(var.get('i').to_number())+Js(1))
            var.get('list').put('length', var.get('ptr'))
            return var.get('list')
        PyJsHoisted_unique_pred_.func_name = 'unique_pred'
        var.put('unique_pred', PyJsHoisted_unique_pred_)
        @Js
        def PyJsHoisted_unique_eq_(list, this, arguments, var=var):
            var = Scope({'list':list, 'this':this, 'arguments':arguments}, var)
            var.registers(['len', 'i', 'b', 'ptr', 'a', 'list'])
            var.put('ptr', Js(1.0))
            var.put('len', var.get('list').get('length'))
            var.put('a', var.get('list').get('0'))
            var.put('b', var.get('list').get('0'))
            #for JS loop
            var.put('i', Js(1.0))
            while (var.get('i')<var.get('len')):
                try:
                    var.put('b', var.get('a'))
                    var.put('a', var.get('list').get(var.get('i')))
                    if PyJsStrictNeq(var.get('a'),var.get('b')):
                        if PyJsStrictEq(var.get('i'),var.get('ptr')):
                            (var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1))
                            continue
                        var.get('list').put((var.put('ptr',Js(var.get('ptr').to_number())+Js(1))-Js(1)), var.get('a'))
                finally:
                        PyJsComma(var.put('i',Js(var.get('i').to_number())+Js(1)),var.put('b', var.get('a')))
            var.get('list').put('length', var.get('ptr'))
            return var.get('list')
        PyJsHoisted_unique_eq_.func_name = 'unique_eq'
        var.put('unique_eq', PyJsHoisted_unique_eq_)
        @Js
        def PyJsHoisted_unique_(list, compare, sorted, this, arguments, var=var):
            var = Scope({'list':list, 'compare':compare, 'sorted':sorted, 'this':this, 'arguments':arguments}, var)
            var.registers(['sorted', 'list', 'compare'])
            if PyJsStrictEq(var.get('list').get('length'),Js(0.0)):
                return var.get('list')
            if var.get('compare'):
                if var.get('sorted').neg():
                    var.get('list').callprop('sort', var.get('compare'))
                return var.get('unique_pred')(var.get('list'), var.get('compare'))
            if var.get('sorted').neg():
                var.get('list').callprop('sort')
            return var.get('unique_eq')(var.get('list'))
        PyJsHoisted_unique_.func_name = 'unique'
        var.put('unique', PyJsHoisted_unique_)
        Js('use strict')
        pass
        pass
        pass
        var.get('module').put('exports', var.get('unique'))
    PyJs_anonymous_520_._set_name('anonymous')
    @Js
    def PyJs_anonymous_521_(this, arguments, var=var):
        var = Scope({'this':this, 'arguments':arguments}, var)
        var.registers(['r'])
        @Js
        def PyJsHoisted_r_(e, n, t, this, arguments, var=var):
            var = Scope({'e':e, 'n':n, 't':t, 'this':this, 'arguments':arguments}, var)
            var.registers(['i', 'u', 'e', 'o', 't', 'n'])
            @Js
            def PyJsHoisted_o_(i, f, this, arguments, var=var):
                var = Scope({'i':i, 'f':f, 'this':this, 'arguments':arguments}, var)
                var.registers(['f', 'i', 'c', 'a', 'p'])
                if var.get('n').get(var.get('i')).neg():
                    if var.get('e').get(var.get('i')).neg():
                        var.put('c', ((Js('function')==var.get('require',throw=False).typeof()) and var.get('require')))
                        if (var.get('f').neg() and var.get('c')):
                            return var.get('c')(var.get('i'), Js(0.0).neg())
                        if var.get('u'):
                            return var.get('u')(var.get('i'), Js(0.0).neg())
                        var.put('a', var.get('Error').create(((Js("Cannot find module '")+var.get('i'))+Js("'"))))
                        PyJsTempException = JsToPyException(PyJsComma(var.get('a').put('code', Js('MODULE_NOT_FOUND')),var.get('a')))
                        raise PyJsTempException
                    var.put('p', var.get('n').put(var.get('i'), Js({'exports':Js({})})))
                    @Js
                    def PyJs_anonymous_522_(r, this, arguments, var=var):
                        var = Scope({'r':r, 'this':this, 'arguments':arguments}, var)
                        var.registers(['n', 'r'])
                        var.put('n', var.get('e').get(var.get('i')).get('1').get(var.get('r')))
                        return var.get('o')((var.get('n') or var.get('r')))
                    PyJs_anonymous_522_._set_name('anonymous')
                    var.get('e').get(var.get('i')).get('0').callprop('call', var.get('p').get('exports'), PyJs_anonymous_522_, var.get('p'), var.get('p').get('exports'), var.get('r'), var.get('e'), var.get('n'), var.get('t'))
                return var.get('n').get(var.get('i')).get('exports')
            PyJsHoisted_o_.func_name = 'o'
            var.put('o', PyJsHoisted_o_)
            pass
            #for JS loop
            var.put('u', ((Js('function')==var.get('require',throw=False).typeof()) and var.get('require')))
            var.put('i', Js(0.0))
            while (var.get('i')<var.get('t').get('length')):
                try:
                    var.get('o')(var.get('t').get(var.get('i')))
                finally:
                        (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
            return var.get('o')
        PyJsHoisted_r_.func_name = 'r'
        var.put('r', PyJsHoisted_r_)
        pass
        return var.get('r')
    PyJs_anonymous_521_._set_name('anonymous')
    return PyJs_anonymous_521_()(Js({'1':Js([PyJs_anonymous_2_, Js({'numjs':Js(38.0)})]),'2':Js([PyJs_anonymous_3_, Js({})]),'3':Js([PyJs_anonymous_4_, Js({})]),'4':Js([PyJs_anonymous_24_, Js({'base64-js':Js(2.0),'ieee754':Js(10.0)})]),'5':Js([PyJs_anonymous_87_, Js({'./lib/thunk.js':Js(7.0)})]),'6':Js([PyJs_anonymous_88_, Js({'uniq':Js(44.0)})]),'7':Js([PyJs_anonymous_89_, Js({'./compile.js':Js(6.0)})]),'8':Js([PyJs_anonymous_90_, Js({'cwise-compiler':Js(5.0)})]),'9':Js([PyJs_anonymous_91_, Js({})]),'10':Js([PyJs_anonymous_92_, Js({})]),'11':Js([PyJs_anonymous_95_, Js({})]),'12':Js([PyJs_anonymous_96_, Js({})]),'13':Js([PyJs_anonymous_98_, Js({})]),'14':Js([PyJs_anonymous_310_, Js({'./lib/fft-matrix.js':Js(15.0),'ndarray':Js(19.0),'ndarray-ops':Js(18.0),'typedarray-pool':Js(43.0)})]),'15':Js([PyJs_anonymous_311_, Js({'bit-twiddle':Js(3.0)})]),'16':Js([PyJs_anonymous_312_, Js({'./lib/planner.js':Js(17.0)})]),'17':Js([PyJs_anonymous_313_, Js({})]),'18':Js([PyJs_anonymous_318_, Js({'cwise-compiler':Js(5.0)})]),'19':Js([PyJs_anonymous_336_, Js({'iota-array':Js(11.0),'is-buffer':Js(12.0)})]),'20':Js([PyJs_anonymous_362_, Js({})]),'21':Js([PyJs_anonymous_363_, Js({})]),'22':Js([PyJs_anonymous_364_, Js({})]),'23':Js([PyJs_anonymous_368_, Js({})]),'24':Js([PyJs_anonymous_372_, Js({'./area-sum':Js(23.0)})]),'25':Js([PyJs_anonymous_374_, Js({'./read':Js(29.0),'path':Js(41.0)})]),'26':Js([PyJs_anonymous_382_, Js({'../ndarray':Js(39.0)})]),'27':Js([PyJs_anonymous_384_, Js({'./area-sum':Js(23.0),'./area-value':Js(24.0),'./data':Js(25.0),'./flip':Js(26.0),'./read':Js(29.0),'./resize':Js(30.0),'./rgb2gray':Js(31.0),'./sat':Js(32.0),'./save':Js(33.0),'./scharr':Js(34.0),'./sobel':Js(35.0),'./ssat':Js(36.0)})]),'28':Js([PyJs_anonymous_386_, Js({'../ndarray':Js(39.0),'cwise/lib/wrapper':Js(8.0)})]),'29':Js([PyJs_anonymous_389_, Js({'../errors':Js(22.0),'../ndarray':Js(39.0),'./is-grayscale':Js(28.0),'ndarray':Js(19.0)})]),'30':Js([PyJs_anonymous_391_, Js({'../ndarray':Js(39.0),'./utils':Js(37.0),'ndarray':Js(19.0)})]),'31':Js([PyJs_anonymous_393_, Js({'../ndarray':Js(39.0),'../utils':Js(40.0),'cwise/lib/wrapper':Js(8.0)})]),'32':Js([PyJs_anonymous_396_, Js({'../ndarray':Js(39.0),'./rgb2gray':Js(31.0),'cwise/lib/wrapper':Js(8.0)})]),'33':Js([PyJs_anonymous_399_, Js({'../errors':Js(22.0),'./utils':Js(37.0)})]),'34':Js([PyJs_anonymous_401_, Js({'../ndarray':Js(39.0),'../utils':Js(40.0),'./rgb2gray':Js(31.0),'cwise/lib/wrapper':Js(8.0),'ndarray-ops':Js(18.0)})]),'35':Js([PyJs_anonymous_404_, Js({'../ndarray':Js(39.0),'../utils':Js(40.0),'./rgb2gray':Js(31.0),'cwise/lib/wrapper':Js(8.0),'ndarray-ops':Js(18.0)})]),'36':Js([PyJs_anonymous_407_, Js({'../ndarray':Js(39.0),'./rgb2gray':Js(31.0),'cwise/lib/wrapper':Js(8.0)})]),'37':Js([PyJs_anonymous_410_, Js({'../ndarray':Js(39.0)})]),'38':Js([PyJs_anonymous_413_, Js({'./config':Js(20.0),'./dtypes':Js(21.0),'./errors':Js(22.0),'./images':Js(27.0),'./ndarray':Js(39.0),'./utils':Js(40.0),'cwise/lib/wrapper':Js(8.0),'ndarray':Js(19.0),'ndarray-fft':Js(14.0),'ndarray-ops':Js(18.0)})]),'39':Js([PyJs_anonymous_430_, Js({'./config':Js(20.0),'./errors':Js(22.0),'./utils':Js(40.0),'cwise/lib/wrapper':Js(8.0),'ndarray':Js(19.0),'ndarray-fft':Js(14.0),'ndarray-gemm':Js(16.0),'ndarray-ops':Js(18.0),'typedarray-pool':Js(43.0)})]),'40':Js([PyJs_anonymous_487_, Js({'./dtypes':Js(21.0),'lodash':Js(13.0)})]),'41':Js([PyJs_anonymous_488_, Js({'_process':Js(42.0)})]),'42':Js([PyJs_anonymous_503_, Js({})]),'43':Js([PyJs_anonymous_512_, Js({'bit-twiddle':Js(3.0),'buffer':Js(4.0),'dup':Js(9.0)})]),'44':Js([PyJs_anonymous_520_, Js({})])}), Js({}), Js([Js(1.0)]))
PyJs_LONG_523_()
pass
pass
pass
pass
var.put('numjs', var.get('getFromGlobals')(Js('numjs')))
var.get('numjs')
