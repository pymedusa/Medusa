{"version":3,"names":[],"mappings":"","sources":["js/apibuilder.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n$(document).ready(() => {\n    // Perform an API call\n    $('[data-action=api-call]').on('click', function () {\n        const parameters = $('[data-command=' + $(this).data('command-name') + ']');\n        const profile = $('#option-profile').is(':checked');\n        const targetId = $(this).data('target');\n        const timeId = $(this).data('time');\n        let url = $('#' + $(this).data('base-url')).text();\n        const urlId = $(this).data('url');\n\n        $.each(parameters, (index, item) => {\n            const name = $(item).attr('name');\n            let value = $(item).val();\n\n            if (name !== undefined && value !== undefined && name !== value && value) {\n                if ($.isArray(value)) {\n                    value = value.join('|');\n                }\n\n                url += '&' + name + '=' + value;\n            }\n        });\n\n        if (profile) {\n            url += '&profile=1';\n        }\n\n        const requestTime = new Date().getTime();\n        $.get(url.replace('/api/', 'api/'), (data, textStatus, jqXHR) => {\n            const responseTime = new Date().getTime() - requestTime;\n            const jsonp = $('#option-jsonp').is(':checked');\n            const responseType = jqXHR.getResponseHeader('content-type') || '';\n            const target = $(targetId);\n\n            $(timeId).text(responseTime + 'ms');\n            $(urlId).text(url + (jsonp ? '&jsonp=foo' : ''));\n\n            if (responseType.slice(0, 6) === 'image/') {\n                target.html($('<img/>').prop('src', url));\n            } else {\n                const json = JSON.stringify(data, null, 4);\n\n                if (jsonp) {\n                    target.text('foo(' + json + ');');\n                } else {\n                    target.text(json);\n                }\n            }\n\n            target.parents('.result-wrapper').removeClass('hidden');\n        });\n    });\n\n    // Remove the result of an API call\n    $('[data-action=clear-result]').on('click', function () {\n        $($(this).data('target')).html('').parents('.result-wrapper').addClass('hidden');\n    });\n\n    // Update the list of episodes\n    $('[data-action=update-episodes').on('change', function () {\n        const command = $(this).data('command');\n        const select = $('[data-command=' + command + '][name=episode]');\n        const season = $(this).val();\n        const show = $('[data-command=' + command + '][name=indexerid]').val();\n\n        if (select !== undefined) {\n            select.removeClass('hidden');\n            select.find('option:gt(0)').remove();\n\n            for (const episode in episodes[show][season]) {\n                // eslint-disable-line no-undef\n                if ({}.hasOwnProperty.call(episodes[show][season], episode)) {\n                    // eslint-disable-line no-undef\n                    select.append($('<option>', {\n                        value: episodes[show][season][episode], // eslint-disable-line no-undef\n                        label: 'Episode ' + episodes[show][season][episode] // eslint-disable-line no-undef\n                    }));\n                }\n            }\n        }\n    });\n\n    // Update the list of seasons\n    $('[data-action=update-seasons').on('change', function () {\n        const command = $(this).data('command');\n        const select = $('[data-command=' + command + '][name=season]');\n        const show = $(this).val();\n\n        if (select !== undefined) {\n            select.removeClass('hidden');\n            select.find('option:gt(0)').remove();\n\n            for (const season in episodes[show]) {\n                // eslint-disable-line no-undef\n                if ({}.hasOwnProperty.call(episodes[show], season)) {\n                    // eslint-disable-line no-undef\n                    select.append($('<option>', {\n                        value: season,\n                        label: season === 0 ? 'Specials' : 'Season ' + season\n                    }));\n                }\n            }\n        }\n    });\n\n    // Enable command search\n    $('#command-search').typeahead({\n        source: commands // eslint-disable-line no-undef\n    });\n    $('#command-search').on('change', function () {\n        const command = $(this).typeahead('getActive');\n\n        if (command) {\n            const commandId = command.replace('.', '-');\n            $('[href=#command-' + commandId + ']').click();\n        }\n    });\n});\n\n},{}]},{},[1]);\n"],"file":"apibuilder.js"}