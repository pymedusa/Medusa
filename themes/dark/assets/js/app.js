"use strict";(self.webpackChunkslim=self.webpackChunkslim||[]).push([[143],{7971:(e,o,n)=>{var s=n(538),t=n(1468),a=n(1083),i=n(6516),l=n(629),d=n(4054);s.Z.config.devtools=!0,s.Z.config.performance=!0,(0,t.zb)(),(0,t.VZ)();new s.Z({name:"app",router:a.Z,store:i.Z,data:()=>({globalLoading:!1,pageComponent:!1}),computed:{...(0,l.rn)({showsLoading:e=>e.shows.loading})},mounted(){const{getShows:e,setLoadingDisplay:o,setLoadingFinished:n}=this;if(d.yG&&console.log("App Mounted!"),!window.location.pathname.includes("/login")){const{$store:s}=this;Promise.all([s.dispatch("login",{username:window.username}),s.dispatch("getConfig"),s.dispatch("getStats")]).then((s=>{let[t,a]=s;d.yG&&console.log("App Loaded!");const i=new CustomEvent("medusa-config-loaded",{detail:{general:a.general,layout:a.layout}});window.dispatchEvent(i),e().then((()=>{console.log("Finished loading all shows."),setTimeout((()=>{n(!0),o(!1)}),2e3)}))})).catch((e=>{console.debug(e),alert("Unable to connect to Medusa!")}))}},methods:{...(0,l.nv)({getShows:"getShows"}),...(0,l.OI)(["setLoadingDisplay","setLoadingFinished"])}}).$mount("#vue-wrap")}},e=>{e.O(0,[886,125],(()=>{return o=7971,e(e.s=o);var o}));e.O()}]);
//# sourceMappingURL=app.js.map