{"version":3,"sources":["webpack://slim/./src/app.js"],"names":["Vue","registerPlugins","registerGlobalComponents","name","router","store","data","globalLoading","pageComponent","computed","mapState","showsLoading","state","shows","loading","mounted","getShows","setLoadingDisplay","setLoadingFinished","this","isDevelopment","console","log","window","location","pathname","includes","$store","Promise","all","dispatch","username","then","_","config","event","CustomEvent","detail","general","layout","dispatchEvent","catch","error","debug","alert","setTimeout","methods","mapActions","mapMutations","$mount"],"mappings":"yJAQAA,qBAAsB,EACtBA,wBAAyB,GAEzBC,WAGAC,UAEY,IAAIF,IAAI,CAChBG,KAAM,MACNC,OAFgB,IAGhBC,MAHgB,IAIhBC,KAAI,KACO,CACHC,eAAe,EACfC,eAAe,IAGvBC,SAAU,KACHC,QAAS,CACRC,aAAcC,GAASA,EAAMC,MAAMC,WAG3CC,UACI,MAAM,SAAEC,EAAF,kBAAYC,EAAZ,mBAA+BC,GAAuBC,KAM5D,GAJIC,MACAC,QAAQC,IAAI,iBAGXC,OAAOC,SAASC,SAASC,SAAS,UAAW,CAC9C,MAAM,OAAEC,GAAWR,KACnBS,QAAQC,IAAI,CACRF,EAAOG,SAAS,QAAS,CAAEC,SAAUR,OAAOQ,WAC5CJ,EAAOG,SAAS,aAChBH,EAAOG,SAAS,cACjBE,MAAK,EAAEC,EAAGC,MACLd,MACAC,QAAQC,IAAI,eAGhB,MAAMa,EAAQ,IAAIC,YAAY,uBAAwB,CAAEC,OAAQ,CAAEC,QAASJ,EAAOI,QAASC,OAAQL,EAAOK,UAC1GhB,OAAOiB,cAAcL,MACtBM,OAAMC,IACLrB,QAAQsB,MAAMD,GACdE,MAAM,mCAKd5B,IACKgB,MAAK,KACFX,QAAQC,IAAI,+BACZuB,YAAW,KACP3B,GAAmB,GACnBD,GAAkB,KACnB,SAGf6B,QAAS,KACFC,QAAW,CACV/B,SAAU,iBAEXgC,QAAa,CACZ,oBACA,0BAGTC,OAAO,e","file":"js/app.js","sourcesContent":["import Vue from 'vue';\n\nimport { registerGlobalComponents, registerPlugins } from './global-vue-shim';\nimport router from './router';\nimport store from './store';\nimport { mapActions, mapMutations, mapState } from 'vuex';\nimport { isDevelopment } from './utils/core';\n\nVue.config.devtools = true;\nVue.config.performance = true;\n\nregisterPlugins();\n\n// @TODO: Remove this before v1.0.0\nregisterGlobalComponents();\n\nconst app = new Vue({\n    name: 'app',\n    router,\n    store,\n    data() {\n        return {\n            globalLoading: false,\n            pageComponent: false\n        };\n    },\n    computed: {\n        ...mapState({\n            showsLoading: state => state.shows.loading\n        })\n    },\n    mounted() {\n        const { getShows, setLoadingDisplay, setLoadingFinished } = this;\n\n        if (isDevelopment) {\n            console.log('App Mounted!');\n        }\n\n        if (!window.location.pathname.includes('/login')) {\n            const { $store } = this;\n            Promise.all([\n                $store.dispatch('login', { username: window.username }),\n                $store.dispatch('getConfig'),\n                $store.dispatch('getStats')\n            ]).then(([_, config]) => {\n                if (isDevelopment) {\n                    console.log('App Loaded!');\n                }\n                // Legacy - send config.general to jQuery (received by index.js)\n                const event = new CustomEvent('medusa-config-loaded', { detail: { general: config.general, layout: config.layout } });\n                window.dispatchEvent(event);\n            }).catch(error => {\n                console.debug(error);\n                alert('Unable to connect to Medusa!'); // eslint-disable-line no-alert\n            });\n        }\n\n        // Let's bootstrap the app with essential data.\n        getShows()\n            .then(() => {\n                console.log('Finished loading all shows.');\n                setTimeout(() => {\n                    setLoadingFinished(true);\n                    setLoadingDisplay(false);\n                }, 2000);\n            });\n    },\n    methods: {\n        ...mapActions({\n            getShows: 'getShows'\n        }),\n        ...mapMutations([\n            'setLoadingDisplay',\n            'setLoadingFinished'\n        ])\n    }\n}).$mount('#vue-wrap');\n\nexport default app;\n"],"sourceRoot":""}