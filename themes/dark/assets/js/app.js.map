{"version":3,"file":"js/app.js","mappings":"kKASAA,EAAAA,EAAAA,OAAAA,UAAsB,EACtBA,EAAAA,EAAAA,OAAAA,aAAyB,EAEuB,SAA5CC,SAASC,KAAKC,aAAa,eAC3BH,EAAAA,EAAAA,OAAAA,UAAsB,EACtBA,EAAAA,EAAAA,OAAAA,aAAyB,IAG7BI,EAAAA,EAAAA,OAGAC,EAAAA,EAAAA,MAEe,IAAIL,EAAAA,EAAI,CACnBM,KAAM,QACNC,OAFmB,IAGnBC,MAHmB,IAInBC,KAAI,KACO,CACHC,iBAAiB,IAGzB,gBACI,MAAM,SAAEC,EAAF,kBAAYC,EAAZ,mBAA+BC,GAAuBC,KAQ5D,GANIC,EAAAA,IACAC,QAAQC,IAAI,sBAGVH,KAAKI,OAAOC,SAAS,SAEtBC,OAAOC,SAASC,SAASC,SAAS,UAAW,CAC9C,MAAM,OAAEL,GAAWJ,WACbI,EAAOC,SAAS,SACtBL,KAAKJ,iBAAkB,EAEvBc,QAAQC,IAAI,CACRP,EAAOC,SAAS,aAChBD,EAAOC,SAAS,cACjBO,MAAK,IAAc,IAAZC,GAAY,EACdZ,EAAAA,IACAC,QAAQC,IAAI,eAGhB,MAAMW,EAAQ,IAAIC,YAAY,uBAAwB,CAAEC,OAAQ,CAAEC,QAASJ,EAAOI,QAASC,OAAQL,EAAOK,UAC1GZ,OAAOa,cAAcL,GAIrBjB,IACKe,MAAK,KACFV,QAAQC,IAAI,+BACZiB,YAAW,KACPrB,GAAmB,GACnBD,GAAkB,KACnB,KACHE,KAAKqB,SAAQ,SAEtBC,OAAMC,IACLrB,QAAQsB,MAAMD,GACdE,MAAM,gCACNzB,KAAKqB,SAAQ,QAIzBK,QAAS,KACFC,EAAAA,EAAAA,IAAW,CACV9B,SAAU,WACVwB,QAAS,gBAGVO,EAAAA,EAAAA,IAAa,CACZ,oBACA,wBAGRC,OAAOC,GAEH,GAAI9B,KAAKJ,iBAAmBU,OAAOC,SAASC,SAASC,SAAS,UAC1D,OAAOqB,EAAEC,EAAAA,OAGlBC,OAAO,kB","sources":["webpack://slim/./src/app.js"],"sourcesContent":["import Vue from 'vue';\n\nimport { registerGlobalComponents, registerPlugins } from './global-vue-shim';\nimport router from './router';\nimport store from './store';\nimport { mapActions, mapMutations } from 'vuex';\nimport { isDevelopment } from './utils/core';\nimport { App } from './components';\n\nVue.config.devtools = true;\nVue.config.performance = true;\n\nif (document.body.getAttribute('developer') === 'True') {\n    Vue.config.devtools = true;\n    Vue.config.performance = true;\n}\n\nregisterPlugins();\n\n// @TODO: Remove this before v1.0.0\nregisterGlobalComponents();\n\nexport default new Vue({\n    name: 'index',\n    router,\n    store,\n    data() {\n        return {\n            isAuthenticated: false\n        };\n    },\n    async mounted() {\n        const { getShows, setLoadingDisplay, setLoadingFinished } = this;\n\n        if (isDevelopment) {\n            console.log('App Mounted!');\n        }\n\n        await this.$store.dispatch('auth');\n\n        if (!window.location.pathname.includes('/login')) {\n            const { $store } = this;\n            await $store.dispatch('login');\n            this.isAuthenticated = true;\n\n            Promise.all([\n                $store.dispatch('getConfig'),\n                $store.dispatch('getStats')\n            ]).then(([config]) => {\n                if (isDevelopment) {\n                    console.log('App Loaded!');\n                }\n                // Legacy - send config.general to jQuery (received by index.js)\n                const event = new CustomEvent('medusa-config-loaded', { detail: { general: config.general, layout: config.layout } });\n                window.dispatchEvent(event);\n\n                // Let's bootstrap the app with essential data like the shows.\n                // For the storing of the shows in the browsers cache, we depend on config/general.\n                getShows()\n                    .then(() => {\n                        console.log('Finished loading all shows.');\n                        setTimeout(() => {\n                            setLoadingFinished(true);\n                            setLoadingDisplay(false);\n                        }, 2000);\n                        this.connect(true);\n                    });\n            }).catch(error => {\n                console.debug(error);\n                alert('Unable to connect to Medusa!'); // eslint-disable-line no-alert\n                this.connect(false);\n            });\n        }\n    },\n    methods: {\n        ...mapActions({\n            getShows: 'getShows',\n            connect: 'connect'\n\n        }),\n        ...mapMutations([\n            'setLoadingDisplay',\n            'setLoadingFinished'\n        ])\n    },\n    render(h) { // eslint-disable-line vue/require-render-return\n        // Do not start with rendering the app, before we're sure we authenticated.\n        if (this.isAuthenticated || window.location.pathname.includes('/login')) {\n            return h(App);\n        }\n    }\n}).$mount('#app-wrapper');\n\n"],"names":["Vue","document","body","getAttribute","registerPlugins","registerGlobalComponents","name","router","store","data","isAuthenticated","getShows","setLoadingDisplay","setLoadingFinished","this","isDevelopment","console","log","$store","dispatch","window","location","pathname","includes","Promise","all","then","config","event","CustomEvent","detail","general","layout","dispatchEvent","setTimeout","connect","catch","error","debug","alert","methods","mapActions","mapMutations","render","h","App","$mount"],"sourceRoot":""}