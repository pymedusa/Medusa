{"version":3,"names":[],"mappings":"","sources":["js/common/init.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nMEDUSA.common.init = function () {\n    // Import underscore.string using it's mixin export.\n    _.mixin(s.exports());\n\n    // Reset the layout for the activated tab (when using ui tabs)\n    $('#showTabs').tabs({\n        activate() {\n            $('.show-grid').isotope('layout');\n        }\n    });\n\n    // Background Fanart Functions\n    if (MEDUSA.config.fanartBackground) {\n        const seriesSlug = $('#series-slug').attr('value') || $('#background-series-slug').attr('value');\n\n        if (seriesSlug) {\n            const path = apiRoot + 'series/' + seriesSlug + '/asset/fanart?api_key=' + apiKey;\n            $.backstretch(path);\n            $('.backstretch').css('top', backstretchOffset());\n            $('.backstretch').css('opacity', MEDUSA.config.fanartBackgroundOpacity).fadeIn(500);\n        }\n    }\n\n    function backstretchOffset() {\n        let offset = '90px';\n        if ($('#sub-menu-container').length === 0) {\n            offset = '50px';\n        }\n        if ($(window).width() < 1280) {\n            offset = '50px';\n        }\n        return offset;\n    }\n\n    /**\n     * Make an attempt to detect if there are currently scroll bars visible for divs with the horizontal-scroll class.\n     *\n     * If scroll bars are visible the fixed left and right buttons become visible on that page.\n     */\n    const initHorizontalScroll = function () {\n        const scrollDiv = $('div.horizontal-scroll').get();\n        if (scrollDiv.length === 0) {\n            return;\n        }\n\n        const scrollbarVisible = scrollDiv.map(el => {\n            return el.scrollWidth > el.clientWidth;\n        }).indexOf(true);\n\n        if (scrollbarVisible >= 0) {\n            $('.scroll-wrapper.left').addClass('show');\n            $('.scroll-wrapper.right').addClass('show');\n        } else {\n            $('.scroll-wrapper.left').removeClass('show');\n            $('.scroll-wrapper.right').removeClass('show');\n        }\n    };\n\n    initHorizontalScroll();\n\n    $(window).on('resize', () => {\n        $('.backstretch').css('top', backstretchOffset());\n        initHorizontalScroll();\n    });\n\n    // Scroll Functions\n    function scrollTo(dest) {\n        $('html, body').animate({ scrollTop: $(dest).offset().top }, 500, 'linear');\n    }\n\n    $('#scroll-left').on('click', e => {\n        e.preventDefault();\n        $('div.horizontal-scroll').animate({\n            scrollLeft: '-=153'\n        }, 1000, 'easeOutQuad');\n    });\n\n    $('#scroll-right').on('click', e => {\n        e.preventDefault();\n        $('div.horizontal-scroll').animate({\n            scrollLeft: '+=153'\n        }, 1000, 'easeOutQuad');\n    });\n\n    $(document).on('scroll', () => {\n        if ($(window).scrollTop() > 100) {\n            $('.scroll-wrapper.top').addClass('show');\n        } else {\n            $('.scroll-wrapper.top').removeClass('show');\n        }\n    });\n\n    $('.scroll-wrapper.top').on('click', () => {\n        scrollTo($('body'));\n    });\n\n    // Scroll to Anchor\n    $('a[href^=\"#season\"]').on('click', function (e) {\n        e.preventDefault();\n        scrollTo($('a[name=\"' + $(this).attr('href').replace('#', '') + '\"]'));\n    });\n\n    // Hover Dropdown for Nav\n    $('ul.nav li.dropdown').hover(function () {\n        $(this).find('.dropdown-menu').stop(true, true).delay(200).fadeIn(500);\n    }, function () {\n        $(this).find('.dropdown-menu').stop(true, true).delay(200).fadeOut(500);\n    });\n\n    // Function to change luminance of #000000 color - used in triggerhighlighting\n    function colorLuminance(hex, lum) {\n        hex = String(hex).replace(/[^0-9a-f]/gi, '');\n        if (hex.length < 6) {\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n        lum = lum || 0;\n        let rgb = '#';\n        let c;\n        let i;\n        for (i = 0; i < 3; i++) {\n            c = parseInt(hex.substr(i * 2, 2), 16);\n            c = Math.round(Math.min(Math.max(0, c + c * lum), 255)).toString(16);\n            rgb += ('00' + c).substr(c.length);\n        }\n        return rgb;\n    }\n\n    // Function to convert rgb(0,0,0) into #000000\n    function rgb2hex(rgb) {\n        rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n        function hex(x) {\n            return ('0' + parseInt(x, 10).toString(16)).slice(-2);\n        }\n        return '#' + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n    }\n\n    let revertBackgroundColor; // Used to revert back to original background-color after highlight\n    $('.triggerhighlight').on('mouseover', function () {\n        revertBackgroundColor = rgb2hex($(this).parent().css('background-color')); // Fetch the original background-color to revert back to\n        $(this).parent().find('.triggerhighlight').css('background-color', colorLuminance(revertBackgroundColor, -0.15)); // Setting highlight background-color\n    }).on('mouseout', function () {\n        $(this).parent().find('.triggerhighlight').css('background-color', revertBackgroundColor); // Reverting back to original background-color\n    });\n\n    $.rootDirCheck = function () {\n        if ($('#rootDirs option:selected').length === 0) {\n            $('button[data-add-show]').prop('disabled', true);\n            if (!$('#configure_show_options').is(':checked')) {\n                $('#configure_show_options').prop('checked', true);\n                $('#content_configure_show_options').fadeIn('fast', 'linear');\n            }\n            if ($('#rootDirAlert').length === 0) {\n                $('#content-row').before('<div id=\"rootDirAlert\"><div class=\"text-center\">' + '<div class=\"alert alert-danger upgrade-notification hidden-print role=\"alert\">' + '<strong>ERROR!</strong> Unable to add recommended shows.  Please set a default directory first.' + '</div></div></div>');\n            } else {\n                $('#rootDirAlert').show();\n            }\n        } else {\n            $('#rootDirAlert').hide();\n            $('button[data-add-show]').prop('disabled', false);\n        }\n    };\n\n    $.confirm.options = {\n        confirmButton: 'Yes',\n        cancelButton: 'Cancel',\n        dialogClass: 'modal-dialog',\n        post: false,\n        confirm(e) {\n            location.href = e[0].href;\n        }\n    };\n\n    $('a.shutdown').confirm({\n        title: 'Shutdown',\n        text: 'Are you sure you want to shutdown Medusa?'\n    });\n\n    $('a.restart').confirm({\n        title: 'Restart',\n        text: 'Are you sure you want to restart Medusa?'\n    });\n\n    $('a.removeshow').confirm({\n        title: 'Remove Show',\n        text: 'Are you sure you want to remove <span class=\"footerhighlight\">' + $('#showtitle').data('showname') + '</span> from the database?<br><br><input type=\"checkbox\" id=\"deleteFiles\"> <span class=\"red-text\">Check to delete files as well. IRREVERSIBLE</span></input>',\n        confirm(e) {\n            location.href = e[0].href + (document.getElementById('deleteFiles').checked ? '&full=1' : '');\n        }\n    });\n\n    $('a.clearhistory').confirm({\n        title: 'Clear History',\n        text: 'Are you sure you want to clear all download history?'\n    });\n\n    $('a.trimhistory').confirm({\n        title: 'Trim History',\n        text: 'Are you sure you want to trim all download history older than 30 days?'\n    });\n\n    $('a.submiterrors').confirm({\n        title: 'Submit Errors',\n        text: 'Are you sure you want to submit these errors ?<br><br><span class=\"red-text\">Make sure Medusa is updated and trigger<br> this error with debug enabled before submitting</span>'\n    });\n\n    $('#config-components').tabs({\n        activate(event, ui) {\n            let lastOpenedPanel = $(this).data('lastOpenedPanel');\n\n            if (!lastOpenedPanel) {\n                lastOpenedPanel = $(ui.oldPanel);\n            }\n\n            if (!$(this).data('topPositionTab')) {\n                $(this).data('topPositionTab', $(ui.newPanel).position().top);\n            }\n\n            // Dont use the builtin fx effects. This will fade in/out both tabs, we dont want that\n            // Fadein the new tab yourself\n            $(ui.newPanel).hide().fadeIn(0);\n\n            if (lastOpenedPanel) {\n                // 1. Show the previous opened tab by removing the jQuery UI class\n                // 2. Make the tab temporary position:absolute so the two tabs will overlap\n                // 3. Set topposition so they will overlap if you go from tab 1 to tab 0\n                // 4. Remove position:absolute after animation\n                lastOpenedPanel.toggleClass('ui-tabs-hide').css('position', 'absolute').css('top', $(this).data('topPositionTab') + 'px').fadeOut(0, function () {\n                    $(this).css('position', '');\n                });\n            }\n\n            // Saving the last tab has been opened\n            $(this).data('lastOpenedPanel', $(ui.newPanel));\n        }\n    });\n\n    // @TODO Replace this with a real touchscreen check\n    // hack alert: if we don't have a touchscreen, and we are already hovering the mouse, then click should link instead of toggle\n    if ((navigator.maxTouchPoints || 0) < 2) {\n        $('.dropdown-toggle').on('click', function () {\n            const $this = $(this);\n            if ($this.attr('aria-expanded') === 'true') {\n                window.location.href = $('base').attr('href') + $this.attr('href');\n            }\n        });\n    }\n\n    if (MEDUSA.config.fuzzyDating) {\n        $.timeago.settings.allowFuture = true;\n        $.timeago.settings.strings = {\n            prefixAgo: null,\n            prefixFromNow: 'In ',\n            suffixAgo: 'ago',\n            suffixFromNow: '',\n            seconds: 'a few seconds',\n            minute: 'a minute',\n            minutes: '%d minutes',\n            hour: 'an hour',\n            hours: '%d hours',\n            day: 'a day',\n            days: '%d days',\n            month: 'a month',\n            months: '%d months',\n            year: 'a year',\n            years: '%d years',\n            wordSeparator: ' ',\n            numbers: []\n        };\n        $('[datetime]').timeago();\n    }\n\n    $(document.body).on('click', 'a[data-no-redirect]', function (e) {\n        e.preventDefault();\n        $.get($(this).attr('href'));\n        return false;\n    });\n\n    $(document.body).on('click', '.bulkCheck', function () {\n        const bulkCheck = this;\n        const whichBulkCheck = $(bulkCheck).attr('id');\n\n        $('.' + whichBulkCheck + ':visible').each(function () {\n            $(this).prop('checked', $(bulkCheck).prop('checked'));\n        });\n    });\n\n    $('.enabler').each(function () {\n        if (!$(this).prop('checked')) {\n            $('#content_' + $(this).attr('id')).hide();\n        }\n    });\n\n    $('.enabler').on('click', function () {\n        if ($(this).prop('checked')) {\n            $('#content_' + $(this).attr('id')).fadeIn('fast', 'linear');\n        } else {\n            $('#content_' + $(this).attr('id')).fadeOut('fast', 'linear');\n        }\n    });\n\n    $('.addQTip').each(function () {\n        $(this).css({\n            'cursor': 'help', // eslint-disable-line quote-props\n            'text-shadow': '0px 0px 0.5px #666'\n        });\n\n        const my = $(this).data('qtip-my') || 'left center';\n        const at = $(this).data('qtip-at') || 'middle right';\n\n        $(this).qtip({\n            show: {\n                solo: true\n            },\n            position: {\n                my,\n                at\n            },\n            style: {\n                tip: {\n                    corner: true,\n                    method: 'polygon'\n                },\n                classes: 'qtip-rounded qtip-shadow ui-tooltip-sb'\n            }\n        });\n    });\n};\n\n},{}]},{},[1]);\n"],"file":"init.js"}