{"version":3,"names":[],"mappings":"","sources":["js/config-providers.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n$(document).ready(function () {\n    // eslint-disable-line max-lines\n    console.log('This function need to be moved to config/providers.js but can\\'t be as we\\'ve got scope issues currently.');\n    $.fn.showHideProviders = function () {\n        $('.providerDiv').each(function () {\n            const providerName = $(this).prop('id');\n            const selectedProvider = $('#editAProvider :selected').val();\n\n            if (selectedProvider + 'Div' === providerName) {\n                $(this).show();\n            } else {\n                $(this).hide();\n            }\n        });\n    };\n\n    const ifExists = function (loopThroughArray, searchFor) {\n        let found = false;\n\n        loopThroughArray.forEach(rootObject => {\n            if (rootObject.name === searchFor) {\n                found = true;\n            }\n            console.log(rootObject.name + ' while searching for: ' + searchFor);\n        });\n        return found;\n    };\n\n    /**\n     * Gets categories for the provided newznab provider.\n     * @param {String} isDefault\n     * @param {Array} selectedProvider\n     * @return no return data. Function updateNewznabCaps() is run at callback\n     */\n    $.fn.getCategories = function (isDefault, selectedProvider) {\n        const name = selectedProvider[0];\n        const url = selectedProvider[1];\n        const key = selectedProvider[2];\n\n        if (!name || !url || !key) {\n            return;\n        }\n\n        const params = { url, name, api_key: key }; // eslint-disable-line camelcase\n\n        $('.updating_categories').wrapInner('<span><img src=\"images/loading16' + MEDUSA.config.themeSpinner + '.gif\"> Updating Categories ...</span>'); // eslint-disable-line no-undef\n        const jqxhr = $.getJSON('config/providers/getNewznabCategories', params, function (data) {\n            $(this).updateNewznabCaps(data, selectedProvider);\n            console.debug(data.tv_categories);\n        });\n        jqxhr.always(() => {\n            $('.updating_categories').empty();\n        });\n    };\n\n    const newznabProviders = [];\n    const torrentRssProviders = [];\n\n    $.fn.addProvider = function (id, name, url, key, cat, isDefault, showProvider) {\n        // eslint-disable-line max-params\n        url = $.trim(url);\n        if (!url) {\n            return;\n        }\n\n        if (!/^https?:\\/\\//i.test(url)) {\n            url = 'http://' + url;\n        }\n\n        if (url.match('/$') === null) {\n            url += '/';\n        }\n\n        const newData = [isDefault, [name, url, key, cat]];\n        newznabProviders[id] = newData;\n\n        $('#editANewznabProvider').append('<option value=' + id + '>' + name + '</option>');\n        $('select#editANewznabProvider').prop('selectedIndex', 0);\n\n        if ($('#provider_order_list > #' + id).length === 0 && showProvider !== false) {\n            const toAdd = '<li class=\"ui-state-default\" id=\"' + id + '\"> <input type=\"checkbox\" id=\"enable_' + id + '\" class=\"provider_enabler\" CHECKED> <a href=\"' + MEDUSA.config.anonURL + url + '\" class=\"imgLink\" target=\"_new\"><img src=\"images/providers/newznab.png\" alt=\"' + name + '\" width=\"16\" height=\"16\"></a> ' + name + '</li>'; // eslint-disable-line no-undef\n\n            $('#provider_order_list').append(toAdd);\n            $('#provider_order_list').sortable('refresh');\n        }\n\n        $(this).makeNewznabProviderString();\n    };\n\n    $.fn.addTorrentRssProvider = function (id, name, url, cookies, titleTag) {\n        // eslint-disable-line max-params\n        const newData = [name, url, cookies, titleTag];\n        torrentRssProviders[id] = newData;\n\n        $('#editATorrentRssProvider').append('<option value=' + id + '>' + name + '</option>');\n        $(this).populateTorrentRssSection();\n\n        if ($('#provider_order_list > #' + id).length === 0) {\n            $('#provider_order_list').append('<li class=\"ui-state-default\" id=\"' + id + '\"> <input type=\"checkbox\" id=\"enable_' + id + '\" class=\"provider_enabler\" CHECKED> <a href=\"' + MEDUSA.config.anonURL + url + '\" class=\"imgLink\" target=\"_new\"><img src=\"images/providers/torrentrss.png\" alt=\"' + name + '\" width=\"16\" height=\"16\"></a> ' + name + '</li>'); // eslint-disable-line no-undef\n            $('#provider_order_list').sortable('refresh');\n        }\n\n        $(this).makeTorrentRssProviderString();\n    };\n\n    $.fn.updateProvider = function (id, url, key, cat) {\n        newznabProviders[id][1][1] = url;\n        newznabProviders[id][1][2] = key;\n        newznabProviders[id][1][3] = cat;\n\n        $(this).populateNewznabSection();\n\n        $(this).makeNewznabProviderString();\n    };\n\n    $.fn.deleteProvider = function (id) {\n        $('#editANewznabProvider option[value=' + id + ']').remove();\n        delete newznabProviders[id];\n        $(this).populateNewznabSection();\n        $('li').remove('#' + id);\n        $(this).makeNewznabProviderString();\n    };\n\n    $.fn.updateTorrentRssProvider = function (id, url, cookies, titleTag) {\n        torrentRssProviders[id][1] = url;\n        torrentRssProviders[id][2] = cookies;\n        torrentRssProviders[id][3] = titleTag;\n        $(this).populateTorrentRssSection();\n        $(this).makeTorrentRssProviderString();\n    };\n\n    $.fn.deleteTorrentRssProvider = function (id) {\n        $('#editATorrentRssProvider option[value=' + id + ']').remove();\n        delete torrentRssProviders[id];\n        $(this).populateTorrentRssSection();\n        $('li').remove('#' + id);\n        $(this).makeTorrentRssProviderString();\n    };\n\n    $.fn.populateNewznabSection = function () {\n        const selectedProvider = $('#editANewznabProvider :selected').val();\n        let data = '';\n        let isDefault = '';\n        let rrcat = '';\n\n        if (selectedProvider === 'addNewznab') {\n            data = ['', '', ''];\n            isDefault = 0;\n            $('#newznab_add_div').show();\n            $('#newznab_update_div').hide();\n            $('#newznab_cat').prop('disabled', true);\n            $('#newznab_cap').prop('disabled', true);\n            $('#newznab_cat_update').prop('disabled', true);\n            $('#newznabcapdiv').hide();\n\n            $('#newznab_cat option').each(function () {\n                $(this).remove();\n            });\n\n            $('#newznab_cap option').each(function () {\n                $(this).remove();\n            });\n        } else {\n            data = newznabProviders[selectedProvider][1];\n            isDefault = newznabProviders[selectedProvider][0];\n            $('#newznab_add_div').hide();\n            $('#newznab_update_div').show();\n            $('#newznab_cat').prop('disabled', false);\n            $('#newznab_cap').prop('disabled', false);\n            $('#newznab_cat_update').prop('disabled', false);\n            $('#newznabcapdiv').show();\n        }\n\n        $('#newznab_name').val(data[0]);\n        $('#newznab_url').val(data[1]);\n        $('#newznab_api_key').val(data[2]);\n\n        // Check if not already array\n        if (typeof data[3] === 'string') {\n            rrcat = data[3].split(',');\n        } else {\n            rrcat = data[3];\n        }\n\n        // Update the category select box (on the right)\n        const newCatOptions = [];\n        if (rrcat) {\n            rrcat.forEach(cat => {\n                if (cat !== '') {\n                    newCatOptions.push({\n                        text: cat,\n                        value: cat\n                    });\n                }\n            });\n            $('#newznab_cat').replaceOptions(newCatOptions);\n        }\n\n        if (selectedProvider === 'addNewznab') {\n            $('#newznab_name').prop('disabled', false);\n            $('#newznab_url').prop('disabled', false);\n        } else {\n            $('#newznab_name').prop('disabled', true);\n\n            if (isDefault) {\n                $('#newznab_url').prop('disabled', true);\n                $('#newznab_delete').prop('disabled', true);\n            } else {\n                $('#newznab_url').prop('disabled', false);\n                $('#newznab_delete').prop('disabled', false);\n            }\n\n            // Get Categories Capabilities\n            if (data[0] && data[1] && data[2] && !ifExists($.fn.newznabProvidersCapabilities, data[0])) {\n                $(this).getCategories(isDefault, data);\n            }\n            $(this).updateNewznabCaps(null, data);\n        }\n    };\n\n    /**\n     * Updates the Global array $.fn.newznabProvidersCapabilities with a combination of newznab prov name\n     * and category capabilities. Return\n     * @param {Array} newzNabCaps, is the returned object with newznabprovider Name and Capabilities.\n     * @param {Array} selectedProvider\n     * @return no return data. The multiselect input $(\"#newznab_cap\") is updated, as a result.\n     */\n    $.fn.updateNewznabCaps = function (newzNabCaps, selectedProvider) {\n        if (newzNabCaps && !ifExists($.fn.newznabProvidersCapabilities, selectedProvider[0])) {\n            $.fn.newznabProvidersCapabilities.push({\n                name: selectedProvider[0],\n                categories: newzNabCaps.tv_categories // eslint-disable-line camelcase\n            });\n        }\n\n        // Loop through the array and if currently selected newznab provider name matches one in the array, use it to\n        // update the capabilities select box (on the left).\n        $('#newznab_cap').empty();\n        if (selectedProvider[0]) {\n            $.fn.newznabProvidersCapabilities.forEach(newzNabCap => {\n                if (newzNabCap.name && newzNabCap.name === selectedProvider[0] && Array.isArray(newzNabCap.categories)) {\n                    const newCapOptions = [];\n                    newzNabCap.categories.forEach(categorySet => {\n                        if (categorySet.id && categorySet.name) {\n                            newCapOptions.push({\n                                value: categorySet.id,\n                                text: categorySet.name + '(' + categorySet.id + ')'\n                            });\n                        }\n                    });\n                    $('#newznab_cap').replaceOptions(newCapOptions);\n                }\n            });\n        }\n    };\n\n    $.fn.makeNewznabProviderString = function () {\n        const provStrings = [];\n\n        for (const id in newznabProviders) {\n            if ({}.hasOwnProperty.call(newznabProviders, id)) {\n                provStrings.push(newznabProviders[id][1].join('|'));\n            }\n        }\n\n        $('#newznab_string').val(provStrings.join('!!!'));\n    };\n\n    $.fn.populateTorrentRssSection = function () {\n        const selectedProvider = $('#editATorrentRssProvider :selected').val();\n        let data = '';\n\n        if (selectedProvider === 'addTorrentRss') {\n            data = ['', '', '', 'title'];\n            $('#torrentrss_add_div').show();\n            $('#torrentrss_update_div').hide();\n        } else {\n            data = torrentRssProviders[selectedProvider];\n            $('#torrentrss_add_div').hide();\n            $('#torrentrss_update_div').show();\n        }\n\n        $('#torrentrss_name').val(data[0]);\n        $('#torrentrss_url').val(data[1]);\n        $('#torrentrss_cookies').val(data[2]);\n        $('#torrentrss_title_tag').val(data[3]);\n\n        if (selectedProvider === 'addTorrentRss') {\n            $('#torrentrss_name').prop('disabled', false);\n            $('#torrentrss_url').prop('disabled', false);\n            $('#torrentrss_cookies').prop('disabled', false);\n            $('#torrentrss_title_tag').prop('disabled', false);\n        } else {\n            $('#torrentrss_name').prop('disabled', true);\n            $('#torrentrss_url').prop('disabled', false);\n            $('#torrentrss_cookies').prop('disabled', true);\n            $('#torrentrss_title_tag').prop('disabled', false);\n            $('#torrentrss_delete').prop('disabled', false);\n        }\n    };\n\n    $.fn.makeTorrentRssProviderString = function () {\n        const provStrings = [];\n        for (const id in torrentRssProviders) {\n            if ({}.hasOwnProperty.call(torrentRssProviders, id)) {\n                provStrings.push(torrentRssProviders[id].join('|'));\n            }\n        }\n\n        $('#torrentrss_string').val(provStrings.join('!!!'));\n    };\n\n    $.fn.refreshProviderList = function () {\n        const idArr = $('#provider_order_list').sortable('toArray');\n        const finalArr = [];\n        $.each(idArr, (key, val) => {\n            const checked = $('#enable_' + val).is(':checked') ? '1' : '0';\n            finalArr.push(val + ':' + checked);\n        });\n\n        $('#provider_order').val(finalArr.join(' '));\n        $(this).refreshEditAProvider();\n    };\n\n    $.fn.refreshEditAProvider = function () {\n        $('#provider-list').empty();\n\n        const idArr = $('#provider_order_list').sortable('toArray');\n        const finalArr = [];\n        $.each(idArr, (key, val) => {\n            if ($('#enable_' + val).prop('checked')) {\n                finalArr.push(val);\n            }\n        });\n\n        if (finalArr.length > 0) {\n            $('<select>').prop('id', 'editAProvider').addClass('form-control input-sm').appendTo('#provider-list');\n            for (let i = 0, len = finalArr.length; i < len; i++) {\n                const provider = finalArr[i];\n                $('#editAProvider').append($('<option>').prop('value', provider).text($.trim($('#' + provider).text()).replace(/\\s\\*$/, '').replace(/\\s\\*\\*$/, '')));\n            }\n        } else {\n            document.getElementsByClassName('component-desc')[0].innerHTML = 'No providers available to configure.';\n        }\n\n        $(this).showHideProviders();\n    };\n\n    $(this).on('change', '.newznab_api_key', function () {\n        let providerId = $(this).prop('id');\n        providerId = providerId.substring(0, providerId.length - '_hash'.length);\n\n        const url = $('#' + providerId + '_url').val();\n        const cat = $('#' + providerId + '_cat').val();\n        const key = $(this).val();\n\n        $(this).updateProvider(providerId, url, key, cat);\n    });\n\n    $('#newznab_api_key,#newznab_url').on('change', function () {\n        const selectedProvider = $('#editANewznabProvider :selected').val();\n\n        if (selectedProvider === 'addNewznab') {\n            return;\n        }\n\n        const url = $('#newznab_url').val();\n        const key = $('#newznab_api_key').val();\n\n        const cat = $('#newznab_cat option').map((i, opt) => {\n            return $(opt).text();\n        }).toArray().join(',');\n\n        $(this).updateProvider(selectedProvider, url, key, cat);\n    });\n\n    $('#torrentrss_url,#torrentrss_cookies,#torrentrss_title_tag').on('change', function () {\n        const selectedProvider = $('#editATorrentRssProvider :selected').val();\n\n        if (selectedProvider === 'addTorrentRss') {\n            return;\n        }\n\n        const url = $('#torrentrss_url').val();\n        const cookies = $('#torrentrss_cookies').val();\n        const titleTag = $('#torrentrss_title_tag').val();\n\n        $(this).updateTorrentRssProvider(selectedProvider, url, cookies, titleTag);\n    });\n\n    $('body').on('change', '#editAProvider', function () {\n        $(this).showHideProviders();\n    });\n\n    $('#editANewznabProvider').on('change', function () {\n        $(this).populateNewznabSection();\n    });\n\n    $('#editATorrentRssProvider').on('change', function () {\n        $(this).populateTorrentRssSection();\n    });\n\n    $(this).on('click', '.provider_enabler', function () {\n        $(this).refreshProviderList();\n    });\n\n    $('#newznab_cat_update').on('click', function () {\n        // Maybe check if there is anything selected?\n        $('#newznab_cat option').each(function () {\n            $(this).remove();\n        });\n\n        const newOptions = [];\n\n        // When the update botton is clicked, loop through the capabilities list\n        // and copy the selected category id's to the category list on the right.\n        $('#newznab_cap option:selected').each(function () {\n            const selectedCat = $(this).val();\n            console.debug(selectedCat);\n            newOptions.push({\n                text: selectedCat,\n                value: selectedCat\n            });\n        });\n\n        $('#newznab_cat').replaceOptions(newOptions);\n\n        const selectedProvider = $('#editANewznabProvider :selected').val();\n        if (selectedProvider === 'addNewznab') {\n            return;\n        }\n\n        const url = $('#newznab_url').val();\n        const key = $('#newznab_api_key').val();\n\n        const cat = $('#newznab_cat option').map((i, opt) => {\n            return $(opt).text();\n        }).toArray().join(',');\n\n        $('#newznab_cat option:not([value])').remove();\n\n        $(this).updateProvider(selectedProvider, url, key, cat);\n    });\n\n    $('#newznab_add').on('click', () => {\n        const name = $.trim($('#newznab_name').val());\n        const url = $.trim($('#newznab_url').val());\n        const key = $.trim($('#newznab_api_key').val());\n        // Var cat = $.trim($('#newznab_cat').val());\n\n        const cat = $.trim($('#newznab_cat option').map((i, opt) => {\n            return $(opt).text();\n        }).toArray().join(','));\n\n        if (!name || !url || !key) {\n            return;\n        }\n\n        const params = { name };\n\n        // Send to the form with ajax, get a return value\n        $.getJSON('config/providers/canAddNewznabProvider', params, function (data) {\n            if (data.error !== undefined) {\n                alert(data.error); // eslint-disable-line no-alert\n                return;\n            }\n            $(this).addProvider(data.success, name, url, key, cat, 0);\n        });\n    });\n\n    $('.newznab_delete').on('click', function () {\n        const selectedProvider = $('#editANewznabProvider :selected').val();\n        $(this).deleteProvider(selectedProvider);\n    });\n\n    $('#torrentrss_add').on('click', () => {\n        const name = $('#torrentrss_name').val();\n        const url = $('#torrentrss_url').val();\n        const cookies = $('#torrentrss_cookies').val();\n        const titleTag = $('#torrentrss_title_tag').val();\n        const params = {\n            name,\n            url,\n            cookies,\n            title_tag: titleTag // eslint-disable-line camelcase\n        };\n\n        // @TODO: Move to the API\n        // send to the form with ajax, get a return value\n        $.getJSON('config/providers/canAddTorrentRssProvider', params, function (data) {\n            if (data.error !== undefined) {\n                alert(data.error); // eslint-disable-line no-alert\n                return;\n            }\n\n            $(this).addTorrentRssProvider(data.success, name, url, cookies, titleTag);\n            $(this).refreshEditAProvider();\n        });\n    });\n\n    $('.torrentrss_delete').on('click', function () {\n        $(this).deleteTorrentRssProvider($('#editATorrentRssProvider :selected').val());\n        $(this).refreshEditAProvider();\n    });\n\n    $(this).on('change', '[class=\"providerDiv_tip\"] input', function () {\n        $('div .providerDiv [name=' + $(this).prop('name') + ']').replaceWith($(this).clone());\n        $('div .providerDiv [newznab_name=' + $(this).prop('id') + ']').replaceWith($(this).clone());\n    });\n\n    $(this).on('change', '[class=\"providerDiv_tip\"] select', function () {\n        $(this).find('option').each(function () {\n            if ($(this).is(':selected')) {\n                $(this).prop('defaultSelected', true);\n            } else {\n                $(this).prop('defaultSelected', false);\n            }\n        });\n        $('div .providerDiv [name=' + $(this).prop('name') + ']').empty().replaceWith($(this).clone());\n    });\n\n    $(this).on('change', '.enabler', function () {\n        if ($(this).is(':checked')) {\n            $('.content_' + $(this).prop('id')).each(function () {\n                $(this).show();\n            });\n        } else {\n            $('.content_' + $(this).prop('id')).each(function () {\n                $(this).hide();\n            });\n        }\n    });\n\n    $('.enabler').each(function () {\n        if ($(this).is(':checked')) {\n            $('.content_' + $(this).prop('id')).show();\n        } else {\n            $('.content_' + $(this).prop('id')).hide();\n        }\n    });\n\n    $.fn.makeTorrentOptionString = function (providerId) {\n        const seedRatio = $('.providerDiv_tip #' + providerId + '_seed_ratio').prop('value');\n        const seedTime = $('.providerDiv_tip #' + providerId + '_seed_time').prop('value');\n        const processMet = $('.providerDiv_tip #' + providerId + '_process_method').prop('value');\n        const optionString = $('.providerDiv_tip #' + providerId + '_option_string');\n\n        optionString.val([seedRatio, seedTime, processMet].join('|'));\n    };\n\n    $(this).on('change', '.seed_option', function () {\n        const providerId = $(this).prop('id').split('_')[0];\n        $(this).makeTorrentOptionString(providerId);\n    });\n\n    $.fn.replaceOptions = function (options) {\n        let $option;\n\n        this.empty();\n        const self = this;\n\n        $.each(options, (index, option) => {\n            $option = $('<option></option>').prop('value', option.value).text(option.text);\n            self.append($option);\n        });\n    };\n\n    // Initialization stuff\n    $.fn.newznabProvidersCapabilities = [];\n\n    $(this).showHideProviders();\n\n    $('#provider_order_list').sortable({\n        placeholder: 'ui-state-highlight',\n        update() {\n            $(this).refreshProviderList();\n        }\n    });\n\n    $('#provider_order_list').disableSelection();\n\n    if ($('#editANewznabProvider').length !== 0) {\n        $(this).populateNewznabSection();\n    }\n});\n\n},{}]},{},[1]);\n"],"file":"config-providers.js"}