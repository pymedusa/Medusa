{"version":3,"names":[],"mappings":"","sources":["js/config/post-processing.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nMEDUSA.config.postProcessing = function () {\n    // eslint-disable-line max-lines\n    $('#config-components').tabs();\n    $('#tv_download_dir').fileBrowser({\n        title: 'Select TV Download Directory'\n    });\n\n    // http://stackoverflow.com/questions/2219924/idiomatic-jquery-delayed-event-only-after-a-short-pause-in-typing-e-g-timew\n    const typewatch = function () {\n        let timer = 0;\n        return function (callback, ms) {\n            clearTimeout(timer);\n            timer = setTimeout(callback, ms);\n        };\n    }();\n\n    function isRarSupported() {\n        $.get('config/postProcessing/isRarSupported', data => {\n            if (data !== 'supported') {\n                $('#unpack').qtip('option', {\n                    'content.text': 'Unrar Executable not found.',\n                    'style.classes': 'qtip-rounded qtip-shadow qtip-red'\n                });\n                $('#unpack').qtip('toggle', true);\n                $('#unpack').css('background-color', '#FFFFDD');\n            }\n        });\n    }\n\n    function fillExamples() {\n        const example = {};\n\n        example.pattern = $('#naming_pattern').val();\n        example.multi = $('#naming_multi_ep :selected').val();\n        example.animeType = $('input[name=\"naming_anime\"]:checked').val();\n\n        $.get('config/postProcessing/testNaming', {\n            pattern: example.pattern,\n            anime_type: 3 // eslint-disable-line camelcase\n        }, data => {\n            if (data) {\n                $('#naming_example').text(data + '.ext');\n                $('#naming_example_div').show();\n            } else {\n                $('#naming_example_div').hide();\n            }\n        });\n\n        $.get('config/postProcessing/testNaming', {\n            pattern: example.pattern,\n            multi: example.multi,\n            anime_type: 3 // eslint-disable-line camelcase\n        }, data => {\n            if (data) {\n                $('#naming_example_multi').text(data + '.ext');\n                $('#naming_example_multi_div').show();\n            } else {\n                $('#naming_example_multi_div').hide();\n            }\n        });\n\n        $.get('config/postProcessing/isNamingValid', {\n            pattern: example.pattern,\n            multi: example.multi,\n            anime_type: example.animeType // eslint-disable-line camelcase\n        }, data => {\n            if (data === 'invalid') {\n                $('#naming_pattern').qtip('option', {\n                    'content.text': 'This pattern is invalid.',\n                    'style.classes': 'qtip-rounded qtip-shadow qtip-red'\n                });\n                $('#naming_pattern').qtip('toggle', true);\n                $('#naming_pattern').css('background-color', '#FFDDDD');\n            } else if (data === 'seasonfolders') {\n                $('#naming_pattern').qtip('option', {\n                    'content.text': 'This pattern would be invalid without the folders, using it will force \"Flatten\" off for all shows.',\n                    'style.classes': 'qtip-rounded qtip-shadow qtip-red'\n                });\n                $('#naming_pattern').qtip('toggle', true);\n                $('#naming_pattern').css('background-color', '#FFFFDD');\n            } else {\n                $('#naming_pattern').qtip('option', {\n                    'content.text': 'This pattern is valid.',\n                    'style.classes': 'qtip-rounded qtip-shadow qtip-green'\n                });\n                $('#naming_pattern').qtip('toggle', false);\n                $('#naming_pattern').css('background-color', '#FFFFFF');\n            }\n        });\n    }\n\n    function fillAbdExamples() {\n        const pattern = $('#naming_abd_pattern').val();\n\n        $.get('config/postProcessing/testNaming', {\n            pattern,\n            abd: 'True'\n        }, data => {\n            if (data) {\n                $('#naming_abd_example').text(data + '.ext');\n                $('#naming_abd_example_div').show();\n            } else {\n                $('#naming_abd_example_div').hide();\n            }\n        });\n\n        $.get('config/postProcessing/isNamingValid', {\n            pattern,\n            abd: 'True'\n        }, data => {\n            if (data === 'invalid') {\n                $('#naming_abd_pattern').qtip('option', {\n                    'content.text': 'This pattern is invalid.',\n                    'style.classes': 'qtip-rounded qtip-shadow qtip-red'\n                });\n                $('#naming_abd_pattern').qtip('toggle', true);\n                $('#naming_abd_pattern').css('background-color', '#FFDDDD');\n            } else if (data === 'seasonfolders') {\n                $('#naming_abd_pattern').qtip('option', {\n                    'content.text': 'This pattern would be invalid without the folders, using it will force \"Flatten\" off for all shows.',\n                    'style.classes': 'qtip-rounded qtip-shadow qtip-red'\n                });\n                $('#naming_abd_pattern').qtip('toggle', true);\n                $('#naming_abd_pattern').css('background-color', '#FFFFDD');\n            } else {\n                $('#naming_abd_pattern').qtip('option', {\n                    'content.text': 'This pattern is valid.',\n                    'style.classes': 'qtip-rounded qtip-shadow qtip-green'\n                });\n                $('#naming_abd_pattern').qtip('toggle', false);\n                $('#naming_abd_pattern').css('background-color', '#FFFFFF');\n            }\n        });\n    }\n\n    function fillSportsExamples() {\n        const pattern = $('#naming_sports_pattern').val();\n\n        $.get('config/postProcessing/testNaming', {\n            pattern,\n            sports: 'True' // @TODO does this actually need to be a string or can it be a boolean?\n        }, data => {\n            if (data) {\n                $('#naming_sports_example').text(data + '.ext');\n                $('#naming_sports_example_div').show();\n            } else {\n                $('#naming_sports_example_div').hide();\n            }\n        });\n\n        $.get('config/postProcessing/isNamingValid', {\n            pattern,\n            sports: 'True' // @TODO does this actually need to be a string or can it be a boolean?\n        }, data => {\n            if (data === 'invalid') {\n                $('#naming_sports_pattern').qtip('option', {\n                    'content.text': 'This pattern is invalid.',\n                    'style.classes': 'qtip-rounded qtip-shadow qtip-red'\n                });\n                $('#naming_sports_pattern').qtip('toggle', true);\n                $('#naming_sports_pattern').css('background-color', '#FFDDDD');\n            } else if (data === 'seasonfolders') {\n                $('#naming_sports_pattern').qtip('option', {\n                    'content.text': 'This pattern would be invalid without the folders, using it will force \"Flatten\" off for all shows.',\n                    'style.classes': 'qtip-rounded qtip-shadow qtip-red'\n                });\n                $('#naming_sports_pattern').qtip('toggle', true);\n                $('#naming_sports_pattern').css('background-color', '#FFFFDD');\n            } else {\n                $('#naming_sports_pattern').qtip('option', {\n                    'content.text': 'This pattern is valid.',\n                    'style.classes': 'qtip-rounded qtip-shadow qtip-green'\n                });\n                $('#naming_sports_pattern').qtip('toggle', false);\n                $('#naming_sports_pattern').css('background-color', '#FFFFFF');\n            }\n        });\n    }\n\n    function fillAnimeExamples() {\n        const example = {};\n        example.pattern = $('#naming_anime_pattern').val();\n        example.multi = $('#naming_anime_multi_ep :selected').val();\n        example.animeType = $('input[name=\"naming_anime\"]:checked').val();\n\n        $.get('config/postProcessing/testNaming', {\n            pattern: example.pattern,\n            anime_type: example.animeType // eslint-disable-line camelcase\n        }, data => {\n            if (data) {\n                $('#naming_example_anime').text(data + '.ext');\n                $('#naming_example_anime_div').show();\n            } else {\n                $('#naming_example_anime_div').hide();\n            }\n        });\n\n        $.get('config/postProcessing/testNaming', {\n            pattern: example.pattern,\n            multi: example.multi,\n            anime_type: example.animeType // eslint-disable-line camelcase\n        }, data => {\n            if (data) {\n                $('#naming_example_multi_anime').text(data + '.ext');\n                $('#naming_example_multi_anime_div').show();\n            } else {\n                $('#naming_example_multi_anime_div').hide();\n            }\n        });\n\n        $.get('config/postProcessing/isNamingValid', {\n            pattern: example.pattern,\n            multi: example.multi,\n            anime_type: example.animeType // eslint-disable-line camelcase\n        }, data => {\n            if (data === 'invalid') {\n                $('#naming_pattern').qtip('option', {\n                    'content.text': 'This pattern is invalid.',\n                    'style.classes': 'qtip-rounded qtip-shadow qtip-red'\n                });\n                $('#naming_pattern').qtip('toggle', true);\n                $('#naming_pattern').css('background-color', '#FFDDDD');\n            } else if (data === 'seasonfolders') {\n                $('#naming_pattern').qtip('option', {\n                    'content.text': 'This pattern would be invalid without the folders, using it will force \"Flatten\" off for all shows.',\n                    'style.classes': 'qtip-rounded qtip-shadow qtip-red'\n                });\n                $('#naming_pattern').qtip('toggle', true);\n                $('#naming_pattern').css('background-color', '#FFFFDD');\n            } else {\n                $('#naming_pattern').qtip('option', {\n                    'content.text': 'This pattern is valid.',\n                    'style.classes': 'qtip-rounded qtip-shadow qtip-green'\n                });\n                $('#naming_pattern').qtip('toggle', false);\n                $('#naming_pattern').css('background-color', '#FFFFFF');\n            }\n        });\n    }\n\n    // @TODO all of these setup funcitons should be able to be rolled into a generic function\n\n    function setupNaming() {\n        // If it is a custom selection then show the text box\n        if ($('#name_presets :selected').val().toLowerCase() === 'custom...') {\n            $('#naming_custom').show();\n        } else {\n            $('#naming_custom').hide();\n            $('#naming_pattern').val($('#name_presets :selected').attr('id'));\n        }\n        fillExamples();\n    }\n\n    function setupAbdNaming() {\n        // If it is a custom selection then show the text box\n        if ($('#name_abd_presets :selected').val().toLowerCase() === 'custom...') {\n            $('#naming_abd_custom').show();\n        } else {\n            $('#naming_abd_custom').hide();\n            $('#naming_abd_pattern').val($('#name_abd_presets :selected').attr('id'));\n        }\n        fillAbdExamples();\n    }\n\n    function setupSportsNaming() {\n        // If it is a custom selection then show the text box\n        if ($('#name_sports_presets :selected').val().toLowerCase() === 'custom...') {\n            $('#naming_sports_custom').show();\n        } else {\n            $('#naming_sports_custom').hide();\n            $('#naming_sports_pattern').val($('#name_sports_presets :selected').attr('id'));\n        }\n        fillSportsExamples();\n    }\n\n    function setupAnimeNaming() {\n        // If it is a custom selection then show the text box\n        if ($('#name_anime_presets :selected').val().toLowerCase() === 'custom...') {\n            $('#naming_anime_custom').show();\n        } else {\n            $('#naming_anime_custom').hide();\n            $('#naming_anime_pattern').val($('#name_anime_presets :selected').attr('id'));\n        }\n        fillAnimeExamples();\n    }\n\n    $('#unpack').on('change', function () {\n        if (this.checked) {\n            isRarSupported();\n        } else {\n            $('#unpack').qtip('toggle', false);\n        }\n    });\n\n    // @TODO all of these on change funcitons should be able to be rolled into a generic jQuery function or maybe we could\n    //       move all of the setup functions into these handlers?\n\n    $('#name_presets').on('change', () => {\n        setupNaming();\n    });\n\n    $('#name_abd_presets').on('change', () => {\n        setupAbdNaming();\n    });\n\n    $('#naming_custom_abd').on('change', () => {\n        setupAbdNaming();\n    });\n\n    $('#name_sports_presets').on('change', () => {\n        setupSportsNaming();\n    });\n\n    $('#naming_custom_sports').on('change', () => {\n        setupSportsNaming();\n    });\n\n    $('#name_anime_presets').on('change', () => {\n        setupAnimeNaming();\n    });\n\n    $('#naming_custom_anime').on('change', () => {\n        setupAnimeNaming();\n    });\n\n    $('input[name=\"naming_anime\"]').on('click', () => {\n        setupAnimeNaming();\n    });\n\n    // @TODO We might be able to change these from typewatch to _ debounce like we've done on the log page\n    //       The main reason for doing this would be to use only open source stuff that's still being maintained\n\n    $('#naming_multi_ep').on('change', fillExamples);\n    $('#naming_pattern').on('focusout', fillExamples);\n    $('#naming_pattern').on('keyup', () => {\n        typewatch(() => {\n            fillExamples();\n        }, 500);\n    });\n\n    $('#naming_anime_multi_ep').on('change', fillAnimeExamples);\n    $('#naming_anime_pattern').on('focusout', fillAnimeExamples);\n    $('#naming_anime_pattern').on('keyup', () => {\n        typewatch(() => {\n            fillAnimeExamples();\n        }, 500);\n    });\n\n    $('#naming_abd_pattern').on('focusout', fillExamples);\n    $('#naming_abd_pattern').on('keyup', () => {\n        typewatch(() => {\n            fillAbdExamples();\n        }, 500);\n    });\n\n    $('#naming_sports_pattern').on('focusout', fillExamples);\n    $('#naming_sports_pattern').on('keyup', () => {\n        typewatch(() => {\n            fillSportsExamples();\n        }, 500);\n    });\n\n    $('#naming_anime_pattern').on('focusout', fillExamples);\n    $('#naming_anime_pattern').on('keyup', () => {\n        typewatch(() => {\n            fillAnimeExamples();\n        }, 500);\n    });\n\n    $('#show_naming_key').on('click', () => {\n        $('#naming_key').toggle();\n    });\n    $('#show_naming_abd_key').on('click', () => {\n        $('#naming_abd_key').toggle();\n    });\n    $('#show_naming_sports_key').on('click', () => {\n        $('#naming_sports_key').toggle();\n    });\n    $('#show_naming_anime_key').on('click', () => {\n        $('#naming_anime_key').toggle();\n    });\n    $('#do_custom').on('click', () => {\n        $('#naming_pattern').val($('#name_presets :selected').attr('id'));\n        $('#naming_custom').show();\n        $('#naming_pattern').focus();\n    });\n\n    // @TODO We should see if these can be added with the on click or if we need to even call them on load\n    setupNaming();\n    setupAbdNaming();\n    setupSportsNaming();\n    setupAnimeNaming();\n\n    // -- start of metadata options div toggle code --\n    $('#metadataType').on('change keyup', function () {\n        $(this).showHideMetadata();\n    });\n\n    $.fn.showHideMetadata = function () {\n        $('.metadataDiv').each(function () {\n            const targetName = $(this).attr('id');\n            const selectedTarget = $('#metadataType :selected').val();\n\n            if (selectedTarget === targetName) {\n                $(this).show();\n            } else {\n                $(this).hide();\n            }\n        });\n    };\n    // Initialize to show the div\n    $(this).showHideMetadata();\n    // -- end of metadata options div toggle code --\n\n    $('.metadata_checkbox').on('click', function () {\n        $(this).refreshMetadataConfig(false);\n    });\n\n    $.fn.refreshMetadataConfig = function (first) {\n        let curMost = 0;\n        let curMostProvider = '';\n\n        $('.metadataDiv').each(function () {\n            // eslint-disable-line complexity\n            const generatorName = $(this).attr('id');\n\n            const configArray = [];\n            const showMetadata = $('#' + generatorName + '_show_metadata').prop('checked');\n            const episodeMetadata = $('#' + generatorName + '_episode_metadata').prop('checked');\n            const fanart = $('#' + generatorName + '_fanart').prop('checked');\n            const poster = $('#' + generatorName + '_poster').prop('checked');\n            const banner = $('#' + generatorName + '_banner').prop('checked');\n            const episodeThumbnails = $('#' + generatorName + '_episode_thumbnails').prop('checked');\n            const seasonPosters = $('#' + generatorName + '_season_posters').prop('checked');\n            const seasonBanners = $('#' + generatorName + '_season_banners').prop('checked');\n            const seasonAllPoster = $('#' + generatorName + '_season_all_poster').prop('checked');\n            const seasonAllBanner = $('#' + generatorName + '_season_all_banner').prop('checked');\n\n            configArray.push(showMetadata ? '1' : '0');\n            configArray.push(episodeMetadata ? '1' : '0');\n            configArray.push(fanart ? '1' : '0');\n            configArray.push(poster ? '1' : '0');\n            configArray.push(banner ? '1' : '0');\n            configArray.push(episodeThumbnails ? '1' : '0');\n            configArray.push(seasonPosters ? '1' : '0');\n            configArray.push(seasonBanners ? '1' : '0');\n            configArray.push(seasonAllPoster ? '1' : '0');\n            configArray.push(seasonAllBanner ? '1' : '0');\n\n            let curNumber = 0;\n            for (let i = 0, len = configArray.length; i < len; i++) {\n                curNumber += parseInt(configArray[i], 10);\n            }\n            if (curNumber > curMost) {\n                curMost = curNumber;\n                curMostProvider = generatorName;\n            }\n\n            $('#' + generatorName + '_eg_show_metadata').prop('class', showMetadata ? 'enabled' : 'disabled');\n            $('#' + generatorName + '_eg_episode_metadata').prop('class', episodeMetadata ? 'enabled' : 'disabled');\n            $('#' + generatorName + '_eg_fanart').prop('class', fanart ? 'enabled' : 'disabled');\n            $('#' + generatorName + '_eg_poster').prop('class', poster ? 'enabled' : 'disabled');\n            $('#' + generatorName + '_eg_banner').prop('class', banner ? 'enabled' : 'disabled');\n            $('#' + generatorName + '_eg_episode_thumbnails').prop('class', episodeThumbnails ? 'enabled' : 'disabled');\n            $('#' + generatorName + '_eg_season_posters').prop('class', seasonPosters ? 'enabled' : 'disabled');\n            $('#' + generatorName + '_eg_season_banners').prop('class', seasonBanners ? 'enabled' : 'disabled');\n            $('#' + generatorName + '_eg_season_all_poster').prop('class', seasonAllPoster ? 'enabled' : 'disabled');\n            $('#' + generatorName + '_eg_season_all_banner').prop('class', seasonAllBanner ? 'enabled' : 'disabled');\n            $('#' + generatorName + '_data').val(configArray.join('|'));\n        });\n\n        if (curMostProvider !== '' && first) {\n            $('#metadataType option[value=' + curMostProvider + ']').prop('selected', true);\n            $(this).showHideMetadata();\n        }\n    };\n\n    $(this).refreshMetadataConfig(true);\n    $('img[title]').qtip({\n        position: {\n            at: 'bottom center',\n            my: 'top right'\n        },\n        style: {\n            tip: {\n                corner: true,\n                method: 'polygon'\n            },\n            classes: 'qtip-shadow qtip-dark'\n        }\n    });\n    $('i[title]').qtip({\n        position: {\n            at: 'top center',\n            my: 'bottom center'\n        },\n        style: {\n            tip: {\n                corner: true,\n                method: 'polygon'\n            },\n            classes: 'qtip-rounded qtip-shadow ui-tooltip-sb'\n        }\n    });\n    $('.custom-pattern,#unpack').qtip({\n        content: 'validating...',\n        show: {\n            event: false,\n            ready: false\n        },\n        hide: false,\n        position: {\n            at: 'center left',\n            my: 'center right'\n        },\n        style: {\n            tip: {\n                corner: true,\n                method: 'polygon'\n            },\n            classes: 'qtip-rounded qtip-shadow qtip-red'\n        }\n    });\n};\n\n},{}]},{},[1]);\n"],"file":"post-processing.js"}