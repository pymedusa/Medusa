{"version":3,"names":[],"mappings":"","sources":["js/core.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n// eslint-disable-line max-lines\n// @TODO Move these into common.ini when possible,\n//       currently we can't do that as browser.js and a few others need it before this is loaded\nconst topImageHtml = '<img src=\"images/top.gif\" width=\"31\" height=\"11\" alt=\"Jump to top\" />'; // eslint-disable-line no-unused-vars\nconst apiRoot = $('body').attr('api-root');\nconst apiKey = $('body').attr('api-key');\n\nconst MEDUSA = {\n    common: {},\n    config: {},\n    home: {},\n    manage: {},\n    history: {},\n    errorlogs: {},\n    schedule: {},\n    addShows: {}\n};\n\nconst UTIL = {\n    exec(controller, action) {\n        const ns = MEDUSA;\n        action = action === undefined ? 'init' : action;\n\n        if (controller !== '' && ns[controller] && typeof ns[controller][action] === 'function') {\n            ns[controller][action]();\n        }\n    },\n    init() {\n        if (typeof startVue === 'function') {\n            // eslint-disable-line no-undef\n            startVue(); // eslint-disable-line no-undef\n        } else {\n            $('[v-cloak]').removeAttr('v-cloak');\n        }\n\n        const body = document.body;\n        $('[asset]').each(function () {\n            const asset = $(this).attr('asset');\n            const series = $(this).attr('series');\n            const path = apiRoot + 'series/' + series + '/asset/' + asset + '?api_key=' + apiKey;\n            if (this.tagName.toLowerCase() === 'img') {\n                const defaultPath = $(this).attr('src');\n                if ($(this).attr('lazy') === 'on') {\n                    $(this).attr('data-original', path);\n                } else {\n                    $(this).attr('src', path);\n                }\n                $(this).attr('onerror', 'this.src = \"' + defaultPath + '\"; return false;');\n            }\n            if (this.tagName.toLowerCase() === 'a') {\n                $(this).attr('href', path);\n            }\n        });\n        const controller = body.getAttribute('data-controller');\n        const action = body.getAttribute('data-action');\n\n        UTIL.exec('common'); // Load common\n        UTIL.exec(controller); // Load MEDUSA[controller]\n        UTIL.exec(controller, action); // Load MEDUSA[controller][action]\n    }\n};\n\n$.fn.extend({\n    addRemoveWarningClass(_) {\n        if (_) {\n            return $(this).removeClass('warning');\n        }\n        return $(this).addClass('warning');\n    }\n});\n\nif (!document.location.pathname.endsWith('/login/')) {\n    api.get('config/main').then(response => {\n        log.setDefaultLevel('trace');\n        $.extend(MEDUSA.config, response.data);\n        MEDUSA.config.themeSpinner = MEDUSA.config.themeName === 'dark' ? '-dark' : '';\n        MEDUSA.config.loading = '<img src=\"images/loading16' + MEDUSA.config.themeSpinner + '.gif\" height=\"16\" width=\"16\" />';\n\n        if (navigator.userAgent.indexOf('PhantomJS') === -1) {\n            $(document).ready(UTIL.init);\n        }\n\n        MEDUSA.config.indexers.indexerIdToName = indexerId => {\n            if (!indexerId) {\n                return '';\n            }\n            return Object.keys(MEDUSA.config.indexers.config.indexers).filter(indexer => {\n                // eslint-disable-line array-callback-return\n                if (MEDUSA.config.indexers.config.indexers[indexer].id === parseInt(indexerId, 10)) {\n                    return MEDUSA.config.indexers.config.indexers[indexer].name;\n                }\n            })[0];\n        };\n\n        MEDUSA.config.indexers.nameToIndexerId = name => {\n            if (!name) {\n                return '';\n            }\n            return MEDUSA.config.indexers.config.indexers[name];\n        };\n    }).catch(error => {\n        log.error(error);\n        alert('Unable to connect to Medusa!'); // eslint-disable-line no-alert\n    });\n}\n\n},{}]},{},[1]);\n"],"file":"core.js"}