{"version":3,"sources":["webpack://slim/./src/index.js"],"names":["window","globalVueShim","$","jQuery","Vue","Vuex","ToggleButton","axios","_","debounce","store","router","apiRoute","apiv1","api","MEDUSA","common","config","general","layout","home","addShows","webRoot","apiKey","components","UTIL","exec","controller","action","ns","undefined","init","removeAttr","body","document","getAttribute","dispatchEvent","Event","pathname","location","includes","configLoaded","event","detail","themeSpinner","themeName","loading","ready","addEventListener","once"],"mappings":"8OAmBIA,SAEAA,OAAOC,cAAgBA,KAGvBD,OAAOE,EAAIA,IACXF,OAAOG,OAASD,IAChBF,OAAOI,IAAMA,IACbJ,OAAOK,KAAOA,KACdL,OAAOM,aAAeA,eACtBN,OAAOO,MAAQA,IACfP,OAAOQ,EAAI,CAAEC,SAAQA,KACrBT,OAAOU,MAAQA,IACfV,OAAOW,OAASA,IAChBX,OAAOY,SAAWA,KAClBZ,OAAOa,MAAQA,KACfb,OAAOc,IAAMA,KAEbd,OAAOe,OAAS,CACZC,OAAQ,GACRC,OAAQ,CACJC,QAAS,GACTC,OAAQ,IAEZC,KAAM,GACNC,SAAU,IAEdrB,OAAOsB,QAAUA,KACjBtB,OAAOuB,OAASA,KAGhBvB,OAAOwB,WAAa,IAGxB,MAAMC,EAAO,CACTC,KAAKC,EAAYC,GACb,MAAMC,EAAKd,OACXa,OAAqBE,IAAXF,EAAwB,OAASA,EAExB,KAAfD,GAAqBE,EAAGF,IAAiD,mBAA3BE,EAAGF,GAAYC,IAC7DC,EAAGF,GAAYC,MAGvBG,OACI7B,IAAE,aAAa8B,WAAW,WAE1B,MAAM,KAAEC,GAASC,SACXP,EAAaM,EAAKE,aAAa,mBAC/BP,EAASK,EAAKE,aAAa,eAEjCV,EAAKC,KAAK,UACVD,EAAKC,KAAKC,GACVF,EAAKC,KAAKC,EAAYC,GAEtB5B,OAAOoC,cAAc,IAAIC,MAAM,qBAIjC,SAAEC,GAAatC,OAAOuC,SAC5B,IAAKD,EAASE,SAAS,YAAcF,EAASE,SAAS,eAAgB,CACnE,MAAMC,EAAeC,IACjB,MAAM,QAAExB,EAAF,OAAWC,GAAWuB,EAAMC,OAElC5B,OAAOE,OAAOC,QAAU,IACjBH,OAAOE,OAAOC,WACdA,GAGP,MAAM0B,EAAoC,SAArBzB,EAAO0B,UAAuB,QAAU,GAC7D9B,OAAOE,OAAOE,OAAS,IAChBJ,OAAOE,OAAOE,UACdA,EACHyB,eACAE,QAAS,6BAA+BF,EAAe,mCAG3D1C,IAAEgC,UAAUa,MAAMtB,EAAKM,OAE3B/B,OAAOgD,iBAAiB,uBAAwBP,EAAc,CAAEQ,MAAM,O","file":"js/index.js","sourcesContent":["/* eslint-disable import/no-unassigned-import */\nimport $ from 'jquery';\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'vue-snotify/styles/material.css';\nimport '../vendor/js/tablesorter';\nimport '../vendor/css/open-sans.css';\n/* eslint-enable import/no-unassigned-import */\n\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport { ToggleButton } from 'vue-js-toggle-button';\nimport axios from 'axios';\nimport debounce from 'lodash/debounce';\nimport store from './store';\nimport router from './router';\nimport { apiRoute, apiv1, api, webRoot, apiKey } from './api';\nimport globalVueShim from './global-vue-shim';\n\nif (window) {\n    // @TODO: Remove this before v1.0.0\n    window.globalVueShim = globalVueShim;\n\n    // Adding libs to window so mako files can use them\n    window.$ = $;\n    window.jQuery = $;\n    window.Vue = Vue;\n    window.Vuex = Vuex;\n    window.ToggleButton = ToggleButton;\n    window.axios = axios;\n    window._ = { debounce };\n    window.store = store;\n    window.router = router;\n    window.apiRoute = apiRoute;\n    window.apiv1 = apiv1;\n    window.api = api;\n\n    window.MEDUSA = {\n        common: {},\n        config: {\n            general: {},\n            layout: {}\n        },\n        home: {},\n        addShows: {}\n    };\n    window.webRoot = webRoot;\n    window.apiKey = apiKey;\n\n    // Push x-template components to this array to register them globally\n    window.components = [];\n}\n\nconst UTIL = {\n    exec(controller, action) {\n        const ns = MEDUSA;\n        action = (action === undefined) ? 'init' : action;\n\n        if (controller !== '' && ns[controller] && typeof ns[controller][action] === 'function') {\n            ns[controller][action]();\n        }\n    },\n    init() {\n        $('[v-cloak]').removeAttr('v-cloak');\n\n        const { body } = document;\n        const controller = body.getAttribute('data-controller');\n        const action = body.getAttribute('data-action');\n\n        UTIL.exec('common'); // Load common\n        UTIL.exec(controller); // Load MEDUSA[controller]\n        UTIL.exec(controller, action); // Load MEDUSA[controller][action]\n\n        window.dispatchEvent(new Event('medusa-loaded'));\n    }\n};\n\nconst { pathname } = window.location;\nif (!pathname.includes('/login') && !pathname.includes('/apibuilder')) {\n    const configLoaded = event => {\n        const { general, layout } = event.detail;\n\n        MEDUSA.config.general = {\n            ...MEDUSA.config.general,\n            ...general\n        };\n\n        const themeSpinner = layout.themeName === 'dark' ? '-dark' : '';\n        MEDUSA.config.layout = {\n            ...MEDUSA.config.layout,\n            ...layout,\n            themeSpinner,\n            loading: '<img src=\"images/loading16' + themeSpinner + '.gif\" height=\"16\" width=\"16\" />'\n        };\n\n        $(document).ready(UTIL.init);\n    };\n    window.addEventListener('medusa-config-loaded', configLoaded, { once: true });\n}\n"],"sourceRoot":""}