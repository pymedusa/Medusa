{"version":3,"names":[],"mappings":"","sources":["js/schedule/index.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nMEDUSA.schedule.index = function () {\n    if ($.isMeta({ layout: 'schedule' }, ['list'])) {\n        const sortCodes = {\n            date: 0,\n            show: 2,\n            network: 5\n        };\n        const sort = MEDUSA.config.comingEpsSort;\n        const sortList = sort in sortCodes ? [[sortCodes[sort], 0]] : [[0, 0]];\n\n        $('#showListTable:has(tbody tr)').tablesorter({\n            widgets: ['stickyHeaders', 'filter', 'columnSelector', 'saveSort'],\n            sortList,\n            textExtraction: {\n                0(node) {\n                    return $(node).find('time').attr('datetime');\n                }, // eslint-disable-line brace-style\n                1(node) {\n                    return $(node).find('time').attr('datetime');\n                }, // eslint-disable-line brace-style\n                7(node) {\n                    return $(node).find('span').text().toLowerCase();\n                }, // eslint-disable-line brace-style\n                8(node) {\n                    return $(node).find('a[data-indexer-name]').attr('data-indexer-name');\n                } // eslint-disable-line brace-style\n            },\n            headers: {\n                0: { sorter: 'realISODate' },\n                1: { sorter: 'realISODate' },\n                2: { sorter: 'loadingNames' },\n                4: { sorter: 'loadingNames' },\n                7: { sorter: 'quality' },\n                8: { sorter: 'text' },\n                9: { sorter: false }\n            },\n            widgetOptions: {\n                filter_columnFilters: true, // eslint-disable-line camelcase\n                filter_hideFilters: true, // eslint-disable-line camelcase\n                filter_saveFilters: true, // eslint-disable-line camelcase\n                columnSelector_mediaquery: false // eslint-disable-line camelcase\n            }\n        });\n\n        $.ajaxEpSearch();\n    }\n\n    if ($.isMeta({ layout: 'schedule' }, ['banner', 'poster'])) {\n        $.ajaxEpSearch({\n            size: 16,\n            loadingImage: 'loading16' + MEDUSA.config.themeSpinner + '.gif'\n        });\n        $('.ep_summary').hide();\n        $('.ep_summaryTrigger').on('click', function () {\n            $(this).next('.ep_summary').slideToggle('normal', function () {\n                $(this).prev('.ep_summaryTrigger').prop('src', function (i, src) {\n                    return $(this).next('.ep_summary').is(':visible') ? src.replace('plus', 'minus') : src.replace('minus', 'plus');\n                });\n            });\n        });\n    }\n\n    $('#popover').popover({\n        placement: 'bottom',\n        html: true, // Required if content has HTML\n        content: '<div id=\"popover-target\"></div>'\n    }).on('shown.bs.popover', () => {\n        // Bootstrap popover event triggered when the popover opens\n        // call this function to copy the column selection code into the popover\n        $.tablesorter.columnSelector.attachTo($('#showListTable'), '#popover-target');\n    });\n\n    $('.show-option select[name=\"layout\"]').on('change', function () {\n        api.patch('config/main', {\n            layout: {\n                schedule: $(this).val()\n            }\n        }).then(response => {\n            log.info(response);\n            window.location.reload();\n        }).catch(err => {\n            log.info(err);\n        });\n    });\n};\n\n},{}]},{},[1]);\n"],"file":"index.js"}