{"version":3,"sources":["webpack:///./node_modules/date-fns/esm/_lib/assign/index.js","webpack:///./node_modules/date-fns/esm/_lib/setUTCDay/index.js","webpack:///./node_modules/date-fns/esm/parse/_lib/parsers/index.js","webpack:///./node_modules/date-fns/esm/_lib/setUTCWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/setUTCISODay/index.js","webpack:///./node_modules/date-fns/esm/parse/index.js","webpack:///./node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/protectedTokens/index.js","webpack:///./node_modules/date-fns/esm/compareAsc/index.js","webpack:///./node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js","webpack:///./node_modules/date-fns/esm/toDate/index.js","webpack:///./node_modules/date-fns/esm/_lib/toInteger/index.js","webpack:///./node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack:///./node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js","webpack:///./node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js","webpack:///./node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js","webpack:///./node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/match/index.js","webpack:///./node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js","webpack:///./node_modules/date-fns/esm/subMilliseconds/index.js","webpack:///./node_modules/date-fns/esm/addMilliseconds/index.js","webpack:///./node_modules/date-fns/esm/_lib/getUTCWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js","webpack:///./node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js","webpack:///./node_modules/date-fns/esm/isValid/index.js","webpack:///./node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","webpack:///./node_modules/date-fns/esm/_lib/format/lightFormatters/index.js","webpack:///./node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js","webpack:///./node_modules/date-fns/esm/_lib/format/formatters/index.js","webpack:///./node_modules/date-fns/esm/_lib/format/longFormatters/index.js","webpack:///./node_modules/date-fns/esm/format/index.js"],"names":["assign_assign","target","dirtyObject","TypeError","property","hasOwnProperty","setUTCDay","dirtyDate","dirtyDay","dirtyOptions","arguments","length","options","locale","localeWeekStartsOn","weekStartsOn","defaultWeekStartsOn","Object","toInteger","RangeError","date","toDate","day","diff","getUTCDay","setUTCDate","getUTCDate","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_MINUTE","MILLISECONDS_IN_SECOND","numericPatterns","month","dayOfYear","week","hour23h","hour24h","hour11h","hour12h","minute","second","singleDigit","twoDigits","threeDigits","fourDigits","anyDigitsSigned","singleDigitSigned","twoDigitsSigned","threeDigitsSigned","fourDigitsSigned","timezonePatterns","parseNumericPattern","pattern","string","valueCallback","matchResult","match","value","parseInt","rest","slice","parseTimezonePattern","sign","hours","minutes","seconds","parseAnyDigitsSigned","parseNDigits","n","RegExp","parseNDigitsSigned","dayPeriodEnumToHours","enumValue","normalizeTwoDigitYear","twoDigitYear","currentYear","result","isCommonEra","absCurrentYear","rangeEnd","Math","floor","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","isLeapYearIndex","year","_lib_parsers","G","priority","parse","token","era","width","set","flags","setUTCFullYear","setUTCHours","y","isTwoDigitYear","ordinalNumber","unit","validate","getUTCWeekYear","normalizedTwoDigitYear","Y","getUTCFullYear","firstWeekContainsDate","startOfUTCWeek","R","firstWeekOfYear","Date","startOfUTCISOWeek","u","Q","quarter","context","setUTCMonth","q","M","L","w","dirtyWeek","getUTCWeek","setUTCWeek","I","dirtyISOWeek","isoWeek","getUTCISOWeek","setUTCISOWeek","d","isLeapYear","getUTCMonth","D","E","e","wholeWeekDays","c","i","setUTCISODay","a","dayPeriod","b","B","h","isPM","getUTCHours","H","K","k","m","setUTCMinutes","s","setUTCSeconds","S","pow","setUTCMilliseconds","X","timestampIsSet","getTime","x","t","T","__webpack_require__","__webpack_exports__","TIMEZONE_UNIT_PRIORITY","formattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","notWhitespaceRegExp","unescapedLatinCharacterRegExp","dirtyDateString","dirtyFormatString","dirtyBaseDate","dateString","String","formatString","en_US","localeFirstWeekContainsDate","defaultFirstWeekContainsDate","NaN","subFnOptions","setters","dateToSystemTimezone","index","tokens","useAdditionalWeekYearTokens","protectedTokens","useAdditionalDayOfYearTokens","firstCharacter","parser","parseResult","push","replace","indexOf","test","uniquePrioritySetters","map","setter","sort","filter","array","reverse","setterArray","isNaN","utcDate","subMilliseconds","getTimezoneOffsetInMilliseconds","convertedDate","setFullYear","setHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","_toInteger_index_js__WEBPACK_IMPORTED_MODULE_0__","_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__","_toDate_index_js__WEBPACK_IMPORTED_MODULE_0__","isProtectedDayOfYearToken","isProtectedWeekYearToken","throwProtectedError","protectedDayOfYearTokens","protectedWeekYearTokens","compareAsc","dirtyDateLeft","dirtyDateRight","dateLeft","dateRight","_startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_2__","firstWeekOfNextYear","startOfNextYear","firstWeekOfThisYear","startOfThisYear","argument","argStr","prototype","toString","call","console","warn","Error","stack","dirtyNumber","number","Number","ceil","baseTimezoneOffset","getTimezoneOffset","setSeconds","millisecondsPartOfTimezoneOffset","getUTCISOWeekYear","_startOfUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_1__","fourthOfJanuaryOfNextYear","fourthOfJanuaryOfThisYear","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","buildFormatLongFn","args","defaultWidth","formats","formatLong","full","long","medium","short","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","buildLocalizeFn","dirtyIndex","valuesArray","formattingValues","defaultFormattingWidth","values","argumentCallback","buildMatchFn","dirtyString","matchPattern","matchPatterns","defaultMatchWidth","matchedString","parsePatterns","defaultParseWidth","findIndex","object","predicate","key","findKey","formatDistance","count","addSuffix","comparison","formatRelative","baseDate","localize","rem100","narrow","abbreviated","wide","am","pm","midnight","noon","morning","afternoon","evening","night","parsePattern","any","dirtyAmount","timestamp","amount","addMilliseconds","MILLISECONDS_IN_WEEK","firstWeek","startOfUTCWeekYear","round","fourthOfJanuary","startOfUTCISOWeekYear","isValid","addLeadingZeros","targetLength","output","abs","lightFormatters","signedYear","dayPeriodEnumValue","toUpperCase","numberOfDigits","milliseconds","MILLISECONDS_IN_DAY","dayPeriodEnum","formatTimezoneShort","offset","dirtyDelimiter","absOffset","delimiter","formatTimezoneWithOptionalMinutes","formatTimezone","format_formatters","signedWeekYear","weekYear","difference","getUTCDayOfYear","dayOfWeek","localDayOfWeek","isoDayOfWeek","_localize","timezoneOffset","_originalDate","O","z","originalDate","dateLongFormatter","timeLongFormatter","format_longFormatters","p","P","dateTimeFormat","datePattern","timePattern","format","longFormattingTokensRegExp","dirtyFormatStr","formatStr","formatterOptions","substring","longFormatter","join","formatter"],"mappings":"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","file":"js/vendors~date-fns.js","sourcesContent":["export default function assign(target, dirtyObject) {\n  if (target == null) {\n    throw new TypeError(\n      'assign requires that input parameter not be null or undefined'\n    )\n  }\n\n  dirtyObject = dirtyObject || {}\n\n  for (var property in dirtyObject) {\n    if (dirtyObject.hasOwnProperty(property)) {\n      target[property] = dirtyObject[property]\n    }\n  }\n\n  return target\n}\n","import toInteger from '../toInteger/index.js'\nimport toDate from '../../toDate/index.js'\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError(\n      '2 arguments required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var options = dirtyOptions || {}\n  var locale = options.locale\n  var localeWeekStartsOn =\n    locale && locale.options && locale.options.weekStartsOn\n  var defaultWeekStartsOn =\n    localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn)\n  var weekStartsOn =\n    options.weekStartsOn == null\n      ? defaultWeekStartsOn\n      : toInteger(options.weekStartsOn)\n\n  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively')\n  }\n\n  var date = toDate(dirtyDate)\n  var day = toInteger(dirtyDay)\n\n  var currentDay = date.getUTCDay()\n\n  var remainder = day % 7\n  var dayIndex = (remainder + 7) % 7\n\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay\n\n  date.setUTCDate(date.getUTCDate() + diff)\n  return date\n}\n","import getUTCWeekYear from '../../../_lib/getUTCWeekYear/index.js'\nimport setUTCDay from '../../../_lib/setUTCDay/index.js'\nimport setUTCWeek from '../../../_lib/setUTCWeek/index.js'\nimport startOfUTCWeek from '../../../_lib/startOfUTCWeek/index.js'\nimport setUTCISODay from '../../../_lib/setUTCISODay/index.js'\nimport setUTCISOWeek from '../../../_lib/setUTCISOWeek/index.js'\nimport startOfUTCISOWeek from '../../../_lib/startOfUTCISOWeek/index.js'\n\nvar MILLISECONDS_IN_HOUR = 3600000\nvar MILLISECONDS_IN_MINUTE = 60000\nvar MILLISECONDS_IN_SECOND = 1000\n\nvar numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/, // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/, // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/, // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/, // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/, // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/, // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/, // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/, // 0 to 12\n  minute: /^[0-5]?\\d/, // 0 to 59\n  second: /^[0-5]?\\d/, // 0 to 59\n\n  singleDigit: /^\\d/, // 0 to 9\n  twoDigits: /^\\d{1,2}/, // 0 to 99\n  threeDigits: /^\\d{1,3}/, // 0 to 999\n  fourDigits: /^\\d{1,4}/, // 0 to 9999\n\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/, // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/, // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/, // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/ // 0 to 9999, -0 to -9999\n}\n\nvar timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/\n}\n\nfunction parseNumericPattern(pattern, string, valueCallback) {\n  var matchResult = string.match(pattern)\n\n  if (!matchResult) {\n    return null\n  }\n\n  var value = parseInt(matchResult[0], 10)\n\n  return {\n    value: valueCallback ? valueCallback(value) : value,\n    rest: string.slice(matchResult[0].length)\n  }\n}\n\nfunction parseTimezonePattern(pattern, string) {\n  var matchResult = string.match(pattern)\n\n  if (!matchResult) {\n    return null\n  }\n\n  // Input is 'Z'\n  if (matchResult[0] === 'Z') {\n    return {\n      value: 0,\n      rest: string.slice(1)\n    }\n  }\n\n  var sign = matchResult[1] === '+' ? 1 : -1\n  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0\n  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0\n  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0\n\n  return {\n    value:\n      sign *\n      (hours * MILLISECONDS_IN_HOUR +\n        minutes * MILLISECONDS_IN_MINUTE +\n        seconds * MILLISECONDS_IN_SECOND),\n    rest: string.slice(matchResult[0].length)\n  }\n}\n\nfunction parseAnyDigitsSigned(string, valueCallback) {\n  return parseNumericPattern(\n    numericPatterns.anyDigitsSigned,\n    string,\n    valueCallback\n  )\n}\n\nfunction parseNDigits(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(\n        numericPatterns.singleDigit,\n        string,\n        valueCallback\n      )\n    case 2:\n      return parseNumericPattern(\n        numericPatterns.twoDigits,\n        string,\n        valueCallback\n      )\n    case 3:\n      return parseNumericPattern(\n        numericPatterns.threeDigits,\n        string,\n        valueCallback\n      )\n    case 4:\n      return parseNumericPattern(\n        numericPatterns.fourDigits,\n        string,\n        valueCallback\n      )\n    default:\n      return parseNumericPattern(\n        new RegExp('^\\\\d{1,' + n + '}'),\n        string,\n        valueCallback\n      )\n  }\n}\n\nfunction parseNDigitsSigned(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(\n        numericPatterns.singleDigitSigned,\n        string,\n        valueCallback\n      )\n    case 2:\n      return parseNumericPattern(\n        numericPatterns.twoDigitsSigned,\n        string,\n        valueCallback\n      )\n    case 3:\n      return parseNumericPattern(\n        numericPatterns.threeDigitsSigned,\n        string,\n        valueCallback\n      )\n    case 4:\n      return parseNumericPattern(\n        numericPatterns.fourDigitsSigned,\n        string,\n        valueCallback\n      )\n    default:\n      return parseNumericPattern(\n        new RegExp('^-?\\\\d{1,' + n + '}'),\n        string,\n        valueCallback\n      )\n  }\n}\n\nfunction dayPeriodEnumToHours(enumValue) {\n  switch (enumValue) {\n    case 'morning':\n      return 4\n    case 'evening':\n      return 17\n    case 'pm':\n    case 'noon':\n    case 'afternoon':\n      return 12\n    case 'am':\n    case 'midnight':\n    case 'night':\n    default:\n      return 0\n  }\n}\n\nfunction normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  var isCommonEra = currentYear > 0\n  // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear\n\n  var result\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100\n  } else {\n    var rangeEnd = absCurrentYear + 50\n    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100\n    var isPreviousCentury = twoDigitYear >= rangeEnd % 100\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0)\n  }\n\n  return isCommonEra ? result : 1 - result\n}\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n// User for validation\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0)\n}\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\nvar parsers = {\n  // Era\n  G: {\n    priority: 140,\n    parse: function(string, token, match, options) {\n      switch (token) {\n        // AD, BC\n        case 'G':\n        case 'GG':\n        case 'GGG':\n          return (\n            match.era(string, { width: 'abbreviated' }) ||\n            match.era(string, { width: 'narrow' })\n          )\n        // A, B\n        case 'GGGGG':\n          return match.era(string, { width: 'narrow' })\n        // Anno Domini, Before Christ\n        case 'GGGG':\n        default:\n          return (\n            match.era(string, { width: 'wide' }) ||\n            match.era(string, { width: 'abbreviated' }) ||\n            match.era(string, { width: 'narrow' })\n          )\n      }\n    },\n    set: function(date, flags, value, options) {\n      // Sets year 10 BC if BC, or 10 AC if AC\n      date.setUTCFullYear(value === 1 ? 10 : -9, 0, 1)\n      date.setUTCHours(0, 0, 0, 0)\n      return date\n    }\n  },\n\n  // Year\n  y: {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    priority: 130,\n    parse: function(string, token, match, options) {\n      var valueCallback = function(year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'yy'\n        }\n      }\n\n      switch (token) {\n        case 'y':\n          return parseNDigits(4, string, valueCallback)\n        case 'yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          })\n        default:\n          return parseNDigits(token.length, string, valueCallback)\n      }\n    },\n    validate: function(date, value, options) {\n      return value.isTwoDigitYear || value.year > 0\n    },\n    set: function(date, flags, value, options) {\n      var currentYear = getUTCWeekYear(date, options)\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(\n          value.year,\n          currentYear\n        )\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1)\n        date.setUTCHours(0, 0, 0, 0)\n        return date\n      }\n\n      var year = currentYear > 0 ? value.year : 1 - value.year\n      date.setUTCFullYear(year, 0, 1)\n      date.setUTCHours(0, 0, 0, 0)\n      return date\n    }\n  },\n\n  // Local week-numbering year\n  Y: {\n    priority: 130,\n    parse: function(string, token, match, options) {\n      var valueCallback = function(year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'YY'\n        }\n      }\n\n      switch (token) {\n        case 'Y':\n          return parseNDigits(4, string, valueCallback)\n        case 'Yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          })\n        default:\n          return parseNDigits(token.length, string, valueCallback)\n      }\n    },\n    validate: function(date, value, options) {\n      return value.isTwoDigitYear || value.year > 0\n    },\n    set: function(date, flags, value, options) {\n      var currentYear = date.getUTCFullYear()\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(\n          value.year,\n          currentYear\n        )\n        date.setUTCFullYear(\n          normalizedTwoDigitYear,\n          0,\n          options.firstWeekContainsDate\n        )\n        date.setUTCHours(0, 0, 0, 0)\n        return startOfUTCWeek(date, options)\n      }\n\n      var year = currentYear > 0 ? value.year : 1 - value.year\n      date.setUTCFullYear(year, 0, options.firstWeekContainsDate)\n      date.setUTCHours(0, 0, 0, 0)\n      return startOfUTCWeek(date, options)\n    }\n  },\n\n  // ISO week-numbering year\n  R: {\n    priority: 130,\n    parse: function(string, token, match, options) {\n      if (token === 'R') {\n        return parseNDigitsSigned(4, string)\n      }\n\n      return parseNDigitsSigned(token.length, string)\n    },\n    set: function(date, flags, value, options) {\n      var firstWeekOfYear = new Date(0)\n      firstWeekOfYear.setUTCFullYear(value, 0, 4)\n      firstWeekOfYear.setUTCHours(0, 0, 0, 0)\n      return startOfUTCISOWeek(firstWeekOfYear)\n    }\n  },\n\n  // Extended year\n  u: {\n    priority: 130,\n    parse: function(string, token, match, options) {\n      if (token === 'u') {\n        return parseNDigitsSigned(4, string)\n      }\n\n      return parseNDigitsSigned(token.length, string)\n    },\n    set: function(date, flags, value, options) {\n      date.setUTCFullYear(value, 0, 1)\n      date.setUTCHours(0, 0, 0, 0)\n      return date\n    }\n  },\n\n  // Quarter\n  Q: {\n    priority: 120,\n    parse: function(string, token, match, options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'Q':\n        case 'QQ': // 01, 02, 03, 04\n          return parseNDigits(token.length, string)\n        // 1st, 2nd, 3rd, 4th\n        case 'Qo':\n          return match.ordinalNumber(string, { unit: 'quarter' })\n        // Q1, Q2, Q3, Q4\n        case 'QQQ':\n          return (\n            match.quarter(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) ||\n            match.quarter(string, { width: 'narrow', context: 'formatting' })\n          )\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n        case 'QQQQQ':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          })\n        // 1st quarter, 2nd quarter, ...\n        case 'QQQQ':\n        default:\n          return (\n            match.quarter(string, { width: 'wide', context: 'formatting' }) ||\n            match.quarter(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) ||\n            match.quarter(string, { width: 'narrow', context: 'formatting' })\n          )\n      }\n    },\n    validate: function(date, value, options) {\n      return value >= 1 && value <= 4\n    },\n    set: function(date, flags, value, options) {\n      date.setUTCMonth((value - 1) * 3, 1)\n      date.setUTCHours(0, 0, 0, 0)\n      return date\n    }\n  },\n\n  // Stand-alone quarter\n  q: {\n    priority: 120,\n    parse: function(string, token, match, options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'q':\n        case 'qq': // 01, 02, 03, 04\n          return parseNDigits(token.length, string)\n        // 1st, 2nd, 3rd, 4th\n        case 'qo':\n          return match.ordinalNumber(string, { unit: 'quarter' })\n        // Q1, Q2, Q3, Q4\n        case 'qqq':\n          return (\n            match.quarter(string, {\n              width: 'abbreviated',\n              context: 'standalone'\n            }) ||\n            match.quarter(string, { width: 'narrow', context: 'standalone' })\n          )\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n        case 'qqqqq':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          })\n        // 1st quarter, 2nd quarter, ...\n        case 'qqqq':\n        default:\n          return (\n            match.quarter(string, { width: 'wide', context: 'standalone' }) ||\n            match.quarter(string, {\n              width: 'abbreviated',\n              context: 'standalone'\n            }) ||\n            match.quarter(string, { width: 'narrow', context: 'standalone' })\n          )\n      }\n    },\n    validate: function(date, value, options) {\n      return value >= 1 && value <= 4\n    },\n    set: function(date, flags, value, options) {\n      date.setUTCMonth((value - 1) * 3, 1)\n      date.setUTCHours(0, 0, 0, 0)\n      return date\n    }\n  },\n\n  // Month\n  M: {\n    priority: 110,\n    parse: function(string, token, match, options) {\n      var valueCallback = function(value) {\n        return value - 1\n      }\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'M':\n          return parseNumericPattern(\n            numericPatterns.month,\n            string,\n            valueCallback\n          )\n        // 01, 02, ..., 12\n        case 'MM':\n          return parseNDigits(2, string, valueCallback)\n        // 1st, 2nd, ..., 12th\n        case 'Mo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          })\n        // Jan, Feb, ..., Dec\n        case 'MMM':\n          return (\n            match.month(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) ||\n            match.month(string, { width: 'narrow', context: 'formatting' })\n          )\n        // J, F, ..., D\n        case 'MMMMM':\n          return match.month(string, { width: 'narrow', context: 'formatting' })\n        // January, February, ..., December\n        case 'MMMM':\n        default:\n          return (\n            match.month(string, { width: 'wide', context: 'formatting' }) ||\n            match.month(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) ||\n            match.month(string, { width: 'narrow', context: 'formatting' })\n          )\n      }\n    },\n    validate: function(date, value, options) {\n      return value >= 0 && value <= 11\n    },\n    set: function(date, flags, value, options) {\n      date.setUTCMonth(value, 1)\n      date.setUTCHours(0, 0, 0, 0)\n      return date\n    }\n  },\n\n  // Stand-alone month\n  L: {\n    priority: 110,\n    parse: function(string, token, match, options) {\n      var valueCallback = function(value) {\n        return value - 1\n      }\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'L':\n          return parseNumericPattern(\n            numericPatterns.month,\n            string,\n            valueCallback\n          )\n        // 01, 02, ..., 12\n        case 'LL':\n          return parseNDigits(2, string, valueCallback)\n        // 1st, 2nd, ..., 12th\n        case 'Lo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          })\n        // Jan, Feb, ..., Dec\n        case 'LLL':\n          return (\n            match.month(string, {\n              width: 'abbreviated',\n              context: 'standalone'\n            }) ||\n            match.month(string, { width: 'narrow', context: 'standalone' })\n          )\n        // J, F, ..., D\n        case 'LLLLL':\n          return match.month(string, { width: 'narrow', context: 'standalone' })\n        // January, February, ..., December\n        case 'LLLL':\n        default:\n          return (\n            match.month(string, { width: 'wide', context: 'standalone' }) ||\n            match.month(string, {\n              width: 'abbreviated',\n              context: 'standalone'\n            }) ||\n            match.month(string, { width: 'narrow', context: 'standalone' })\n          )\n      }\n    },\n    validate: function(date, value, options) {\n      return value >= 0 && value <= 11\n    },\n    set: function(date, flags, value, options) {\n      date.setUTCMonth(value, 1)\n      date.setUTCHours(0, 0, 0, 0)\n      return date\n    }\n  },\n\n  // Local week of year\n  w: {\n    priority: 100,\n    parse: function(string, token, match, options) {\n      switch (token) {\n        case 'w':\n          return parseNumericPattern(numericPatterns.week, string)\n        case 'wo':\n          return match.ordinalNumber(string, { unit: 'week' })\n        default:\n          return parseNDigits(token.length, string)\n      }\n    },\n    validate: function(date, value, options) {\n      return value >= 1 && value <= 53\n    },\n    set: function(date, flags, value, options) {\n      return startOfUTCWeek(setUTCWeek(date, value, options), options)\n    }\n  },\n\n  // ISO week of year\n  I: {\n    priority: 100,\n    parse: function(string, token, match, options) {\n      switch (token) {\n        case 'I':\n          return parseNumericPattern(numericPatterns.week, string)\n        case 'Io':\n          return match.ordinalNumber(string, { unit: 'week' })\n        default:\n          return parseNDigits(token.length, string)\n      }\n    },\n    validate: function(date, value, options) {\n      return value >= 1 && value <= 53\n    },\n    set: function(date, flags, value, options) {\n      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options)\n    }\n  },\n\n  // Day of the month\n  d: {\n    priority: 90,\n    parse: function(string, token, match, options) {\n      switch (token) {\n        case 'd':\n          return parseNumericPattern(numericPatterns.date, string)\n        case 'do':\n          return match.ordinalNumber(string, { unit: 'date' })\n        default:\n          return parseNDigits(token.length, string)\n      }\n    },\n    validate: function(date, value, options) {\n      var year = date.getUTCFullYear()\n      var isLeapYear = isLeapYearIndex(year)\n      var month = date.getUTCMonth()\n      if (isLeapYear) {\n        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month]\n      } else {\n        return value >= 1 && value <= DAYS_IN_MONTH[month]\n      }\n    },\n    set: function(date, flags, value, options) {\n      date.setUTCDate(value)\n      date.setUTCHours(0, 0, 0, 0)\n      return date\n    }\n  },\n\n  // Day of year\n  D: {\n    priority: 90,\n    parse: function(string, token, match, options) {\n      switch (token) {\n        case 'D':\n        case 'DD':\n          return parseNumericPattern(numericPatterns.dayOfYear, string)\n        case 'Do':\n          return match.ordinalNumber(string, { unit: 'date' })\n        default:\n          return parseNDigits(token.length, string)\n      }\n    },\n    validate: function(date, value, options) {\n      var year = date.getUTCFullYear()\n      var isLeapYear = isLeapYearIndex(year)\n      if (isLeapYear) {\n        return value >= 1 && value <= 366\n      } else {\n        return value >= 1 && value <= 365\n      }\n    },\n    set: function(date, flags, value, options) {\n      date.setUTCMonth(0, value)\n      date.setUTCHours(0, 0, 0, 0)\n      return date\n    }\n  },\n\n  // Day of week\n  E: {\n    priority: 90,\n    parse: function(string, token, match, options) {\n      switch (token) {\n        // Tue\n        case 'E':\n        case 'EE':\n        case 'EEE':\n          return (\n            match.day(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) ||\n            match.day(string, { width: 'short', context: 'formatting' }) ||\n            match.day(string, { width: 'narrow', context: 'formatting' })\n          )\n        // T\n        case 'EEEEE':\n          return match.day(string, { width: 'narrow', context: 'formatting' })\n        // Tu\n        case 'EEEEEE':\n          return (\n            match.day(string, { width: 'short', context: 'formatting' }) ||\n            match.day(string, { width: 'narrow', context: 'formatting' })\n          )\n        // Tuesday\n        case 'EEEE':\n        default:\n          return (\n            match.day(string, { width: 'wide', context: 'formatting' }) ||\n            match.day(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) ||\n            match.day(string, { width: 'short', context: 'formatting' }) ||\n            match.day(string, { width: 'narrow', context: 'formatting' })\n          )\n      }\n    },\n    validate: function(date, value, options) {\n      return value >= 0 && value <= 6\n    },\n    set: function(date, flags, value, options) {\n      date = setUTCDay(date, value, options)\n      date.setUTCHours(0, 0, 0, 0)\n      return date\n    }\n  },\n\n  // Local day of week\n  e: {\n    priority: 90,\n    parse: function(string, token, match, options) {\n      var valueCallback = function(value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7\n        return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays\n      }\n\n      switch (token) {\n        // 3\n        case 'e':\n        case 'ee': // 03\n          return parseNDigits(token.length, string, valueCallback)\n        // 3rd\n        case 'eo':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          })\n        // Tue\n        case 'eee':\n          return (\n            match.day(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) ||\n            match.day(string, { width: 'short', context: 'formatting' }) ||\n            match.day(string, { width: 'narrow', context: 'formatting' })\n          )\n        // T\n        case 'eeeee':\n          return match.day(string, { width: 'narrow', context: 'formatting' })\n        // Tu\n        case 'eeeeee':\n          return (\n            match.day(string, { width: 'short', context: 'formatting' }) ||\n            match.day(string, { width: 'narrow', context: 'formatting' })\n          )\n        // Tuesday\n        case 'eeee':\n        default:\n          return (\n            match.day(string, { width: 'wide', context: 'formatting' }) ||\n            match.day(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) ||\n            match.day(string, { width: 'short', context: 'formatting' }) ||\n            match.day(string, { width: 'narrow', context: 'formatting' })\n          )\n      }\n    },\n    validate: function(date, value, options) {\n      return value >= 0 && value <= 6\n    },\n    set: function(date, flags, value, options) {\n      date = setUTCDay(date, value, options)\n      date.setUTCHours(0, 0, 0, 0)\n      return date\n    }\n  },\n\n  // Stand-alone local day of week\n  c: {\n    priority: 90,\n    parse: function(string, token, match, options) {\n      var valueCallback = function(value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7\n        return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays\n      }\n\n      switch (token) {\n        // 3\n        case 'c':\n        case 'cc': // 03\n          return parseNDigits(token.length, string, valueCallback)\n        // 3rd\n        case 'co':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          })\n        // Tue\n        case 'ccc':\n          return (\n            match.day(string, {\n              width: 'abbreviated',\n              context: 'standalone'\n            }) ||\n            match.day(string, { width: 'short', context: 'standalone' }) ||\n            match.day(string, { width: 'narrow', context: 'standalone' })\n          )\n        // T\n        case 'ccccc':\n          return match.day(string, { width: 'narrow', context: 'standalone' })\n        // Tu\n        case 'cccccc':\n          return (\n            match.day(string, { width: 'short', context: 'standalone' }) ||\n            match.day(string, { width: 'narrow', context: 'standalone' })\n          )\n        // Tuesday\n        case 'cccc':\n        default:\n          return (\n            match.day(string, { width: 'wide', context: 'standalone' }) ||\n            match.day(string, {\n              width: 'abbreviated',\n              context: 'standalone'\n            }) ||\n            match.day(string, { width: 'short', context: 'standalone' }) ||\n            match.day(string, { width: 'narrow', context: 'standalone' })\n          )\n      }\n    },\n    validate: function(date, value, options) {\n      return value >= 0 && value <= 6\n    },\n    set: function(date, flags, value, options) {\n      date = setUTCDay(date, value, options)\n      date.setUTCHours(0, 0, 0, 0)\n      return date\n    }\n  },\n\n  // ISO day of week\n  i: {\n    priority: 90,\n    parse: function(string, token, match, options) {\n      var valueCallback = function(value) {\n        if (value === 0) {\n          return 7\n        }\n        return value\n      }\n\n      switch (token) {\n        // 2\n        case 'i':\n        case 'ii': // 02\n          return parseNDigits(token.length, string)\n        // 2nd\n        case 'io':\n          return match.ordinalNumber(string, { unit: 'day' })\n        // Tue\n        case 'iii':\n          return (\n            match.day(string, {\n              width: 'abbreviated',\n              context: 'formatting',\n              valueCallback: valueCallback\n            }) ||\n            match.day(string, {\n              width: 'short',\n              context: 'formatting',\n              valueCallback: valueCallback\n            }) ||\n            match.day(string, {\n              width: 'narrow',\n              context: 'formatting',\n              valueCallback: valueCallback\n            })\n          )\n        // T\n        case 'iiiii':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          })\n        // Tu\n        case 'iiiiii':\n          return (\n            match.day(string, {\n              width: 'short',\n              context: 'formatting',\n              valueCallback: valueCallback\n            }) ||\n            match.day(string, {\n              width: 'narrow',\n              context: 'formatting',\n              valueCallback: valueCallback\n            })\n          )\n        // Tuesday\n        case 'iiii':\n        default:\n          return (\n            match.day(string, {\n              width: 'wide',\n              context: 'formatting',\n              valueCallback: valueCallback\n            }) ||\n            match.day(string, {\n              width: 'abbreviated',\n              context: 'formatting',\n              valueCallback: valueCallback\n            }) ||\n            match.day(string, {\n              width: 'short',\n              context: 'formatting',\n              valueCallback: valueCallback\n            }) ||\n            match.day(string, {\n              width: 'narrow',\n              context: 'formatting',\n              valueCallback: valueCallback\n            })\n          )\n      }\n    },\n    validate: function(date, value, options) {\n      return value >= 1 && value <= 7\n    },\n    set: function(date, flags, value, options) {\n      date = setUTCISODay(date, value, options)\n      date.setUTCHours(0, 0, 0, 0)\n      return date\n    }\n  },\n\n  // AM or PM\n  a: {\n    priority: 80,\n    parse: function(string, token, match, options) {\n      switch (token) {\n        case 'a':\n        case 'aa':\n        case 'aaa':\n          return (\n            match.dayPeriod(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) ||\n            match.dayPeriod(string, { width: 'narrow', context: 'formatting' })\n          )\n        case 'aaaaa':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          })\n        case 'aaaa':\n        default:\n          return (\n            match.dayPeriod(string, { width: 'wide', context: 'formatting' }) ||\n            match.dayPeriod(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) ||\n            match.dayPeriod(string, { width: 'narrow', context: 'formatting' })\n          )\n      }\n    },\n    set: function(date, flags, value, options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0)\n      return date\n    }\n  },\n\n  // AM, PM, midnight\n  b: {\n    priority: 80,\n    parse: function(string, token, match, options) {\n      switch (token) {\n        case 'b':\n        case 'bb':\n        case 'bbb':\n          return (\n            match.dayPeriod(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) ||\n            match.dayPeriod(string, { width: 'narrow', context: 'formatting' })\n          )\n        case 'bbbbb':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          })\n        case 'bbbb':\n        default:\n          return (\n            match.dayPeriod(string, { width: 'wide', context: 'formatting' }) ||\n            match.dayPeriod(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) ||\n            match.dayPeriod(string, { width: 'narrow', context: 'formatting' })\n          )\n      }\n    },\n    set: function(date, flags, value, options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0)\n      return date\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: {\n    priority: 80,\n    parse: function(string, token, match, options) {\n      switch (token) {\n        case 'B':\n        case 'BB':\n        case 'BBB':\n          return (\n            match.dayPeriod(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) ||\n            match.dayPeriod(string, { width: 'narrow', context: 'formatting' })\n          )\n        case 'BBBBB':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          })\n        case 'BBBB':\n        default:\n          return (\n            match.dayPeriod(string, { width: 'wide', context: 'formatting' }) ||\n            match.dayPeriod(string, {\n              width: 'abbreviated',\n              context: 'formatting'\n            }) ||\n            match.dayPeriod(string, { width: 'narrow', context: 'formatting' })\n          )\n      }\n    },\n    set: function(date, flags, value, options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0)\n      return date\n    }\n  },\n\n  // Hour [1-12]\n  h: {\n    priority: 70,\n    parse: function(string, token, match, options) {\n      switch (token) {\n        case 'h':\n          return parseNumericPattern(numericPatterns.hour12h, string)\n        case 'ho':\n          return match.ordinalNumber(string, { unit: 'hour' })\n        default:\n          return parseNDigits(token.length, string)\n      }\n    },\n    validate: function(date, value, options) {\n      return value >= 1 && value <= 12\n    },\n    set: function(date, flags, value, options) {\n      var isPM = date.getUTCHours() >= 12\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0)\n      } else if (!isPM && value === 12) {\n        date.setUTCHours(0, 0, 0, 0)\n      } else {\n        date.setUTCHours(value, 0, 0, 0)\n      }\n      return date\n    }\n  },\n\n  // Hour [0-23]\n  H: {\n    priority: 70,\n    parse: function(string, token, match, options) {\n      switch (token) {\n        case 'H':\n          return parseNumericPattern(numericPatterns.hour23h, string)\n        case 'Ho':\n          return match.ordinalNumber(string, { unit: 'hour' })\n        default:\n          return parseNDigits(token.length, string)\n      }\n    },\n    validate: function(date, value, options) {\n      return value >= 0 && value <= 23\n    },\n    set: function(date, flags, value, options) {\n      date.setUTCHours(value, 0, 0, 0)\n      return date\n    }\n  },\n\n  // Hour [0-11]\n  K: {\n    priority: 70,\n    parse: function(string, token, match, options) {\n      switch (token) {\n        case 'K':\n          return parseNumericPattern(numericPatterns.hour11h, string)\n        case 'Ko':\n          return match.ordinalNumber(string, { unit: 'hour' })\n        default:\n          return parseNDigits(token.length, string)\n      }\n    },\n    validate: function(date, value, options) {\n      return value >= 0 && value <= 11\n    },\n    set: function(date, flags, value, options) {\n      var isPM = date.getUTCHours() >= 12\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0)\n      } else {\n        date.setUTCHours(value, 0, 0, 0)\n      }\n      return date\n    }\n  },\n\n  // Hour [1-24]\n  k: {\n    priority: 70,\n    parse: function(string, token, match, options) {\n      switch (token) {\n        case 'k':\n          return parseNumericPattern(numericPatterns.hour24h, string)\n        case 'ko':\n          return match.ordinalNumber(string, { unit: 'hour' })\n        default:\n          return parseNDigits(token.length, string)\n      }\n    },\n    validate: function(date, value, options) {\n      return value >= 1 && value <= 24\n    },\n    set: function(date, flags, value, options) {\n      var hours = value <= 24 ? value % 24 : value\n      date.setUTCHours(hours, 0, 0, 0)\n      return date\n    }\n  },\n\n  // Minute\n  m: {\n    priority: 60,\n    parse: function(string, token, match, options) {\n      switch (token) {\n        case 'm':\n          return parseNumericPattern(numericPatterns.minute, string)\n        case 'mo':\n          return match.ordinalNumber(string, { unit: 'minute' })\n        default:\n          return parseNDigits(token.length, string)\n      }\n    },\n    validate: function(date, value, options) {\n      return value >= 0 && value <= 59\n    },\n    set: function(date, flags, value, options) {\n      date.setUTCMinutes(value, 0, 0)\n      return date\n    }\n  },\n\n  // Second\n  s: {\n    priority: 50,\n    parse: function(string, token, match, options) {\n      switch (token) {\n        case 's':\n          return parseNumericPattern(numericPatterns.second, string)\n        case 'so':\n          return match.ordinalNumber(string, { unit: 'second' })\n        default:\n          return parseNDigits(token.length, string)\n      }\n    },\n    validate: function(date, value, options) {\n      return value >= 0 && value <= 59\n    },\n    set: function(date, flags, value, options) {\n      date.setUTCSeconds(value, 0)\n      return date\n    }\n  },\n\n  // Fraction of second\n  S: {\n    priority: 30,\n    parse: function(string, token, match, options) {\n      var valueCallback = function(value) {\n        return Math.floor(value * Math.pow(10, -token.length + 3))\n      }\n      return parseNDigits(token.length, string, valueCallback)\n    },\n    set: function(date, flags, value, options) {\n      date.setUTCMilliseconds(value)\n      return date\n    }\n  },\n\n  // Timezone (ISO-8601. +00:00 is `'Z'`)\n  X: {\n    priority: 10,\n    parse: function(string, token, match, options) {\n      switch (token) {\n        case 'X':\n          return parseTimezonePattern(\n            timezonePatterns.basicOptionalMinutes,\n            string\n          )\n        case 'XX':\n          return parseTimezonePattern(timezonePatterns.basic, string)\n        case 'XXXX':\n          return parseTimezonePattern(\n            timezonePatterns.basicOptionalSeconds,\n            string\n          )\n        case 'XXXXX':\n          return parseTimezonePattern(\n            timezonePatterns.extendedOptionalSeconds,\n            string\n          )\n        case 'XXX':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string)\n      }\n    },\n    set: function(date, flags, value, options) {\n      if (flags.timestampIsSet) {\n        return date\n      }\n      return new Date(date.getTime() - value)\n    }\n  },\n\n  // Timezone (ISO-8601)\n  x: {\n    priority: 10,\n    parse: function(string, token, match, options) {\n      switch (token) {\n        case 'x':\n          return parseTimezonePattern(\n            timezonePatterns.basicOptionalMinutes,\n            string\n          )\n        case 'xx':\n          return parseTimezonePattern(timezonePatterns.basic, string)\n        case 'xxxx':\n          return parseTimezonePattern(\n            timezonePatterns.basicOptionalSeconds,\n            string\n          )\n        case 'xxxxx':\n          return parseTimezonePattern(\n            timezonePatterns.extendedOptionalSeconds,\n            string\n          )\n        case 'xxx':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string)\n      }\n    },\n    set: function(date, flags, value, options) {\n      if (flags.timestampIsSet) {\n        return date\n      }\n      return new Date(date.getTime() - value)\n    }\n  },\n\n  // Seconds timestamp\n  t: {\n    priority: 40,\n    parse: function(string, token, match, options) {\n      return parseAnyDigitsSigned(string)\n    },\n    set: function(date, flags, value, options) {\n      return [new Date(value * 1000), { timestampIsSet: true }]\n    }\n  },\n\n  // Milliseconds timestamp\n  T: {\n    priority: 20,\n    parse: function(string, token, match, options) {\n      return parseAnyDigitsSigned(string)\n    },\n    set: function(date, flags, value, options) {\n      return [new Date(value), { timestampIsSet: true }]\n    }\n  }\n}\n\nexport default parsers\n","import toInteger from '../toInteger/index.js'\nimport toDate from '../../toDate/index.js'\nimport getUTCWeek from '../getUTCWeek/index.js'\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function setUTCWeek(dirtyDate, dirtyWeek, options) {\n  if (arguments.length < 2) {\n    throw new TypeError(\n      '2 arguments required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var date = toDate(dirtyDate)\n  var week = toInteger(dirtyWeek)\n  var diff = getUTCWeek(date, options) - week\n  date.setUTCDate(date.getUTCDate() - diff * 7)\n  return date\n}\n","import toInteger from '../toInteger/index.js'\nimport toDate from '../../toDate/index.js'\nimport getUTCISOWeek from '../getUTCISOWeek/index.js'\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function setUTCISOWeek(dirtyDate, dirtyISOWeek) {\n  if (arguments.length < 2) {\n    throw new TypeError(\n      '2 arguments required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var date = toDate(dirtyDate)\n  var isoWeek = toInteger(dirtyISOWeek)\n  var diff = getUTCISOWeek(date) - isoWeek\n  date.setUTCDate(date.getUTCDate() - diff * 7)\n  return date\n}\n","import toInteger from '../toInteger/index.js'\nimport toDate from '../../toDate/index.js'\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function setUTCISODay(dirtyDate, dirtyDay) {\n  if (arguments.length < 2) {\n    throw new TypeError(\n      '2 arguments required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var day = toInteger(dirtyDay)\n\n  if (day % 7 === 0) {\n    day = day - 7\n  }\n\n  var weekStartsOn = 1\n  var date = toDate(dirtyDate)\n  var currentDay = date.getUTCDay()\n\n  var remainder = day % 7\n  var dayIndex = (remainder + 7) % 7\n\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay\n\n  date.setUTCDate(date.getUTCDate() + diff)\n  return date\n}\n","import toInteger from '../_lib/toInteger/index.js'\nimport assign from '../_lib/assign/index.js'\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js'\nimport toDate from '../toDate/index.js'\nimport subMilliseconds from '../subMilliseconds/index.js'\nimport defaultLocale from '../locale/en-US/index.js'\nimport parsers from './_lib/parsers/index.js'\nimport {\n  isProtectedWeekYearToken,\n  isProtectedDayOfYearToken,\n  throwProtectedError\n} from '../_lib/protectedTokens/index.js'\n\nvar TIMEZONE_UNIT_PRIORITY = 10\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g\n\nvar escapedStringRegExp = /^'(.*?)'?$/\nvar doubleQuoteRegExp = /''/g\n\nvar notWhitespaceRegExp = /\\S/\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/\n\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Su            | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 1, 2, ..., 11, 0                  |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 0001, ..., 999               |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `baseDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `baseDate` which works as a context of parsing.\n *\n * `baseDate` must be passed for correct work of the function.\n * If you're not sure which `baseDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `baseDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `baseDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Old `parse` was renamed to `toDate`.\n *   Now `parse` is a new function which parses a string using a provided format.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   toDate('2016-01-01')\n *   parse('2016-01-01', 'yyyy-MM-dd', new Date())\n *   ```\n *\n * @param {String} dateString - the string to parse\n * @param {String} formatString - the string of tokens\n * @param {Date|Number} baseDate - defines values missing from the parsed dateString\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {Date} the parsed date\n * @throws {TypeError} 3 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formating years; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formating years; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formating days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formating days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\nexport default function parse(\n  dirtyDateString,\n  dirtyFormatString,\n  dirtyBaseDate,\n  dirtyOptions\n) {\n  if (arguments.length < 3) {\n    throw new TypeError(\n      '3 arguments required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var dateString = String(dirtyDateString)\n  var formatString = String(dirtyFormatString)\n  var options = dirtyOptions || {}\n\n  var locale = options.locale || defaultLocale\n\n  if (!locale.match) {\n    throw new RangeError('locale must contain match property')\n  }\n\n  var localeFirstWeekContainsDate =\n    locale.options && locale.options.firstWeekContainsDate\n  var defaultFirstWeekContainsDate =\n    localeFirstWeekContainsDate == null\n      ? 1\n      : toInteger(localeFirstWeekContainsDate)\n  var firstWeekContainsDate =\n    options.firstWeekContainsDate == null\n      ? defaultFirstWeekContainsDate\n      : toInteger(options.firstWeekContainsDate)\n\n  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError(\n      'firstWeekContainsDate must be between 1 and 7 inclusively'\n    )\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn\n  var defaultWeekStartsOn =\n    localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn)\n  var weekStartsOn =\n    options.weekStartsOn == null\n      ? defaultWeekStartsOn\n      : toInteger(options.weekStartsOn)\n\n  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively')\n  }\n\n  if (formatString === '') {\n    if (dateString === '') {\n      return toDate(dirtyBaseDate)\n    } else {\n      return new Date(NaN)\n    }\n  }\n\n  var subFnOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale\n  }\n\n  // If timezone isn't specified, it will be set to the system timezone\n  var setters = [\n    {\n      priority: TIMEZONE_UNIT_PRIORITY,\n      set: dateToSystemTimezone,\n      index: 0\n    }\n  ]\n\n  var i\n\n  var tokens = formatString.match(formattingTokensRegExp)\n\n  for (i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (\n      !options.useAdditionalWeekYearTokens &&\n      isProtectedWeekYearToken(token)\n    ) {\n      throwProtectedError(token)\n    }\n    if (\n      !options.useAdditionalDayOfYearTokens &&\n      isProtectedDayOfYearToken(token)\n    ) {\n      throwProtectedError(token)\n    }\n\n    var firstCharacter = token[0]\n    var parser = parsers[firstCharacter]\n    if (parser) {\n      var parseResult = parser.parse(\n        dateString,\n        token,\n        locale.match,\n        subFnOptions\n      )\n\n      if (!parseResult) {\n        return new Date(NaN)\n      }\n\n      setters.push({\n        priority: parser.priority,\n        set: parser.set,\n        validate: parser.validate,\n        value: parseResult.value,\n        index: setters.length\n      })\n\n      dateString = parseResult.rest\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          'Format string contains an unescaped latin alphabet character `' +\n            firstCharacter +\n            '`'\n        )\n      }\n\n      // Replace two single quote characters with one single quote character\n      if (token === \"''\") {\n        token = \"'\"\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token)\n      }\n\n      // Cut token from string, or, if string doesn't match the token, return Invalid Date\n      if (dateString.indexOf(token) === 0) {\n        dateString = dateString.slice(token.length)\n      } else {\n        return new Date(NaN)\n      }\n    }\n  }\n\n  // Check if the remaining input contains something other than whitespace\n  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {\n    return new Date(NaN)\n  }\n\n  var uniquePrioritySetters = setters\n    .map(function(setter) {\n      return setter.priority\n    })\n    .sort(function(a, b) {\n      return b - a\n    })\n    .filter(function(priority, index, array) {\n      return array.indexOf(priority) === index\n    })\n    .map(function(priority) {\n      return setters\n        .filter(function(setter) {\n          return setter.priority === priority\n        })\n        .reverse()\n    })\n    .map(function(setterArray) {\n      return setterArray[0]\n    })\n\n  var date = toDate(dirtyBaseDate)\n\n  if (isNaN(date)) {\n    return new Date(NaN)\n  }\n\n  // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date))\n\n  var flags = {}\n  for (i = 0; i < uniquePrioritySetters.length; i++) {\n    var setter = uniquePrioritySetters[i]\n\n    if (\n      setter.validate &&\n      !setter.validate(utcDate, setter.value, subFnOptions)\n    ) {\n      return new Date(NaN)\n    }\n\n    var result = setter.set(utcDate, flags, setter.value, subFnOptions)\n    // Result is tuple (date, flags)\n    if (result[0]) {\n      utcDate = result[0]\n      assign(flags, result[1])\n      // Result is date\n    } else {\n      utcDate = result\n    }\n  }\n\n  return utcDate\n}\n\nfunction dateToSystemTimezone(date, flags) {\n  if (flags.timestampIsSet) {\n    return date\n  }\n\n  var convertedDate = new Date(0)\n  convertedDate.setFullYear(\n    date.getUTCFullYear(),\n    date.getUTCMonth(),\n    date.getUTCDate()\n  )\n  convertedDate.setHours(\n    date.getUTCHours(),\n    date.getUTCMinutes(),\n    date.getUTCSeconds(),\n    date.getUTCMilliseconds()\n  )\n  return convertedDate\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\")\n}\n","import toInteger from '../toInteger/index.js'\nimport toDate from '../../toDate/index.js'\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\n      '1 argument required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var options = dirtyOptions || {}\n  var locale = options.locale\n  var localeWeekStartsOn =\n    locale && locale.options && locale.options.weekStartsOn\n  var defaultWeekStartsOn =\n    localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn)\n  var weekStartsOn =\n    options.weekStartsOn == null\n      ? defaultWeekStartsOn\n      : toInteger(options.weekStartsOn)\n\n  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively')\n  }\n\n  var date = toDate(dirtyDate)\n  var day = date.getUTCDay()\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn\n\n  date.setUTCDate(date.getUTCDate() - diff)\n  date.setUTCHours(0, 0, 0, 0)\n  return date\n}\n","import toDate from '../../toDate/index.js'\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function startOfUTCISOWeek(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError(\n      '1 argument required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var weekStartsOn = 1\n\n  var date = toDate(dirtyDate)\n  var day = date.getUTCDay()\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn\n\n  date.setUTCDate(date.getUTCDate() - diff)\n  date.setUTCHours(0, 0, 0, 0)\n  return date\n}\n","var protectedDayOfYearTokens = ['D', 'DD']\nvar protectedWeekYearTokens = ['YY', 'YYYY']\n\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1\n}\n\nexport function throwProtectedError(token) {\n  if (token === 'YYYY') {\n    throw new RangeError(\n      'Use `yyyy` instead of `YYYY` for formating years; see: https://git.io/fxCyr'\n    )\n  } else if (token === 'YY') {\n    throw new RangeError(\n      'Use `yy` instead of `YY` for formating years; see: https://git.io/fxCyr'\n    )\n  } else if (token === 'D') {\n    throw new RangeError(\n      'Use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr'\n    )\n  } else if (token === 'DD') {\n    throw new RangeError(\n      'Use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr'\n    )\n  }\n}\n","import toDate from '../toDate/index.js'\n\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * var result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * var result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  if (arguments.length < 2) {\n    throw new TypeError(\n      '2 arguments required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var dateLeft = toDate(dirtyDateLeft)\n  var dateRight = toDate(dirtyDateRight)\n\n  var diff = dateLeft.getTime() - dateRight.getTime()\n\n  if (diff < 0) {\n    return -1\n  } else if (diff > 0) {\n    return 1\n    // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff\n  }\n}\n","import toInteger from '../toInteger/index.js'\nimport toDate from '../../toDate/index.js'\nimport startOfUTCWeek from '../startOfUTCWeek/index.js'\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function getUTCWeekYear (dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions)\n  var year = date.getUTCFullYear()\n\n  var options = dirtyOptions || {}\n  var locale = options.locale\n  var localeFirstWeekContainsDate = locale &&\n    locale.options &&\n    locale.options.firstWeekContainsDate\n  var defaultFirstWeekContainsDate =\n    localeFirstWeekContainsDate == null\n      ? 1\n      : toInteger(localeFirstWeekContainsDate)\n  var firstWeekContainsDate =\n    options.firstWeekContainsDate == null\n      ? defaultFirstWeekContainsDate\n      : toInteger(options.firstWeekContainsDate)\n\n  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively')\n  }\n\n  var firstWeekOfNextYear = new Date(0)\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate)\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0)\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions)\n\n  var firstWeekOfThisYear = new Date(0)\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate)\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0)\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions)\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year\n  } else {\n    return year - 1\n  }\n}\n","/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * var result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * var result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport default function toDate(argument) {\n  if (arguments.length < 1) {\n    throw new TypeError(\n      '1 argument required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var argStr = Object.prototype.toString.call(argument)\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === 'object' && argStr === '[object Date]')\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime())\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument)\n  } else {\n    if (\n      (typeof argument === 'string' || argStr === '[object String]') &&\n      typeof console !== 'undefined'\n    ) {\n      console.warn(\n        \"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"\n      )\n      console.warn(new Error().stack)\n    }\n    return new Date(NaN)\n  }\n}\n","export default function toInteger (dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN\n  }\n\n  var number = Number(dirtyNumber)\n\n  if (isNaN(number)) {\n    return number\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number)\n}\n","var MILLISECONDS_IN_MINUTE = 60000\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds (dirtyDate) {\n  var date = new Date(dirtyDate.getTime())\n  var baseTimezoneOffset = date.getTimezoneOffset()\n  date.setSeconds(0, 0)\n  var millisecondsPartOfTimezoneOffset = date.getTime() % MILLISECONDS_IN_MINUTE\n\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset\n}\n","import toDate from '../../toDate/index.js'\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js'\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function getUTCISOWeekYear(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError(\n      '1 argument required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var date = toDate(dirtyDate)\n  var year = date.getUTCFullYear()\n\n  var fourthOfJanuaryOfNextYear = new Date(0)\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4)\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0)\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear)\n\n  var fourthOfJanuaryOfThisYear = new Date(0)\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4)\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0)\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear)\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year\n  } else {\n    return year - 1\n  }\n}\n","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n\n  halfAMinute: 'half a minute',\n\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n}\n\nexport default function formatDistance (token, count, options) {\n  options = options || {}\n\n  var result\n  if (typeof formatDistanceLocale[token] === 'string') {\n    result = formatDistanceLocale[token]\n  } else if (count === 1) {\n    result = formatDistanceLocale[token].one\n  } else {\n    result = formatDistanceLocale[token].other.replace('{{count}}', count)\n  }\n\n  if (options.addSuffix) {\n    if (options.comparison > 0) {\n      return 'in ' + result\n    } else {\n      return result + ' ago'\n    }\n  }\n\n  return result\n}\n","export default function buildFormatLongFn (args) {\n  return function (dirtyOptions) {\n    var options = dirtyOptions || {}\n    var width = options.width ? String(options.width) : args.defaultWidth\n    var format = args.formats[width] || args.formats[args.defaultWidth]\n    return format\n  }\n}\n","import buildFormatLongFn from '../../../_lib/buildFormatLongFn/index.js'\n\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n}\n\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n}\n\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n}\n\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n}\n\nexport default formatLong\n","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n}\n\nexport default function formatRelative (token, date, baseDate, options) {\n  return formatRelativeLocale[token]\n}\n","export default function buildLocalizeFn(args) {\n  return function(dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {}\n\n    var context = options.context ? String(options.context) : 'standalone'\n\n    var valuesArray\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth\n      var width = options.width ? String(options.width) : defaultWidth\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth]\n    } else {\n      var defaultWidth = args.defaultWidth\n      var width = options.width ? String(options.width) : args.defaultWidth\n      valuesArray = args.values[width] || args.values[defaultWidth]\n    }\n    var index = args.argumentCallback\n      ? args.argumentCallback(dirtyIndex)\n      : dirtyIndex\n    return valuesArray[index]\n  }\n}\n","export default function buildMatchFn (args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString)\n    var options = dirtyOptions || {}\n    var width = options.width\n\n    var matchPattern = (width && args.matchPatterns[width]) || args.matchPatterns[args.defaultMatchWidth]\n    var matchResult = string.match(matchPattern)\n\n    if (!matchResult) {\n      return null\n    }\n    var matchedString = matchResult[0]\n\n    var parsePatterns = (width && args.parsePatterns[width]) || args.parsePatterns[args.defaultParseWidth]\n\n    var value\n    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {\n      value = parsePatterns.findIndex(function (pattern) {\n        return pattern.test(string)\n      })\n    } else {\n      value = findKey(parsePatterns, function (pattern) {\n        return pattern.test(string)\n      })\n    }\n\n    value = args.valueCallback ? args.valueCallback(value) : value\n    value = options.valueCallback ? options.valueCallback(value) : value\n\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    }\n  }\n}\n\nfunction findKey (object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key\n    }\n  }\n}\n","import buildMatchPatternFn from '../../../_lib/buildMatchPatternFn/index.js'\nimport buildMatchFn from '../../../_lib/buildMatchFn/index.js'\n\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i\nvar parseOrdinalNumberPattern = /\\d+/i\n\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n}\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n}\n\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n}\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n}\n\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n}\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n}\n\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n}\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n}\n\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n}\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n}\n\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10)\n    }\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1\n    }\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n}\n\nexport default match\n","export default function buildMatchPatternFn (args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString)\n    var options = dirtyOptions || {}\n\n    var matchResult = string.match(args.matchPattern)\n    if (!matchResult) {\n      return null\n    }\n    var matchedString = matchResult[0]\n\n    var parseResult = string.match(args.parsePattern)\n    if (!parseResult) {\n      return null\n    }\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0]\n    value = options.valueCallback ? options.valueCallback(value) : value\n\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    }\n  }\n}\n","import formatDistance from './_lib/formatDistance/index.js'\nimport formatLong from './_lib/formatLong/index.js'\nimport formatRelative from './_lib/formatRelative/index.js'\nimport localize from './_lib/localize/index.js'\nimport match from './_lib/match/index.js'\n\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\nvar locale = {\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1\n  }\n}\n\nexport default locale\n","import buildLocalizeFn from '../../../_lib/buildLocalizeFn/index.js'\n\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n}\n\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']\n}\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n}\n\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n}\n\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n}\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n}\n\nfunction ordinalNumber (dirtyNumber, dirtyOptions) {\n  var number = Number(dirtyNumber)\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`:\n  //\n  //   var options = dirtyOptions || {}\n  //   var unit = String(options.unit)\n  //\n  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'\n\n  var rem100 = number % 100\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st'\n      case 2:\n        return number + 'nd'\n      case 3:\n        return number + 'rd'\n    }\n  }\n  return number + 'th'\n}\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return Number(quarter) - 1\n    }\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n}\n\nexport default localize\n","import toInteger from '../_lib/toInteger/index.js'\nimport addMilliseconds from '../addMilliseconds/index.js'\n\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  if (arguments.length < 2) {\n    throw new TypeError(\n      '2 arguments required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var amount = toInteger(dirtyAmount)\n  return addMilliseconds(dirtyDate, -amount)\n}\n","import toInteger from '../_lib/toInteger/index.js'\nimport toDate from '../toDate/index.js'\n\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  if (arguments.length < 2) {\n    throw new TypeError(\n      '2 arguments required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var timestamp = toDate(dirtyDate).getTime()\n  var amount = toInteger(dirtyAmount)\n  return new Date(timestamp + amount)\n}\n","import toDate from '../../toDate/index.js'\nimport startOfUTCWeek from '../startOfUTCWeek/index.js'\nimport startOfUTCWeekYear from '../startOfUTCWeekYear/index.js'\n\nvar MILLISECONDS_IN_WEEK = 604800000\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function getUTCWeek(dirtyDate, options) {\n  if (arguments.length < 1) {\n    throw new TypeError(\n      '1 argument required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var date = toDate(dirtyDate)\n  var diff =\n    startOfUTCWeek(date, options).getTime() -\n    startOfUTCWeekYear(date, options).getTime()\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1\n}\n","import toInteger from '../toInteger/index.js'\nimport getUTCWeekYear from '../getUTCWeekYear/index.js'\nimport startOfUTCWeek from '../startOfUTCWeek/index.js'\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function startOfUTCWeekYear (dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  var options = dirtyOptions || {}\n  var locale = options.locale\n  var localeFirstWeekContainsDate = locale &&\n    locale.options &&\n    locale.options.firstWeekContainsDate\n  var defaultFirstWeekContainsDate =\n    localeFirstWeekContainsDate == null\n      ? 1\n      : toInteger(localeFirstWeekContainsDate)\n  var firstWeekContainsDate =\n    options.firstWeekContainsDate == null\n      ? defaultFirstWeekContainsDate\n      : toInteger(options.firstWeekContainsDate)\n\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions)\n  var firstWeek = new Date(0)\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate)\n  firstWeek.setUTCHours(0, 0, 0, 0)\n  var date = startOfUTCWeek(firstWeek, dirtyOptions)\n  return date\n}\n","import toDate from '../../toDate/index.js'\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js'\nimport startOfUTCISOWeekYear from '../startOfUTCISOWeekYear/index.js'\n\nvar MILLISECONDS_IN_WEEK = 604800000\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function getUTCISOWeek(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError(\n      '1 argument required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var date = toDate(dirtyDate)\n  var diff =\n    startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime()\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1\n}\n","import getUTCISOWeekYear from '../getUTCISOWeekYear/index.js'\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js'\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError(\n      '1 argument required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var year = getUTCISOWeekYear(dirtyDate)\n  var fourthOfJanuary = new Date(0)\n  fourthOfJanuary.setUTCFullYear(year, 0, 4)\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0)\n  var date = startOfUTCISOWeek(fourthOfJanuary)\n  return date\n}\n","import toDate from '../toDate/index.js'\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `true`        |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * var result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\nexport default function isValid(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError(\n      '1 argument required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var date = toDate(dirtyDate)\n  return !isNaN(date)\n}\n","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : ''\n  var output = Math.abs(number).toString()\n  while (output.length < targetLength) {\n    output = '0' + output\n  }\n  return sign + output\n}\n","import addLeadingZeros from '../../addLeadingZeros/index.js'\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    var signedYear = date.getUTCFullYear()\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    var year = signedYear > 0 ? signedYear : 1 - signedYear\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length)\n  },\n\n  // Month\n  M: function(date, token) {\n    var month = date.getUTCMonth()\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2)\n  },\n\n  // Day of the month\n  d: function(date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length)\n  },\n\n  // AM or PM\n  a: function(date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am'\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return dayPeriodEnumValue.toUpperCase()\n      case 'aaaaa':\n        return dayPeriodEnumValue[0]\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.'\n    }\n  },\n\n  // Hour [1-12]\n  h: function(date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length)\n  },\n\n  // Hour [0-23]\n  H: function(date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length)\n  },\n\n  // Minute\n  m: function(date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length)\n  },\n\n  // Second\n  s: function(date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length)\n  },\n\n  // Fraction of second\n  S: function(date, token) {\n    var numberOfDigits = token.length\n    var milliseconds = date.getUTCMilliseconds()\n    var fractionalSeconds = Math.floor(\n      milliseconds * Math.pow(10, numberOfDigits - 3)\n    )\n    return addLeadingZeros(fractionalSeconds, token.length)\n  }\n}\n\nexport default formatters\n","import toDate from '../../toDate/index.js'\n\nvar MILLISECONDS_IN_DAY = 86400000\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function getUTCDayOfYear(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError(\n      '1 argument required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var date = toDate(dirtyDate)\n  var timestamp = date.getTime()\n  date.setUTCMonth(0, 1)\n  date.setUTCHours(0, 0, 0, 0)\n  var startOfYearTimestamp = date.getTime()\n  var difference = timestamp - startOfYearTimestamp\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1\n}\n","import lightFormatters from '../lightFormatters/index.js'\nimport getUTCDayOfYear from '../../../_lib/getUTCDayOfYear/index.js'\nimport getUTCISOWeek from '../../../_lib/getUTCISOWeek/index.js'\nimport getUTCISOWeekYear from '../../../_lib/getUTCISOWeekYear/index.js'\nimport getUTCWeek from '../../../_lib/getUTCWeek/index.js'\nimport getUTCWeekYear from '../../../_lib/getUTCWeekYear/index.js'\nimport addLeadingZeros from '../../addLeadingZeros/index.js'\n\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n}\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nvar formatters = {\n  // Era\n  G: function(date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, { width: 'abbreviated' })\n      // A, B\n      case 'GGGGG':\n        return localize.era(era, { width: 'narrow' })\n      // Anno Domini, Before Christ\n      case 'GGGG':\n      default:\n        return localize.era(era, { width: 'wide' })\n    }\n  },\n\n  // Year\n  y: function(date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear()\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      var year = signedYear > 0 ? signedYear : 1 - signedYear\n      return localize.ordinalNumber(year, { unit: 'year' })\n    }\n\n    return lightFormatters.y(date, token)\n  },\n\n  // Local week-numbering year\n  Y: function(date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options)\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear\n\n    // Two digit year\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100\n      return addLeadingZeros(twoDigitYear, 2)\n    }\n\n    // Ordinal number\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, { unit: 'year' })\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length)\n  },\n\n  // ISO week-numbering year\n  R: function(date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date)\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length)\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function(date, token) {\n    var year = date.getUTCFullYear()\n    return addLeadingZeros(year, token.length)\n  },\n\n  // Quarter\n  Q: function(date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3)\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter)\n      // 01, 02, 03, 04\n      case 'QQ':\n        return addLeadingZeros(quarter, 2)\n      // 1st, 2nd, 3rd, 4th\n      case 'Qo':\n        return localize.ordinalNumber(quarter, { unit: 'quarter' })\n      // Q1, Q2, Q3, Q4\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        })\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        })\n      // 1st quarter, 2nd quarter, ...\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        })\n    }\n  },\n\n  // Stand-alone quarter\n  q: function(date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3)\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter)\n      // 01, 02, 03, 04\n      case 'qq':\n        return addLeadingZeros(quarter, 2)\n      // 1st, 2nd, 3rd, 4th\n      case 'qo':\n        return localize.ordinalNumber(quarter, { unit: 'quarter' })\n      // Q1, Q2, Q3, Q4\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        })\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        })\n      // 1st quarter, 2nd quarter, ...\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        })\n    }\n  },\n\n  // Month\n  M: function(date, token, localize) {\n    var month = date.getUTCMonth()\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token)\n      // 1st, 2nd, ..., 12th\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, { unit: 'month' })\n      // Jan, Feb, ..., Dec\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        })\n      // J, F, ..., D\n      case 'MMMMM':\n        return localize.month(month, { width: 'narrow', context: 'formatting' })\n      // January, February, ..., December\n      case 'MMMM':\n      default:\n        return localize.month(month, { width: 'wide', context: 'formatting' })\n    }\n  },\n\n  // Stand-alone month\n  L: function(date, token, localize) {\n    var month = date.getUTCMonth()\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1)\n      // 01, 02, ..., 12\n      case 'LL':\n        return addLeadingZeros(month + 1, 2)\n      // 1st, 2nd, ..., 12th\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, { unit: 'month' })\n      // Jan, Feb, ..., Dec\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        })\n      // J, F, ..., D\n      case 'LLLLL':\n        return localize.month(month, { width: 'narrow', context: 'standalone' })\n      // January, February, ..., December\n      case 'LLLL':\n      default:\n        return localize.month(month, { width: 'wide', context: 'standalone' })\n    }\n  },\n\n  // Local week of year\n  w: function(date, token, localize, options) {\n    var week = getUTCWeek(date, options)\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, { unit: 'week' })\n    }\n\n    return addLeadingZeros(week, token.length)\n  },\n\n  // ISO week of year\n  I: function(date, token, localize) {\n    var isoWeek = getUTCISOWeek(date)\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, { unit: 'week' })\n    }\n\n    return addLeadingZeros(isoWeek, token.length)\n  },\n\n  // Day of the month\n  d: function(date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), { unit: 'date' })\n    }\n\n    return lightFormatters.d(date, token)\n  },\n\n  // Day of year\n  D: function(date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date)\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, { unit: 'dayOfYear' })\n    }\n\n    return addLeadingZeros(dayOfYear, token.length)\n  },\n\n  // Day of week\n  E: function(date, token, localize) {\n    var dayOfWeek = date.getUTCDay()\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        })\n      // T\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        })\n      // Tu\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        })\n      // Tuesday\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, { width: 'wide', context: 'formatting' })\n    }\n  },\n\n  // Local day of week\n  e: function(date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay()\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek)\n      // Padded numerical value\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2)\n      // 1st, 2nd, ..., 7th\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, { unit: 'day' })\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        })\n      // T\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        })\n      // Tu\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        })\n      // Tuesday\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, { width: 'wide', context: 'formatting' })\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function(date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay()\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek)\n      // Padded numerical value\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length)\n      // 1st, 2nd, ..., 7th\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, { unit: 'day' })\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        })\n      // T\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        })\n      // Tu\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        })\n      // Tuesday\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, { width: 'wide', context: 'standalone' })\n    }\n  },\n\n  // ISO day of week\n  i: function(date, token, localize) {\n    var dayOfWeek = date.getUTCDay()\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek)\n      // 02\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length)\n      // 2nd\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, { unit: 'day' })\n      // Tue\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        })\n      // T\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        })\n      // Tu\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        })\n      // Tuesday\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, { width: 'wide', context: 'formatting' })\n    }\n  },\n\n  // AM or PM\n  a: function(date, token, localize) {\n    var hours = date.getUTCHours()\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am'\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        })\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        })\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        })\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function(date, token, localize) {\n    var hours = date.getUTCHours()\n    var dayPeriodEnumValue\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am'\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        })\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        })\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        })\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function(date, token, localize) {\n    var hours = date.getUTCHours()\n    var dayPeriodEnumValue\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        })\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        })\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        })\n    }\n  },\n\n  // Hour [1-12]\n  h: function(date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12\n      if (hours === 0) hours = 12\n      return localize.ordinalNumber(hours, { unit: 'hour' })\n    }\n\n    return lightFormatters.h(date, token)\n  },\n\n  // Hour [0-23]\n  H: function(date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), { unit: 'hour' })\n    }\n\n    return lightFormatters.H(date, token)\n  },\n\n  // Hour [0-11]\n  K: function(date, token, localize) {\n    var hours = date.getUTCHours() % 12\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, { unit: 'hour' })\n    }\n\n    return addLeadingZeros(hours, token.length)\n  },\n\n  // Hour [1-24]\n  k: function(date, token, localize) {\n    var hours = date.getUTCHours()\n    if (hours === 0) hours = 24\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, { unit: 'hour' })\n    }\n\n    return addLeadingZeros(hours, token.length)\n  },\n\n  // Minute\n  m: function(date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), { unit: 'minute' })\n    }\n\n    return lightFormatters.m(date, token)\n  },\n\n  // Second\n  s: function(date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), { unit: 'second' })\n    }\n\n    return lightFormatters.s(date, token)\n  },\n\n  // Fraction of second\n  S: function(date, token) {\n    return lightFormatters.S(date, token)\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function(date, token, _localize, options) {\n    var originalDate = options._originalDate || date\n    var timezoneOffset = originalDate.getTimezoneOffset()\n\n    if (timezoneOffset === 0) {\n      return 'Z'\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset)\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case 'XXXX':\n      case 'XX': // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset)\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, ':')\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function(date, token, _localize, options) {\n    var originalDate = options._originalDate || date\n    var timezoneOffset = originalDate.getTimezoneOffset()\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset)\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case 'xxxx':\n      case 'xx': // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset)\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, ':')\n    }\n  },\n\n  // Timezone (GMT)\n  O: function(date, token, _localize, options) {\n    var originalDate = options._originalDate || date\n    var timezoneOffset = originalDate.getTimezoneOffset()\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':')\n      // Long\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':')\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function(date, token, _localize, options) {\n    var originalDate = options._originalDate || date\n    var timezoneOffset = originalDate.getTimezoneOffset()\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':')\n      // Long\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':')\n    }\n  },\n\n  // Seconds timestamp\n  t: function(date, token, _localize, options) {\n    var originalDate = options._originalDate || date\n    var timestamp = Math.floor(originalDate.getTime() / 1000)\n    return addLeadingZeros(timestamp, token.length)\n  },\n\n  // Milliseconds timestamp\n  T: function(date, token, _localize, options) {\n    var originalDate = options._originalDate || date\n    var timestamp = originalDate.getTime()\n    return addLeadingZeros(timestamp, token.length)\n  }\n}\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+'\n  var absOffset = Math.abs(offset)\n  var hours = Math.floor(absOffset / 60)\n  var minutes = absOffset % 60\n  if (minutes === 0) {\n    return sign + String(hours)\n  }\n  var delimiter = dirtyDelimiter || ''\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2)\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+'\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2)\n  }\n  return formatTimezone(offset, dirtyDelimiter)\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || ''\n  var sign = offset > 0 ? '-' : '+'\n  var absOffset = Math.abs(offset)\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2)\n  var minutes = addLeadingZeros(absOffset % 60, 2)\n  return sign + hours + delimiter + minutes\n}\n\nexport default formatters\n","function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({ width: 'short' })\n    case 'PP':\n      return formatLong.date({ width: 'medium' })\n    case 'PPP':\n      return formatLong.date({ width: 'long' })\n    case 'PPPP':\n    default:\n      return formatLong.date({ width: 'full' })\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({ width: 'short' })\n    case 'pp':\n      return formatLong.time({ width: 'medium' })\n    case 'ppp':\n      return formatLong.time({ width: 'long' })\n    case 'pppp':\n    default:\n      return formatLong.time({ width: 'full' })\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/)\n  var datePattern = matchResult[1]\n  var timePattern = matchResult[2]\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong)\n  }\n\n  var dateTimeFormat\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({ width: 'short' })\n      break\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({ width: 'medium' })\n      break\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({ width: 'long' })\n      break\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: 'full' })\n      break\n  }\n\n  return dateTimeFormat\n    .replace('{{date}}', dateLongFormatter(datePattern, formatLong))\n    .replace('{{time}}', timeLongFormatter(timePattern, formatLong))\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n}\n\nexport default longFormatters\n","import isValid from '../isValid/index.js'\nimport defaultLocale from '../locale/en-US/index.js'\nimport subMilliseconds from '../subMilliseconds/index.js'\nimport toDate from '../toDate/index.js'\nimport formatters from '../_lib/format/formatters/index.js'\nimport longFormatters from '../_lib/format/longFormatters/index.js'\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js'\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  throwProtectedError\n} from '../_lib/protectedTokens/index.js'\nimport toInteger from '../_lib/toInteger/index.js'\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g\n\nvar escapedStringRegExp = /^'(.*?)'?$/\nvar doubleQuoteRegExp = /''/g\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/\n\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Su            | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          | a..aaa  | AM, PM                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 1, 2, ..., 11, 0                  |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 0001, ..., 999               |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 05/29/1453                        | 7     |\n * |                                 | PP      | May 29, 1453                      | 7     |\n * |                                 | PPP     | May 29th, 1453                    | 7     |\n * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |\n * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formating years; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formating years; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formating days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formating days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError(\n      '2 arguments required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var formatStr = String(dirtyFormatStr)\n  var options = dirtyOptions || {}\n\n  var locale = options.locale || defaultLocale\n\n  var localeFirstWeekContainsDate =\n    locale.options && locale.options.firstWeekContainsDate\n  var defaultFirstWeekContainsDate =\n    localeFirstWeekContainsDate == null\n      ? 1\n      : toInteger(localeFirstWeekContainsDate)\n  var firstWeekContainsDate =\n    options.firstWeekContainsDate == null\n      ? defaultFirstWeekContainsDate\n      : toInteger(options.firstWeekContainsDate)\n\n  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError(\n      'firstWeekContainsDate must be between 1 and 7 inclusively'\n    )\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn\n  var defaultWeekStartsOn =\n    localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn)\n  var weekStartsOn =\n    options.weekStartsOn == null\n      ? defaultWeekStartsOn\n      : toInteger(options.weekStartsOn)\n\n  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively')\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property')\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property')\n  }\n\n  var originalDate = toDate(dirtyDate)\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value')\n  }\n\n  // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate)\n  var utcDate = subMilliseconds(originalDate, timezoneOffset)\n\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  }\n\n  var result = formatStr\n    .match(longFormattingTokensRegExp)\n    .map(function(substring) {\n      var firstCharacter = substring[0]\n      if (firstCharacter === 'p' || firstCharacter === 'P') {\n        var longFormatter = longFormatters[firstCharacter]\n        return longFormatter(substring, locale.formatLong, formatterOptions)\n      }\n      return substring\n    })\n    .join('')\n    .match(formattingTokensRegExp)\n    .map(function(substring) {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return \"'\"\n      }\n\n      var firstCharacter = substring[0]\n      if (firstCharacter === \"'\") {\n        return cleanEscapedString(substring)\n      }\n\n      var formatter = formatters[firstCharacter]\n      if (formatter) {\n        if (\n          !options.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(substring)\n        ) {\n          throwProtectedError(substring)\n        }\n        if (\n          !options.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(substring)\n        ) {\n          throwProtectedError(substring)\n        }\n        return formatter(utcDate, substring, locale.localize, formatterOptions)\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          'Format string contains an unescaped latin alphabet character `' +\n            firstCharacter +\n            '`'\n        )\n      }\n\n      return substring\n    })\n    .join('')\n\n  return result\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\")\n}\n"],"sourceRoot":""}