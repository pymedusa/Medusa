{"version":3,"names":[],"mappings":"","sources":["js/ajax-episode-search.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar searchStatusUrl = 'home/getManualSearchStatus';\nvar failedDownload = false;\nvar qualityDownload = false;\nvar selectedEpisode = '';\nPNotify.prototype.options.maxonscreen = 5;\n\n$.fn.forcedSearches = [];\n\nfunction enableLink(el) {\n    el.on('click.disabled', false);\n    el.prop('enableClick', '1');\n    el.fadeTo('fast', 1);\n}\n\nfunction disableLink(el) {\n    el.off('click.disabled');\n    el.prop('enableClick', '0');\n    el.fadeTo('fast', 0.5);\n}\n\nfunction updateImages(data) {\n    $.each(data.episodes, function (name, ep) {\n        // Get td element for current ep\n        var loadingImage = 'loading16.gif';\n        var queuedImage = 'queued.png';\n        var searchImage = 'search16.png';\n        var htmlContent = '';\n        // Try to get the <a> Element\n        var el = $('a[id=' + ep.indexer_id + 'x' + ep.series_id + 'x' + ep.season + 'x' + ep.episode + ']');\n        var img = el.children('img[data-ep-search]');\n        var parent = el.parent();\n        if (el) {\n            var rSearchTerm = '';\n            if (ep.searchstatus.toLowerCase() === 'searching') {\n                // El=$('td#' + ep.season + 'x' + ep.episode + '.search img');\n                img.prop('title', 'Searching');\n                img.prop('alt', 'Searching');\n                img.prop('src', 'images/' + loadingImage);\n                disableLink(el);\n                htmlContent = ep.searchstatus;\n            } else if (ep.searchstatus.toLowerCase() === 'queued') {\n                // El=$('td#' + ep.season + 'x' + ep.episode + '.search img');\n                img.prop('title', 'Queued');\n                img.prop('alt', 'queued');\n                img.prop('src', 'images/' + queuedImage);\n                disableLink(el);\n                htmlContent = ep.searchstatus;\n            } else if (ep.searchstatus.toLowerCase() === 'finished') {\n                // El=$('td#' + ep.season + 'x' + ep.episode + '.search img');\n                img.prop('title', 'Searching');\n                img.prop('alt', 'searching');\n                img.parent().prop('class', 'epRetry');\n                img.prop('src', 'images/' + searchImage);\n                enableLink(el);\n\n                // Update Status and Quality\n                rSearchTerm = /(\\w+(\\s\\((\\bBest\\b|\\bProper\\b)\\))?)\\s\\((.+?)\\)/;\n                htmlContent = ep.status.replace(rSearchTerm, \"$1\" + ' <span class=\"quality ' + ep.quality + '\">' + \"$4\" + '</span>'); // eslint-disable-line quotes, no-useless-concat\n                parent.closest('tr').prop('class', ep.overview + ' season-' + ep.season + ' seasonstyle');\n            }\n            // Update the status column if it exists\n            parent.siblings('.col-status').html(htmlContent);\n        }\n        var elementCompleteEpisodes = $('a[id=forceUpdate-' + ep.indexer_id + 'x' + ep.series_id + 'x' + ep.season + 'x' + ep.episode + ']');\n        var imageCompleteEpisodes = elementCompleteEpisodes.children('img');\n        if (elementCompleteEpisodes) {\n            if (ep.searchstatus.toLowerCase() === 'searching') {\n                imageCompleteEpisodes.prop('title', 'Searching');\n                imageCompleteEpisodes.prop('alt', 'Searching');\n                imageCompleteEpisodes.prop('src', 'images/' + loadingImage);\n                disableLink(elementCompleteEpisodes);\n            } else if (ep.searchstatus.toLowerCase() === 'queued') {\n                imageCompleteEpisodes.prop('title', 'Queued');\n                imageCompleteEpisodes.prop('alt', 'queued');\n                imageCompleteEpisodes.prop('src', 'images/' + queuedImage);\n            } else if (ep.searchstatus.toLowerCase() === 'finished') {\n                imageCompleteEpisodes.prop('title', 'Forced Search');\n                imageCompleteEpisodes.prop('alt', '[search]');\n                imageCompleteEpisodes.prop('src', 'images/' + searchImage);\n                if (ep.overview.toLowerCase() === 'snatched') {\n                    elementCompleteEpisodes.closest('tr').remove();\n                } else {\n                    enableLink(elementCompleteEpisodes);\n                }\n            }\n        }\n    });\n}\n\nfunction checkManualSearches() {\n    var pollInterval = 5000;\n\n    // Try to get a indexer name and series id. If we can't get any, we request the manual search status for all shows.\n    var indexerName = $('#indexer-name').val();\n    var seriesId = $('#series-id').val();\n\n    var url = seriesId === undefined ? searchStatusUrl : searchStatusUrl + '?indexername=' + indexerName + '&seriesid=' + seriesId;\n    $.ajax({\n        url: url,\n        error: function () {\n            pollInterval = 30000;\n        },\n        type: 'GET',\n        dataType: 'JSON',\n        complete: function () {\n            setTimeout(checkManualSearches, pollInterval);\n        },\n        timeout: 15000 // Timeout every 15 secs\n    }).done(function (data) {\n        if (data.episodes) {\n            pollInterval = 5000;\n        } else {\n            pollInterval = 15000;\n        }\n        updateImages(data);\n        // CleanupManualSearches(data);\n    });\n}\n\n$(document).ready(function () {\n    checkManualSearches();\n});\n\n$.ajaxEpSearch = function (options) {\n    options = $.extend({}, {\n        size: 16,\n        colorRow: false,\n        loadingImage: 'loading16.gif',\n        queuedImage: 'queued.png',\n        noImage: 'no16.png',\n        yesImage: 'yes16.png'\n    }, options);\n\n    $('.epRetry').on('click', function (event) {\n        event.preventDefault();\n\n        // Check if we have disabled the click\n        if ($(this).prop('enableClick') === '0') {\n            return false;\n        }\n\n        selectedEpisode = $(this);\n\n        $('#forcedSearchModalFailed').modal('show');\n    });\n\n    function forcedSearch() {\n        var imageName;\n        var imageResult;\n        var htmlContent;\n\n        var parent = selectedEpisode.parent();\n\n        // Create var for anchor\n        var link = selectedEpisode;\n\n        // Create var for img under anchor and set options for the loading gif\n        var img = selectedEpisode.children('img');\n        img.prop('title', 'loading');\n        img.prop('alt', '');\n        img.prop('src', 'images/' + options.loadingImage);\n\n        var url = selectedEpisode.prop('href');\n\n        if (!failedDownload) {\n            url = url.replace('retryEpisode', 'searchEpisode');\n        }\n\n        // Only pass the down_cur_quality flag when retryEpisode() is called\n        if (qualityDownload && url.indexOf('retryEpisode') >= 0) {\n            url += '&down_cur_quality=1';\n        }\n\n        // @TODO: Move to the API\n        $.getJSON(url, function (data) {\n            // If they failed then just put the red X\n            if (data.result.toLowerCase() === 'failure') {\n                imageName = options.noImage;\n                imageResult = 'failed';\n            } else {\n                // If the snatch was successful then apply the\n                // corresponding class and fill in the row appropriately\n                imageName = options.loadingImage;\n                imageResult = 'success';\n                // Color the row\n                if (options.colorRow) {\n                    parent.parent().removeClass('skipped wanted qual good unaired').addClass('snatched');\n                }\n                // Applying the quality class\n                var rSearchTerm = /(\\w+)\\s\\((.+?)\\)/;\n                htmlContent = data.result.replace(rSearchTerm, '$1 <span class=\"quality ' + data.quality + '\">$2</span>');\n                // Update the status column if it exists\n                parent.siblings('.col-status').html(htmlContent);\n                // Only if the queuing was successful, disable the onClick event of the loading image\n                disableLink(link);\n            }\n\n            // Put the corresponding image as the result of queuing of the manual search\n            img.prop('title', imageResult);\n            img.prop('alt', imageResult);\n            img.prop('height', options.size);\n            img.prop('src', 'images/' + imageName);\n        });\n\n        // Don't follow the link\n        return false;\n    }\n\n    $('.epSearch').on('click', function (event) {\n        event.preventDefault();\n\n        // Check if we have disabled the click\n        if ($(this).prop('enableClick') === '0') {\n            return false;\n        }\n\n        selectedEpisode = $(this);\n\n        // @TODO: Replace this with an easier to read selector\n        if ($(this).parent().parent().children('.col-status').children('.quality').length > 0) {\n            $('#forcedSearchModalQuality').modal('show');\n        } else {\n            forcedSearch();\n        }\n    });\n\n    $('.epManualSearch').on('click', function (event) {\n        event.preventDefault();\n\n        // @TODO: Omg this disables all the manual snatch icons, when one is clicked\n        if ($(this).hasClass('disabled')) {\n            return false;\n        }\n\n        $('.epManualSearch').addClass('disabled');\n        $('.epManualSearch').fadeTo(1, 0.1);\n\n        var url = this.href;\n        if (event.shiftKey || event.ctrlKey || event.which === 2) {\n            window.open(url, '_blank');\n        } else {\n            window.location = url;\n        }\n    });\n\n    $('#forcedSearchModalFailed .btn').on('click', function () {\n        failedDownload = $(this).text().toLowerCase() === 'yes';\n        $('#forcedSearchModalQuality').modal('show');\n    });\n\n    $('#forcedSearchModalQuality .btn').on('click', function () {\n        qualityDownload = $(this).text().toLowerCase() === 'yes';\n        forcedSearch();\n    });\n};\n\n},{}]},{},[1]);\n"],"file":"ajax-episode-search.js"}