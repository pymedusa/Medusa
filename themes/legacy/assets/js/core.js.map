{"version":3,"names":[],"mappings":"","sources":["js/core.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// eslint-disable-line max-lines\n// @TODO Move these into common.ini when possible,\n//       currently we can't do that as browser.js and a few others need it before this is loaded\nvar topImageHtml = '<img src=\"images/top.gif\" width=\"31\" height=\"11\" alt=\"Jump to top\" />'; // eslint-disable-line no-unused-vars\nvar apiRoot = $('body').attr('api-root');\nvar apiKey = $('body').attr('api-key');\n\nvar MEDUSA = {\n    common: {},\n    config: {},\n    home: {},\n    manage: {},\n    history: {},\n    errorlogs: {},\n    schedule: {},\n    addShows: {}\n};\n\nvar UTIL = {\n    exec: function (controller, action) {\n        var ns = MEDUSA;\n        action = action === undefined ? 'init' : action;\n\n        if (controller !== '' && ns[controller] && typeof ns[controller][action] === 'function') {\n            ns[controller][action]();\n        }\n    },\n    init: function () {\n        if (typeof startVue === 'function') {\n            // eslint-disable-line no-undef\n            startVue(); // eslint-disable-line no-undef\n        } else {\n            $('[v-cloak]').removeAttr('v-cloak');\n        }\n\n        var body = document.body;\n        $('[asset]').each(function () {\n            var asset = $(this).attr('asset');\n            var series = $(this).attr('series');\n            var path = apiRoot + 'series/' + series + '/asset/' + asset + '?api_key=' + apiKey;\n            if (this.tagName.toLowerCase() === 'img') {\n                if ($(this).attr('lazy') === 'on') {\n                    $(this).attr('data-original', path);\n                } else {\n                    $(this).attr('src', path);\n                }\n            }\n            if (this.tagName.toLowerCase() === 'a') {\n                $(this).attr('href', path);\n            }\n        });\n        var controller = body.getAttribute('data-controller');\n        var action = body.getAttribute('data-action');\n\n        UTIL.exec('common');\n        UTIL.exec(controller);\n        UTIL.exec(controller, action);\n    }\n};\n\n$.extend({\n    isMeta: function (pyVar, result) {\n        // eslint-disable-line no-unused-vars\n        var reg = new RegExp(result.length > 1 ? result.join('|') : result);\n\n        if (typeof pyVar === 'object' && Object.keys(pyVar).length === 1) {\n            return reg.test(MEDUSA.config[Object.keys(pyVar)[0]][pyVar[Object.keys(pyVar)[0]]]);\n        }\n        if (pyVar.match('medusa')) {\n            pyVar.split('.')[1].toLowerCase().replace(/(_\\w)/g, function (m) {\n                return m[1].toUpperCase();\n            });\n        }\n        return reg.test(MEDUSA.config[pyVar]);\n    }\n});\n\n$.fn.extend({\n    addRemoveWarningClass: function (_) {\n        if (_) {\n            return $(this).removeClass('warning');\n        }\n        return $(this).addClass('warning');\n    }\n});\n\nvar triggerConfigLoaded = function () {\n    // Create the event.\n    var event = document.createEvent('CustomEvent');\n    event.initCustomEvent('build', false, false, {\n        detail: 'medusa config loaded'\n    });\n\n    // Trigger the event.\n    document.dispatchEvent(event);\n};\n\nif (!document.location.pathname.endsWith('/login/')) {\n    api.get('config/main').then(function (response) {\n        log.setDefaultLevel('trace');\n        $.extend(MEDUSA.config, response.data);\n        MEDUSA.config.themeSpinner = MEDUSA.config.themeName === 'dark' ? '-dark' : '';\n        MEDUSA.config.loading = '<img src=\"images/loading16' + MEDUSA.config.themeSpinner + '.gif\" height=\"16\" width=\"16\" />';\n\n        if (navigator.userAgent.indexOf('PhantomJS') === -1) {\n            $(document).ready(UTIL.init);\n        }\n\n        MEDUSA.config.indexers.indexerIdToName = function (indexer) {\n            if (!indexer) {\n                return '';\n            }\n            return MEDUSA.config.indexers.config[parseInt(indexer, 10)];\n        };\n\n        MEDUSA.config.indexers.nameToIndexerId = function (name) {\n            if (!name) {\n                return '';\n            }\n            return Object.keys(MEDUSA.config.indexers.config).map(function (key) {\n                // eslint-disable-line array-callback-return\n                if (MEDUSA.config.indexers.config[key] === name) {\n                    return key;\n                }\n            })[0];\n        };\n\n        triggerConfigLoaded();\n    }).catch(function (err) {\n        log.error(err);\n        alert('Unable to connect to Medusa!'); // eslint-disable-line no-alert\n    });\n}\n\n// Notifications\nvar WSMessageUrl = '/ui'; // eslint-disable-line xo/filename-case\nvar test = !1;\nvar iconUrl = 'images/ico/favicon-120.png';\n\nPNotify.prototype.options.addclass = 'stack-bottomright';\nPNotify.prototype.options.buttons.closer_hover = !1; // eslint-disable-line camelcase\nPNotify.prototype.options.delay = 5000;\nPNotify.prototype.options.desktop = { desktop: !0, icon: iconUrl };\nPNotify.prototype.options.hide = !0;\nPNotify.prototype.options.history = !1;\nPNotify.prototype.options.shadow = !1;\nPNotify.prototype.options.stack = { dir1: 'up', dir2: 'left', firstpos1: 25, firstpos2: 25 };\nPNotify.prototype.options.styling = 'jqueryui';\nPNotify.prototype.options.width = '340px';\nPNotify.desktop.permission();\n\nfunction displayPNotify(type, title, message, id) {\n    new PNotify({ // eslint-disable-line no-new\n        type: type,\n        title: title,\n        desktop: {\n            tag: id\n        },\n        text: String(message).replace(/<br[\\s/]*(?:\\s[^>]*)?>/ig, '\\n').replace(/<[/]?b(?:\\s[^>]*)?>/ig, '*').replace(/<i(?:\\s[^>]*)?>/ig, '[').replace(/<[/]i>/ig, ']').replace(/<(?:[/]?ul|\\/li)(?:\\s[^>]*)?>/ig, '').replace(/<li(?:\\s[^>]*)?>/ig, '\\n* ')\n    });\n}\n\nfunction wsCheckNotifications() {\n    var proto = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    var webRoot = MEDUSA.config.webRoot || '';\n    var ws = new WebSocket(proto + '//' + window.location.hostname + ':' + window.location.port + webRoot + '/ws' + WSMessageUrl);\n    ws.onmessage = function (evt) {\n        var msg;\n        try {\n            msg = JSON.parse(evt.data);\n        } catch (e) {\n            // eslint-disable-line unicorn/catch-error-name\n            msg = evt.data;\n        }\n\n        // Add handling for different kinds of events. For ex: {\"event\": \"notification\", \"data\": {\"title\": ..}}\n        if (msg.event === 'notification') {\n            displayPNotify(msg.data.type, msg.data.title, msg.data.body, msg.data.hash);\n        } else {\n            displayPNotify('info', '', msg);\n        }\n    };\n\n    ws.onerror = function () {\n        log.warn('Error connecting to websocket. Please check your network connection. ' + 'If you are using a reverse proxy, please take a look at our wiki for config examples.');\n        displayPNotify('notice', 'Error connecting to websocket.', 'Please check your network connection. ' + 'If you are using a reverse proxy, please take a look at our wiki for config examples.');\n    };\n    console.log('Notifications library loaded.');\n}\n\n// Run functions that depend on loading of the config.\n// Listen for the config loaded event.\nwindow.addEventListener('build', function (e) {\n    if (e.detail === 'medusa config loaded') {\n        /**\n         * Search for anchors with the attribute indexer-to-name and translate the indexer id to a name using the helper\n         * function MEDUSA.config.indexers.indexerIdToName().\n         *\n         * The anchor is rebuild using the indexer name.\n         */\n        $('[data-indexer-to-name]').each(function (index, target) {\n            var indexerId = $(target).attr('data-indexer-to-name');\n            var indexerName = MEDUSA.config.indexers.indexerIdToName(indexerId);\n\n            var re = /indexer-to-name/gi;\n\n            $.each(target.attributes, function (index, attr) {\n                if (attr.name !== 'data-indexer-to-name' && target[attr.name]) {\n                    target[attr.name] = target[attr.name].replace(re, indexerName);\n                }\n            });\n        });\n\n        wsCheckNotifications();\n        if (test) {\n            displayPNotify('error', 'test', 'test<br><i class=\"test-class\">hello <b>world</b></i><ul><li>item 1</li><li>item 2</li></ul>', 'notification-test');\n        }\n    }\n}, false);\n\n},{}]},{},[1]);\n"],"file":"core.js"}