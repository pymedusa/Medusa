{"version":3,"names":[],"mappings":"","sources":["js/home/display-show.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/* global alert */\nMEDUSA.home.displayShow = function () {\n    // eslint-disable-line max-lines\n    $('.imdbPlot').on('click', function () {\n        $(this).prev('span').toggle();\n        if ($(this).html() === '..show less') {\n            $(this).html('..show more');\n        } else {\n            $(this).html('..show less');\n        }\n        moveSummaryBackground();\n        movecheckboxControlsBackground();\n    });\n\n    // Adjust the summary background position and size on page load and resize\n    function moveSummaryBackground() {\n        var height = $('#summary').height() + 10;\n        var top = $('#summary').offset().top + 5;\n        $('#summaryBackground').height(height);\n        $('#summaryBackground').offset({ top: top, left: 0 });\n        $('#summaryBackground').show();\n    }\n\n    function movecheckboxControlsBackground() {\n        var height = $('#checkboxControls').height() + 10;\n        var top = $('#checkboxControls').offset().top - 3;\n        $('#checkboxControlsBackground').height(height);\n        $('#checkboxControlsBackground').offset({ top: top, left: 0 });\n        $('#checkboxControlsBackground').show();\n    }\n\n    $(window).resize(function () {\n        moveSummaryBackground();\n        movecheckboxControlsBackground();\n    });\n\n    $(function () {\n        moveSummaryBackground();\n        movecheckboxControlsBackground();\n    });\n\n    $.ajaxEpSearch({\n        colorRow: true\n    });\n\n    startAjaxEpisodeSubtitles(); // eslint-disable-line no-undef\n    $.ajaxEpSubtitlesSearch();\n    $.ajaxEpRedownloadSubtitle();\n\n    $('#seasonJump').on('change', function () {\n        var id = $('#seasonJump option:selected').val();\n        if (id && id !== 'jump') {\n            var season = $('#seasonJump option:selected').data('season');\n            $('html,body').animate({ scrollTop: $('[name =\"' + id.substring(1) + '\"]').offset().top - 50 }, 'slow');\n            $('#collapseSeason-' + season).collapse('show');\n            location.hash = id;\n        }\n        $(this).val('jump');\n    });\n\n    $('#prevShow').on('click', function () {\n        $('#select-show option:selected').prev('option').prop('selected', true);\n        $('#select-show').change();\n    });\n\n    $('#nextShow').on('click', function () {\n        $('#select-show option:selected').next('option').prop('selected', true);\n        $('#select-show').change();\n    });\n\n    $('#changeStatus').on('click', function () {\n        var epArr = [];\n\n        $('.epCheck').each(function () {\n            if (this.checked === true) {\n                epArr.push($(this).attr('id'));\n            }\n        });\n\n        if (epArr.length === 0) {\n            return false;\n        }\n\n        window.location.href = $('base').attr('href') + 'home/setStatus?' + 'indexername=' + $('#indexer-name').attr('value') + '&seriesid=' + $('#series-id').attr('value') + '&eps=' + epArr.join('|') + '&status=' + $('#statusSelect').val();\n    });\n\n    $('.seasonCheck').on('click', function () {\n        var seasCheck = this;\n        var seasNo = $(seasCheck).attr('id');\n\n        $('#collapseSeason-' + seasNo).collapse('show');\n        $('.epCheck:visible').each(function () {\n            var epParts = $(this).attr('id').split('x');\n            if (epParts[0] === seasNo) {\n                this.checked = seasCheck.checked;\n            }\n        });\n    });\n\n    var lastCheck = null;\n    $('.epCheck').on('click', function (event) {\n        if (!lastCheck || !event.shiftKey) {\n            lastCheck = this;\n            return;\n        }\n\n        var check = this;\n        var found = 0;\n\n        $('.epCheck').each(function () {\n            if (found === 1) {\n                this.checked = lastCheck.checked;\n            }\n\n            if (found === 1) {\n                return false;\n            }\n\n            if (this === check || this === lastCheck) {\n                found++;\n            }\n        });\n    });\n\n    // Selects all visible episode checkboxes.\n    $('.seriesCheck').on('click', function () {\n        $('.epCheck:visible').each(function () {\n            this.checked = true;\n        });\n        $('.seasonCheck:visible').each(function () {\n            this.checked = true;\n        });\n    });\n\n    // Clears all visible episode checkboxes and the season selectors\n    $('.clearAll').on('click', function () {\n        $('.epCheck:visible').each(function () {\n            this.checked = false;\n        });\n        $('.seasonCheck:visible').each(function () {\n            this.checked = false;\n        });\n    });\n\n    // Handle the show selection dropbox\n    $('#select-show').on('change', function (evt) {\n        var selectedOption = evt.currentTarget.selectedOptions[0];\n        var indexerName = $(selectedOption).attr('data-indexer-name');\n        var seriesId = $(selectedOption).attr('data-series-id');\n        if (seriesId === 0 || !indexerName) {\n            return;\n        }\n        window.location.href = $('base').attr('href') + 'home/displayShow?indexername=' + indexerName + '&seriesid=' + seriesId;\n    });\n\n    // Show/hide different types of rows when the checkboxes are changed\n    $('#checkboxControls input').on('change', function () {\n        var whichClass = $(this).attr('id');\n        $(this).showHideRows(whichClass);\n    });\n\n    // Initially show/hide all the rows according to the checkboxes\n    $('#checkboxControls input').each(function () {\n        var status = $(this).prop('checked');\n        $('tr.' + $(this).attr('id')).each(function () {\n            if (status) {\n                $(this).show();\n            } else {\n                $(this).hide();\n            }\n        });\n    });\n\n    $.fn.showHideRows = function (whichClass) {\n        var status = $('#checkboxControls > input, #' + whichClass).prop('checked');\n        $('tr.' + whichClass).each(function () {\n            if (status) {\n                $(this).show();\n            } else {\n                $(this).hide();\n            }\n        });\n\n        // Hide season headers with no episodes under them\n        $('tr.seasonheader').each(function () {\n            var numRows = 0;\n            var seasonNo = $(this).attr('id');\n            $('tr.' + seasonNo + ' :visible').each(function () {\n                numRows++;\n            });\n            if (numRows === 0) {\n                $(this).hide();\n                $('#' + seasonNo + '-cols').hide();\n            } else {\n                $(this).show();\n                $('#' + seasonNo + '-cols').show();\n            }\n        });\n    };\n\n    function setEpisodeSceneNumbering(forSeason, forEpisode, sceneSeason, sceneEpisode) {\n        var indexerName = $('#indexer-name').val();\n        var seriesId = $('#series-id').val();\n\n        if (sceneSeason === '') {\n            sceneSeason = null;\n        }\n        if (sceneEpisode === '') {\n            sceneEpisode = null;\n        }\n\n        $.getJSON('home/setSceneNumbering', {\n            indexername: indexerName,\n            seriesid: seriesId,\n            forSeason: forSeason,\n            forEpisode: forEpisode,\n            sceneSeason: sceneSeason,\n            sceneEpisode: sceneEpisode\n        }, function (data) {\n            // Set the values we get back\n            if (data.sceneSeason === null || data.sceneEpisode === null) {\n                $('#sceneSeasonXEpisode_' + seriesId + '_' + forSeason + '_' + forEpisode).val('');\n            } else {\n                $('#sceneSeasonXEpisode_' + seriesId + '_' + forSeason + '_' + forEpisode).val(data.sceneSeason + 'x' + data.sceneEpisode);\n            }\n            if (!data.success) {\n                if (data.errorMessage) {\n                    alert(data.errorMessage); // eslint-disable-line no-alert\n                } else {\n                    alert('Update failed.'); // eslint-disable-line no-alert\n                }\n            }\n        });\n    }\n\n    function setAbsoluteSceneNumbering(forAbsolute, sceneAbsolute) {\n        var indexerName = $('#indexer-name').val();\n        var seriesId = $('#series-id').val();\n\n        if (sceneAbsolute === '') {\n            sceneAbsolute = null;\n        }\n\n        $.getJSON('home/setSceneNumbering', {\n            indexername: indexerName,\n            seriesid: seriesId,\n            forAbsolute: forAbsolute,\n            sceneAbsolute: sceneAbsolute\n        }, function (data) {\n            // Set the values we get back\n            if (data.sceneAbsolute === null) {\n                $('#sceneAbsolute_' + seriesId + '_' + forAbsolute).val('');\n            } else {\n                $('#sceneAbsolute_' + seriesId + '_' + forAbsolute).val(data.sceneAbsolute);\n            }\n\n            if (!data.success) {\n                if (data.errorMessage) {\n                    alert(data.errorMessage); // eslint-disable-line no-alert\n                } else {\n                    alert('Update failed.'); // eslint-disable-line no-alert\n                }\n            }\n        });\n    }\n\n    function setInputValidInvalid(valid, el) {\n        if (valid) {\n            $(el).css({\n                'background-color': '#90EE90', // Green\n                'color': '#FFF', // eslint-disable-line quote-props\n                'font-weight': 'bold'\n            });\n            return true;\n        }\n        $(el).css({\n            'background-color': '#FF0000', // Red\n            'color': '#FFF!important', // eslint-disable-line quote-props\n            'font-weight': 'bold'\n        });\n        return false;\n    }\n\n    $('.sceneSeasonXEpisode').on('change', function () {\n        // Strip non-numeric characters\n        var value = $(this).val();\n        $(this).val(value.replace(/[^0-9xX]*/g, ''));\n        var forSeason = $(this).attr('data-for-season');\n        var forEpisode = $(this).attr('data-for-episode');\n\n        // If empty reset the field\n        if (value === '') {\n            setEpisodeSceneNumbering(forSeason, forEpisode, null, null);\n            return;\n        }\n\n        var m = $(this).val().match(/^(\\d+)x(\\d+)$/i);\n        var onlyEpisode = $(this).val().match(/^(\\d+)$/i);\n        var sceneSeason = null;\n        var sceneEpisode = null;\n        var isValid = false;\n        if (m) {\n            sceneSeason = m[1];\n            sceneEpisode = m[2];\n            isValid = setInputValidInvalid(true, $(this));\n        } else if (onlyEpisode) {\n            // For example when '5' is filled in instead of '1x5', asume it's the first season\n            sceneSeason = forSeason;\n            sceneEpisode = onlyEpisode[1];\n            isValid = setInputValidInvalid(true, $(this));\n        } else {\n            isValid = setInputValidInvalid(false, $(this));\n        }\n\n        if (isValid) {\n            setEpisodeSceneNumbering(forSeason, forEpisode, sceneSeason, sceneEpisode);\n        }\n    });\n\n    $('.sceneAbsolute').on('change', function () {\n        // Strip non-numeric characters\n        $(this).val($(this).val().replace(/[^0-9xX]*/g, ''));\n        var forAbsolute = $(this).attr('data-for-absolute');\n\n        var m = $(this).val().match(/^(\\d{1,3})$/i);\n        var sceneAbsolute = null;\n        if (m) {\n            sceneAbsolute = m[1];\n        }\n        setAbsoluteSceneNumbering(forAbsolute, sceneAbsolute);\n    });\n\n    $.fn.generateStars = function () {\n        return this.each(function (i, e) {\n            $(e).html($('<span/>').width($(e).text() * 12));\n        });\n    };\n\n    $('.imdbstars').generateStars();\n\n    $('#showTable, #animeTable').tablesorter({\n        widgets: ['saveSort', 'stickyHeaders', 'columnSelector'],\n        widgetOptions: {\n            columnSelector_saveColumns: true, // eslint-disable-line camelcase\n            columnSelector_layout: '<label><input type=\"checkbox\">{name}</label>', // eslint-disable-line camelcase\n            columnSelector_mediaquery: false, // eslint-disable-line camelcase\n            columnSelector_cssChecked: 'checked' // eslint-disable-line camelcase\n        }\n    });\n\n    $('#popover').popover({\n        placement: 'bottom',\n        html: true, // Required if content has HTML\n        content: '<div id=\"popover-target\"></div>'\n    }).on('shown.bs.popover', function () {\n        // Bootstrap popover event triggered when the popover opens\n        $.tablesorter.columnSelector.attachTo($('#showTable, #animeTable'), '#popover-target');\n    });\n\n    // Moved and rewritten this from displayShow. This changes the button when clicked for collapsing/expanding the\n    // Season to Show Episodes or Hide Episodes.\n    $(function () {\n        $('.collapse.toggle').on('hide.bs.collapse', function () {\n            var reg = /collapseSeason-([0-9]+)/g;\n            var result = reg.exec(this.id);\n            $('#showseason-' + result[1]).text('Show Episodes');\n            $('#season-' + result[1] + '-cols').addClass('shadow');\n        });\n        $('.collapse.toggle').on('show.bs.collapse', function () {\n            var reg = /collapseSeason-([0-9]+)/g;\n            var result = reg.exec(this.id);\n            $('#showseason-' + result[1]).text('Hide Episodes');\n            $('#season-' + result[1] + '-cols').removeClass('shadow');\n        });\n    });\n\n    // Set the season exception based on using the get_xem_numbering_for_show() for animes if available in data.xemNumbering,\n    // or else try to map using just the data.season_exceptions.\n    function setSeasonSceneException(data) {\n        $.each(data.seasonExceptions, function (season, nameExceptions) {\n            var foundInXem = false;\n            // Check if it is a season name exception, we don't handle the show name exceptions here\n            if (season >= 0) {\n                // Loop through the xem mapping, and check if there is a xem_season, that needs to show the season name exception\n                $.each(data.xemNumbering, function (indexerSeason, xemSeason) {\n                    if (xemSeason === parseInt(season, 10)) {\n                        foundInXem = true;\n                        $('<img>', {\n                            id: 'xem-exception-season-' + xemSeason,\n                            alt: '[xem]',\n                            height: '16',\n                            width: '16',\n                            src: 'images/xem.png',\n                            title: nameExceptions.join(', ')\n                        }).appendTo('[data-season=' + indexerSeason + ']');\n                    }\n                });\n\n                // This is not a xem season exception, let's set the exceptions as a medusa exception\n                if (!foundInXem) {\n                    $('<img>', {\n                        id: 'xem-exception-season-' + season,\n                        alt: '[medusa]',\n                        height: '16',\n                        width: '16',\n                        src: 'images/ico/favicon-16.png',\n                        title: nameExceptions.join(', ')\n                    }).appendTo('[data-season=' + season + ']');\n                }\n            }\n        });\n    }\n\n    // @TODO: OMG: This is just a basic json, in future it should be based on the CRUD route.\n    // Get the season exceptions and the xem season mappings.\n    $.getJSON('home/getSeasonSceneExceptions', {\n        indexername: $('#indexer-name').val(),\n        seriesid: $('#series-id').val() // eslint-disable-line camelcase\n    }, function (data) {\n        setSeasonSceneException(data);\n    });\n\n    $('.display-specials a').on('click', function () {\n        api.patch('config/main', {\n            layout: {\n                show: {\n                    specials: $(this).text() !== 'Hide'\n                }\n            }\n        }).then(function (response) {\n            log.info(response.data);\n            window.location.reload();\n        }).catch(function (err) {\n            log.error(err.data);\n        });\n    });\n};\n\n},{}]},{},[1]);\n"],"file":"display-show.js"}