{"version":3,"names":[],"mappings":"","sources":["js/parsers.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n$.tablesorter.addParser({\n    id: 'loadingNames',\n    is: function () {\n        return false;\n    },\n    format: function (s) {\n        if (s.indexOf('Loading...') === 0) {\n            return s.replace('Loading...', '000');\n        }\n        return MEDUSA.config.sortArticle ? s || '' : (s || '').replace(/^(The|A|An)\\s/i, ''); // eslint-disable-line no-undef\n    },\n    type: 'text'\n});\n$.tablesorter.addParser({\n    id: 'quality',\n    is: function () {\n        return false;\n    },\n    format: function (s) {\n        var replacements = {\n            custom: 11,\n            bluray: 10, // Custom: Only bluray\n            hd1080p: 9,\n            '1080p': 8, // Custom: Only 1080p\n            hdtv: 7, // Custom: 1080p and 720p (only HDTV)\n            'web-dl': 6, // Custom: 1080p and 720p (only WEB-DL)\n            hd720p: 5,\n            '720p': 4, // Custom: Only 720p\n            hd: 3,\n            sd: 2,\n            any: 1,\n            best: 0\n        };\n        return replacements[s.toLowerCase()];\n    },\n    type: 'numeric'\n});\n$.tablesorter.addParser({\n    id: 'realISODate',\n    is: function () {\n        return false;\n    },\n    format: function (s) {\n        return new Date(s).getTime();\n    },\n    type: 'numeric'\n});\n\n$.tablesorter.addParser({\n    id: 'cDate',\n    is: function () {\n        return false;\n    },\n    format: function (s) {\n        return s;\n    },\n    type: 'numeric'\n});\n$.tablesorter.addParser({\n    id: 'eps',\n    is: function () {\n        return false;\n    },\n    format: function (s) {\n        var match = s.match(/^(.*)/);\n\n        if (match === null || match[1] === '?') {\n            return -10;\n        }\n\n        var nums = match[1].split(' / ');\n        if (nums[0].indexOf('+') !== -1) {\n            var numParts = nums[0].split('+');\n            nums[0] = numParts[0];\n        }\n\n        nums[0] = parseInt(nums[0], 10);\n        nums[1] = parseInt(nums[1], 10);\n\n        if (nums[0] === 0) {\n            return nums[1];\n        }\n        var finalNum = parseInt($('meta[data-var=\"max_download_count\"]').data('content') * nums[0] / nums[1], 10);\n        var pct = Math.round(nums[0] / nums[1] * 100) / 1000;\n        if (finalNum > 0) {\n            finalNum += nums[0];\n        }\n\n        return finalNum + pct;\n    },\n    type: 'numeric'\n});\n\n},{}]},{},[1]);\n"],"file":"parsers.js"}