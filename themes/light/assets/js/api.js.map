{"version":3,"names":[],"mappings":"","sources":["js/api.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n'use strict';\n\nvar baseUrl = document.body.getAttribute('web-root');\nvar idToken = document.body.getAttribute('api-key');\n\n/**\n * Api client based on the axios client, to communicate with medusa's web routes, which return json data.\n */\nvar apiRoute = axios.create({ // eslint-disable-line no-unused-vars\n    baseURL: baseUrl + '/',\n    timeout: 10000,\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n    }\n});\n\n/**\n * Api client based on the axios client, to communicate with medusa's api v1.\n */\nvar apiv1 = axios.create({ // eslint-disable-line no-unused-vars\n    baseURL: baseUrl + '/api/v1/' + idToken + '/',\n    timeout: 10000,\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n    }\n});\n\n/**\n * Api client based on the axios client, to communicate with medusa's api v2.\n */\nvar api = axios.create({ // eslint-disable-line no-unused-vars\n    baseURL: baseUrl + '/api/v2/',\n    timeout: 10000,\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        'X-Api-Key': idToken\n    }\n});\n\n},{}]},{},[1]);\n"],"file":"api.js"}