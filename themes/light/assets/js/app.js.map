{"version":3,"sources":["webpack:///./src/app.js"],"names":["__webpack_require__","r","__webpack_exports__","vue__WEBPACK_IMPORTED_MODULE_0__","vuex__WEBPACK_IMPORTED_MODULE_1__","vue_router__WEBPACK_IMPORTED_MODULE_2__","vue_async_computed__WEBPACK_IMPORTED_MODULE_3__","vue_snotify__WEBPACK_IMPORTED_MODULE_4__","_store__WEBPACK_IMPORTED_MODULE_5__","_router__WEBPACK_IMPORTED_MODULE_6__","_utils__WEBPACK_IMPORTED_MODULE_7__","_components__WEBPACK_IMPORTED_MODULE_8__","Vue","config","devtools","performance","use","Vuex","VueRouter","AsyncComputed","Snotify","AnidbReleaseGroupUi","AppHeader","AppLink","Asset","Backstretch","Config","FileBrowser","LanguageSelect","NamePattern","PlotInfo","RootDirs","ScrollButtons","SelectList","Show","ShowSelector","SubMenu","forEach","component","name","window","components","Object","keys","options","includes","isDevelopment","console","debug","concat","app","store","router","data","globalLoading","pageComponent","mounted","log","document","location","pathname","$store","this","Promise","all","dispatch","username","then","_","event","CustomEvent","detail","main","dispatchEvent","catch","error","alert","$mount"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,IAAAM,EAAAN,EAAA,IAAAO,EAAAP,EAAA,IAAAQ,EAAAR,EAAA,IAAAS,EAAAT,EAAA,IAAAU,EAAAV,EAAA,GAAAW,EAAAX,EAAA,GA2BAY,IAAIC,OAAOC,UAAW,EACtBF,IAAIC,OAAOE,aAAc,EAEzBH,IAAII,IAAIC,KACRL,IAAII,IAAIE,KACRN,IAAII,IAAIG,KACRP,IAAII,IAAII,KAGiB,CACrBC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,KAGaC,QAAQC,IACrB1B,IAAI0B,UAAUA,EAAUC,KAAMD,KAIlCE,OAAOC,WAAWJ,QAAQC,IAEjBI,OAAOC,KAAK/B,IAAIgC,QAAQH,YAAYI,SAASP,EAAUC,QACpDO,KACAC,QAAQC,MAAR,eAAAC,OAA6BX,EAAUC,OAE3C3B,IAAI0B,UAAUA,EAAUC,KAAMD,MAItC,MAAMY,EAAM,IAAItC,IAAI,CAChB2B,KAAM,MACNY,UACAC,WACAX,WAAY,GAEZY,KAAI,KACO,CACHC,eAAe,EACfC,eAAe,IAGvBC,UAKI,GAJIV,KACAC,QAAQU,IAAI,iBAGXC,SAASC,SAASC,SAASf,SAAS,UAAW,CAChD,MAAMgB,OAAEA,GAAWC,KACnBC,QAAQC,IAAI,CACRH,EAAOI,SAAS,QAAS,CAAEC,SAAU1B,OAAO0B,WAC5CL,EAAOI,SAAS,eACjBE,KAAK,EAAEC,EAAGvD,MACLiC,KACAC,QAAQU,IAAI,eAGhB,MAAMY,EAAQ,IAAIC,YAAY,uBAAwB,CAAEC,OAAQ1D,EAAO2D,OACvEhC,OAAOiC,cAAcJ,KACtBK,MAAMC,IACL5B,QAAQC,MAAM2B,GACdC,MAAM,sCAInBC,OAAO,aAEK3B","file":"js/app.js","sourcesContent":["import Vue from 'vue';\nimport Vuex from 'vuex';\nimport VueRouter from 'vue-router';\nimport AsyncComputed from 'vue-async-computed';\nimport Snotify from 'vue-snotify';\nimport store from './store';\nimport router from './router';\nimport { isDevelopment } from './utils';\nimport {\n    AnidbReleaseGroupUi,\n    AppHeader,\n    AppLink,\n    Asset,\n    Backstretch,\n    Config,\n    FileBrowser,\n    LanguageSelect,\n    NamePattern,\n    PlotInfo,\n    RootDirs,\n    ScrollButtons,\n    SelectList,\n    Show,\n    ShowSelector,\n    SubMenu\n} from './components';\n\nVue.config.devtools = true;\nVue.config.performance = true;\n\nVue.use(Vuex);\nVue.use(VueRouter);\nVue.use(AsyncComputed);\nVue.use(Snotify);\n\n// Global components\nconst globalComponents = [\n    AnidbReleaseGroupUi,\n    AppHeader,\n    AppLink,\n    Asset,\n    Backstretch,\n    Config,\n    FileBrowser,\n    LanguageSelect,\n    NamePattern,\n    PlotInfo,\n    RootDirs,\n    ScrollButtons,\n    SelectList,\n    Show,\n    ShowSelector,\n    SubMenu\n];\n\nglobalComponents.forEach(component => {\n    Vue.component(component.name, component);\n});\n\n// Load x-template components\nwindow.components.forEach(component => {\n    // Skip already registered components\n    if (!Object.keys(Vue.options.components).includes(component.name)) {\n        if (isDevelopment) {\n            console.debug(`Registering ${component.name}`);\n        }\n        Vue.component(component.name, component);\n    }\n});\n\nconst app = new Vue({\n    name: 'App',\n    store,\n    router,\n    components: {\n    },\n    data() {\n        return {\n            globalLoading: false,\n            pageComponent: false\n        };\n    },\n    mounted() {\n        if (isDevelopment) {\n            console.log('App Mounted!');\n        }\n\n        if (!document.location.pathname.includes('/login')) {\n            const { $store } = this;\n            Promise.all([\n                $store.dispatch('login', { username: window.username }),\n                $store.dispatch('getConfig')\n            ]).then(([_, config]) => {\n                if (isDevelopment) {\n                    console.log('App Loaded!');\n                }\n                // Legacy - send config.main to jQuery (received by index.js)\n                const event = new CustomEvent('medusa-config-loaded', { detail: config.main });\n                window.dispatchEvent(event);\n            }).catch(error => {\n                console.debug(error);\n                alert('Unable to connect to Medusa!'); // eslint-disable-line no-alert\n            });\n        }\n    }\n}).$mount('#vue-wrap');\n\nexport default app;\n"],"sourceRoot":""}