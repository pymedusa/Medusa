{"version":3,"names":[],"mappings":"","sources":["js/browser.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function ($) {\n    'use strict';\n\n    $.Browser = {\n        defaults: {\n            title: 'Choose Directory',\n            url: 'browser/',\n            autocompleteURL: 'browser/complete',\n            includeFiles: 0,\n            showBrowseButton: true\n        }\n    };\n\n    let fileBrowserDialog;\n    let currentBrowserPath;\n    let currentRequest = null;\n\n    function browse(path, endpoint, includeFiles) {\n        if (currentBrowserPath === path) {\n            return;\n        }\n\n        currentBrowserPath = path;\n\n        if (currentRequest) {\n            currentRequest.abort();\n        }\n\n        fileBrowserDialog.dialog('option', 'dialogClass', 'browserDialog busy');\n        fileBrowserDialog.dialog('option', 'closeText', ''); // This removes the \"Close\" text\n\n        currentRequest = $.getJSON(endpoint, {\n            path,\n            includeFiles\n        }, data => {\n            fileBrowserDialog.empty();\n            const firstVal = data[0];\n            let i = 0;\n            let link = null;\n            data = $.grep(data, () => {\n                return i++ !== 0;\n            });\n\n            $('<input type=\"text\" class=\"form-control input-sm\">').val(firstVal.currentPath).on('keypress', e => {\n                if (e.which === 13) {\n                    browse(e.target.value, endpoint, includeFiles);\n                }\n            }).appendTo(fileBrowserDialog).fileBrowser({ showBrowseButton: false }).on('autocompleteselect', (e, ui) => {\n                browse(ui.item.value, endpoint, includeFiles);\n            });\n\n            const list = $('<ul>').appendTo(fileBrowserDialog);\n            $.each(data, (i, entry) => {\n                link = $('<a href=\"javascript:void(0)\">').on('click', () => {\n                    if (entry.isFile) {\n                        currentBrowserPath = entry.path;\n                        $('.browserDialog .ui-button:contains(\"Ok\")').click();\n                    } else {\n                        browse(entry.path, endpoint, includeFiles);\n                    }\n                }).text(entry.name);\n                if (entry.isFile) {\n                    link.prepend('<span class=\"ui-icon ui-icon-blank\"></span>');\n                } else {\n                    link.prepend('<span class=\"ui-icon ui-icon-folder-collapsed\"></span>').on('mouseenter', function () {\n                        $('span', this).addClass('ui-icon-folder-open');\n                    }).on('mouseleave', function () {\n                        $('span', this).removeClass('ui-icon-folder-open');\n                    });\n                }\n                link.appendTo(list);\n            });\n            $('a', list).wrap('<li class=\"ui-state-default ui-corner-all\">');\n            fileBrowserDialog.dialog('option', 'dialogClass', 'browserDialog');\n        });\n    }\n\n    $.fn.nFileBrowser = function (callback, options) {\n        options = $.extend({}, $.Browser.defaults, options);\n\n        if (fileBrowserDialog) {\n            // The title may change, even if fileBrowserDialog already exists\n            fileBrowserDialog.dialog('option', 'title', options.title);\n        } else {\n            // Make a fileBrowserDialog object if one doesn't exist already\n            // set up the jquery dialog\n            fileBrowserDialog = $('<div class=\"fileBrowserDialog\" style=\"display:hidden\"></div>').appendTo('body').dialog({\n                dialogClass: 'browserDialog',\n                title: options.title,\n                position: {\n                    my: 'center top',\n                    at: 'center top+60',\n                    of: window\n                },\n                minWidth: Math.min($(document).width() - 80, 650),\n                height: Math.min($(document).height() - 80, $(window).height() - 80),\n                maxHeight: Math.min($(document).height() - 80, $(window).height() - 80),\n                maxWidth: $(document).width() - 80,\n                modal: true,\n                autoOpen: false\n            });\n        }\n\n        fileBrowserDialog.dialog('option', 'buttons', [{\n            text: 'Ok',\n            class: 'btn',\n            click() {\n                // Store the browsed path to the associated text field\n                callback(currentBrowserPath, options);\n                $(this).dialog('close');\n            }\n        }, {\n            text: 'Cancel',\n            class: 'btn',\n            click() {\n                $(this).dialog('close');\n            }\n        }]);\n\n        // Set up the browser and launch the dialog\n        let initialDir = '';\n        if (options.initialDir) {\n            initialDir = options.initialDir;\n        }\n\n        browse(initialDir, options.url, options.includeFiles);\n        fileBrowserDialog.dialog('open');\n\n        return false;\n    };\n\n    $.fn.fileBrowser = function (options) {\n        options = $.extend({}, $.Browser.defaults, options);\n        // Text field used for the result\n        options.field = $(this);\n\n        if (options.field.autocomplete && options.autocompleteURL) {\n            let query = '';\n            options.field.autocomplete({\n                position: {\n                    my: 'top',\n                    at: 'bottom',\n                    collision: 'flipfit'\n                },\n                source(request, response) {\n                    // Keep track of user submitted search term\n                    query = $.ui.autocomplete.escapeRegex(request.term, options.includeFiles);\n                    $.ajax({\n                        url: options.autocompleteURL,\n                        data: request,\n                        dataType: 'json'\n                    }).done(data => {\n                        // Implement a startsWith filter for the results\n                        const matcher = new RegExp('^' + query, 'i');\n                        const a = $.grep(data, item => {\n                            return matcher.test(item);\n                        });\n                        response(a);\n                    });\n                },\n                open() {\n                    $('.ui-autocomplete li.ui-menu-item a').removeClass('ui-corner-all');\n                }\n            }).data('ui-autocomplete')._renderItem = function (ul, item) {\n                // Highlight the matched search term from the item -- note that this is global and will match anywhere\n                let resultItem = item.label;\n                const x = new RegExp('(?![^&;]+;)(?!<[^<>]*)(' + query + ')(?![^<>]*>)(?![^&;]+;)', 'gi');\n                resultItem = resultItem.replace(x, fullMatch => {\n                    return '<b>' + fullMatch + '</b>';\n                });\n                return $('<li></li>').data('ui-autocomplete-item', item).append('<a class=\"nowrap\">' + resultItem + '</a>').appendTo(ul);\n            };\n        }\n\n        let path;\n        let ls = false;\n        // If the text field is empty and we're given a key then populate it with the last browsed value from localStorage\n        try {\n            ls = Boolean(localStorage.getItem);\n        } catch (err) {\n            console.log(err);\n        }\n        if (ls && options.key) {\n            path = localStorage['fileBrowser-' + options.key];\n        }\n        if (options.key && options.field.val().length === 0 && path) {\n            options.field.val(path);\n        }\n\n        const callback = (path, options) => {\n            // Store the browsed path to the associated text field\n            options.field.val(path);\n\n            // Use a localStorage to remember for next time -- no ie6/7\n            if (ls && options.key) {\n                localStorage['fileBrowser-' + options.key] = path;\n            }\n        };\n\n        options.field.addClass('fileBrowserField');\n        if (options.showBrowseButton) {\n            // Append the browse button and give it a click behaviour\n            options.field.after($('<input type=\"button\" value=\"Browse&hellip;\" class=\"btn btn-inline fileBrowser\">').on('click', function () {\n                const initialDir = options.field.val() || options.key && path || '';\n                const optionsWithInitialDir = $.extend({}, options, { initialDir });\n                $(this).nFileBrowser(callback, optionsWithInitialDir);\n                return false;\n            }));\n        }\n        return options.field;\n    };\n})(jQuery);\n\n},{}]},{},[1]);\n"],"file":"browser.js"}