{"version":3,"names":[],"mappings":"","sources":["js/home/snatch-selection.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nMEDUSA.home.snatchSelection = function () {\n    $('.imdbPlot').on('click', function () {\n        $(this).prev('span').toggle();\n        if ($(this).html() === '..show less') {\n            $(this).html('..show more');\n        } else {\n            $(this).html('..show less');\n        }\n        moveSummaryBackground();\n    });\n\n    // Adjust the summary background position and size on page load and resize\n    function moveSummaryBackground() {\n        const height = $('#summary').height() + 10;\n        const top = $('#summary').offset().top + 5;\n        $('#summaryBackground').height(height);\n        $('#summaryBackground').offset({ top, left: 0 });\n        $('#summaryBackground').show();\n    }\n\n    $(window).resize(() => {\n        moveSummaryBackground();\n    });\n\n    const updateSpinner = function (message, showSpinner) {\n        // Get spinner object as needed\n        const spinner = $('#searchNotification');\n        if (showSpinner) {\n            message = '<img id=\"searchingAnim\" src=\"images/loading32' + MEDUSA.config.themeSpinner + '.gif\" height=\"16\" width=\"16\" />&nbsp;' + message;\n        }\n        $(spinner).empty().append(message);\n    };\n\n    // Check the previous status of the history table, for hidden or shown, through the data attribute\n    // data-history-toggle-hidden\n    function toggleHistoryTable() {\n        // Get previous state which was saved on the wrapper\n        const showOrHide = $('#wrapper').attr('data-history-toggle');\n        $('#historydata').collapse(showOrHide);\n    }\n\n    $.fn.loadContainer = function (path, loadingTxt, errorTxt, callback) {\n        updateSpinner(loadingTxt);\n        $('#manualSearchMeta').load(path + ' #manualSearchMeta meta');\n        $(this).load(path + ' #manualSearchTbody tr', (response, status) => {\n            if (status === 'error') {\n                updateSpinner(errorTxt, false);\n            }\n            if (typeof callback !== 'undefined') {\n                callback();\n            }\n        });\n    };\n\n    // Click event for the download button for snatching a result\n    $('body').on('click', '.epManualSearch', function (event) {\n        event.preventDefault();\n        const link = this;\n        $(link).children('img').prop('src', 'images/loading16.gif');\n        $.getJSON(this.href, data => {\n            if (data.result === 'success') {\n                $(link).children('img').prop('src', 'images/save.png');\n            } else {\n                $(link).children('img').prop('src', 'images/no16.png');\n            }\n        });\n    });\n\n    $.fn.generateStars = function () {\n        return this.each((i, e) => {\n            $(e).html($('<span/>').width($(e).text() * 12));\n        });\n    };\n\n    function initTableSorter(table) {\n        // Nasty hack to re-initialize tablesorter after refresh\n        $(table).tablesorter({\n            widgets: ['saveSort', 'stickyHeaders', 'columnSelector', 'filter'],\n            widgetOptions: {\n                filter_columnFilters: true, // eslint-disable-line camelcase\n                filter_hideFilters: true, // eslint-disable-line camelcase\n                filter_saveFilters: true, // eslint-disable-line camelcase\n                columnSelector_saveColumns: true, // eslint-disable-line camelcase\n                columnSelector_layout: '<label><input type=\"checkbox\">{name}</label>', // eslint-disable-line camelcase\n                columnSelector_mediaquery: false, // eslint-disable-line camelcase\n                columnSelector_cssChecked: 'checked' // eslint-disable-line camelcase\n            },\n            textExtraction: function () {\n                return {\n                    // 6: The size column needs an explicit field for the filtering on raw size.\n                    6(node) {\n                        return node.getAttribute('data-size');\n                    }\n                };\n            }()\n        });\n    }\n\n    $('.imdbstars').generateStars();\n\n    function checkCacheUpdates(repeat) {\n        const self = this;\n        let pollInterval = 5000;\n        repeat = repeat || true;\n\n        const indexerName = $('meta[data-last-prov-updates]').attr('data-indexer-name');\n        const seriesId = $('meta[data-last-prov-updates]').attr('data-series-id');\n        const season = $('meta[data-last-prov-updates]').attr('data-season');\n        const episode = $('meta[data-last-prov-updates]').attr('data-episode');\n        const data = $('meta[data-last-prov-updates]').data('last-prov-updates');\n        const manualSearchType = $('meta[data-last-prov-updates]').attr('data-manual-search-type');\n\n        const checkParams = [indexerName, seriesId, season, episode].every(checkIsTrue => {\n            return checkIsTrue;\n        });\n\n        if (!checkParams) {\n            console.log(```Something went wrong in getthing the paramaters from dom. indexerName: ${indexerName}, \n                        seriesId: ${seriesId}, season: ${season}, episode: ${episode}```);\n            return;\n        }\n\n        let urlParams = '?indexername=' + indexerName + '&seriesid=' + seriesId + '&season=' + season + '&episode=' + episode;\n\n        if (manualSearchType === 'season') {\n            urlParams += '&manual_search_type=' + manualSearchType;\n        }\n\n        if (!$.isNumeric(seriesId) || !$.isNumeric(season) || !$.isNumeric(episode)) {\n            setTimeout(() => {\n                checkCacheUpdates(true);\n            }, 200);\n        }\n\n        self.refreshResults = function () {\n            $('#manualSearchTbody').loadContainer('home/snatchSelection' + urlParams, 'Loading new search results...', 'Time out, refresh page to try again', toggleHistoryTable // This is a callback function\n            );\n        };\n\n        $.ajax({\n            url: 'home/manualSearchCheckCache' + urlParams,\n            type: 'GET',\n            data,\n            contentType: 'application/json',\n            error() {\n                // Repeat = false;\n                console.log('Error occurred!!');\n                $('.manualSearchButton').removeAttr('disabled');\n            },\n            complete() {\n                if (repeat) {\n                    setTimeout(checkCacheUpdates, pollInterval);\n                }\n            },\n            timeout: 15000 // Timeout after 15s\n        }).done(data => {\n            // @TODO: Combine the lower if statements\n            if (data === '') {\n                updateSpinner('Search finished', false);\n                $('.manualSearchButton').removeAttr('disabled');\n                repeat = false;\n            }\n\n            if (data.result === 'refresh') {\n                self.refreshResults();\n                updateSpinner('Refreshed results...', true);\n            }\n            if (data.result === 'searching') {\n                // Ep is searched, you will get a results any minute now\n                pollInterval = 5000;\n                $('.manualSearchButton').prop('disabled', true);\n                updateSpinner('The episode is being searched, please wait......', true);\n            }\n            if (data.result === 'queued') {\n                // Ep is queued, this might take some time to get results\n                pollInterval = 7000;\n                $('.manualSearchButton').prop('disabled', true);\n                updateSpinner('The episode has been queued, because another search is taking place. please wait..', true);\n            }\n            if (data.result === 'finished') {\n                // Ep search is finished\n                updateSpinner('Search finished', false);\n                $('.manualSearchButton').removeAttr('disabled');\n                repeat = false;\n                $('#srchresults').trigger('update', true);\n                $('[datetime]').timeago();\n            }\n            if (data.result === 'error') {\n                // Ep search is finished but with an error\n                console.log('Probably tried to call manualSelectCheckCache, while page was being refreshed.');\n                $('.manualSearchButton').removeAttr('disabled');\n                repeat = true;\n            }\n        });\n    }\n\n    setTimeout(checkCacheUpdates, 2000);\n\n    // Click event for the reload results and force search buttons\n    $('body').on('click', '.manualSearchButton', function (event) {\n        event.preventDefault();\n        $('.manualSearchButton').prop('disabled', true);\n        const indexerName = $('meta[data-last-prov-updates]').attr('data-indexer-name');\n        const seriesId = $('meta[data-last-prov-updates]').attr('data-series-id');\n        const season = $('meta[data-last-prov-updates]').attr('data-season');\n        const episode = $('meta[data-last-prov-updates]').attr('data-episode');\n        const manualSearchType = $('meta[data-last-prov-updates]').attr('data-manual-search-type');\n        const forceSearch = $(this).attr('data-force-search');\n\n        const checkParams = [indexerName, seriesId, season, episode].every(checkIsTrue => {\n            return checkIsTrue;\n        });\n\n        if (!checkParams) {\n            console.log(```Something went wrong in getthing the paramaters from dom. indexerName: ${indexerName}, \n                        seriesId: ${seriesId}, season: ${season}, episode: ${episode}```);\n            return;\n        }\n\n        if ($.isNumeric(seriesId) && $.isNumeric(season) && $.isNumeric(episode)) {\n            updateSpinner('Started a forced manual search...', true);\n            $.getJSON('home/snatchSelection', {\n                indexername: indexerName,\n                seriesid: seriesId,\n                season,\n                episode,\n                manual_search_type: manualSearchType, // eslint-disable-line camelcase\n                perform_search: forceSearch // eslint-disable-line camelcase\n            });\n            // Force the search, but give the checkCacheUpdates the time to start up a search thread\n            setTimeout(() => {\n                checkCacheUpdates(true);\n            }, 2000);\n        }\n    });\n\n    // Moved and rewritten this from displayShow. This changes the button when clicked for collapsing/expanding the\n    // \"Show History\" button to show or hide the snatch/download/failed history for a manual searched episode or pack.\n\n    $('#popover').popover({\n        placement: 'bottom',\n        html: true, // Required if content has HTML\n        content: '<div id=\"popover-target\"></div>'\n    }).on('shown.bs.popover', () => {\n        // Bootstrap popover event triggered when the popover opens\n        $.tablesorter.columnSelector.attachTo($('#srchresults'), '#popover-target');\n    });\n\n    $('#btnReset').click(() => {\n        $('#showTable').trigger('saveSortReset') // Clear saved sort\n        .trigger('sortReset'); // Reset current table sort\n        return false;\n    });\n\n    $(() => {\n        initTableSorter('#srchresults');\n        moveSummaryBackground();\n        $('body').on('hide.bs.collapse', '.collapse.toggle', () => {\n            $('#showhistory').text('Show History');\n            $('#wrapper').prop('data-history-toggle', 'hide');\n        });\n        $('body').on('show.bs.collapse', '.collapse.toggle', () => {\n            $('#showhistory').text('Hide History');\n            $('#wrapper').prop('data-history-toggle', 'show');\n        });\n    });\n\n    $(document).on('click', '.release-name-ellipses, .release-name-ellipses-toggled', el => {\n        const target = $(el.currentTarget);\n\n        if (target.hasClass('release-name-ellipses')) {\n            target.switchClass('release-name-ellipses', 'release-name-ellipses-toggled', 100);\n        } else {\n            target.switchClass('release-name-ellipses-toggled', 'release-name-ellipses', 100);\n        }\n    });\n};\n\n},{}]},{},[1]);\n"],"file":"snatch-selection.js"}