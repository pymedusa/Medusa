{"version":3,"names":[],"mappings":"","sources":["js/manage/backlog-overview.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nMEDUSA.manage.backlogOverview = function () {\n    checkForcedSearch();\n\n    function checkForcedSearch() {\n        let pollInterval = 5000;\n        const searchStatusUrl = 'home/getManualSearchStatus';\n        const indexerName = $('#indexer-name').val();\n        const seriesId = $('#series-id').val();\n        const url = seriesId === undefined ? searchStatusUrl : searchStatusUrl + '?indexername=' + indexerName + '&seriesid=' + seriesId;\n        $.ajax({\n            url,\n            error() {\n                pollInterval = 30000;\n            },\n            type: 'GET',\n            dataType: 'JSON',\n            complete() {\n                setTimeout(checkForcedSearch, pollInterval);\n            },\n            timeout: 15000 // Timeout every 15 secs\n        }).done(data => {\n            if (data.episodes) {\n                pollInterval = 5000;\n            } else {\n                pollInterval = 15000;\n            }\n            updateForcedSearch(data);\n        });\n    }\n\n    function updateForcedSearch(data) {\n        $.each(data.episodes, (name, ep) => {\n            const el = $('a[id=' + ep.indexer_id + 'x' + ep.series_id + 'x' + ep.season + 'x' + ep.episode + ']');\n            const img = el.children('img[data-ep-search]');\n            const episodeStatus = ep.status.toLowerCase();\n            const episodeSearchStatus = ep.searchstatus.toLowerCase();\n            if (el) {\n                if (episodeSearchStatus === 'searching' || episodeSearchStatus === 'queued') {\n                    // El=$('td#' + ep.season + 'x' + ep.episode + '.search img');\n                    img.prop('src', 'images/loading16.gif');\n                } else if (episodeSearchStatus === 'finished') {\n                    // El=$('td#' + ep.season + 'x' + ep.episode + '.search img');\n                    if (episodeStatus.indexOf('snatched') >= 0) {\n                        img.prop('src', 'images/yes16.png');\n                        setTimeout(() => {\n                            img.parent().parent().parent().remove();\n                        }, 3000);\n                    } else {\n                        img.prop('src', 'images/search16.png');\n                    }\n                }\n            }\n        });\n    }\n\n    $('#pickShow').on('change', function () {\n        const id = $(this).val();\n        if (id) {\n            $('html,body').animate({ scrollTop: $('#show-' + id).offset().top - 25 }, 'slow');\n        }\n    });\n\n    $('#backlog_period').on('change', function () {\n        api.patch('config/main', {\n            backlogOverview: {\n                period: $(this).val()\n            }\n        }).then(response => {\n            log.info(response);\n            window.location.reload();\n        }).catch(err => {\n            log.error(err);\n        });\n    });\n\n    $('#backlog_status').on('change', function () {\n        api.patch('config/main', {\n            backlogOverview: {\n                status: $(this).val()\n            }\n        }).then(response => {\n            log.info(response);\n            window.location.reload();\n        }).catch(err => {\n            log.error(err);\n        });\n    });\n\n    $('.forceBacklog').on('click', function () {\n        $.get($(this).attr('href'));\n        $(this).text('Searching...');\n        return false;\n    });\n\n    $('.epArchive').on('click', function (event) {\n        event.preventDefault();\n        const img = $(this).children('img[data-ep-archive]');\n        img.prop('title', 'Archiving');\n        img.prop('alt', 'Archiving');\n        img.prop('src', 'images/loading16.gif');\n        const url = $(this).prop('href');\n        $.getJSON(url, data => {\n            // If they failed then just put the red X\n            if (data.result.toLowerCase() === 'success') {\n                img.prop('src', 'images/yes16.png');\n                setTimeout(() => {\n                    img.parent().parent().parent().remove();\n                }, 3000);\n            } else {\n                img.prop('src', 'images/no16.png');\n            }\n            return false;\n        });\n    });\n\n    $('.epSearch').on('click', function (event) {\n        event.preventDefault();\n        const img = $(this).children('img[data-ep-search]');\n        img.prop('title', 'Searching');\n        img.prop('alt', 'Searching');\n        img.prop('src', 'images/loading16.gif');\n        const url = $(this).prop('href');\n        $.getJSON(url, data => {\n            // If they failed then just put the red X\n            if (data.result.toLowerCase() === 'failed') {\n                img.prop('src', 'images/no16.png');\n            }\n            return false;\n        });\n    });\n};\n\n},{}]},{},[1]);\n"],"file":"backlog-overview.js"}