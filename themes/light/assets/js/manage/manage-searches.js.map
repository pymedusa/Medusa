{"version":3,"names":[],"mappings":"","sources":["js/manage/manage-searches.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\nMEDUSA.manage.manageSearches = function () {\n    /**\n     * Get total number current scene exceptions per source. Will request medusa, xem and anidb name exceptions.\n     * @param {Object[]} exceptions - A list of exception types with their last updates.\n     * @param {string} exceptions[].id - The name of the scene exception source.\n     * @param {number} exceptions[].lastRefresh - The last update of the scene exception source as a timestamp.\n     */\n    const updateExceptionTable = function (exceptions) {\n        const status = $('#sceneExceptionStatus');\n\n        const medusaException = exceptions.find(obj => obj.id === 'local');\n        const cusExceptionDate = new Date(medusaException.lastRefresh * 1000).toLocaleDateString();\n\n        const xemException = exceptions.find(obj => obj.id === 'xem');\n        const xemExceptionDate = new Date(xemException.lastRefresh * 1000).toLocaleDateString();\n\n        const anidbException = exceptions.find(obj => obj.id === 'anidb');\n        const anidbExceptionDate = new Date(anidbException.lastRefresh * 1000).toLocaleDateString();\n\n        const table = $('<ul class=\"simpleList\"></ul>').append('<li><a href=\"' + MEDUSA.config.anonRedirect + 'https://github.com/pymedusa/Medusa/wiki/Scene-exceptions-and-numbering\">Last updated medusa\\'s exceptions</a> ' + cusExceptionDate).append('<li><a href=\"' + MEDUSA.config.anonRedirect + 'http://thexem.de\">Last updated xem exceptions</a> ' + xemExceptionDate).append('<li>Last updated anidb exceptions ' + anidbExceptionDate);\n\n        status.append(table);\n        $('.forceSceneExceptionRefresh').removeClass('disabled');\n    };\n\n    /**\n     * Update an element with a spinner gif and a descriptive message.\n     * @param {HTMLElement} spinnerContainer - An element we can use to add the spinner and message to.\n     * @param {string} message - The message to display behind the spinner.\n     * @param {boolean} showSpinner - A boolean to show or not show the spinner (gif).\n     */\n    const updateSpinner = function (spinnerContainer, message, showSpinner) {\n        if (showSpinner) {\n            message = '<img id=\"searchingAnim\" src=\"images/loading32' + MEDUSA.config.themeSpinner + '.gif\" height=\"16\" width=\"16\" />&nbsp;' + message;\n        }\n        $(spinnerContainer).empty().append(message);\n    };\n\n    /**\n     * Trigger the force refresh of all the exception types.\n     */\n    $('.forceSceneExceptionRefresh').on('click', () => {\n        const status = $('#sceneExceptionStatus');\n        // Start a spinner.\n        updateSpinner(status, 'Retrieving scene exceptions...', true);\n\n        api.post('alias-source/all/operation', { type: 'REFRESH' }, {\n            timeout: 60000\n        }).then(response => {\n            status[0].innerHTML = '';\n            status.append($('<span></span>').text(response.data.result));\n\n            api.get('alias-source').then(response => {\n                updateExceptionTable(response.data);\n                $('.forceSceneExceptionRefresh').addClass('disabled');\n            }).catch(err => {\n                log.error('Trying to get scene exceptions failed with error: ' + err);\n                updateSpinner(status, 'Trying to get scene exceptions failed with error: ' + err, false);\n            });\n            updateSpinner(status, 'Finished updating scene exceptions.', false);\n        }).catch(err => {\n            log.error('Trying to update scene exceptions failed with error: ' + err);\n            updateSpinner(status, 'Trying to update scene exceptions failed with error: ' + err, false);\n        });\n    });\n\n    // Initially load the exception types last updates on page load.\n    api.get('alias-source').then(response => {\n        updateExceptionTable(response.data);\n    }).catch(error => {\n        log.error('Trying to get scene exceptions failed with error: ' + error);\n    });\n};\n\n},{}]},{},[1]);\n"],"file":"manage-searches.js"}