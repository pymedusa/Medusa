{"version":3,"names":[],"mappings":"","sources":["js/quality-chooser.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n$(document).ready(() => {\n    function setFromPresets(preset) {\n        if (parseInt(preset, 10) === 0) {\n            $('#customQuality').show();\n            return;\n        }\n\n        $('#customQuality').hide();\n\n        $('#allowed_qualities option').each(function () {\n            const result = preset & $(this).val();\n            if (result > 0) {\n                $(this).prop('selected', true);\n            } else {\n                $(this).prop('selected', false);\n            }\n        });\n\n        $('#preferred_qualities option').each(function () {\n            const result = preset & $(this).val() << 16;\n            if (result > 0) {\n                $(this).prop('selected', true);\n            } else {\n                $(this).prop('selected', false);\n            }\n        });\n    }\n\n    function backloggedEpisodes() {\n        const selectedPreffered = [];\n        const selectedAllowed = [];\n        $('#preferred_qualities :selected').each((i, selected) => {\n            selectedPreffered[i] = $(selected).val();\n        });\n        $('#allowed_qualities :selected').each((i, selected) => {\n            selectedAllowed[i] = $(selected).val();\n        });\n        const url = 'series/' + $('#series-slug').attr('value') + '/legacy/backlogged' + '?allowed=' + selectedAllowed + '&preferred=' + selectedPreffered;\n        api.get(url).then(response => {\n            const newBacklogged = response.data.new;\n            const existingBacklogged = response.data.existing;\n            const variation = Math.abs(newBacklogged - existingBacklogged);\n            let html = 'Current backlog: <b>' + existingBacklogged + '</b> episodes<br>';\n            if (newBacklogged === -1 || existingBacklogged === -1) {\n                html = 'No qualities selected';\n            } else if (newBacklogged === existingBacklogged) {\n                html += 'This change won\\'t affect your backlogged episodes';\n            } else {\n                html += '<br />New backlog: <b>' + newBacklogged + '</b> episodes';\n                html += '<br /><br />';\n                let change = '';\n                if (newBacklogged > existingBacklogged) {\n                    html += '<b>WARNING</b>: ';\n                    change = 'increase';\n                    // Only show the archive action div if we have backlog increase\n                    $('#archive').show();\n                } else {\n                    change = 'decrease';\n                }\n                html += 'Backlog will ' + change + ' by <b>' + variation + '</b> episodes.';\n            }\n            $('#backloggedEpisodes').html(html);\n        });\n    }\n\n    function archiveEpisodes() {\n        const url = 'series/' + $('#series-slug').attr('value') + '/operation';\n        api.post(url, { type: 'ARCHIVE_EPISODES' }).then(response => {\n            let html = '';\n            if (response.status === 201) {\n                html = 'Successfully archived episodes';\n                // Recalculate backlogged episodes after we archive it\n                backloggedEpisodes();\n            } else if (response.status === 204) {\n                html = 'No episodes to be archived';\n            }\n            $('#archivedStatus').html(html);\n            // Restore button text\n            $('#archiveEpisodes').val('Finished');\n            $('#archiveEpisodes').prop('disabled', true);\n        });\n    }\n\n    function setQualityText() {\n        const preferred = $.map($('#preferred_qualities option:selected'), option => {\n            return option.text;\n        });\n        const allowed = $.map($('#allowed_qualities option:selected'), option => {\n            return option.text;\n        });\n        const both = allowed.concat(preferred.filter(item => {\n            return allowed.indexOf(item) < 0;\n        }));\n\n        const allowedPreferredExplanation = both.join(', ');\n        const preferredExplanation = preferred.join(', ');\n        const allowedExplanation = allowed.join(', ');\n\n        $('#allowedPreferredExplanation').text(allowedPreferredExplanation);\n        $('#preferredExplanation').text(preferredExplanation);\n        $('#allowedExplanation').text(allowedExplanation);\n\n        $('#allowedText').hide();\n        $('#preferredText1').hide();\n        $('#preferredText2').hide();\n        $('#qualityExplanation').show();\n\n        if (preferred.length >= 1) {\n            $('#preferredText1').show();\n            $('#preferredText2').show();\n        } else if (allowed.length >= 1) {\n            $('#allowedText').show();\n        } else {\n            $('#qualityExplanation').hide();\n        }\n    }\n\n    $('#archiveEpisodes').on('click', function () {\n        $.get($(this).attr('href'));\n        $(this).val('Archiving...');\n        archiveEpisodes();\n        return false;\n    });\n\n    $('#qualityPreset').on('change', () => {\n        setFromPresets($('#qualityPreset :selected').val());\n    });\n\n    $('#qualityPreset, #preferred_qualities, #allowed_qualities').on('change', () => {\n        setQualityText();\n        backloggedEpisodes();\n    });\n\n    setFromPresets($('#qualityPreset :selected').val());\n    setQualityText();\n});\n\n},{}]},{},[1]);\n"],"file":"quality-chooser.js"}