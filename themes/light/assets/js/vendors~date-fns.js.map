{"version":3,"sources":["webpack:///./node_modules/date-fns/esm/parseISO/index.js","webpack:///./node_modules/date-fns/esm/_lib/assign/index.js","webpack:///./node_modules/date-fns/esm/_lib/setUTCDay/index.js","webpack:///./node_modules/date-fns/esm/parse/_lib/parsers/index.js","webpack:///./node_modules/date-fns/esm/_lib/setUTCWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/setUTCISODay/index.js","webpack:///./node_modules/date-fns/esm/parse/index.js","webpack:///./node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","webpack:///./node_modules/date-fns/esm/_lib/format/lightFormatters/index.js","webpack:///./node_modules/date-fns/esm/_lib/format/formatters/index.js","webpack:///./node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js","webpack:///./node_modules/date-fns/esm/format/index.js","webpack:///./node_modules/date-fns/esm/_lib/protectedTokens/index.js","webpack:///./node_modules/date-fns/esm/compareAsc/index.js","webpack:///./node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js","webpack:///./node_modules/date-fns/esm/_lib/requiredArgs/index.js","webpack:///./node_modules/date-fns/esm/_lib/toInteger/index.js","webpack:///./node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack:///./node_modules/date-fns/esm/_lib/format/longFormatters/index.js","webpack:///./node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js","webpack:///./node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js","webpack:///./node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js","webpack:///./node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/match/index.js","webpack:///./node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js","webpack:///./node_modules/date-fns/esm/addMilliseconds/index.js","webpack:///./node_modules/date-fns/esm/subMilliseconds/index.js","webpack:///./node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js","webpack:///./node_modules/date-fns/esm/_lib/getUTCWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js","webpack:///./node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","webpack:///./node_modules/date-fns/esm/isValid/index.js","webpack:///./node_modules/date-fns/esm/toDate/index.js"],"names":["patterns","dateTimeDelimiter","timeZoneDelimiter","timezone","dateRegex","timeRegex","timezoneRegex","parseISO","argument","dirtyOptions","arguments","options","additionalDigits","RangeError","Object","prototype","toString","call","Date","NaN","date","dateStrings","splitDateString","parseYearResult","parseYear","parseDate","restDateString","year","isNaN","offset","timestamp","getTime","time","parseTime","dirtyDate","result","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","setFullYear","parseTimezone","dateString","timeString","array","split","test","substr","length","token","exec","replace","regex","RegExp","captures","match","parseInt","century","slice","isWeekDate","dayOfYear","parseDateUnit","month","day","week","dayOfWeek","_year","validateWeekDate","isoWeekYear","setUTCFullYear","fourthOfJanuaryDay","getUTCDay","diff","setUTCDate","dayOfISOWeekYear","daysInMonths","isLeapYearIndex","validateDate","validateDayOfYearDate","Math","max","value","hours","parseTimeUnit","minutes","seconds","validateTime","parseFloat","timezoneString","sign","_hours","validateTimezone","target","dirtyObject","TypeError","property","hasOwnProperty","setUTCDay","dirtyDay","requiredArgs","locale","localeWeekStartsOn","weekStartsOn","defaultWeekStartsOn","toInteger","toDate","currentDay","remainder","dayIndex","numericPatterns","timezonePatterns","parseNumericPattern","pattern","string","valueCallback","matchResult","rest","parseTimezonePattern","parseAnyDigitsSigned","parseNDigits","n","parseNDigitsSigned","dayPeriodEnumToHours","enumValue","normalizeTwoDigitYear","twoDigitYear","currentYear","isCommonEra","absCurrentYear","rangeEnd","floor","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","G","priority","parse","_options","era","width","set","flags","setUTCHours","incompatibleTokens","y","isTwoDigitYear","ordinalNumber","unit","validate","_date","normalizedTwoDigitYear","Y","getUTCWeekYear","firstWeekContainsDate","startOfUTCWeek","R","_match","_flags","firstWeekOfYear","startOfUTCISOWeek","u","Q","quarter","context","setUTCMonth","q","M","L","w","dirtyWeek","getUTCWeek","setUTCWeek","I","dirtyISOWeek","isoWeek","getUTCISOWeek","setUTCISOWeek","d","isLeapYear","D","E","e","wholeWeekDays","c","i","setUTCISODay","a","dayPeriod","b","B","h","isPM","H","K","k","m","setUTCMinutes","s","setUTCSeconds","S","pow","setUTCMilliseconds","X","timestampIsSet","x","t","_token","T","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","notWhitespaceRegExp","unescapedLatinCharacterRegExp","dirtyDateString","dirtyFormatString","dirtyReferenceDate","String","formatString","localeFirstWeekContainsDate","defaultFirstWeekContainsDate","subFnOptions","setters","dateToSystemTimezone","index","tokens","map","substring","firstCharacter","longFormatter","longFormatters","formatLong","join","usedTokens","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","parser","Array","isArray","incompatibleToken","_i","usedToken","indexOf","concat","fullToken","push","parseResult","cleanEscapedString","uniquePrioritySetters","setter","sort","filter","reverse","setterArray","utcDate","subMilliseconds","getTimezoneOffsetInMilliseconds","convertedDate","setHours","input","addLeadingZeros","number","targetLength","output","abs","signedYear","dayPeriodEnumValue","toUpperCase","numberOfDigits","milliseconds","dayPeriodEnum","formatTimezoneShort","dirtyDelimiter","absOffset","delimiter","formatTimezoneWithOptionalMinutes","formatTimezone","localize","lightFormatters","signedWeekYear","weekYear","getUTCISOWeekYear","ceil","startOfYearTimestamp","difference","getUTCDayOfYear","localDayOfWeek","isoDayOfWeek","_localize","timezoneOffset","_originalDate","getTimezoneOffset","O","z","originalDate","format","dirtyFormatStr","formatStr","isValid","formatterOptions","formatter","protectedDayOfYearTokens","protectedWeekYearTokens","isProtectedDayOfYearToken","isProtectedWeekYearToken","throwProtectedError","compareAsc","dirtyDateLeft","dirtyDateRight","dateLeft","dateRight","firstWeekOfNextYear","startOfNextYear","firstWeekOfThisYear","startOfThisYear","required","args","dirtyNumber","Number","getDateMillisecondsPart","baseTimezoneOffset","setSeconds","dateLongFormatter","timeLongFormatter","p","P","dateTimeFormat","datePattern","timePattern","dateTime","fourthOfJanuaryOfNextYear","fourthOfJanuaryOfThisYear","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","buildFormatLongFn","defaultWidth","formats","full","long","medium","short","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","buildLocalizeFn","dirtyIndex","valuesArray","formattingValues","defaultFormattingWidth","_defaultWidth","_width","values","argumentCallback","buildMatchFn","dirtyString","matchPattern","matchPatterns","defaultMatchWidth","matchedString","parsePatterns","defaultParseWidth","predicate","key","findIndex","object","findKey","code","formatDistance","count","addSuffix","comparison","formatRelative","_baseDate","_dirtyOptions","rem100","narrow","abbreviated","wide","am","pm","midnight","noon","morning","afternoon","evening","night","parsePattern","any","addMilliseconds","dirtyAmount","amount","startOfUTCWeekYear","firstWeek","round","startOfUTCISOWeekYear","fourthOfJanuary","argStr","console","warn","Error","stack"],"mappings":"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","file":"js/vendors~date-fns.js","sourcesContent":["import toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (isNaN(date) || !date) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time) || time === null) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate(), dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    result.setFullYear(dirtyDate.getUTCFullYear());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString;\n\n  if (/:/.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: null\n  };\n  var year = captures[1] && parseInt(captures[1]);\n  var century = captures[2] && parseInt(captures[2]);\n  return {\n    year: century == null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return null;\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return null;\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return null; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","export default function assign(target, dirtyObject) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  dirtyObject = dirtyObject || {};\n\n  for (var property in dirtyObject) {\n    if (dirtyObject.hasOwnProperty(property)) {\n      target[property] = dirtyObject[property];\n    }\n  }\n\n  return target;\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = toInteger(dirtyDay);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import getUTCWeekYear from '../../../_lib/getUTCWeekYear/index.js';\nimport setUTCDay from '../../../_lib/setUTCDay/index.js';\nimport setUTCISODay from '../../../_lib/setUTCISODay/index.js';\nimport setUTCISOWeek from '../../../_lib/setUTCISOWeek/index.js';\nimport setUTCWeek from '../../../_lib/setUTCWeek/index.js';\nimport startOfUTCISOWeek from '../../../_lib/startOfUTCISOWeek/index.js';\nimport startOfUTCWeek from '../../../_lib/startOfUTCWeek/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar MILLISECONDS_IN_SECOND = 1000;\nvar numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/,\n  // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/,\n  // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/,\n  // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/,\n  // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/,\n  // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/,\n  // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  minute: /^[0-5]?\\d/,\n  // 0 to 59\n  second: /^[0-5]?\\d/,\n  // 0 to 59\n  singleDigit: /^\\d/,\n  // 0 to 9\n  twoDigits: /^\\d{1,2}/,\n  // 0 to 99\n  threeDigits: /^\\d{1,3}/,\n  // 0 to 999\n  fourDigits: /^\\d{1,4}/,\n  // 0 to 9999\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/,\n  // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/,\n  // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/,\n  // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/ // 0 to 9999, -0 to -9999\n\n};\nvar timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/\n};\n\nfunction parseNumericPattern(pattern, string, valueCallback) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  var value = parseInt(matchResult[0], 10);\n  return {\n    value: valueCallback ? valueCallback(value) : value,\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseTimezonePattern(pattern, string) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  } // Input is 'Z'\n\n\n  if (matchResult[0] === 'Z') {\n    return {\n      value: 0,\n      rest: string.slice(1)\n    };\n  }\n\n  var sign = matchResult[1] === '+' ? 1 : -1;\n  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n  return {\n    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseAnyDigitsSigned(string, valueCallback) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);\n}\n\nfunction parseNDigits(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction parseNDigitsSigned(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^-?\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction dayPeriodEnumToHours(enumValue) {\n  switch (enumValue) {\n    case 'morning':\n      return 4;\n\n    case 'evening':\n      return 17;\n\n    case 'pm':\n    case 'noon':\n    case 'afternoon':\n      return 12;\n\n    case 'am':\n    case 'midnight':\n    case 'night':\n    default:\n      return 0;\n  }\n}\n\nfunction normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  var isCommonEra = currentYear > 0; // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n\n  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n  var result;\n\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    var rangeEnd = absCurrentYear + 50;\n    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;\n    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\n\n\nvar parsers = {\n  // Era\n  G: {\n    priority: 140,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // AD, BC\n        case 'G':\n        case 'GG':\n        case 'GGG':\n          return match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n        // A, B\n\n        case 'GGGGG':\n          return match.era(string, {\n            width: 'narrow'\n          });\n        // Anno Domini, Before Christ\n\n        case 'GGGG':\n        default:\n          return match.era(string, {\n            width: 'wide'\n          }) || match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n      }\n    },\n    set: function (date, flags, value, _options) {\n      flags.era = value;\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['R', 'u', 't', 'T']\n  },\n  // Year\n  y: {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'yy'\n        };\n      };\n\n      switch (token) {\n        case 'y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, _options) {\n      var currentYear = date.getUTCFullYear();\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week-numbering year\n  Y: {\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'YY'\n        };\n      };\n\n      switch (token) {\n        case 'Y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'Yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, options) {\n      var currentYear = getUTCWeekYear(date, options);\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n        date.setUTCHours(0, 0, 0, 0);\n        return startOfUTCWeek(date, options);\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);\n      date.setUTCHours(0, 0, 0, 0);\n      return startOfUTCWeek(date, options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week-numbering year\n  R: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'R') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (_date, _flags, value, _options) {\n      var firstWeekOfYear = new Date(0);\n      firstWeekOfYear.setUTCFullYear(value, 0, 4);\n      firstWeekOfYear.setUTCHours(0, 0, 0, 0);\n      return startOfUTCISOWeek(firstWeekOfYear);\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Extended year\n  u: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'u') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Quarter\n  Q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'Q':\n        case 'QQ':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'Qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'QQQ':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'QQQQQ':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'QQQQ':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone quarter\n  q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'q':\n        case 'qq':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'qqq':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'qqqqq':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'qqqq':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Month\n  M: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'M':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'MM':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Mo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'MMM':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // J, F, ..., D\n\n        case 'MMMMM':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // January, February, ..., December\n\n        case 'MMMM':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone month\n  L: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'L':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'LL':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Lo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'LLL':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // J, F, ..., D\n\n        case 'LLLLL':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // January, February, ..., December\n\n        case 'LLLL':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week of year\n  w: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'w':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'wo':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCWeek(setUTCWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week of year\n  I: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'I':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'Io':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Day of the month\n  d: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'd':\n          return parseNumericPattern(numericPatterns.date, string);\n\n        case 'do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n      var month = date.getUTCMonth();\n\n      if (isLeapYear) {\n        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n      } else {\n        return value >= 1 && value <= DAYS_IN_MONTH[month];\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCDate(value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of year\n  D: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'D':\n        case 'DD':\n          return parseNumericPattern(numericPatterns.dayOfYear, string);\n\n        case 'Do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n\n      if (isLeapYear) {\n        return value >= 1 && value <= 366;\n      } else {\n        return value >= 1 && value <= 365;\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(0, value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of week\n  E: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // Tue\n        case 'E':\n        case 'EE':\n        case 'EEE':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'EEEEE':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'EEEEEE':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'EEEE':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local day of week\n  e: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'e':\n        case 'ee':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'eo':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'eee':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'eeeee':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'eeeeee':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'eeee':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']\n  },\n  // Stand-alone local day of week\n  c: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'c':\n        case 'cc':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'co':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'ccc':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // T\n\n        case 'ccccc':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tu\n\n        case 'cccccc':\n          return match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tuesday\n\n        case 'cccc':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']\n  },\n  // ISO day of week\n  i: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        if (value === 0) {\n          return 7;\n        }\n\n        return value;\n      };\n\n      switch (token) {\n        // 2\n        case 'i':\n        case 'ii':\n          // 02\n          return parseNDigits(token.length, string);\n        // 2nd\n\n        case 'io':\n          return match.ordinalNumber(string, {\n            unit: 'day'\n          });\n        // Tue\n\n        case 'iii':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // T\n\n        case 'iiiii':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tu\n\n        case 'iiiiii':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tuesday\n\n        case 'iiii':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 7;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCISODay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']\n  },\n  // AM or PM\n  a: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'a':\n        case 'aa':\n        case 'aaa':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaaa':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaa':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['b', 'B', 'H', 'K', 'k', 't', 'T']\n  },\n  // AM, PM, midnight\n  b: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'b':\n        case 'bb':\n        case 'bbb':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbbb':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbb':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'B', 'H', 'K', 'k', 't', 'T']\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'B':\n        case 'BB':\n        case 'BBB':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBBB':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBB':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 't', 'T']\n  },\n  // Hour [1-12]\n  h: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'h':\n          return parseNumericPattern(numericPatterns.hour12h, string);\n\n        case 'ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 12;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else if (!isPM && value === 12) {\n        date.setUTCHours(0, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['H', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-23]\n  H: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'H':\n          return parseNumericPattern(numericPatterns.hour23h, string);\n\n        case 'Ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 23;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(value, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-11]\n  K: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'K':\n          return parseNumericPattern(numericPatterns.hour11h, string);\n\n        case 'Ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'k', 't', 'T']\n  },\n  // Hour [1-24]\n  k: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'k':\n          return parseNumericPattern(numericPatterns.hour24h, string);\n\n        case 'ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 24;\n    },\n    set: function (date, _flags, value, _options) {\n      var hours = value <= 24 ? value % 24 : value;\n      date.setUTCHours(hours, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']\n  },\n  // Minute\n  m: {\n    priority: 60,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'm':\n          return parseNumericPattern(numericPatterns.minute, string);\n\n        case 'mo':\n          return match.ordinalNumber(string, {\n            unit: 'minute'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMinutes(value, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Second\n  s: {\n    priority: 50,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 's':\n          return parseNumericPattern(numericPatterns.second, string);\n\n        case 'so':\n          return match.ordinalNumber(string, {\n            unit: 'second'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCSeconds(value, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Fraction of second\n  S: {\n    priority: 30,\n    parse: function (string, token, _match, _options) {\n      var valueCallback = function (value) {\n        return Math.floor(value * Math.pow(10, -token.length + 3));\n      };\n\n      return parseNDigits(token.length, string, valueCallback);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMilliseconds(value);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Timezone (ISO-8601. +00:00 is `'Z'`)\n  X: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'X':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'XX':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'XXXX':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'XXXXX':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'XXX':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'x']\n  },\n  // Timezone (ISO-8601)\n  x: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'x':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'xx':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'xxxx':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'xxxxx':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'xxx':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'X']\n  },\n  // Seconds timestamp\n  t: {\n    priority: 40,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value * 1000), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  },\n  // Milliseconds timestamp\n  T: {\n    priority: 20,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  }\n};\nexport default parsers;","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport getUTCWeek from '../getUTCWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCWeek(dirtyDate, dirtyWeek, options) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var week = toInteger(dirtyWeek);\n  var diff = getUTCWeek(date, options) - week;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport getUTCISOWeek from '../getUTCISOWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISOWeek(dirtyDate, dirtyISOWeek) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var isoWeek = toInteger(dirtyISOWeek);\n  var diff = getUTCISOWeek(date) - isoWeek;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISODay(dirtyDate, dirtyDay) {\n  requiredArgs(2, arguments);\n  var day = toInteger(dirtyDay);\n\n  if (day % 7 === 0) {\n    day = day - 7;\n  }\n\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import defaultLocale from '../locale/en-US/index.js';\nimport subMilliseconds from '../subMilliseconds/index.js';\nimport toDate from '../toDate/index.js';\nimport assign from '../_lib/assign/index.js';\nimport longFormatters from '../_lib/format/longFormatters/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from '../_lib/protectedTokens/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport parsers from './_lib/parsers/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar notWhitespaceRegExp = /\\S/;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Su            | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 1, 2, ..., 11, 0                  |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 0001, ..., 999               |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Old `parse` was renamed to `toDate`.\n *   Now `parse` is a new function which parses a string using a provided format.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   toDate('2016-01-01')\n *   parse('2016-01-01', 'yyyy-MM-dd', new Date())\n *   ```\n *\n * @param {String} dateString - the string to parse\n * @param {String} formatString - the string of tokens\n * @param {Date|Number} referenceDate - defines values missing from the parsed dateString\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {Date} the parsed date\n * @throws {TypeError} 3 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\n\nexport default function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {\n  requiredArgs(3, arguments);\n  var dateString = String(dirtyDateString);\n  var formatString = String(dirtyFormatString);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.match) {\n    throw new RangeError('locale must contain match property');\n  }\n\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (formatString === '') {\n    if (dateString === '') {\n      return toDate(dirtyReferenceDate);\n    } else {\n      return new Date(NaN);\n    }\n  }\n\n  var subFnOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale // If timezone isn't specified, it will be set to the system timezone\n\n  };\n  var setters = [{\n    priority: TIMEZONE_UNIT_PRIORITY,\n    set: dateToSystemTimezone,\n    index: 0\n  }];\n  var i;\n  var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, subFnOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp);\n  var usedTokens = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {\n      throwProtectedError(token);\n    }\n\n    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {\n      throwProtectedError(token);\n    }\n\n    var firstCharacter = token[0];\n    var parser = parsers[firstCharacter];\n\n    if (parser) {\n      var incompatibleTokens = parser.incompatibleTokens;\n\n      if (Array.isArray(incompatibleTokens)) {\n        var incompatibleToken = void 0;\n\n        for (var _i = 0; _i < usedTokens.length; _i++) {\n          var usedToken = usedTokens[_i].token;\n\n          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {\n            incompatibleToken = usedTokens[_i];\n            break;\n          }\n        }\n\n        if (incompatibleToken) {\n          throw new RangeError(\"The format string mustn't contain `\".concat(incompatibleToken.fullToken, \"` and `\").concat(token, \"` at the same time\"));\n        }\n      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {\n        throw new RangeError(\"The format string mustn't contain `\".concat(token, \"` and any other token at the same time\"));\n      }\n\n      usedTokens.push({\n        token: firstCharacter,\n        fullToken: token\n      });\n      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);\n\n      if (!parseResult) {\n        return new Date(NaN);\n      }\n\n      setters.push({\n        priority: parser.priority,\n        set: parser.set,\n        validate: parser.validate,\n        value: parseResult.value,\n        index: setters.length\n      });\n      dateString = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n      } // Replace two single quote characters with one single quote character\n\n\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      } // Cut token from string, or, if string doesn't match the token, return Invalid Date\n\n\n      if (dateString.indexOf(token) === 0) {\n        dateString = dateString.slice(token.length);\n      } else {\n        return new Date(NaN);\n      }\n    }\n  } // Check if the remaining input contains something other than whitespace\n\n\n  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {\n    return new Date(NaN);\n  }\n\n  var uniquePrioritySetters = setters.map(function (setter) {\n    return setter.priority;\n  }).sort(function (a, b) {\n    return b - a;\n  }).filter(function (priority, index, array) {\n    return array.indexOf(priority) === index;\n  }).map(function (priority) {\n    return setters.filter(function (setter) {\n      return setter.priority === priority;\n    }).reverse();\n  }).map(function (setterArray) {\n    return setterArray[0];\n  });\n  var date = toDate(dirtyReferenceDate);\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\n\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n  var flags = {};\n\n  for (i = 0; i < uniquePrioritySetters.length; i++) {\n    var setter = uniquePrioritySetters[i];\n\n    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {\n      return new Date(NaN);\n    }\n\n    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)\n\n    if (result[0]) {\n      utcDate = result[0];\n      assign(flags, result[1]); // Result is date\n    } else {\n      utcDate = result;\n    }\n  }\n\n  return utcDate;\n}\n\nfunction dateToSystemTimezone(date, flags) {\n  if (flags.timestampIsSet) {\n    return date;\n  }\n\n  var convertedDate = new Date(0);\n  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n  return convertedDate;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import addLeadingZeros from '../../addLeadingZeros/index.js';\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","import lightFormatters from '../lightFormatters/index.js';\nimport getUTCDayOfYear from '../../../_lib/getUTCDayOfYear/index.js';\nimport getUTCISOWeek from '../../../_lib/getUTCISOWeek/index.js';\nimport getUTCISOWeekYear from '../../../_lib/getUTCISOWeekYear/index.js';\nimport getUTCWeek from '../../../_lib/getUTCWeek/index.js';\nimport getUTCWeekYear from '../../../_lib/getUTCWeekYear/index.js';\nimport addLeadingZeros from '../../addLeadingZeros/index.js';\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n  /*\n   * |     | Unit                           |     | Unit                           |\n   * |-----|--------------------------------|-----|--------------------------------|\n   * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n   * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n   * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n   * |  d  | Day of month                   |  D  | Day of year                    |\n   * |  e  | Local day of week              |  E  | Day of week                    |\n   * |  f  |                                |  F* | Day of week in month           |\n   * |  g* | Modified Julian day            |  G  | Era                            |\n   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n   * |  i! | ISO day of week                |  I! | ISO week of year               |\n   * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n   * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n   * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n   * |  m  | Minute                         |  M  | Month                          |\n   * |  n  |                                |  N  |                                |\n   * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n   * |  p! | Long localized time            |  P! | Long localized date            |\n   * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n   * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n   * |  s  | Second                         |  S  | Fraction of second             |\n   * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n   * |  u  | Extended year                  |  U* | Cyclic year                    |\n   * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n   * |  w  | Local week of year             |  W* | Week of month                  |\n   * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n   * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n   * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n   *\n   * Letters marked by * are not implemented but reserved by Unicode standard.\n   *\n   * Letters marked by ! are non-standard, but implemented by date-fns:\n   * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n   * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n   *   i.e. 7 for Sunday, 1 for Monday, etc.\n   * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n   * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n   *   `R` is supposed to be used in conjunction with `I` and `i`\n   *   for universal ISO week-numbering date, whereas\n   *   `Y` is supposed to be used in conjunction with `w` and `e`\n   *   for week-numbering date specific to the locale.\n   * - `P` is long localized date format\n   * - `p` is long localized time format\n   */\n\n};\nvar formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function (date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function (date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function (date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function (date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function (date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","import toDate from '../../toDate/index.js';\nimport requiredArgs from '../requiredArgs/index.js';\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","import isValid from '../isValid/index.js';\nimport defaultLocale from '../locale/en-US/index.js';\nimport subMilliseconds from '../subMilliseconds/index.js';\nimport toDate from '../toDate/index.js';\nimport formatters from '../_lib/format/formatters/index.js';\nimport longFormatters from '../_lib/format/longFormatters/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from '../_lib/protectedTokens/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js'; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Su            | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          | a..aaa  | AM, PM                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 1, 2, ..., 11, 0                  |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 0001, ..., 999               |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 05/29/1453                        | 7     |\n * |                                 | PP      | May 29, 1453                      | 7     |\n * |                                 | PPP     | May 29th, 1453                    | 7     |\n * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |\n * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","var protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token) {\n  if (token === 'YYYY') {\n    throw new RangeError('Use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr');\n  } else if (token === 'YY') {\n    throw new RangeError('Use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr');\n  } else if (token === 'D') {\n    throw new RangeError('Use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr');\n  } else if (token === 'DD') {\n    throw new RangeError('Use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr');\n  }\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * var result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * var result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","var MILLISECONDS_IN_MINUTE = 60000;\n\nfunction getDateMillisecondsPart(date) {\n  return date.getTime() % MILLISECONDS_IN_MINUTE;\n}\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\n\n\nexport default function getTimezoneOffsetInMilliseconds(dirtyDate) {\n  var date = new Date(dirtyDate.getTime());\n  var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());\n  date.setSeconds(0, 0);\n  var hasNegativeUTCOffset = baseTimezoneOffset > 0;\n  var millisecondsPartOfTimezoneOffset = hasNegativeUTCOffset ? (MILLISECONDS_IN_MINUTE + getDateMillisecondsPart(date)) % MILLISECONDS_IN_MINUTE : getDateMillisecondsPart(date);\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\n}","function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/);\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","import toDate from '../../toDate/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\nexport default function formatDistance(token, count, options) {\n  options = options || {};\n  var result;\n\n  if (typeof formatDistanceLocale[token] === 'string') {\n    result = formatDistanceLocale[token];\n  } else if (count === 1) {\n    result = formatDistanceLocale[token].one;\n  } else {\n    result = formatDistanceLocale[token].other.replace('{{count}}', count);\n  }\n\n  if (options.addSuffix) {\n    if (options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n}","export default function buildFormatLongFn(args) {\n  return function (dirtyOptions) {\n    var options = dirtyOptions || {};\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","import buildFormatLongFn from '../../../_lib/buildFormatLongFn/index.js';\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\nexport default function formatRelative(token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n}","export default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;\n    return valuesArray[index];\n  };\n}","export default function buildMatchFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var value;\n\n    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {\n      value = findIndex(parsePatterns, function (pattern) {\n        return pattern.test(matchedString);\n      });\n    } else {\n      value = findKey(parsePatterns, function (pattern) {\n        return pattern.test(matchedString);\n      });\n    }\n\n    value = args.valueCallback ? args.valueCallback(value) : value;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n}","import buildMatchPatternFn from '../../../_lib/buildMatchPatternFn/index.js';\nimport buildMatchFn from '../../../_lib/buildMatchFn/index.js';\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","export default function buildMatchPatternFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var matchResult = string.match(args.matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n\n    if (!parseResult) {\n      return null;\n    }\n\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}","import formatDistance from './_lib/formatDistance/index.js';\nimport formatLong from './_lib/formatLong/index.js';\nimport formatRelative from './_lib/formatRelative/index.js';\nimport localize from './_lib/localize/index.js';\nimport match from './_lib/match/index.js';\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\n\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","import buildLocalizeFn from '../../../_lib/buildLocalizeFn/index.js';\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.\n  // If you are making a new locale based on this one, check if the same is true for the language you're working on.\n  // Generally, formatted dates should look like they are in the middle of a sentence,\n  // e.g. in Spanish language the weekdays and months should be in the lowercase.\n\n};\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nfunction ordinalNumber(dirtyNumber, _dirtyOptions) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`:\n  //\n  //   var options = dirtyOptions || {}\n  //   var unit = String(options.unit)\n  //\n  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n}\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return Number(quarter) - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMilliseconds from '../addMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","import toInteger from '../toInteger/index.js';\nimport getUTCWeekYear from '../getUTCWeekYear/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","import toDate from '../../toDate/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js';\nimport startOfUTCWeekYear from '../startOfUTCWeekYear/index.js';\nimport requiredArgs from '../requiredArgs/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import getUTCISOWeekYear from '../getUTCISOWeekYear/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport requiredArgs from '../requiredArgs/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toDate from '../../toDate/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport startOfUTCISOWeekYear from '../startOfUTCISOWeekYear/index.js';\nimport requiredArgs from '../requiredArgs/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * var result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return !isNaN(date);\n}","import requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}"],"sourceRoot":""}