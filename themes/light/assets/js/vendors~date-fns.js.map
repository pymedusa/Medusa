{"version":3,"sources":["webpack:///./node_modules/date-fns/esm/_lib/assign/index.js","webpack:///./node_modules/date-fns/esm/_lib/setUTCDay/index.js","webpack:///./node_modules/date-fns/esm/parse/_lib/parsers/index.js","webpack:///./node_modules/date-fns/esm/_lib/setUTCWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/setUTCISODay/index.js","webpack:///./node_modules/date-fns/esm/parse/index.js","webpack:///./node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/protectedTokens/index.js","webpack:///./node_modules/date-fns/esm/compareAsc/index.js","webpack:///./node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js","webpack:///./node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","webpack:///./node_modules/date-fns/esm/_lib/format/lightFormatters/index.js","webpack:///./node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js","webpack:///./node_modules/date-fns/esm/_lib/format/formatters/index.js","webpack:///./node_modules/date-fns/esm/format/index.js","webpack:///./node_modules/date-fns/esm/toDate/index.js","webpack:///./node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack:///./node_modules/date-fns/esm/_lib/format/longFormatters/index.js","webpack:///./node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js","webpack:///./node_modules/date-fns/esm/_lib/toInteger/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js","webpack:///./node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js","webpack:///./node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js","webpack:///./node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/match/index.js","webpack:///./node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/index.js","webpack:///./node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js","webpack:///./node_modules/date-fns/esm/subMilliseconds/index.js","webpack:///./node_modules/date-fns/esm/addMilliseconds/index.js","webpack:///./node_modules/date-fns/esm/_lib/getUTCWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js","webpack:///./node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","webpack:///./node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js","webpack:///./node_modules/date-fns/esm/isValid/index.js"],"names":["target","dirtyObject","TypeError","property","hasOwnProperty","setUTCDay","dirtyDate","dirtyDay","dirtyOptions","arguments","length","options","locale","localeWeekStartsOn","weekStartsOn","defaultWeekStartsOn","toInteger","RangeError","date","toDate","day","diff","getUTCDay","setUTCDate","getUTCDate","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_MINUTE","MILLISECONDS_IN_SECOND","numericPatterns","month","dayOfYear","week","hour23h","hour24h","hour11h","hour12h","minute","second","singleDigit","twoDigits","threeDigits","fourDigits","anyDigitsSigned","singleDigitSigned","twoDigitsSigned","threeDigitsSigned","fourDigitsSigned","timezonePatterns","parseNumericPattern","pattern","string","valueCallback","matchResult","match","value","parseInt","rest","slice","parseTimezonePattern","sign","hours","minutes","seconds","parseAnyDigitsSigned","parseNDigits","n","RegExp","parseNDigitsSigned","dayPeriodEnumToHours","enumValue","normalizeTwoDigitYear","twoDigitYear","currentYear","result","isCommonEra","absCurrentYear","rangeEnd","Math","floor","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","isLeapYearIndex","year","G","priority","parse","token","_options","era","width","set","flags","setUTCFullYear","setUTCHours","incompatibleTokens","y","isTwoDigitYear","ordinalNumber","unit","validate","_date","getUTCFullYear","normalizedTwoDigitYear","Y","getUTCWeekYear","firstWeekContainsDate","startOfUTCWeek","R","_match","_flags","firstWeekOfYear","Date","startOfUTCISOWeek","u","Q","quarter","context","setUTCMonth","q","M","L","w","dirtyWeek","getUTCWeek","setUTCWeek","I","dirtyISOWeek","isoWeek","getUTCISOWeek","setUTCISOWeek","d","isLeapYear","getUTCMonth","D","E","e","wholeWeekDays","c","i","setUTCISODay","a","dayPeriod","b","B","h","isPM","getUTCHours","H","K","k","m","setUTCMinutes","s","setUTCSeconds","S","pow","setUTCMilliseconds","X","timestampIsSet","getTime","x","t","_token","T","TIMEZONE_UNIT_PRIORITY","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","notWhitespaceRegExp","unescapedLatinCharacterRegExp","dirtyDateString","dirtyFormatString","dirtyBackupDate","dateString","String","formatString","localeFirstWeekContainsDate","defaultFirstWeekContainsDate","NaN","subFnOptions","setters","dateToSystemTimezone","index","tokens","map","substring","firstCharacter","longFormatter","longFormatters","formatLong","join","usedTokens","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","parser","Array","isArray","incompatibleToken","_i","usedToken","indexOf","concat","fullToken","push","parseResult","replace","test","uniquePrioritySetters","setter","sort","filter","array","reverse","setterArray","isNaN","utcDate","subMilliseconds","getTimezoneOffsetInMilliseconds","convertedDate","setFullYear","setHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","protectedDayOfYearTokens","protectedWeekYearTokens","isProtectedDayOfYearToken","isProtectedWeekYearToken","throwProtectedError","compareAsc","dirtyDateLeft","dirtyDateRight","dateLeft","dateRight","firstWeekOfNextYear","startOfNextYear","firstWeekOfThisYear","startOfThisYear","addLeadingZeros","number","targetLength","output","abs","toString","signedYear","dayPeriodEnumValue","toUpperCase","numberOfDigits","milliseconds","MILLISECONDS_IN_DAY","dayPeriodEnum","formatTimezoneShort","offset","dirtyDelimiter","absOffset","delimiter","formatTimezoneWithOptionalMinutes","formatTimezone","localize","lightFormatters","signedWeekYear","weekYear","getUTCISOWeekYear","ceil","timestamp","difference","getUTCDayOfYear","dayOfWeek","localDayOfWeek","isoDayOfWeek","_localize","timezoneOffset","_originalDate","getTimezoneOffset","O","z","originalDate","format","dirtyFormatStr","formatStr","isValid","formatterOptions","formatter","argument","argStr","Object","prototype","call","console","warn","Error","stack","baseTimezoneOffset","setSeconds","millisecondsPartOfTimezoneOffset","dateLongFormatter","timeLongFormatter","time","p","P","dateTimeFormat","datePattern","timePattern","dateTime","fourthOfJanuaryOfNextYear","fourthOfJanuaryOfThisYear","dirtyNumber","Number","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","buildFormatLongFn","args","defaultWidth","formats","full","long","medium","short","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","buildLocalizeFn","dirtyIndex","valuesArray","formattingValues","defaultFormattingWidth","_defaultWidth","_width","values","argumentCallback","buildMatchFn","dirtyString","matchPattern","matchPatterns","defaultMatchWidth","matchedString","parsePatterns","defaultParseWidth","findIndex","object","predicate","key","findKey","formatDistance","count","addSuffix","comparison","formatRelative","_baseDate","_dirtyOptions","rem100","narrow","abbreviated","wide","am","pm","midnight","noon","morning","afternoon","evening","night","parsePattern","any","dirtyAmount","amount","addMilliseconds","MILLISECONDS_IN_WEEK","firstWeek","startOfUTCWeekYear","round","fourthOfJanuary","startOfUTCISOWeekYear"],"mappings":"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","file":"js/vendors~date-fns.js","sourcesContent":["export default function assign(target, dirtyObject) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  dirtyObject = dirtyObject || {};\n\n  for (var property in dirtyObject) {\n    if (dirtyObject.hasOwnProperty(property)) {\n      target[property] = dirtyObject[property];\n    }\n  }\n\n  return target;\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = toInteger(dirtyDay);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import getUTCWeekYear from '../../../_lib/getUTCWeekYear/index.js';\nimport setUTCDay from '../../../_lib/setUTCDay/index.js';\nimport setUTCISODay from '../../../_lib/setUTCISODay/index.js';\nimport setUTCISOWeek from '../../../_lib/setUTCISOWeek/index.js';\nimport setUTCWeek from '../../../_lib/setUTCWeek/index.js';\nimport startOfUTCISOWeek from '../../../_lib/startOfUTCISOWeek/index.js';\nimport startOfUTCWeek from '../../../_lib/startOfUTCWeek/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar MILLISECONDS_IN_SECOND = 1000;\nvar numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/,\n  // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/,\n  // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/,\n  // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/,\n  // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/,\n  // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/,\n  // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  minute: /^[0-5]?\\d/,\n  // 0 to 59\n  second: /^[0-5]?\\d/,\n  // 0 to 59\n  singleDigit: /^\\d/,\n  // 0 to 9\n  twoDigits: /^\\d{1,2}/,\n  // 0 to 99\n  threeDigits: /^\\d{1,3}/,\n  // 0 to 999\n  fourDigits: /^\\d{1,4}/,\n  // 0 to 9999\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/,\n  // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/,\n  // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/,\n  // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/ // 0 to 9999, -0 to -9999\n\n};\nvar timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/\n};\n\nfunction parseNumericPattern(pattern, string, valueCallback) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  var value = parseInt(matchResult[0], 10);\n  return {\n    value: valueCallback ? valueCallback(value) : value,\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseTimezonePattern(pattern, string) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  } // Input is 'Z'\n\n\n  if (matchResult[0] === 'Z') {\n    return {\n      value: 0,\n      rest: string.slice(1)\n    };\n  }\n\n  var sign = matchResult[1] === '+' ? 1 : -1;\n  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n  return {\n    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseAnyDigitsSigned(string, valueCallback) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);\n}\n\nfunction parseNDigits(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction parseNDigitsSigned(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^-?\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction dayPeriodEnumToHours(enumValue) {\n  switch (enumValue) {\n    case 'morning':\n      return 4;\n\n    case 'evening':\n      return 17;\n\n    case 'pm':\n    case 'noon':\n    case 'afternoon':\n      return 12;\n\n    case 'am':\n    case 'midnight':\n    case 'night':\n    default:\n      return 0;\n  }\n}\n\nfunction normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  var isCommonEra = currentYear > 0; // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n\n  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n  var result;\n\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    var rangeEnd = absCurrentYear + 50;\n    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;\n    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\n\n\nvar parsers = {\n  // Era\n  G: {\n    priority: 140,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // AD, BC\n        case 'G':\n        case 'GG':\n        case 'GGG':\n          return match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n        // A, B\n\n        case 'GGGGG':\n          return match.era(string, {\n            width: 'narrow'\n          });\n        // Anno Domini, Before Christ\n\n        case 'GGGG':\n        default:\n          return match.era(string, {\n            width: 'wide'\n          }) || match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n      }\n    },\n    set: function (date, flags, value, _options) {\n      flags.era = value;\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['R', 'u', 't', 'T']\n  },\n  // Year\n  y: {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'yy'\n        };\n      };\n\n      switch (token) {\n        case 'y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, _options) {\n      var currentYear = date.getUTCFullYear();\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week-numbering year\n  Y: {\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'YY'\n        };\n      };\n\n      switch (token) {\n        case 'Y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'Yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, options) {\n      var currentYear = getUTCWeekYear(date, options);\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n        date.setUTCHours(0, 0, 0, 0);\n        return startOfUTCWeek(date, options);\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);\n      date.setUTCHours(0, 0, 0, 0);\n      return startOfUTCWeek(date, options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week-numbering year\n  R: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'R') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (_date, _flags, value, _options) {\n      var firstWeekOfYear = new Date(0);\n      firstWeekOfYear.setUTCFullYear(value, 0, 4);\n      firstWeekOfYear.setUTCHours(0, 0, 0, 0);\n      return startOfUTCISOWeek(firstWeekOfYear);\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Extended year\n  u: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'u') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Quarter\n  Q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'Q':\n        case 'QQ':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'Qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'QQQ':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'QQQQQ':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'QQQQ':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone quarter\n  q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'q':\n        case 'qq':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'qqq':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'qqqqq':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'qqqq':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Month\n  M: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'M':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'MM':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Mo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'MMM':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // J, F, ..., D\n\n        case 'MMMMM':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // January, February, ..., December\n\n        case 'MMMM':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone month\n  L: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'L':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'LL':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Lo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'LLL':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // J, F, ..., D\n\n        case 'LLLLL':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // January, February, ..., December\n\n        case 'LLLL':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week of year\n  w: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'w':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'wo':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCWeek(setUTCWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week of year\n  I: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'I':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'Io':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Day of the month\n  d: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'd':\n          return parseNumericPattern(numericPatterns.date, string);\n\n        case 'do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n      var month = date.getUTCMonth();\n\n      if (isLeapYear) {\n        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n      } else {\n        return value >= 1 && value <= DAYS_IN_MONTH[month];\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCDate(value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of year\n  D: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'D':\n        case 'DD':\n          return parseNumericPattern(numericPatterns.dayOfYear, string);\n\n        case 'Do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n\n      if (isLeapYear) {\n        return value >= 1 && value <= 366;\n      } else {\n        return value >= 1 && value <= 365;\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(0, value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of week\n  E: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // Tue\n        case 'E':\n        case 'EE':\n        case 'EEE':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'EEEEE':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'EEEEEE':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'EEEE':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local day of week\n  e: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'e':\n        case 'ee':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'eo':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'eee':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'eeeee':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'eeeeee':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'eeee':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']\n  },\n  // Stand-alone local day of week\n  c: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'c':\n        case 'cc':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'co':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'ccc':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // T\n\n        case 'ccccc':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tu\n\n        case 'cccccc':\n          return match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tuesday\n\n        case 'cccc':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']\n  },\n  // ISO day of week\n  i: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        if (value === 0) {\n          return 7;\n        }\n\n        return value;\n      };\n\n      switch (token) {\n        // 2\n        case 'i':\n        case 'ii':\n          // 02\n          return parseNDigits(token.length, string);\n        // 2nd\n\n        case 'io':\n          return match.ordinalNumber(string, {\n            unit: 'day'\n          });\n        // Tue\n\n        case 'iii':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // T\n\n        case 'iiiii':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tu\n\n        case 'iiiiii':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tuesday\n\n        case 'iiii':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 7;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCISODay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']\n  },\n  // AM or PM\n  a: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'a':\n        case 'aa':\n        case 'aaa':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaaa':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaa':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['b', 'B', 'H', 'K', 'k', 't', 'T']\n  },\n  // AM, PM, midnight\n  b: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'b':\n        case 'bb':\n        case 'bbb':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbbb':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbb':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'B', 'H', 'K', 'k', 't', 'T']\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'B':\n        case 'BB':\n        case 'BBB':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBBB':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBB':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 't', 'T']\n  },\n  // Hour [1-12]\n  h: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'h':\n          return parseNumericPattern(numericPatterns.hour12h, string);\n\n        case 'ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 12;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else if (!isPM && value === 12) {\n        date.setUTCHours(0, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['H', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-23]\n  H: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'H':\n          return parseNumericPattern(numericPatterns.hour23h, string);\n\n        case 'Ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 23;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(value, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-11]\n  K: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'K':\n          return parseNumericPattern(numericPatterns.hour11h, string);\n\n        case 'Ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'k', 't', 'T']\n  },\n  // Hour [1-24]\n  k: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'k':\n          return parseNumericPattern(numericPatterns.hour24h, string);\n\n        case 'ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 24;\n    },\n    set: function (date, _flags, value, _options) {\n      var hours = value <= 24 ? value % 24 : value;\n      date.setUTCHours(hours, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']\n  },\n  // Minute\n  m: {\n    priority: 60,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'm':\n          return parseNumericPattern(numericPatterns.minute, string);\n\n        case 'mo':\n          return match.ordinalNumber(string, {\n            unit: 'minute'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMinutes(value, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Second\n  s: {\n    priority: 50,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 's':\n          return parseNumericPattern(numericPatterns.second, string);\n\n        case 'so':\n          return match.ordinalNumber(string, {\n            unit: 'second'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCSeconds(value, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Fraction of second\n  S: {\n    priority: 30,\n    parse: function (string, token, _match, _options) {\n      var valueCallback = function (value) {\n        return Math.floor(value * Math.pow(10, -token.length + 3));\n      };\n\n      return parseNDigits(token.length, string, valueCallback);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMilliseconds(value);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Timezone (ISO-8601. +00:00 is `'Z'`)\n  X: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'X':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'XX':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'XXXX':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'XXXXX':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'XXX':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'x']\n  },\n  // Timezone (ISO-8601)\n  x: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'x':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'xx':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'xxxx':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'xxxxx':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'xxx':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'X']\n  },\n  // Seconds timestamp\n  t: {\n    priority: 40,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value * 1000), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  },\n  // Milliseconds timestamp\n  T: {\n    priority: 20,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  }\n};\nexport default parsers;","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport getUTCWeek from '../getUTCWeek/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCWeek(dirtyDate, dirtyWeek, options) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var week = toInteger(dirtyWeek);\n  var diff = getUTCWeek(date, options) - week;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport getUTCISOWeek from '../getUTCISOWeek/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISOWeek(dirtyDate, dirtyISOWeek) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var isoWeek = toInteger(dirtyISOWeek);\n  var diff = getUTCISOWeek(date) - isoWeek;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISODay(dirtyDate, dirtyDay) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var day = toInteger(dirtyDay);\n\n  if (day % 7 === 0) {\n    day = day - 7;\n  }\n\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import defaultLocale from '../locale/en-US/index.js';\nimport subMilliseconds from '../subMilliseconds/index.js';\nimport toDate from '../toDate/index.js';\nimport assign from '../_lib/assign/index.js';\nimport longFormatters from '../_lib/format/longFormatters/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from '../_lib/protectedTokens/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport parsers from './_lib/parsers/index.js';\nvar TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'(.*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar notWhitespaceRegExp = /\\S/;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Su            | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 1, 2, ..., 11, 0                  |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 0001, ..., 999               |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `backupDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `backupDate` which works as a context of parsing.\n *\n * `backupDate` must be passed for correct work of the function.\n * If you're not sure which `backupDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `backupDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `backupDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Old `parse` was renamed to `toDate`.\n *   Now `parse` is a new function which parses a string using a provided format.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   toDate('2016-01-01')\n *   parse('2016-01-01', 'yyyy-MM-dd', new Date())\n *   ```\n *\n * @param {String} dateString - the string to parse\n * @param {String} formatString - the string of tokens\n * @param {Date|Number} backupDate - defines values missing from the parsed dateString\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {Date} the parsed date\n * @throws {TypeError} 3 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\n\nexport default function parse(dirtyDateString, dirtyFormatString, dirtyBackupDate, dirtyOptions) {\n  if (arguments.length < 3) {\n    throw new TypeError('3 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var dateString = String(dirtyDateString);\n  var formatString = String(dirtyFormatString);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.match) {\n    throw new RangeError('locale must contain match property');\n  }\n\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (formatString === '') {\n    if (dateString === '') {\n      return toDate(dirtyBackupDate);\n    } else {\n      return new Date(NaN);\n    }\n  }\n\n  var subFnOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale // If timezone isn't specified, it will be set to the system timezone\n\n  };\n  var setters = [{\n    priority: TIMEZONE_UNIT_PRIORITY,\n    set: dateToSystemTimezone,\n    index: 0\n  }];\n  var i;\n  var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, subFnOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp);\n  var usedTokens = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {\n      throwProtectedError(token);\n    }\n\n    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {\n      throwProtectedError(token);\n    }\n\n    var firstCharacter = token[0];\n    var parser = parsers[firstCharacter];\n\n    if (parser) {\n      var incompatibleTokens = parser.incompatibleTokens;\n\n      if (Array.isArray(incompatibleTokens)) {\n        var incompatibleToken = void 0;\n\n        for (var _i = 0; _i < usedTokens.length; _i++) {\n          var usedToken = usedTokens[_i].token;\n\n          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {\n            incompatibleToken = usedTokens[_i];\n            break;\n          }\n        }\n\n        if (incompatibleToken) {\n          throw new RangeError(\"The format string mustn't contain `\".concat(incompatibleToken.fullToken, \"` and `\").concat(token, \"` at the same time\"));\n        }\n      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {\n        throw new RangeError(\"The format string mustn't contain `\".concat(token, \"` and any other token at the same time\"));\n      }\n\n      usedTokens.push({\n        token: firstCharacter,\n        fullToken: token\n      });\n      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);\n\n      if (!parseResult) {\n        return new Date(NaN);\n      }\n\n      setters.push({\n        priority: parser.priority,\n        set: parser.set,\n        validate: parser.validate,\n        value: parseResult.value,\n        index: setters.length\n      });\n      dateString = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n      } // Replace two single quote characters with one single quote character\n\n\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      } // Cut token from string, or, if string doesn't match the token, return Invalid Date\n\n\n      if (dateString.indexOf(token) === 0) {\n        dateString = dateString.slice(token.length);\n      } else {\n        return new Date(NaN);\n      }\n    }\n  } // Check if the remaining input contains something other than whitespace\n\n\n  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {\n    return new Date(NaN);\n  }\n\n  var uniquePrioritySetters = setters.map(function (setter) {\n    return setter.priority;\n  }).sort(function (a, b) {\n    return b - a;\n  }).filter(function (priority, index, array) {\n    return array.indexOf(priority) === index;\n  }).map(function (priority) {\n    return setters.filter(function (setter) {\n      return setter.priority === priority;\n    }).reverse();\n  }).map(function (setterArray) {\n    return setterArray[0];\n  });\n  var date = toDate(dirtyBackupDate);\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\n\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n  var flags = {};\n\n  for (i = 0; i < uniquePrioritySetters.length; i++) {\n    var setter = uniquePrioritySetters[i];\n\n    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {\n      return new Date(NaN);\n    }\n\n    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)\n\n    if (result[0]) {\n      utcDate = result[0];\n      assign(flags, result[1]); // Result is date\n    } else {\n      utcDate = result;\n    }\n  }\n\n  return utcDate;\n}\n\nfunction dateToSystemTimezone(date, flags) {\n  if (flags.timestampIsSet) {\n    return date;\n  }\n\n  var convertedDate = new Date(0);\n  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n  return convertedDate;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../../toDate/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeek(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","var protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token) {\n  if (token === 'YYYY') {\n    throw new RangeError('Use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr');\n  } else if (token === 'YY') {\n    throw new RangeError('Use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr');\n  } else if (token === 'D') {\n    throw new RangeError('Use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr');\n  } else if (token === 'DD') {\n    throw new RangeError('Use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr');\n  }\n}","import toDate from '../toDate/index.js';\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * var result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * var result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import addLeadingZeros from '../../addLeadingZeros/index.js';\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","import toDate from '../../toDate/index.js';\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCDayOfYear(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","import lightFormatters from '../lightFormatters/index.js';\nimport getUTCDayOfYear from '../../../_lib/getUTCDayOfYear/index.js';\nimport getUTCISOWeek from '../../../_lib/getUTCISOWeek/index.js';\nimport getUTCISOWeekYear from '../../../_lib/getUTCISOWeekYear/index.js';\nimport getUTCWeek from '../../../_lib/getUTCWeek/index.js';\nimport getUTCWeekYear from '../../../_lib/getUTCWeekYear/index.js';\nimport addLeadingZeros from '../../addLeadingZeros/index.js';\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n  /*\n   * |     | Unit                           |     | Unit                           |\n   * |-----|--------------------------------|-----|--------------------------------|\n   * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n   * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n   * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n   * |  d  | Day of month                   |  D  | Day of year                    |\n   * |  e  | Local day of week              |  E  | Day of week                    |\n   * |  f  |                                |  F* | Day of week in month           |\n   * |  g* | Modified Julian day            |  G  | Era                            |\n   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n   * |  i! | ISO day of week                |  I! | ISO week of year               |\n   * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n   * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n   * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n   * |  m  | Minute                         |  M  | Month                          |\n   * |  n  |                                |  N  |                                |\n   * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n   * |  p! | Long localized time            |  P! | Long localized date            |\n   * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n   * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n   * |  s  | Second                         |  S  | Fraction of second             |\n   * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n   * |  u  | Extended year                  |  U* | Cyclic year                    |\n   * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n   * |  w  | Local week of year             |  W* | Week of month                  |\n   * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n   * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n   * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n   *\n   * Letters marked by * are not implemented but reserved by Unicode standard.\n   *\n   * Letters marked by ! are non-standard, but implemented by date-fns:\n   * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n   * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n   *   i.e. 7 for Sunday, 1 for Monday, etc.\n   * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n   * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n   *   `R` is supposed to be used in conjunction with `I` and `i`\n   *   for universal ISO week-numbering date, whereas\n   *   `Y` is supposed to be used in conjunction with `w` and `e`\n   *   for week-numbering date specific to the locale.\n   * - `P` is long localized date format\n   * - `p` is long localized time format\n   */\n\n};\nvar formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function (date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function (date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function (date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function (date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function (date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","import isValid from '../isValid/index.js';\nimport defaultLocale from '../locale/en-US/index.js';\nimport subMilliseconds from '../subMilliseconds/index.js';\nimport toDate from '../toDate/index.js';\nimport formatters from '../_lib/format/formatters/index.js';\nimport longFormatters from '../_lib/format/longFormatters/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from '../_lib/protectedTokens/index.js';\nimport toInteger from '../_lib/toInteger/index.js'; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'(.*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Su            | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          | a..aaa  | AM, PM                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 1, 2, ..., 11, 0                  |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 0001, ..., 999               |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 05/29/1453                        | 7     |\n * |                                 | PP      | May 29, 1453                      | 7     |\n * |                                 | PPP     | May 29th, 1453                    | 7     |\n * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |\n * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport default function toDate(argument) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","var MILLISECONDS_IN_MINUTE = 60000;\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\n\nexport default function getTimezoneOffsetInMilliseconds(dirtyDate) {\n  var date = new Date(dirtyDate.getTime());\n  var baseTimezoneOffset = date.getTimezoneOffset();\n  date.setSeconds(0, 0);\n  var millisecondsPartOfTimezoneOffset = date.getTime() % MILLISECONDS_IN_MINUTE;\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\n}","function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/);\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","import toDate from '../../toDate/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeekYear(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\nexport default function formatDistance(token, count, options) {\n  options = options || {};\n  var result;\n\n  if (typeof formatDistanceLocale[token] === 'string') {\n    result = formatDistanceLocale[token];\n  } else if (count === 1) {\n    result = formatDistanceLocale[token].one;\n  } else {\n    result = formatDistanceLocale[token].other.replace('{{count}}', count);\n  }\n\n  if (options.addSuffix) {\n    if (options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n}","export default function buildFormatLongFn(args) {\n  return function (dirtyOptions) {\n    var options = dirtyOptions || {};\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","import buildFormatLongFn from '../../../_lib/buildFormatLongFn/index.js';\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\nexport default function formatRelative(token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n}","export default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;\n    return valuesArray[index];\n  };\n}","export default function buildMatchFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var value;\n\n    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {\n      value = parsePatterns.findIndex(function (pattern) {\n        return pattern.test(string);\n      });\n    } else {\n      value = findKey(parsePatterns, function (pattern) {\n        return pattern.test(string);\n      });\n    }\n\n    value = args.valueCallback ? args.valueCallback(value) : value;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n}","import buildMatchPatternFn from '../../../_lib/buildMatchPatternFn/index.js';\nimport buildMatchFn from '../../../_lib/buildMatchFn/index.js';\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","export default function buildMatchPatternFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var matchResult = string.match(args.matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n\n    if (!parseResult) {\n      return null;\n    }\n\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}","import formatDistance from './_lib/formatDistance/index.js';\nimport formatLong from './_lib/formatLong/index.js';\nimport formatRelative from './_lib/formatRelative/index.js';\nimport localize from './_lib/localize/index.js';\nimport match from './_lib/match/index.js';\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\n\nvar locale = {\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","import buildLocalizeFn from '../../../_lib/buildLocalizeFn/index.js';\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.\n  // If you are making a new locale based on this one, check if the same is true for the language you're working on.\n  // Generally, formatted dates should look like they are in the middle of a sentence,\n  // e.g. in Spanish language the weekdays and months should be in the lowercase.\n\n};\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nfunction ordinalNumber(dirtyNumber, _dirtyOptions) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`:\n  //\n  //   var options = dirtyOptions || {}\n  //   var unit = String(options.unit)\n  //\n  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n}\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return Number(quarter) - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","import toInteger from '../_lib/toInteger/index.js';\nimport addMilliseconds from '../addMilliseconds/index.js';\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import toDate from '../../toDate/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js';\nimport startOfUTCWeekYear from '../startOfUTCWeekYear/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeek(dirtyDate, options) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toInteger from '../toInteger/index.js';\nimport getUTCWeekYear from '../getUTCWeekYear/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","import toDate from '../../toDate/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport startOfUTCISOWeekYear from '../startOfUTCISOWeekYear/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import getUTCISOWeekYear from '../getUTCISOWeekYear/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toDate from '../toDate/index.js';\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `true`        |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * var result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  return !isNaN(date);\n}"],"sourceRoot":""}